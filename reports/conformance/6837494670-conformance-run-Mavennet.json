{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b48a074c-9d94-496d-9232-e0eae8628803",
        "name": "Clear Cache",
        "item": [
          {
            "id": "69e7e3c8-b89c-45dd-b084-11b391e7e1d1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f810d6db-4200-496b-b963-4c834581e86a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ff574542-c5cd-466a-aa63-0c2fb5385d6b"
                }
              }
            ]
          },
          {
            "id": "acf75989-1735-4389-8f93-92f36ba46320",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "304ed11e-8618-4d0a-93b1-2f93fed68b5b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "13544c8d-0e96-451d-a4f5-9e3d245368ed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1cf2a724-9381-494a-b25d-e5c411f71de4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "439adca3-eada-4449-a1f1-ee50d1a37ae7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7b2710a-9230-4f7d-872a-26dad64eecce",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4976ea0-4905-4420-be2a-0403cc8e572c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5fe9990-1a77-4ee1-bcc2-89b0c35cbd67"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36237a3c-3af5-4c85-9418-a4c1386d7ef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62240cae-37af-4889-b74f-1f4dba958a77"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71d48452-f103-457c-bff6-f58d0bd28d6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3cc29c1-ef0e-4558-87da-4d62a4935c7c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5039fe2-bda9-4003-bf8e-087677b8eee3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7ee41cf3-4e1a-421b-b14f-70e2d19357dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fae810be-e895-457a-910f-8a3e5188e937",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8d11afa-8d11-4556-9777-be9b717c9307"
            }
          }
        ]
      },
      {
        "id": "861b2d63-c3fd-43a2-982f-c29198c6c75c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "16ab2e5c-7cb2-4bf1-b018-f64eab58cf58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ca6870c-0dee-40ae-bef3-79a774bbf7b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d40b541-9d72-44e1-ae10-4f710a858550",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d8a638-e88e-401d-a2e3-37fe07561309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87b4485f-306e-439d-ba94-35b1ce5b9262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6a441e-6b38-43a8-9df9-79fdb2f58515",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6800b09c-cfaa-4608-a048-675952cf6ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71f59068-a6ef-4df1-b406-f2750928288d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51333fe6-d80b-46b2-9584-3fd4bbef7d51",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40d8f3e-a289-45d2-a093-da8db1526454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f5b22de-518f-41b4-881e-cc46143a475b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "944772f1-ced1-4cae-a8d8-8ec3e6d0b19c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "707eebde-430f-491e-8ae1-a6c21fe9c54c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eb3a8b-1f75-45e5-8352-f92d1adb6410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e3b3059-d2ab-4b3a-a5c1-d687272e29de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494cf4c0-5cfa-4d6a-8c5b-59bad3f7d456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ca04aa-b4ca-499f-83fd-72e74aa68e50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "416ccc4a-b434-4b70-803b-5b10e75578ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cde259a4-110c-4641-bdcc-0b20975d53b2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa21bae4-a9fd-4adf-86ce-450e5fc4b53f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fca5e783-af08-4fca-93d9-6c73ae8cf42a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf28c4d6-bcd4-49b4-b90f-997bde2161c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fdd7e8b0-167a-4214-966f-c004a0a97929"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f9a9a23-ae94-4196-a26e-4bc443972250",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c68bd9a0-90b3-46a0-af41-30eb34510ed4"
            }
          }
        ]
      },
      {
        "id": "a272d31e-6ae4-4457-a4d4-fc12d2bea90e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "aa292cd8-1580-47db-965b-2d1ee04762c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "863f7cad-8331-4bf1-b625-18fa10ecc349",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "83ece50d-9a5b-4e8d-9fad-122084ce5671",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4f999d-d70e-417f-ac84-6f80570ca60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0c74cc-ed6f-4300-9470-48c66e8505df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a609a0-ac1a-4029-a446-6476d4b80f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c82d33fc-790c-4357-9b75-2a35fd4ea412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6362bc3-30b4-4a43-af26-84cd2587b697",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae368a18-bf25-4430-af85-f8b3647e4ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae56b9b7-7e80-40f4-93d8-6ac4dab96577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4799df95-1603-4be7-a36a-b91570f4a570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6b0ce0b-f85d-4774-a338-14e958ddd9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725e16f8-d025-4111-9603-b16334656507",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e18cd49-056f-4af9-bce5-a7f0f0a4abc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacf2510-2da3-4cdf-8bb1-bb3d4f3fe82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5221cd-2125-469e-8e82-086d6e5c03d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b08a4daf-02b8-4605-bf56-45cf3cd6eaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fecf73e-ef2b-4cf2-bdb7-f086eddd6182",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3371813f-46a4-44de-9b04-4bf4e310c88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5622ecba-d3d7-4545-b744-a87de2136314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffbdcee-47e2-4717-b801-61823717c72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79e98778-2f32-482b-ae44-883287a838f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab03a45e-bdc2-4458-914c-3ced82db40c9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d449664f-f506-4e76-8cd6-58d64ea78581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3818a99e-85bd-4ae0-b145-6c6bf4570871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e2693e-c34b-4bef-8a5c-eaa506e82c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02306eae-1a49-4aee-97be-c118569852dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7abfa4-39c6-44f1-bef9-1febfe58f2b6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e1e690-eb26-4cc5-a819-9c003df37963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a72da2-c68a-4d95-9dd6-c63441a7fda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3487009-ac03-4006-93d9-3cd32ed18547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eadf4a5-7294-4f1d-b40e-c21adce7b0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36822831-bd66-43aa-8afc-130ca119d5d3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254b27fb-87da-4c1e-b372-9cc3cdda8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff174975-86f2-4624-878a-0d30e3f4ecfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5981d5e6-b07f-4a38-a737-51cc5af6aa0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10253bb0-7b7e-4011-9b28-b24d90ca823e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac6f764-a2a9-42ff-bdb9-8b3ae6782a37",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac487bd8-2b9f-4ec9-b85b-713abe8c89c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f78ce1-644d-4edc-a8e6-ea0e3fca0c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d8f873-73f8-43f6-a36e-d22642c5e79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e11405b-60c8-4b4c-8938-788aed972bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea58354-463e-4841-b029-9e1b028a29e2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5d5aba-d83e-460c-a0e8-8556d0e7a903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017a8148-151a-4dea-8b07-8f635606f546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19180be3-5832-4905-b9ef-ae25d1fe2415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44d41625-c7a7-4392-a2d0-6fd1ee776b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aa0bb1-08cc-40f0-a8fc-9787ac108a79",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84cc139-9b30-4d02-a32b-4b8750c74e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bf58c3-c8de-443e-bc73-15e3159a1287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fc5b4d-972d-4a3d-812e-490bb9023b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19932e42-ac2a-4ba6-a168-353161657bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259a8e74-2c25-4c30-848b-8e1655e7d266",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121f47a2-f76c-412a-9f9c-bc9d4cd0d640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa7316b-faa4-458b-84c0-9fdc621a3d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57eb052d-93e9-4bc1-8728-12bc8a6306a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98299f55-8b55-4167-acd9-2aeee4f91118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb31bd7-f41a-48ed-9b04-6d0bf305962e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a5ba05-8e7b-44f4-b5ae-e4de9e487a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26340fa-17d3-4f29-a517-f93bf57b0dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04866278-9443-4dab-b55b-e9139829a8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0c7ec23-5c6e-4162-9b3f-0ceff7c888b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7d5f96-dbaf-48d8-b8a5-2f3a3da0c405",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3922b04-e96d-4692-b784-a6c651767506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbddc95-a934-4db2-b687-f9d21b9d8891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01328a1a-9acf-4d8e-981f-dff066ef0117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "955f141d-5097-4d77-9ce1-2036f8339dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6ef030-c28c-4003-9536-0f255e780bbb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb8f70e-a6ec-47b6-b8c8-a1dd7da66c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efba85ec-7595-4c3b-a034-2938e25c7cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2ba8e0-5b12-4e40-bafc-6bf294a9d5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b58488b7-f727-4d94-9dac-9cf34adedaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e4de19-d0e8-445f-9968-53db3300661b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0b6209-2473-4037-93d8-b657205b4078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98499f7-61ac-4893-ab93-dc65d53c4fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d923913-c52d-4c1f-a6d8-ab5a2df1a346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a419c736-3d0a-47bf-a630-0c2658803b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d9ed78-75d5-4312-acd5-3d2e4bd548dc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ea00c-9f77-496c-96a0-f476d1a51dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b07048a-e018-4b9d-9e3a-5cbdc27d7f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87716e0c-f364-4216-bbec-ad3e8e2c8c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "284332df-bc10-40e7-9ca1-f14607e2b42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca43427-6dd8-422e-a082-cfc1211ace16",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e6176-c950-4b59-9d8f-a75202883d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4a224f-88ea-43f4-87ce-27ecc5515796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2ac8de-3e4d-40f7-bfc3-3c87b6b4fc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47b41a94-ef0f-4b5d-b8c4-f8b2b54c2538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba79499-15b9-49b5-b73b-b48fa7e3ae84",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9403538-2dd8-4f1b-95a6-26f1e35763cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543caddb-453d-45cb-a03a-ad18fe8f096a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462cdc1c-7ca1-4d5e-afc5-e89137f2b1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a40238cd-274d-473b-9d90-829b4345b2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa5e475-3536-43df-8e75-75d5054fe340",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a68acd-8e24-4ad4-95da-0638253125dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294949fa-0a18-4fd2-8d8a-5088f9f2497b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d41dda-2d3b-4be1-ae08-6dc02c96202d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "163da532-0623-4473-83ec-f46e56eb8aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1858240-f8a0-428e-beef-33ee1ba91f0e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4c7d8f-10f6-467d-b3fd-5879dbf946dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d68e4f-8521-47e8-a54e-1f85ab5a2e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b69593-c4c4-40c8-9eed-84f53cc60a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e20c4d8-9548-4a25-8807-5b0aeae724f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5635e3d-c1bf-4f3c-b4de-9e9ae398fd4c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7882a8c5-642a-4fc0-9395-2100973f4474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff73926-86f9-4e83-98e0-b369f214d94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be57fe39-da96-41e5-927f-0623f38cc253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e6ecfb-0810-49fc-ac3a-96b6dfa269f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff03a918-f8d7-4e41-9585-de4575e9c776",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d68af9-9cb8-48e8-b153-5eba8a76401d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9afaa7-e830-4e49-b33a-458697d11c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4cbf86-f569-49fd-8618-dd85e1519047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b553dac-3d35-4d25-9a3d-284b52f15300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ba7bb2-14bd-4e35-854d-2f9e87c5ef6e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9151d8-86ab-496f-949c-f136269ef361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd3143b-82ba-4eee-b0a8-75a1b95da434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c138a5f-9a5a-40b1-85b4-2e74f734c049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4252b4-0768-495b-b3e0-de604267a48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40efc4ff-2ce0-41f8-99b8-33ea1269c875",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc617eb-6dcd-4a20-b006-e15b0559db32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c469fe-7b1a-4856-bd20-5cb668de4d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383fbf23-0250-41da-8d81-cad975b3c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c74634e8-2c19-4cae-a2d5-7a3f4eeff52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8f171d-dae2-446b-bfef-b8d1eb46672b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3df9d3-b047-4b5c-88b8-9c33748ec164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ccf3a1-5e6b-430b-8f7f-58e2f16a23f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d5ccc9-7fc4-4f3c-a6a1-e2426a4f3a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a52da2d-9767-4dd3-b724-35ad1f35eaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e2165c-5103-47b2-9347-f6f082ad78b0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e9bfe7-ec4b-4c3a-8091-6d95656f4b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42dcba2-1908-449e-b66c-8117b567969c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf78e55-2081-42b7-9de7-ddd8160d937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a4c862-96e1-464f-add0-2fe03bd75f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afb056f-7ae6-49bf-9f8b-76bb24ffd8bb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defc1639-9a55-4907-bc9e-7f5241b1dc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24315a57-9894-4741-8a04-25535d648e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10a2243-29b5-4307-8c4a-1d84047a1a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38077c5-8eef-4d0f-8f8b-b9992783ae66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1327c730-a779-4e99-92de-726905a23302",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b6f682-eaee-42d7-9fd2-924403b12444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9b51c0-6ea3-4daa-9bd5-ab5effe34607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38675a61-ba06-436f-825b-99f175cc84cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f75278ea-94a2-4f63-9568-39b62bc34c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79fb728-8dc3-4adf-ad43-1d7f79fc98f8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b21a25b-0398-493c-931a-e7b121a8abf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccc82c5-8950-44ad-80d3-2615314b2f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864234ff-8cf3-420d-8bfc-f195e5c7caff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b37da9-a4a3-439e-aa8d-08577f58a3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7a81a8-29eb-4c96-8a03-5b359521df67",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f50e8d0-241a-4c9f-a19e-d58986df5525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8077bec2-55ea-4d36-8bbe-d3449448d993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7e5b94-254b-4c3d-bac3-2f1d8ae8ac5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "baaea31b-f0d4-45b4-ae89-c1de795bbe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006c4bc2-bf8e-4beb-82fc-b6a54964bc6e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f917640c-9f7c-4dd0-bb9d-5490f72e58c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0dd5d3-46ba-431c-8531-7d2e844f6638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd020450-6ff6-417b-a3f7-08020cd5f62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f10ffb-99ba-4852-b03d-a16f4262ed3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bf0304-faa1-43fa-b506-44438cf0a65a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d73c6cb-1db9-419d-b937-a48212ca58aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab4bcc2-7552-4e33-bd30-4ec09e1aff27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688572e4-1b19-4df2-8eaa-9a97e45878ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d933ed6-292d-4e46-9017-d4856d73a260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b84a46c-8357-4400-af1c-ff45a6085a02",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1768a9e-d29f-44fc-af23-faa9cd0c6f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16cd55a-58df-4570-9c51-247e3e6bdd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a859ff7b-2f0c-45f3-9c2a-89ac8749a2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e67a96b-21e0-494c-a886-95cc9756ef62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8d309e-db1e-44ab-b698-92eb0b7f4467",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1ccf1f-bf22-422b-9cc9-972840a3bbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45941f43-055a-440d-a226-5626a79b5f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd05c882-3953-41a9-85e0-ae258857a067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d90ae8a8-efd4-4494-82de-a5b6c3ff1263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e028f4-a716-48ae-a814-c3d962bd0f3e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3653a4-8b5e-4018-9c43-3d1bef4f8b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0929288f-9bb4-437a-b0c5-1a210d220b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49141c7f-6448-4738-945b-4019e31eae0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8bf86d-6ff0-499a-b068-c80ec4711a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56108384-fc81-459b-804d-506cd3802e4d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c177ccbb-c3c5-4524-aa05-36d377c3feed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58ffe29f-3927-4793-afd0-9958ceb4a40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deb6ee1-88c1-4493-9a77-16d1537bd2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6896acf-39af-4605-910d-7c0277af9fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e1c134-a276-4fcd-9cd8-907d1204b18d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15aa2168-b050-4c95-a103-0a36d3b80dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd760bd-ee03-4228-95f4-1958c5af810a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcce879-d676-4983-90a1-64b926c6441a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae9e401-9be9-4f27-8769-b7c1c881c0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb02003a-3ff3-4b7d-b17b-f8ec9ca0034f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f97cb6-7a11-4216-ba0b-f3054a27bb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f5ec0e-dd94-4dd0-9768-4a45e7c004bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391f3185-8f47-4a10-af3f-eccfad82b5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bae048-dc80-4ef5-a17b-2ba750252b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1716fd-3a9b-4424-a160-67ccc5be0f55",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f7f0f-c2c4-402c-8306-e51617d6cb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835d4f32-5d71-49c6-bbbd-9d896697bc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c7b9be-784c-4e80-9ed3-dd1dff32f5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b34a427-7fd4-4dfc-9f46-e60c97541233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97e8e9a-93c6-4a40-b598-015dab5b21da",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385e9e6f-c9d6-4bd9-bd8c-9c82bd3a60c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7e711d-6934-4c57-923a-5e53f035fb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e6c0be-34c9-4023-b088-6dd56593735c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38d378d0-9e36-4918-8d28-2c952118343f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff18d495-c5b9-4353-a17f-481eaf6ad3d3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab78b87b-27e3-492c-8e1f-f79c30f87ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017c3123-c678-4cc4-b9dd-5eecbde4fac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb344bea-f6db-4f20-bd06-b1629dbe9df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "10da071b-33b6-4fea-9f82-ce028feac46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506790f1-62ef-4ca3-9d95-3829137d606f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486025f2-e246-4d0d-a4a5-26821e8a6075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a59bb1a-2684-4570-b9e7-d9bcad8d8ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e633f403-0980-4c13-83ac-fd89f3391ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "85ab8604-04ea-4dea-8a22-cb1c436c336e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b05f935-f870-4edd-8013-25f86566ff2f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ae4fb9-5b71-4699-9d20-975fea1c7758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef03dd9-026d-463a-b83a-807a840a722d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a479e795-7e1d-4482-8011-513adf08e478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5c1228-d917-44bc-8bd0-66785bb6a252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f465cb9-b495-4bd8-96a4-c44f6f16a481",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ce1871-6b74-4333-a3b6-7867b7f04220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d14e3f4-478f-4654-9732-37f3aeb0da84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e9a9cb-c175-4c46-a3dc-8d280e2c846f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "45fb2d77-1ae0-4f3b-b23e-3b5938553f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a97f3f2-cd16-4348-aa42-4eb5e7f27f63",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c83149e-92ec-4aa1-8b66-836eabc6218f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a8bdac-eed3-4640-8edc-bb584d40cd02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3062cdbc-159a-4345-9bef-3c5abc91bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0995e629-7083-4674-9fdf-386fef70c6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73f3f1e-af21-40e2-9c0f-dca8f21842b3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a046fce8-0dd2-4ea2-a9d8-411e442fd97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221bb4a8-e557-487d-8fda-410cfa12c71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705a1610-49fe-48b7-9603-ca62eec339be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a064c9c2-e5b4-4f84-a068-aadd88a2e7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff5a40a-32d1-4204-ae2a-f9ab4c078270",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a3e70a-06c9-4823-9b66-d1fe9cf5cd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6442508-726d-4a3a-bc67-9033d7b5362c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecd3c74-2810-4a62-bb76-aba1fe993858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ee2e42-2a0c-4977-aa21-06240a7466ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a8112e-f082-46ba-b29e-fea0f2aa2003",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8c7121-edc9-4ce4-86a6-7bdd3d13f254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d675645a-616f-408d-b751-e84783289f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fd1d97-aa4d-4588-bac6-fd94688ef88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5d8793-ac19-4110-83c5-a3586bb3afd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc77339-8a9e-4f37-878e-a5187af9aae4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85abd948-4333-4bda-bb6d-e580dacf9897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40930234-24d5-445b-8478-c95c580eaeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56372bec-1ae5-4385-a54f-ed2fe3871f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "144aad44-b8b6-4dbb-985d-a707752922dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f990e26-324e-481d-988b-36239650d215",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131a1169-b7a4-4888-b041-57167aeff971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35951218-3607-4620-83e5-b79f97a11e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678106e3-09d1-4351-9c07-21e4222f853b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a00ed98c-be8a-41d9-8f1d-ce3d6865642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2495a93b-e45e-4662-9809-652d35cb9c23",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48297f9a-b016-4099-b6d5-13f4c6634ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af70fb2-4db2-48d9-ac7a-f8cd04f5d5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0679ce5e-a236-457c-85b7-d9ebdabcde66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b4e898-6b43-4439-93cc-f47e68395827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c792ce-c11f-4c3f-9710-a6769d036dd1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c4d5e-6a52-4c74-a6da-8b8a76380d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a13c88-f63d-4b4c-8ac0-799d5b3d866f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df32dcf2-bfc3-4ae5-828c-d2953cc23918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ff83b2-f10a-4584-aaff-37d390e40887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d76414d-4cd3-43ef-9a49-dd2dc8b6ff1f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f791579-ba91-4826-8203-1afa57aee9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584b58da-ce3c-45bc-946d-25e64c096bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bff5a3-034d-4799-ae8c-9acef71ed864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80efdc5c-90ff-4fb3-a105-b0dd7c21bac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834535f7-01a8-4d5b-9616-8c540009174b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b48fee0-0cdb-4185-8d44-e7c90e4a75a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5b0437-43cf-4d23-a04f-35c19881e0a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63d31e1-6d75-4206-a5e1-ca46aabc3133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e2a043-28fc-4b16-9b34-9a9867b99804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f920c6a-0522-4d48-9073-0a7ac0ca65d6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7331e90-ef5c-482f-a572-060f6b67342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61c7c31-c78a-4797-b41b-fe79de86b20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f945478c-f691-41d7-a8fb-e8084121df0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92b074de-761d-4eef-b80d-2b8ac8e65412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237bb15c-6541-4f18-be23-31b04b55ba06",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41361bb7-72af-43af-8902-4166e3796338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c666626-8065-4270-8ac8-fe48cd15599c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcded208-487d-47b8-a8b5-60d817e8cc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7d466d3e-d97d-4820-abf2-ab05c66b02fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007c6b54-be40-4590-b345-ee7b004b3df3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fac3e79-d764-44ae-a02c-192fcdf53f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b74dc06-12a8-423f-9edc-a1b240d328f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b195b58-f31b-4b20-a1e8-681ed5b52471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "899fc622-8f57-46b2-9c5c-dedc6f60d83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4175145-91a2-44d7-9d44-a4e7c7405ab2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e725a7-a961-40ff-b2cc-c8f8ed267950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed840db-aa03-4c39-a92e-9e287d975836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46bffdf-18c9-4874-9989-00e6014ae623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc41904-9b44-4418-b5fa-6477f053d127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481360bc-f964-41ec-9484-667dcc04fca4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e19770-13e1-42af-a611-d1ebd1317fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48c543e-9eb3-4c0d-b642-422771336ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dcedb6-3bc1-485e-b22c-dd78548b4211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de575453-9a03-4498-9611-b99b7a92bd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a21120-ea86-4d56-8366-4204c3d96b75",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d46965-7690-4607-b805-d0d3f720fa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095223a2-9b3e-4b53-8e8e-c33e1ae37e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d38250a-79f5-4f50-8108-633139eb49ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa509ee-18f8-45b9-b0d4-3710f0b226e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1850d748-37f9-4028-b93c-8cced1e9e37a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc26cfac-ef4a-4b17-baea-03bd0a3c1a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9299f8b8-17a4-494e-8835-ee726ed5bb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309578c1-5a25-4f86-b599-293aaec3340d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "082bdaa4-4b7b-49f2-b6b6-befbd985728a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58aba03-87f2-49c4-b927-2c72908460ce",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae35c2d4-3bc4-4adb-88be-d62f67c0f752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ac1a38-ad86-424b-be69-70aa54e5cbb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a605103c-2e70-42b6-b319-dace494e447e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f5c1ba-95d7-495d-a520-ad66a7090f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92974ec0-5a3e-43a2-a7ba-3949d378e630",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6344f90-67dd-4cda-be18-34aab3ee36a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204ab041-172d-4307-b671-e2d92be3d150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c55b43-6925-4f77-b58c-63a8e8766611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b0568c-0441-4b0a-93e0-0aea9c6f981b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f5d34b-821d-4c0b-a4b3-6755d6dd2085",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f670213-ab94-47e8-ab2a-caaf393b7766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d13edab-4fc2-4980-acef-5d419ee708d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538ca6db-0ed1-4710-8b69-0745eeb7f3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35fd30b-1227-4952-a1aa-43009574cc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e76936-5996-446d-a22d-5dd2001cfb29",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766e5505-42d1-44f2-8be6-8a73ab40a930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c0d793-43e6-4f25-b736-7d0e00e5dd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79cffb9-c9d0-48d4-8508-5d639033418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f0714d4-f90f-4a36-916a-fe8cc328b707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35c4fa5-924f-4bcb-8b01-12e1b3dcd2d5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f1be1a-214b-422c-a8ec-9d4dde166751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e99a8a-85ca-4368-af54-35b226204c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c373e11f-8d22-46e5-bdaf-4c537839e1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7941c35a-f283-4607-a699-f9cc87056666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3224a49-793d-4d1a-9661-7ba7df88c76e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4759cd78-dd8b-44e7-949c-73fa2f1ff475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b6078c-ed80-46cb-83d6-012b39a780e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291bb818-ccaf-469c-9abc-0368e59826cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf923828-596d-460c-b0cc-f68c8503ef32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c694cb5b-9caf-4306-843d-17289c5a67c7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462825c0-f00b-46ec-986d-0f4706b86973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76595ffa-fdb6-4c3a-a9ec-588a82a8985c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54466996-6363-43b1-a6c9-fe42ed0342cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9f7ff6-10f1-4467-b15b-79812b84fa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9da2b23-c778-479c-bc21-882e5a7c7774",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982cd430-f6c6-4da3-8846-d3f3467a4bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c13053-1ae1-4327-bcdf-d3f184346734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63bc5d2-474a-4679-92b3-fa8f7c831786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ba7825-7a73-46b5-b7d3-2cfe77666a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f0f42a-7715-4797-98a6-e45dc9243e26",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb375f73-f8da-4195-b966-fb41b2e4bfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c52944e-eb84-4e77-836f-ccd8eecf84ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e5747d-980b-435c-8f04-6357a65ce18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb1acbd-9021-4825-8d24-b3aa35fa2ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706ee054-8973-4bb4-be74-291de260849b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ba323d-0d8d-45f9-909d-7818d7351e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2ebc40-1353-483f-844c-9ae60eb3e3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbad394e-5f3d-4326-a620-041e23ea4dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3b6190-09a3-41d6-9dc1-54739e26f651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f5fc03-eb0a-470f-a06a-03854f725212",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef6824c-c4c6-4e15-ad1e-7a7da62bcd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b37759e-7334-4d1b-aa6e-77a979dfcf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae07066-2c2e-445b-8dde-a6209fbe7190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfbd276-e420-4bd4-82c5-1768f2acafa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca347a02-3170-4063-a29f-cf85d7e8ba9f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252930b9-34da-4285-b973-4415968e8344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3424e25c-bc93-4038-a2b5-147710c04416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d59843-c55c-4de0-9773-ad0053435f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b079bda-3cfd-4d4d-974b-75afc9b49af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6213e8-176a-4a6d-89a2-e8fe991c0228",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2270a88-5f61-48b4-a238-74053e2293bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979dc4fd-6ce0-4726-a2e8-f013e5e22d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92075a72-3db2-48f0-8a64-d4b6c28a5b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "daaabafa-cdcd-4e4d-8d40-37f25e974658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dc4d0d-7743-45b1-90a4-5343f5bf1ba3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73815e78-3fae-4a2f-a771-ad7739504f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459bfdd3-c679-456f-8d3f-05618a9c03bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad54963-7c1e-424a-9432-0945dc486254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b66b1336-ace9-4a91-85d8-9cba49f1d6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239e870d-1f61-4f7c-a1ef-80baf47fd544",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5160227b-cc80-4ded-b138-240dd0f6f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2754ddbc-722a-4172-b32d-9703979f57f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8877509-e087-44ae-95a7-7fa605690820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2b23b9-0d30-4db3-bb04-4d73dfbaa7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6aacc2-042e-45ba-89d6-7ea1c2d96020",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1ae2ec-fb56-44a4-a4d9-b9c9e98548ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26611954-134b-440e-a195-4c8771b1dcd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555f38e1-4a96-4e23-b2a6-6b942ac0502f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0adf31-5ff4-4471-bd99-52991d9f7ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df9d0f9-dc49-48f3-b957-ac44efe7f950",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ca1c6c-41c7-44c6-a2aa-b680b46f5d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f33c7b1-b6be-4d00-a1c0-9d5eda2dd68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a880dad9-306a-4d50-9f18-0c1803eaa554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0e1dc6-71fb-48b9-a2e6-6cea52c54d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef669cfe-2b37-4769-98e3-a7cd37ae995d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc371d42-4e5b-4e3d-9e4b-c8c1aaba60bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277d332b-ae9a-4b11-a9ed-d64aecebc178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fafb4b3-678f-45a6-9066-af961db2d9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a2964a-b223-4a90-9a6f-745baa61e58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ef8cae-7904-4265-b32d-e6a31c457785",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5405bf-2813-4c1f-b3b3-50d36cb15657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac8a54c-0771-4331-9508-c083a55bf113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41d2d60-27dc-4bc5-847d-638e4611452b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "322a03b8-ca82-4e30-8383-b3cd47f20d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e81e8f0-830a-483e-8fde-f9e83733e93f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990bd23-f0ca-4661-ad9c-20745bc990f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f63c0a-560d-4df3-b4a8-3220009febe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02b3d75-6c0f-4b06-bb84-284c445a5728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b8235b-0538-44de-a7dd-c7e52b9cde19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53b8e30-c344-4b52-8c7d-319256de11fe",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c3c498-0957-474d-a6e6-5bdafcef36a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6f60fb-1bab-4c02-be50-7960dfcff1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc4bc51-6d0c-446c-aba4-dda401375313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "022cbb29-4d99-457b-9dd0-b96b50f2094b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8265d99c-0fb0-467e-87ba-1ecbb3de49f2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b7a5a7-f482-468e-8700-eb7bcfc33e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de4cff9-5dd4-4d01-9409-06158c5f852b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6485f3-a621-40df-84af-19e1cd2373e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4ff4fb-176d-409e-8c62-083aca7338c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819d13ba-ef0c-4b21-95a0-8629885ae737",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7be919-a1bd-417d-a711-098d0682b1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28e52f4-3cca-49e5-a600-f6c2601296bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e501edd0-61c1-46e9-9a3f-0cb50e477d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a42fa656-aa98-4eec-b78c-0c8fe8d1df4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4aec62-247a-4cd7-95bd-61f9927002c4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae34afe-bece-4749-bca8-f40d8fa44e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b7c8fc-5347-410a-b351-fe1d32f58960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5596fe0-4e8f-432e-8e6a-f0b057e73eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcfa694-b8ee-477a-9224-6169c83c835b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491b2344-f262-446d-87fa-ff67f47ad8e1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be41f53e-67cd-465c-ad18-2b605b1f9e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dceee374-4f94-420c-a48f-845ddd41f4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34342cdf-c06e-4cf5-9286-723694ce43f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fff9191-7a3a-41c2-9eac-c1b06c5787a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68955cc5-52e3-42cf-8edb-4ce353faa3f7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a133d552-b5ff-4c42-aed7-94ccc1c937d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7627b44f-8936-46fd-b576-dde010fa3595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f503b1-7693-4458-b88b-70636e8d17e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71c3caeb-b798-4018-a892-dfc6527e6c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ce849b-f18a-40e9-8a8d-70623fbc15b7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65937199-bd90-41f2-9f25-879f7d12c623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1d0d14-1bf8-4663-b595-16071388c757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b79d518-3350-44c6-a5f5-87f5d046e526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd26754-3871-48d2-9554-0dd1a4071490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4566c4f8-a783-4084-8955-ba6ee4b1d63d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c634afeb-0014-494c-9c3c-0afd4205b52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513a5f77-66b0-467a-9069-db54394b2b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4924bb56-3918-4d3f-bbfc-efe384fb997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f38e886-bc1d-4b71-a4d2-8fbc18baa5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98ebe00-89d1-4f1f-96d6-a51391584ce8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9938a8f-04a3-4393-be2e-cadc60ed4208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c290479-ceb9-4583-9154-cadaf91b3649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a421a86-512a-401e-b5c0-e02d1267c394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38d4512b-287e-45b3-b9e6-29a0524fbd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7e5935-694a-4a68-966b-e64d39820c3e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc4b163-e756-419d-858b-b209fcb4eb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169b0d88-668b-46a4-a735-dd3b106f5517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d9c9a0-402a-4729-aaac-4c49c153e8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4f938e-bc1e-4374-a9b4-92081e0419da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0a1cb1-9d65-4a3b-992f-7746b44f13dd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d367d4-a228-4381-813a-d109fe4cb931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0282c991-b6a7-4cc0-b510-905d1138ce97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b241cbcc-b821-4440-81e1-5a17f4e18e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb0ed49-8208-494f-9a77-b7254b9dccec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1da4805-9e59-46fa-9e3b-1fffc737a5cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06b29a35-162f-493e-9a23-09ce68b8f0b9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe537ce2-0c9a-4395-9443-836e138178fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6572e0c-0a0f-4925-8ade-2e97a8fb8151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbe574d-9f52-4a8c-8ba5-16c3a51803c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31fe9295-6e4c-4e42-be03-a7f52acde06a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53f542ae-cee7-4085-852d-51e2b0d2f9f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccbd7936-f4c9-4a75-9184-7767d19b067e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "038ba7cf-b155-4769-b1fb-4567d72f5608",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f74f5c6-fbc7-4deb-9732-2001b6991f4b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab943b01-2b51-4ae9-9277-94c3bdbeb72b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a66b6a96-7f32-4da6-95d3-0ef2ced63cac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fbbb0feb-7d2f-48ac-bf2b-48e4cb0299ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9acde7d3-a000-493e-81b2-69b3fab68461"
                }
              }
            ]
          },
          {
            "id": "1ba109dd-6e16-412f-9abd-47f48e04fad9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d137a610-65fb-44b5-8dea-b26b42db941b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c33f5243-079d-4b05-90ec-60a344607b0f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a7e7f7-e94d-43cb-8430-d248e3f26df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "84d54eec-b325-4c70-980a-ceedbb6bce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69c4cc6-d8eb-4da6-be13-249bcfa7b4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcb7952-834e-4b08-a043-e24396a70ea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8835392-b33d-46f7-b66b-737bb3a872cc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "faec6093-fdc0-43a7-a5df-c65dcdb9ef7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "288ae487-c251-41e4-b176-06c1a1a0a430"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb6100d1-a1b0-457a-b3fd-9c4b9f3f48b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ceaf49f-59d0-4afb-89c4-57692f8919b0"
                    }
                  }
                ]
              },
              {
                "id": "f78b5272-5642-4a21-83ac-3978fc93a9d5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27d64b69-dc0a-4312-8347-efa516979101",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c36bfa28-a8a9-44c9-af55-bca67ba1ce0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c5415fd-4ad9-438a-afae-d423a480cbcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f80b0a0b-3758-48e2-91c2-d0e221e5df87"
                    }
                  }
                ]
              },
              {
                "id": "4730750c-e6fb-4360-9891-0783f740eb16",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "691783a4-67c6-4b17-95d0-c412a1a37405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "951f4872-3828-44c1-aedc-81342f1db50c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa7a4c83-0f4d-4840-a621-09c93056c5bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1acd7941-11aa-4be1-8c9c-10975ab87ace"
                    }
                  }
                ]
              },
              {
                "id": "e0abda85-6b98-4001-8750-adaef0b258b7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea96f89b-59c4-4933-86eb-6967c96b5d34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa52fcea-f0d6-48bf-a6b8-1d857490084f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28f5a093-b805-49d7-b9cf-911d3656ebe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b683fe48-1296-490f-bca0-84087f38d42d"
                    }
                  }
                ]
              },
              {
                "id": "ec3e2676-d9e1-404d-b5fd-09cafa7a284d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "903cb45b-68b5-4b39-a5c5-740d556008d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d10a53d5-a8a1-4026-b4ad-0ffb8e3954a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "befb1bda-8cbf-49b7-847e-9c02fa219885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7b8a48e3-7b01-4e71-91a5-35d20bbda1e1"
                    }
                  }
                ]
              },
              {
                "id": "68c6c904-381f-4569-b5e4-fd87234a456d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c238d1b6-90e6-4f7e-b8b6-e426d7ddc9fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dd54a56-5344-4c36-becb-6c06662cf09d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be389957-85c6-44f1-b032-94326898ea5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "505c1e1a-d772-4ef9-9c01-bb805c338288"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd65fdc1-a912-4410-8dd1-39949c06487f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b135080-af1f-4408-a2a0-6e1a31287d0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a44b13c5-cfa4-492b-8764-c7c841b17634",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "517457bb-c293-4f71-999f-98946b93895d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a04295ea-e533-4ca3-a24a-bdeaaa068ebc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8dd95ef2-7fdd-4e8b-9caf-c326f3c87e5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67b6f23e-f52e-4037-ae17-928e0588738e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26a67b60-2317-4f37-a5f7-d08a3ca62dc3"
            }
          }
        ]
      },
      {
        "id": "ab86a99c-0ac1-4019-88aa-94c6595c89cd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f5198837-4f50-427a-9328-43c6210207d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "389a85d7-d916-4049-a7cd-bb4c0b480f95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7cf58836-58a1-438c-8323-c876401fc826",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0728d987-bd8d-448a-8ed3-023966e9d4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26886432-52e8-4438-bc52-f2a3cbb70108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a326500-2a41-4ddc-ad51-8c24fb798acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc52440a-0920-4b44-af4f-30568e9ddd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf67781-9c64-4cf1-9610-776d36516c3f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254ccddc-3a6c-4b94-a066-be6d158bcf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50dc648e-c662-49d2-a781-6b797d1fbd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a0ac57-6ee2-484d-b06a-13b45d600e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a8ac31-45b1-4373-b9b1-0814327f2f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b894ee8-8a9d-4be6-940a-9fccaef62e0a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6ed346-03c6-4c17-b7b8-eddb1c254854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f94335-a709-4238-b8e0-1639e06a6b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a4bb88-0f36-44ae-b2e7-65e2f0304189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfee49d1-ee83-4207-b1a8-6d6208f7428c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65b5f6e-a47d-49a1-841e-c9ba423edc68",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2c6645-8922-40f5-b85e-63a9edf59eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd154a29-6325-4116-8865-23e72bbd58d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c743bd11-b8d6-4a56-bba8-210589968d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff983f70-6ef4-4698-9b47-c4f32fd430bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b6b33c-1c59-4c43-bcba-c3b1a0b31145",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28729932-3b37-4547-9c82-61f54903109b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c55874-2e2c-4e6f-8614-10ec661ca640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607acd19-0f47-4b00-ba8e-c7096bd1513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e7ec40-fbae-4c50-a2f7-1b34b3c05b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f847d005-260c-4412-b842-a482ba1cb1a7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156b04bc-8260-4c51-816a-b36b0606a310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac1b54d-8471-49be-84b9-42a0b0f59507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dec8f64-ff30-4d7a-a468-bbaada4c2dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6587399-d6f9-4340-b0aa-5b3a72a1884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34f8b95-d15a-4e4e-b2c6-559807c44b60",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71ce719-0dfd-4e19-b483-14aec41500e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e7db99-8e60-4680-91c5-51df6d2cf172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30370af3-22ac-4111-9b80-a4d2910b5e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a15f732-c6fa-434e-ad28-0a0e29b94884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168d0e36-dd06-4b10-891d-048b465ec194",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cea6c8-730d-46ab-a126-8098f7206997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6002dee2-2760-4092-bf03-6bf61bdc1675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67d90db-9ca5-457b-a5ad-5d5eaf8e790e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a7be54-9fb3-4a86-bd51-6e8332f7e90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc350561-68a8-4ca6-a42c-96d73fccd010",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543fea4b-853a-4596-a9c9-25c592ec9b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76acdff-360b-4dcc-854a-4e98ba7d817a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75620c3-8521-44af-8798-376227dfb6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96653427-d8b5-4e4e-b7bc-43cdcc7268f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8b814b-0b06-4938-8cfa-f071bac383b1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3da728-fbad-4da0-a679-67ee240fd887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf527577-9862-4a2b-ba46-d6348fe060bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bb9d1b-2e81-49a2-bbfa-3717b9537061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c500afab-41e8-404c-9835-222d5a614fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542ee3f0-2044-4cc5-892e-93b2fb7d708f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50fdd05-d229-4623-a395-9a0722b5200f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b17dec-ee16-4e5d-a61a-aeaf6ea69fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9739972f-0154-4cf5-bf23-e79057b34b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6690e3dc-3d32-4a20-addb-2ab803f1de96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ceec58-2d6d-4992-822c-759a35ed1a91",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa0a03c-5bb5-4863-a582-917d683aae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36563984-2d37-48e0-a02f-e3dd07a7ddc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6fb902-d840-4bcf-98bc-8a4b1dd1aaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3e42e-f8e0-4034-8ea7-ae82e1b32423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53870ae-5420-4acc-a0fe-dddc74773c65",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad86a599-71a9-4363-85b4-0a53d13780a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0860d74-03bb-4599-93a8-aa8bb7a8e0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4515cb8c-894b-4bdc-b9e0-e5c8387cd4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce604b8-d9ca-48b1-80ac-d8fa878d4965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b199cb-1e82-479e-8dab-5ed2534cb8c4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d89394-8dc7-48a1-bee8-a9435b2b16bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84acc62-3a8c-4033-baa9-5de859b9745d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84286664-37b5-4959-99f4-4b14b2fa4e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c814161-2e87-4e57-8ca0-35bb92c3c7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd37344b-e0da-4d2d-8339-1956b05d7c3d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8a55f7-1ed7-4e71-8ed4-6b7fb3d36611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e5d8be-4f04-4a7f-a12b-d76b6e61115f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd824ea-f863-4b7c-a9b9-9e91f22bfbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "edc70185-bdd1-472a-b940-a6760718d191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94221369-d7b5-42ae-b48d-d817d410b95f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489ecf76-8b1a-4929-93db-99d8ba00a24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1d6588-82e6-45cf-9e65-695c2aa6b02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f52a307-f992-4470-9a1d-e36794f8de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "296ef5c4-c73f-40cf-9d92-c739e54cba2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d28164f-35b8-48d2-a5fb-a7dd60b9107c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcb8b73-9230-4ce4-9fe3-5f6c0ccebd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b7f9e1-8afd-4535-9547-174a784fae32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783ee80b-db09-426d-89ad-f8e1c959657c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e67009f8-6538-4bb8-9023-ce534790121f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee98a63-72c8-4c34-8796-42462798984b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8da519b-f3d7-4cac-88c7-0a01626081bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843efce4-214b-41e5-8ed4-18a348827f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0230fd-af5e-4bc4-ab86-98d0432a6314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "21024001-ae74-4f72-9e88-59f37e291a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a6d194-33fc-4565-acc6-69b871dac607",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f599addb-863d-47cb-b7e2-ad2bccf74967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e38f8b3-6ddc-4ef1-82d1-1f3b07e42cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d434cffe-7ba0-4a7b-b2a7-9cc728b98bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3b88db-a95e-44aa-ad23-3f6fb186c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ee4fff-3ac8-4dd7-86a5-e778dd8b9e36",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85364dc1-9f6c-41fc-a984-7c69e0c36e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b50feb6-5a02-4851-b966-c3ef51be2f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0021f380-384c-49ae-ac24-defd6e34185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52fd26b6-2da1-4d27-9f5b-2d585c46a373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bd5375-6f17-41fe-b53c-bb67a940674d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d11f8-6fb2-437a-8f1d-84f28170b867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e078da1-57ff-4816-afaf-f410135931d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b747403-78be-491f-af6e-d4bc35199d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25208e2c-5491-48a3-917e-63591f5c5936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4254cc-e0bb-4181-aea5-b70ccf28f27e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c446c459-9b1f-4009-b7f4-5cdc6bd701d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f184d9c-345f-4b5d-ab9b-3b092a56822c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b79ad77-6a42-486b-9747-768f4d8be46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcb9817-da17-4d5f-918b-0292f5855b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d75f81-149d-4d28-97f9-bd049b2b6cbf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a96d51-bc07-42bc-8246-b2db3964254c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823d7b23-96c6-4b27-864f-be950ce628fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa81ee10-acef-4ffe-b120-1ccdfc3a7438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9e6e6e-4c75-4a52-8707-842eff09f08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfa7bac-789c-414f-b953-449fe773692b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f187f965-f4cf-4a2a-afa0-8f01ec75bb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c16ccf-9cce-4ec8-b323-3da13b20201e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701f3366-d7b6-4422-b7fc-41071fe9c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2af507b-70e1-4833-8680-5274f548bcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488f32c7-04ed-4e30-87d7-6f762386c91b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b657068-1378-48b6-ba4f-514e95c046fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ef5ffc-3513-4fad-b607-679488068c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546dc20e-ef8b-4b67-9907-da34703a560d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e6eb67-6799-42d0-a527-490a7e36a021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9d2721-9219-4f64-9a6b-e163473d79c1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9649d3-0de2-4883-a985-efffec7505f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c6c925-0171-4806-8464-ca5e92a484ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3cd6e3-d020-4723-b085-e4840c771143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50929884-3bec-4a48-8328-c5fe8886b716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a513d4e-87e2-4414-b446-81fe2781fe6e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad74e49-86e5-4e1e-939e-f45f38b4fff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4118ee25-e9d2-40df-be0f-a05973066285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c129d4-818e-4fa6-8285-840b04188dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc429f03-b795-45e8-b46e-46effca86300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a348be1-5d6d-4be7-9878-02960f92d6e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74c2eff-cddc-4528-ab14-a0a3ae6efaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e9194b-14dc-4ddd-a796-505ba9255c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac12cd93-4f28-4421-a563-dd33bec904fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d7f6b0-0a00-4cef-859d-66ca1dc78bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772d6a6c-2d17-48c4-95a8-80c5d1e276e3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb2786b-e0eb-4a9f-a381-37ee1adadefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4825624-71c0-4105-851d-0405574a1fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6464d3-f4b7-40e4-8ed0-e3908464bb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab293e3a-3c9b-4a3e-85e5-923929e319c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8695da4-85e1-4179-aee0-f99816e66a90",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128485d7-d6c1-4663-a053-c290716e10f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cd84aa-b400-44f2-97de-c92b82fc9099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a6103f-eeeb-4eb5-8bf7-172ff17ed5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "125cd1a1-fdd0-4eaa-9ed9-44f046fb4516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54da32c-3ea6-4cb3-9667-03102a1b60bf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85f12b6-180c-4ddb-843f-bebad2577a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0ee900-0d5c-4a00-b17d-ced14f588a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade80829-c15a-496a-b58d-088aa09b4a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "858cb217-ecbb-4413-ac99-808eaad5563e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8918f2a8-21b0-4b97-b96d-02b08fa6c91a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eaf142-9595-4d99-bfcd-5c8b726387ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed235472-fce3-4b03-acd5-3c5a1ad4c954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d6676d-effd-4df8-b44f-f76ce39f32b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5ae460-ac43-4c5c-8540-fc1bfd8c5430"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "897170c9-a54c-4eda-b8d0-61555a0da6a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65ff1e9f-9186-4fc2-bad9-3eb556389c53",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e90e5a7-1959-46de-a1eb-6dddd037ab10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "403ae39e-67d0-4cd9-b8bd-a4a8ded47b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2c81fa-0eb6-4bb3-aed4-79c7dfd89009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "731840f1-58b7-4935-96a2-06cb6690da3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed4d9e75-12f8-47c9-9dd0-cd0423fd0d9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ab81aff-c70e-43a4-bde6-7667ac0804d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b93bda3-ff92-475f-a43d-2b9a587cbf0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9491408f-92db-4a6d-b853-57de107bd75d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13cfa56f-8f50-4d3d-9b51-96e72f4e4450",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e067b20d-dc0d-44f8-a816-2d2dd8b458d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89661272-4a9f-4734-a698-1826a7fcb431",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1c433e5-e0db-43ba-a660-c82c90c5d9cb"
            }
          }
        ]
      },
      {
        "id": "50d588af-fd57-4ad6-80aa-aea5e3b8ffaa",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1c5751f5-8a82-40a3-9047-84080452238f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cca22f0-bce7-4f1c-8131-f24b3b28450b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53b9acb6-c9bc-41d5-8f21-1a392586f778",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e63dc6a-cb0b-49d5-b3c1-b35993720cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cb5285-31ce-434f-b8cc-e748a93eb66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4cf362-d144-4d35-af0f-c13d0f97337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "acecaa08-1ec6-43fc-932b-0a0491d9b269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c92703e-d327-45b5-b3c5-95d8b9e865db",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18447638-2918-4b43-b2b1-3b094322ca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f59161-bf25-4822-9c7c-1fff6e144886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fab815-8f27-4629-a110-bf9419c7f1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c726a2f7-2486-4980-951d-427300c97650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0326fd-faee-4071-a198-3f3cb378ff81",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5cf02b-efbe-4a61-8bbd-411db65305e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c01ec3-99e7-4de9-b677-5a8bbd8e4fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe9482d-523e-42ce-b4c9-1514f487e9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "042ee82d-e374-45a6-b149-83dfc4e19c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f7e670-ae3d-4e41-93b0-8327f73e44bc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce838286-784a-4cc3-b885-2491a6013902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31e893a-8038-480e-a1d3-4949bada4268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e34b9a-5f86-4688-8557-90f462071462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78eb2c49-cd18-407f-93fd-1718fb418c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be42c952-b6d1-4326-83b4-033492b48302",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea23ee91-0960-4623-8a07-9ca65601159f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c467d3d-45c9-4fb8-b183-201b509f45c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbd2970-d93f-43ae-886e-99060dccd53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c102e8-4b18-49a3-855b-637cfe45cccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e16a893-87b8-48e6-bc0d-2315bb3aa326",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c594ff9-8d78-4d68-9e06-dc5dbbdf92a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f0810a-f4a6-4368-b50d-3dfcda07fc0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e99e55a-1b24-401d-a522-99a8571a8d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "630d418b-caae-4f05-8137-75de98a1e0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7126d46-b2bd-4b31-a97d-81367b2ac165",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e602336c-93eb-461e-a660-dd8e229b5f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4b05cb-ee8e-4305-a4be-eb99916022a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1028dcea-3ea4-4c93-ad31-fc161bcc5235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6abfa237-6570-4d8b-a9c3-f2928d2585aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbead2f-39a0-46fe-99a6-f8529c127dc4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b954f361-faa2-48c0-b7e8-bdb98a4a641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d46cf6-39ed-42b8-a0cb-e0393eb5eb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7df3122-3846-482d-8b6b-bea0fccdd382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a48c6c75-9db9-437b-9e9c-bf387831b729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e03e6a8-80ba-4dc9-afd2-86a3ae10df30",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd6cbe0-3f3e-4de4-b011-ba76273d55d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7940f9-d350-455e-8e4f-f25e5b771e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e6916b-6dbd-43b3-98b8-f2503145d036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27c9f5f9-298f-47a0-a5da-d6a2f27aa8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac33d2e-f52c-41a6-a1ed-a23c003471de",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfc5d56-266f-4525-b2e5-8bec824c7443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739bc2b0-86bb-4ab0-80f7-9cbe4303144c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366ff398-795e-45f8-a081-58ad432b43d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "930efbb6-94e7-47a0-9bce-b432a66b29d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000b45a8-e039-433d-a576-db855cd3e774",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb033bbb-b45e-4c4d-8c00-caeca53d1960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cd605a-1417-47eb-a8ee-68f7868306e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b60f29-135a-4d7f-8160-08975dbac90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "99892185-6b90-4ab0-a18c-11646575c559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8f37d8-63e0-4e7b-8073-e319b23ba59b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011273b5-6d8d-49c8-a22b-ffe2abf7c4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d605387-5705-4f2d-8087-07709df457f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c07c5a-efcd-4953-94f9-8d2cc8db2ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a555c6-ae55-4689-95de-79707eafb712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce76ebc-c419-4324-ab17-8736ead7dafb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830152b0-8ad3-4817-b0da-aa305bcc3752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf9b18c-b5cb-46c9-80c6-56766def7505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b870bd0-5f80-4769-a381-909a87ea7377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ee5139-440a-43f8-aec3-e94e78a246a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f8778f-056f-4650-ab75-7687e1ba9578",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcf3fb1-83ac-4be3-b757-a05d5866e860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f5e0f5-037d-453d-9b69-fda0d21923d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4ebce9-2977-4dcd-8a3c-87acf09acdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8579ff-c4e2-4e31-a5a8-1edc059d6602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55392140-d3d0-4cdb-af18-439899b39988",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9941f07-6cb9-4533-bb0b-5cb28ca05962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28bbe69c-bf43-4cf3-9dcd-81eb2f5e9769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a338e01e-86bd-4665-bf63-39478106828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4084da64-2486-43b3-bc63-d282aa577d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879c88aa-3f5d-4069-9014-b2cb54e886f1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0f27e6-2dc4-4c2d-8124-41ca9927ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a723c3-9618-45c2-a105-d29e2cc79994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398ba4c7-e1f0-4462-a20b-7087da51553b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "860a364a-c00e-46ed-a9fe-527f8fc91db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8bccf7-6909-4915-b752-33e2dc7a9b06",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977c2711-1edc-4c7f-b47b-a63a6dfc783f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4365dc30-a8b6-407d-8fdb-6406d5f2dd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537f8cec-d625-4689-9955-60396d18cf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3be544ba-7cb1-478e-be68-a0cabe297587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e66f98-8320-4402-a12e-9c739e80c7e7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3090337c-47b2-4fb5-9eaa-654334d28953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c9683d-2f6d-49a5-8629-7eade440071c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ef4dbe-47e7-4b8c-936a-3540b0291fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff647794-5cc2-4944-815b-e6b7e12373fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a645110-82bc-4474-bd9d-ada80e7e622f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57d57d9-79b8-4637-84ca-0b02d05b56ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddd646b-e280-4597-aa46-1f214d543c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314bec9f-f36e-463e-9942-9e90c7563747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36fcd1fa-20a4-4aff-ab42-1eda9d242f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c660430-af03-43a6-8849-1b2e85ab05ce",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7783d6-cc39-4dc2-ae3c-9c55f67d1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7b3379-7534-4df1-bba3-784bc24031dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb54e403-1c36-47e0-87a1-b0fcac39907f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62e43c9-b97c-4d83-9476-ca52fd9cc09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c433da73-3e94-4915-838c-9b1e63c61eaa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbdc88e-7a65-4a82-8bbf-414e814c0a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba27318-8a6c-4cf4-9747-20848fe4e7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31142d60-9750-4180-8075-d76b4efc21f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c7daaa-c651-436f-be9f-a36204b4a2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f23b6d-7a73-4176-9ff7-4280b491c8ac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eb5c68-0aea-45a8-ae5d-647f1581022d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ee02cd-71ec-4601-b76b-303738ea7533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a5d992-ae61-4d1c-ac01-cac5e4f4aead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb120815-9d26-4aef-865f-8157d7200615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0ae004-0d80-40cd-9ed6-e5b45567cd7e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71f85c7-5d52-4f3c-995b-3940c4ceb8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b639d2f-71f5-42b1-b36d-bcb61d7697a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b51372f-f0e7-4d74-8f28-2ed5bcd77724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ca27cd-8874-4d02-9e4f-e56b6dc2de53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3af8731-d961-410c-835d-730aacfcd08d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdb2867-d329-497e-ad2c-bed1bd1dcd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0daf9505-eb1f-49c9-ae49-9f53d04b9979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee897ad-a8d7-404d-88d7-8c34d91f980e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5095a0-1fbc-4178-a9d6-79182e06a144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fb32e2-a095-42f0-98ab-d2da57e3c7fd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2e79f4-cb56-4b68-9f41-c841bf034c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5b302f-772d-437e-a14d-7d515c100476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32eb31c3-ba29-4ea8-bf88-9a4ecf2e945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c408dbf-8248-40da-8fb3-5bb4f807834c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3cefbe-9efe-4333-a88f-0740f9584396",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41878705-ea9d-405a-a6f6-11d2de28ea8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff5c6f2-93c8-4679-9f0f-c6adc2b7a76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74949c09-1057-4143-a105-d4e33394d10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb096a52-28d1-4ea1-909d-c0a259341139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0899bb71-66ee-4ff5-928d-61e33f9add36",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662a02d9-315e-41cf-b6f4-3134f08984bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4725fbbb-fc8c-487a-8f31-d6573245150f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f8cc1c-2672-4fa0-914f-4f590044fd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10f892b-4093-408d-a71a-02abafecd424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ed4ab7-bd9a-467b-b4b7-bf44ea54a891",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ec6a9-7172-4ab5-ad63-942bca19590e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c80eff-753c-4919-9b40-5f803dc828d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05b1efd-c832-4845-b88b-e539ca386247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "157e7730-b81a-4d05-80a7-26d26f55058b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449a6ae8-89d9-4174-b64a-1f9621015d96",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f690d488-0029-47dc-a3b2-bfde51f4656e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1900011-3fba-4653-9cc9-0e6e619332f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113f5ee0-2efb-47ad-b576-2705ec7f03fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7779566d-7ed0-412e-bec2-20079fa3098c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1298053-e978-45da-8966-bc7a72232b58",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e18f35-3e60-4328-b3f4-c988f559bff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9848e0b-bd8a-435d-b2e7-97f89d35b66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfdef3d-e37a-48eb-bc22-8af08d33d137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1dc2101-ef6e-418b-9e5c-51100f362604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd720129-e791-4895-a09f-e858444140c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedfcecd-3a64-4fa7-85e3-dc85b31ee957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb855c92-b864-4a50-bd82-c5903639d4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcaf708b-27c0-4e96-bf01-d7b6adf74ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2eb4d9-052a-43d9-b89b-92ba22594664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0519c3f6-a96d-4c55-9f8a-c33521984fe0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10def02-8c25-4ce4-83fa-bf68a0bee269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb2d2ba-3ad7-40b2-9765-cdcfb7dd88aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26d76ae-ba32-4453-8dda-8bc71454bc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af2a316-e54d-4207-9027-905d3668cf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41177253-e2b6-4501-b188-802800d7a048",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106b176f-1c7e-4081-b0a7-8644f606d00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022bf91c-baae-4623-80b5-3b92280c1aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18508ce-d7ca-4e82-8a0c-5013e4f5b080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04921811-f1e8-4746-931e-7e799e0143e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94288851-d745-4651-91a0-c9855004c0e9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6d57fe-a0a1-4303-b186-7871e11b96e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93fb315-3fb3-4c46-9e60-b13998253198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be44a0bc-9aca-47ab-900e-01ab64779ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6f14bf-0061-42ce-b38f-a2f67d18d20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cc57ac-3714-44ac-b667-14b3754a337a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a16102-4dc6-41a8-b71d-8ad4106bc39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a6f6f0-4921-424b-bfc2-92769948f25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e71327-3767-4139-ace7-13e3bb52d51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c83793-8a46-451e-bd68-1410a7c80c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8322ea-6fcf-49e8-b19e-819f0a829e4e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9f99df-2357-4965-a86e-1e6fb602b0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e057b2-6e55-4513-8dbe-c77c8a8aaa16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91724f3c-e817-4397-9685-2e7c6a5fb134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "346a0809-648d-4902-a2a4-e2081362db33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0873545a-89bf-4168-b664-5db954d5249f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574a2653-ebfd-4453-804d-5b8caf0dbcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31cece0-d2bd-462b-9297-094fafec44fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879b08db-fe73-44cd-a352-ef9136c3286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "727b1510-19df-4e95-9f16-6094f4a4b55e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8af7585e-9f5e-4c05-a9cd-05b774975d6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37013e52-02fc-4715-b820-3c0ef2b8fa69",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfee597-e583-4243-aa95-ccb35dbc620b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2871d739-2b36-45dd-bdaa-23b181c23d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ea0124-50be-4d6b-94c8-4b7149a1809f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "115d2026-71c2-491b-8793-3aaee8da2fd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f102359-1d73-4419-a76f-92507440e2a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf813431-6672-4d7a-bd7e-aa4f0a80cd33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc77b78f-5b0e-4298-b515-013d861e2690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edcff7f8-8207-41a3-be7e-98433dd1aa5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a72f0726-2541-4554-b012-faa321a25c81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d5b88e1-c544-46f5-9c7b-85cfbc3d988a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b75a6238-7fa6-439c-a159-6514b0f573aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37fcc248-6639-41c2-a379-ce7a895fbe37"
            }
          }
        ]
      },
      {
        "id": "20bf902b-6d85-404a-a853-bbfbf2c07ebd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "49dbe4e9-d4ce-4902-aad7-919a643c9039",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f447ec9d-297a-4fd1-bfc6-15b84304aa2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "691cf90d-5022-45d4-a451-9154dba9cc8f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2106f5e6-1cd2-45a5-93d0-09b777e8fdad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a7f765-8ef8-4041-b97c-c07dee0afe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480ef7d1-c9a7-4694-beb5-c3077976dd16",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40758cf6-a364-4b98-a56d-704a1f2ab247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3744f2e3-0a90-4ead-b3a1-3ae376ff8060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f87b20-7a30-4fe3-8102-60e19507f9e7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4084b0-740e-43f2-9240-b75d4210cb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03303e98-28d1-4d53-ad86-6df4881511a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a8cff9-1eef-4746-9477-1c15b2b120ab",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2ef282-2af9-431d-ac02-90b1b7f1ee05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab56a3a1-cd80-439e-82a4-183650fdfbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85d8cb8-8ccc-4135-bc96-d0a24f234ae1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14411201-f103-4e72-860f-a72ee65b1a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1a1c82-8074-4220-8c78-c6109a533eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18c572f-bae2-4c33-8db1-870a5f8e8e77",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd49400-5264-48b3-8354-8966fb798ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaeca54-611c-4f5b-82bd-49759ef425ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dbe847-28be-42fa-be26-87860351eb49",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e945e2f5-e061-4e34-8f60-2bea85daace0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a39793-ad00-4ac4-9552-7cae336051ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c7ee0b-d6ca-4629-90bd-b2af134726c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9c5c1e-bb78-4f20-b4af-772267fcdc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c783c34c-cd81-4d09-84bc-f9b5dd877892",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55e3617-b403-4e28-8fcf-bac2599a417c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aef8c90-6b1e-4541-a9c9-b7c5862bbe2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de544834-cf41-4245-aaed-37b005779fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40116002-892a-4261-83de-c12940eeb398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4207369-13d0-4a7a-aea0-1f3fd1159a64",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed8fdb6-b447-4b21-8757-230c36e2fbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ccb09ce-00ad-44ba-95a1-1981e5bf6f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47abedfa-1458-4cec-97d3-be04617b613a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483736f4-4489-4324-b782-01fb8bbbce06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad9e2ed-4fbb-4b98-ab79-d901dbe4b6cc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c60643-e43a-43ba-a886-c887ecd4c05d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01272bc1-e385-4b08-b8fd-afe7f280e210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1809b3ed-ffc1-417d-b200-402f7ce1b50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f63597b-9aa1-4d9b-9ddc-f3ecbe539952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55a332-9472-4a05-868f-013156284943",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f079a6-f86a-4c29-929f-cd310a3bb0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcced11-65d5-44cc-a464-789b02c3cde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cc4ef6-9c3b-4b00-822d-541664ce258e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b032d7a-5eeb-4774-a30f-fd9fcf9fdf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e2a82f-b2a2-4217-a35c-d930d2b8a480",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8922f605-a410-4663-ba4a-4983bd26e993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f087b93f-e34c-49c8-85b1-c8a01331b4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3f2a9f-6eb3-4823-8259-742e4221a418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8272f59b-6189-4149-846f-06f11dfc2755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4534681b-0b15-44a0-afc9-08a7b86786c4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fed92a-165c-4102-be02-66ee4e1e0899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70dbf687-47e7-4115-a782-bd9b98b4f98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41e1084-e034-4353-a84a-488156d66ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a3644a-cc8b-4c64-91fc-177fcdd0791c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2befda59-bbe5-4dbc-a2e3-547a9bb7f0af",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0342d908-879a-40be-8be5-20655ffd1637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0854b1-5b2b-4c6a-86e8-d61bb3622e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096d4ef8-3d5e-4e20-8e1d-248f6a8ac10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000de01d-660e-4d29-8bc2-7355e0bc29dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e15e640-65aa-4180-8ced-f1de6d24557b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287b6e9b-b526-4091-9780-e70e608532ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35110f3-d1d6-4e2c-b98d-c181c28b1a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462cb9fe-dafa-4211-9340-d253793af700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b64ead-e08c-4c75-bf03-94aff146b96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3e2bfe-fa18-44a5-952f-8ed8f259e21b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cae8b15-1143-4c31-b4f4-0d2fe46e3498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da4c541-6266-4c6b-ae06-780b37960211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125b0295-f7d9-45ac-82e2-8e4303180ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaeb5e83-5cc7-4380-b426-73549e9ce0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acf3307-6ed9-470a-ba91-38e46871c049",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51347322-143e-4251-8764-503e773dd499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cf0eb6-dc3f-4c40-b191-429ea8c43ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d60daaa-ead2-4915-97f3-c0abf84072ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fd256c-e825-4ea4-a2ce-f9d4ac63eb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae16e2d2-3754-4faa-982f-cacc5a7a50f4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ed2363-ab4a-4501-a6fd-f4fb4c960b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b483c37-adef-4bfc-86b0-011b9406273d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc1c72b-a0b2-4733-8eb7-21c812cb7ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb200b0f-9c79-45d5-9ec6-2ffa3681d81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb75d2df-b658-4194-8419-40eeeff612f6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50c8fc5-4add-452f-bde4-5dc935b984dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9eb531-c007-4093-abf2-71a7c80f71fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b17433-a0ca-41f0-abdb-ed4869485c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0998faa8-faeb-407b-b6a4-6e6b1428ab8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1daec0b-efb2-4bac-b755-eaa6ef9c5d67",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8bd3b5-a596-49b4-a7eb-61ef6deeb784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c510cad-b9ba-4d91-a007-5b77d9d79cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377b89ac-8bb2-4be8-a45b-c0d7719193b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83702b13-e391-4e44-8493-979679af13f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bff3d6a-b569-4244-8d0e-bc59bbecf088",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74157bbd-aefc-42fd-a800-2eb779ca57d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffc7e50-4fcc-48d6-88df-c1d0057210c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafd151d-4151-43d1-a8dd-53a3de9eb9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54e8093-1e34-4db3-b16e-48dd605e09a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0057b58-d07e-4964-b863-6801c1f94859",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d18dd8-2fb3-47df-ace5-d96d29ac7b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e1685e-40e6-46c1-baf4-143613823be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a9485a-44ab-414b-b4d3-309112a6451d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0b1367-e689-42bc-a86b-f9d1a286e08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19454073-2465-405a-8280-85564b83bf99",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd1d0a-189d-4663-a5e2-7b0cca397a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3346b478-0f8a-47dd-912b-2d4ade8ed4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a89d8c-966f-4f64-8976-06e8a07eb2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c622085-89ad-4be9-9f1c-ae5ee2e64a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2989d2bf-c3b9-489b-9b25-a73ab414c005",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea2bfa1-7cc6-42ad-89b3-271a5ac9dac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99c323b-4519-4ce1-a122-ae63d86b1fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ce05d7-b543-48dc-b13a-b6f75c36a0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ab5b19-cb0f-45ed-ac84-f208b2960a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ead7240-9bbe-43c5-af6c-3a0c3fb15ae7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9556a70-4d06-4955-a0e8-fcd915fe12b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28949441-938e-4555-805d-e22b5863715f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509f321a-8089-4828-bc79-96c650a50dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbef7f9-2157-4e64-8c79-91d78fc546c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de25e86-18c8-474c-85a4-4bc2fb2d3d58",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f90aad-0d93-4856-9316-07a2766b086a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eebc1cb3-1b76-4668-a52d-0af8b00718ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba810b42-5d20-4bdc-997d-1181ed8c5ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2e31f9-882d-4635-b8e5-d87a194b80af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29649058-7ddd-4b71-8a01-6be8d09d75e4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdc38ab-b585-41f8-888d-86e62b4a5bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff53f65-e882-4eb4-bd32-ad3fb5b464eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ed67c3-f7e2-4f3d-b115-087de5137085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db2aeac-4dd8-437c-9699-dfb20516a751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d89e61-cb4d-4bb1-954d-c85816cbd4cc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec87805-5709-43f1-a009-34cd084d9085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2412f44-954d-44b0-a3c0-e531614c0c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43ad398-4558-49e8-9a30-7169cd048e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68116709-f8fa-4885-bf6f-ebe8b2b25d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555d56d7-dd54-4dc0-97fa-cddf5ef56b18",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1b3baf-bea4-43bc-afdd-b6a9f41f376a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b72a209-2363-439a-b859-56bc2b229a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e5dc50-729a-464d-bf8e-c938bba8fbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc0687b-f393-46fe-a2f5-257e855629ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a8e0d9-aecb-4bbf-9422-5b8fb80e5bec",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14543f22-c1b6-4447-8b6a-ded3d686f7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "100cb816-c4aa-464d-b9c0-c6d5a8e6cce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b700fe3e-476a-4e3b-af89-6680fdbe0e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a098027-375f-403d-8cf5-66ab7cc5dd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be444cc5-615f-4d89-9112-bb150f2e7d2d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c931f1-e8f3-40da-b758-c96bf6356b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a942da1-2c1c-4955-a1b6-3bb25527cc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f329515-a57f-419e-b29a-e1eda0bc2c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43081147-e06f-45af-b4dd-2248a4f81211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bdf55d-2b21-4ff5-a640-813e8040d132",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fba194-7e2e-487c-ab4b-69c91007f3c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98595152-359b-44b0-8447-72a82af0cf63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e42c6bd-576b-4309-87cc-80603df7d402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eb2b48-8a86-46c6-8e44-97b6f8a73c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107487ab-bb65-482c-9070-286834ab2e8a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d73095-b107-4c06-8ab6-626fdfd6309a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4b870fd-3e4c-4815-86d7-aa66c8783e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8d8149-3fbb-4104-9799-d910df9ea6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15578c72-7d0c-47df-8ece-9f5129acf0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f97d0e7-c745-4d4d-a9a8-adeacaa1259c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e692d4c4-6807-4198-90af-e75d72d9b2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152f7c5f-9b30-4e51-8a19-49b6506afcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8588b0-7b5f-4d52-b2c4-f6994fafd5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dfbcf8-b830-4420-9b2d-be40f008ab24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186c303e-45fb-4e78-aea3-2a2b34a7018f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f2bdb-8633-4bc1-8355-74708e3746e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587aa008-042a-4e48-9629-854d3b8bc185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bd2eb6-278d-47a1-afb4-0ec6af99cc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163ed934-896f-4deb-8987-2ac5d8d99f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdcee9a-78a8-47b8-a2e1-b8784d9f3fca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d35406-a146-4a40-9ff1-9af342b43b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346ca43a-a408-4996-b4b5-cf9ae0ba5124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a61ca5c-6280-494a-82c0-94fcf5a9dd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9275a22-279e-448c-8a58-02b0a61127dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c12da5-4d8c-40a9-a453-994ce383d2b7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd61ed8f-5a12-4d70-bc99-c2590cba6775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39585968-f047-4066-ac43-0d5694a2bcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4b29f9-6ed4-407c-a5b1-736e2c250e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727b80e1-5130-4f76-9ceb-1631cbe5e871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38b9f59-a13f-4258-b7c0-b6500c234177",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2704c481-5d0c-4f87-bfb0-64849dccb737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1166e5d9-fb71-413a-94cb-6358ac97ea9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ab3af4-cada-4668-b2eb-97367882905d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879fa569-c781-45bc-a7ab-dddfade0f162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6c64fe-faba-431f-b0f4-44ed6c4ebeb4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d965b93-06c6-4688-83c2-67197c8cb9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945a3f21-78fd-42ab-88c5-f4ba73105080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4669b9-62d9-4729-93c2-9a3f643bf1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee241ae7-a4aa-4077-9919-bcd7e42a7705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7143012-e7ad-4d08-8cf7-0e5e95d4e78a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6ce962-fb94-4b3d-a9a0-ff7ffcef915e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745a0117-c464-4022-a815-9361c33d1259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0e1668-6e5c-44b6-9ac3-80bf2e3ebb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5961165d-af2c-44d9-872c-6434a00ffa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b59968b-342b-46e4-af55-e085b417ba9f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6571511-a877-4e04-b16f-814dbc40ea4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafb114b-29ac-4fed-a082-b6abb9ffa56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d601f46-b835-44a0-af83-45e0f14b7b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dabf14a-c09d-4803-90e9-6cd4959521aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a268fb8b-346b-480d-a370-a20df61001b5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55c6987-6cf0-414a-b6a4-7df665b21c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93dff4ab-1730-4b03-a2b7-e94fd16f8e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a9ecb9-6765-4bb4-ba88-77d3d8e65c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a96f44d-78a3-4e07-b458-4245d7648dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1508b55d-7b69-4907-8570-39666b5b2b17",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9056c47b-51d6-43cc-b70c-7592709ddb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26af8689-16e9-44bb-b4ac-00780ac95565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02258f48-e5f7-42c3-9836-459cdc597605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a93cda-6258-4a43-a4e9-421cafd3e2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0991958c-6746-44ac-bf58-b2ebcdf86475",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4443bf-2f0c-40af-b427-ff3334e809b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7a6b6a-9685-424d-aaeb-85a8e9ceccf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2581e3f9-e275-446d-b916-5e1b4981d526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3ee3fa-7bf1-428c-8bf5-db6ffc6f0487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a60ce41-ebb0-4f77-8dbf-67de50175171",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e5ddbd-be2d-4144-91bd-029d9a763c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5209ee42-4ce7-4278-8c92-96bd6a2af482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eab4530-ca05-4382-99c2-4a4624ab74f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f133b1d1-9031-4cd5-9648-83e44672a3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bb9b50-3e67-4dee-8ef1-78188645d0d8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b25e2a2-5bfc-4fc2-9ca4-befe03ebe0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f632c0-d520-49db-9627-8e244de58c41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279453a0-3334-4756-b896-67a19cdad153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadd6243-1ae5-434e-8561-bbf0d6488dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e2153-cdc3-472f-86b5-b535682a65e9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f510a185-18e0-42e1-afd0-5f072a5ab63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1070aa68-6d9b-4394-8d2f-e397544d05ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65635ed1-856e-44f4-a2ae-4fec7ca82cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8525be33-9534-4334-8c14-1ed85ac85cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91e4cbe-482d-445c-867d-29abe9f787e0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c82525c-f8d7-422d-be73-7584b2f63c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fcd235-67ed-4213-a50e-29f1781754a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b611b43c-52d4-4797-9e30-037ce5d69c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b971881-b28f-4fce-990e-2c8802fbf774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba57032-a0c0-49b5-ab6d-ddd25b728585",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039dde7c-5773-4ad3-9fe7-7b3a44dd83c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c8c535-c608-43f2-a4a3-3cf1f25a5011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90057a77-29f8-4a8e-8c4a-9b05fc118df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b73bd2-70a2-4f0f-a6a9-df9f4c38e7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1756b82-1177-4f68-b48c-15bdb458e001",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1144d35-330e-4fdb-8b19-a4fde22dc7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fde7de-45aa-41a8-abef-f8f02de83aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9a660b-7a3f-4197-9e3f-1d3b1f0d8dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4db3f09-19b6-496d-ac7c-da4b7b83af73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbed0ff-8e55-4135-8dbd-4e937be89b40",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa0531a-c6d5-47ad-98c4-42e1724e6128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebd58c3-2985-4926-a257-f0d50073489e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0a3a43-4215-4caf-a54c-cf9e43d23f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47209006-4e5d-4f14-a40d-838bc5b4c990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7778ff-cd62-469d-b933-a7de1bbf8b55",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672ac1bb-6e7e-43c1-9417-f9ee14eae14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a58f9d5-f2ae-4ed0-a149-1f9a347d977d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4fb62c-1c9f-4259-bae3-3fcb86dd3573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f4abff-18ff-442a-b1bc-b127f92e1554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0925bf93-5667-4cec-9495-01ed4e2abae0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c50f0e8-2b41-49ea-bf7e-9fe50447b13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783c670b-b028-4ec6-9bd3-2f32fb551fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc7c165-b87b-45dd-9d9d-bbfc2cc60e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a28e905-ba48-4d9b-9561-42b056610748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54330965-2783-4dc9-8d97-02092d0237f7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3cf1fc-406b-483e-b842-3bee2795f453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853a4e59-6fd2-4185-85da-eaba1161385e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffce83ae-42f0-4a10-9955-c4458f2ac748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4451c909-ff23-48f0-9c73-2d65f5257418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc4faf4-3e50-4941-a735-988fdc7fb97f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4677211-399a-4572-8271-b9d0c1bd3fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8013f50c-e3d2-4dd4-bbc5-b92a469b0a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17099080-5431-4f3e-b3fb-1da834b7b3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbecb5a9-7a05-48f7-8b6b-ac8419f30f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d67be1-e6cf-4ade-be38-30f1a6bc7cc0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce4ded7-d60d-4126-9665-db105b2b1ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c4bb67-9fb2-4d57-8f58-90f967c2d61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de7e375-622d-48db-ae79-21ffb17b9274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78bf7fd-7a00-4494-b6db-579ca6fd3884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1de7e2-23d8-4292-8cc9-bfa33071e185",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e723cf9e-1030-4820-bc48-becf386df20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13c4f47-8edf-4642-af3c-a6f1468d4110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68562b52-3f7e-4c39-925a-01a353370481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791b45de-4661-4e1a-83b9-0603c7c4ab0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ae3d58-eb69-4998-9edc-5e0e6e066093",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25eb46d-7816-4e3a-9cc9-f26a7c26b40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b9ab4a-b680-4db3-9bdb-4daabfa5fd84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3e949c-b387-480e-aba1-5047bcd851b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7c5eee-e58b-4809-a17b-820770ca1cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dac29e-0eec-4bda-84df-192130c714d7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e2d3cc-fc73-4288-8554-8b4c93ec060b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d820f81e-61c3-479c-a4a9-1c125cf786fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86bf11c-1cc5-42f0-b70b-297abd104aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26065e5c-9a95-4107-a914-f8fec3b282fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7accaf25-6611-4a2e-bcfb-3a9ddcc751bc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d6b89d-628d-47f6-8497-13548262c6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe7af3b-7d36-4496-9409-9d50c026f5ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f646729-0fff-4924-8925-47db73cf0a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb160fb-5f11-4103-9502-d1f471e1104e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca564611-abde-4c7b-b85e-c917e58c43d5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e6a2cd-c24b-49cd-9fa6-1c5774381ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f70b15e-bb6b-44c8-9945-c5b967069a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b540d032-8671-4ae1-9a96-04a1d21b167f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab4a11b-ac17-48f8-a31a-46bb98ec2db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8432d6fd-5103-45ed-a56f-bb861e797f16",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8df1476-2f14-4c32-ba23-2b14f5efe73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0a640b-4546-424d-9b00-c56bfe03291f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef6b642-4440-41c7-a942-dd7b5ffafd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd541cd-b587-45e5-b95d-62272f51f5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a038c10-bd95-4a42-a01a-16c3f5623235",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d6bc52-4f25-428c-ba78-0957003a1d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2349ac7-2e03-41f8-8df1-32f9df7dff99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e876210-3734-4b07-ad58-adf01c5d6fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee51cc96-2bdc-4a2b-8ce0-f8499154d3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb5d7dc-fccc-4631-b83c-b87bc3198956",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf5534a-4ad8-45df-9186-3e9d839823b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7283ea0-28a3-4080-8963-3e4df0aaff45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ea003b-d314-4018-84f0-442f6bfaa72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c905f2e-29c3-41e2-9f69-de36bff0fac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dd6f3b-1899-4c43-b1c0-b42068c060a7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1952588-59b6-4a0b-bc16-ba5f6bc379ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08250dc1-45d1-4899-bcfb-0c12df42276a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162d77af-dbfa-4135-a641-59c436051337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2182b8-0d7b-4759-8984-443f754cbdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07155e20-de54-405d-b5e7-55638ee3b84c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fcd961-10b1-4ef9-bd46-eb649bef716e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0dfbc42-dd99-453c-89b5-135db3ab3765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6c493e-bfe7-4ea0-9132-7dddf775a9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7a69c2-fe97-4993-a88c-fe0d67c846df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b295bc-14c0-40c5-bf4f-5f51689c04c8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54bd2d4-3b69-4b0c-b43f-5fda6296ef7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac0cefac-5e6a-4b4c-99cb-e84f7fdab3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c9173f-3e78-4146-b5ce-54bc76393f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41582ec6-d477-44eb-97b2-5d7dba1dbf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecf1905-5977-4122-aa70-4b4c9b306472",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d949d09-86d2-426a-af44-9d2c0097f3e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55e64d12-e9b5-4295-877f-74cdae14966f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca054863-b702-4bac-b868-9aa1578a887f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfeed0f-6ff1-4dc5-ad4c-1a721b1bb108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ab9418-146f-4fc2-a10f-a6a7d36f96a1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2537337-a771-48b7-9fc6-d5c9749e5fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178e7711-ad07-4a2b-ab0c-b04ecc931c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820ee618-a705-4135-b813-3691baa4e77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e61037-092a-47dd-b302-a28738f3a594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad336313-64a9-47ab-a8e6-b429a01e0588",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf508ce7-68f8-4cf7-8d67-fe04e2442cd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f7e73b8-8d29-4467-8652-1be229e31234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bf2468-6e25-4027-845d-c9c9ebc98aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea55b788-6c62-447c-9a3c-a9c0337e7793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d081f5-bd71-4a20-9172-187ee4bc04df",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad14776e-fb16-406f-9a2e-b1eaa9183d85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba56ede-70e6-4656-af06-3aa41acbcaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ca558-b9f1-45d0-b16f-abdd9639be0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348d66c1-4a59-4b6f-a479-ae6979303a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832181e6-bded-4ed3-9dcb-a01c3dd46108",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43922cc-55fd-4c4b-94cc-0300928ae4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7108580-cd50-4064-8d7e-864201bcb00c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846534eb-e0bb-4370-ae3c-5b9bedfedd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb186eb-a9bb-4059-9b89-40189fc14c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1d0802-c072-4549-850c-82dd959217bd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cb24ed-5e8a-4919-9b1a-d13837707cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e0bec8-075f-4111-9cb5-94c521bd341e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943a9b75-5434-4c1a-9ad0-628c0252eb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1e2a94-c07d-4c84-be55-116079787846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d652f8-3797-4024-81f1-726633715e0c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19f3459-070f-4413-919d-af0113c7c9bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb471ec-f5d4-4658-9212-64ad2db7795e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002a70e2-1fa3-4cb6-a866-13052bd73ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f1019c-c69d-4170-803a-03f5a5453205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df42d7c-947b-40a2-83ad-b037b0b8bf01",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777615b6-b137-47e9-9bad-0969a81061a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b695ae65-b23c-40d9-ba83-b25a848e4b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d0c621-c433-4097-a716-a755d6fadf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24b1ffc-2a3d-45de-9147-05fd08d87982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cf0bb4-cd57-4b01-ae91-69faaa48be1f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edfe23a-c40d-4bf5-8809-e9eb5a40ef80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1557f753-2442-4fdb-add9-d36f2d4bb5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27f2df0-f396-4056-bdf0-447c101a92b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa5011d-bd3e-49ad-9d17-29dce5f763af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80e5a9b-556a-4018-b897-3af476685c9c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dcc35a-9328-487a-82d1-4ccf29ec12b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5798ac66-3fb3-40dd-8664-81d1cd3d4c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf99152-c778-48e3-8716-b0ea75dd5111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0562e331-9360-422e-815b-1c9ae46a5ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c1e5df-4d83-45ba-93a0-ea3c050c3e64",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc37f47e-c3e0-45a5-b35b-556ab8ee7100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b612f5-c2c6-447a-8337-a11205b7fde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e09e67-ebbb-4b42-9b98-bf94c435f727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa105a20-74fc-497b-b1ce-45025b121b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9789d83-df82-4ded-8f31-501b3e8f8a6c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135d9980-145e-4786-af1b-c1007074dd98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edd8bde-7080-4b5f-abf3-9df5ef70d22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4783b49-d503-4938-a789-d50acb0795d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7bfc6a-bcc6-4050-94ed-55fee1183e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5550655-29f5-49d1-ada9-8f16845e6aa1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a831e6-fda7-4b70-b732-f4a11ca34874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b977a55d-ce1a-4f87-ab1b-09fca07764d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62703cb-a797-446e-8640-2fdd5c1196ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4cd3a3-f38e-4974-ac62-ed83b89e0093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54d6931-8a68-42c6-825b-d9ac855f50a4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5ccd6c-d444-4260-b85a-ef96b86f3dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2442d2d2-68a7-4f2f-9af8-7744c1243475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd53a180-d599-4c2b-a7dd-9c13b703d8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1f68b7-246c-44cc-8c2b-307bb1f9db57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df803f38-a26c-4f68-ae40-36a9c327570d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44cbff8-681c-4127-af7b-45b29484e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf6f84d4-a140-44c0-aaf0-5b777651d7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91b50e7-b509-4268-853d-14a5cc340df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6064d99c-b8c1-4d04-8bc2-cefde8f9e35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2440c2a-d21e-4ce1-af45-25d6e543e132",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8dd7e5-9dcf-4eef-8162-a12824bec288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "810b1ecf-d3dc-4863-80f6-7ad0f239938d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010fb5d8-02cc-468e-b31e-d66bb8ea96da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4a93b6-b02c-4958-95b5-c2ad5cc84a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1201bf5c-16bb-4789-a662-6732253535bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c23b74-8618-4c46-88e6-ab5cbb43dd4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac527e1f-5a77-419b-bdc0-eb4f2a5393ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ab0b36-7012-48db-9531-f9fc63008f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d9a9ec-1468-408e-84a3-9d3ccc31d4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6058ade-b701-4198-9e3a-21f040057e94",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c22368-0d9b-424d-aace-531b1ff8cb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ab28992-b3f1-46a8-8115-2aadbb8371d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e7c7a0-8841-4e97-8e2f-9c7eb0e8c5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb2c262-bdb7-4283-9f19-f981d2c56b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56755442-8f69-4a13-994d-6500cde4edc0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12f220a-173b-460a-8b62-75d166f66ec0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6fece22-c551-478e-8c5d-9c89a7b7da41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be519e7d-7532-4d78-b3c1-92f79eddc55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac6f60d-a2da-4a69-aa1b-5a8657c31de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592f5153-3fba-4170-af6f-76877df8c58b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8664ba-a9ab-448a-82f3-45deff0eca2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b33512c-c4a9-47b9-98fc-1610a2789dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ab978b-db0a-48b7-b2ba-aa25f66d389b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b615ccb5-26cf-433b-96e2-f352108401b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743f3bf4-8501-4417-8fea-0d71caf68447",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c792a3-833d-469e-91bc-0380ce918972",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c899de40-7118-4775-8990-5aa2c1b54b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b390c5b-976a-4fe5-9afd-c417dd142a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb08a81-a271-4968-9f7f-71053d8a66ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc5f7fa-86e0-4d08-8c6c-ae3d54fcce2e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f452cfe5-e4f7-4425-90f2-24bd8ca57789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fb1e6f-fdbd-483c-ba7c-59e6fc9345b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bf0d80-1ad4-4f03-b929-2ba7fe37322f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a2d8a0-6c2a-453e-b05f-540665f60752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8fdcec-b60e-488b-a65a-5c6b2377556d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c37fe7-09e1-4ba2-bd13-2db8b731b9bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a76b9909-9592-4432-a756-9616e614d393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eec448a-fae4-4fb1-816d-8df74e5c1312",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef95ea65-bf20-47fc-b537-9ffdd5bdd13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f8911f-de19-437b-ad0b-275da3b6710f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b8e32b-c2b9-4ea9-a6a8-04d99d7b5cd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9098271b-4062-4c19-aa44-d9f264f652ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97469ec7-b996-44f4-a430-ddd9ac4c0249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9bb762-f207-4c97-b740-9d30189a2d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df566c6-21aa-46b7-93f8-e4a7814629e8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c235e4e-4231-4d3d-aa8e-1ebfe74bfe18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f7022d-d2c8-4bae-a56a-2877b12669e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb27fd3-5ade-4482-a349-87a821f212b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80739a59-5a11-4e08-bd70-8f6f2e062cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba12b9ab-a70d-4bd2-a255-8be51667b238",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecb0e87-4065-4e06-8359-222fd995c5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c698a79-f450-4770-bd09-3087ad32e116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a6abce-ed2d-4497-995d-b7b5ff3f02bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0fdd9d-8ea9-4766-9e96-884bbcca9a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca3a04e-8922-4e36-ac07-afa40b131584",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe0cc2b-207f-468d-b317-c7c9a9c4c25b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b6129b-10e8-4237-8301-c5b86c8f3d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ba7211-e19a-4062-a1c9-600ba406b1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ff3b88-8a36-4d9a-81f1-9b82b1fef0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491356ac-0d44-48bb-8c31-223f9922cdaa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d4837c-1c4b-43d7-8e17-5adeabab73a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc94dd4-1f01-44f7-80f1-99cef995bcbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a64d78d-13c9-4065-8da5-65924b69d8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596694a7-4f94-46da-b8f2-5f7aad8bb9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93844032-b8cd-4c97-ae74-15136acdc01a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86486be0-7f07-4675-b876-a5a76d5250a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "611a88c6-1feb-4d0a-b073-12c117652439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9edb319-da89-41da-b5ba-2d68df296535",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca7df0f-2e25-48c7-8dbf-33796ed41fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e0fea6-0704-4621-a989-9e8b439af76b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40db342-c408-46c9-8b60-7bb614137ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752e7189-9972-4bc5-a251-bd4a4753b325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8bfa7b-d8c7-467e-ba29-31e19b56478d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b1bcec-3aea-4dcc-acaf-08fcba9a19e1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31d5a6b6-1b67-4b3b-9700-90758b0e48ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9864cf74-39b1-4f23-9f1b-bd003b77ec91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f5b7040-b130-47c4-9f91-cf4b377ee3f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec95a1a2-58f2-4bf7-88f5-cc1b2c44e4c7"
                    }
                  }
                ]
              },
              {
                "id": "9a91d306-bae6-48e1-9317-6d0f1c4daa09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0286643c-6aac-4b55-a836-b245892f01e3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b75b37e-b8fb-45ae-9817-e3a61ea6a0e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5043d075-704b-4eba-809f-235eb71014e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8341b149-5603-4560-a516-ed03132fb20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b3b34b2-7528-42a3-93ac-ff942f008a26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36575f87-78d8-4a7d-9030-31580ed55e2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87388c52-ddd6-427d-8ead-2a900647d784"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7868f3ae-4ba6-4876-9e82-3e45eabfadcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f732fa66-2f2d-4729-849c-b7b1c13e948a"
                    }
                  }
                ]
              },
              {
                "id": "344e034f-5232-4799-bd73-493932867e57",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "25b207b4-4a29-4f52-81c6-f53b9597410a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cfb616-b8e1-43e8-9d9a-e00a943e986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d8c67e06-e25c-46da-abe1-be1bb57bd6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bc4d34-a613-4a87-8e95-0d0408d0fb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430a2517-1d71-46c2-b845-3cb768eb388a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "86df7e5a-cfac-449f-b7fc-04dcfda7f095",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b35d15a6-d0e6-4472-92ed-dadb21643a01",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bab6a0f4-6e7d-4416-a2c3-44c1bbce1ab7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4e4c574e-44db-4b28-ba76-2c5166a5439e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e769e9b3-2ec3-488c-8ea5-137ad01a0a32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c3b7405-b239-49b8-8a0b-51134f95df22"
                    }
                  }
                ]
              },
              {
                "id": "802586c5-f438-41cb-aca1-f4e8e8f9509d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bd052c6-fd1b-4085-872c-7a12f63cc99e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "514c6542-0feb-46c4-a118-f8af35666723"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2c747ab-204c-4d8a-a22d-a0e5362be227",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28e81c34-e28c-4e1d-bf09-a0566529b7e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e0dae86-0dda-4bf5-9ac0-40249a970e0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b3595b95-c4dd-4380-a0a0-907f2d3af9ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15b259e5-2e8b-47da-8115-f030c31f4344",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e57d9a3-3261-4cf7-be49-a6eeb4bbea28"
            }
          }
        ]
      },
      {
        "id": "fced7b69-185c-4c7a-b4d4-2fdee6b99d15",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d33c22eb-5a7e-4b8c-b9ed-df309bc80b1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6d41f83-871f-4eac-ac5d-7e995f4c4db7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14b2c190-55bc-44a6-81ab-44061c090ead",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ac7e22-fca3-4258-a7e5-46e19d8740eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e31a1d1a-35e7-469b-b3cd-e3df6853d90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d45e2ef-40b4-4b61-b152-4b15dc2fa692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d628ed01-94cb-42eb-bbde-9c3e9af915bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a7b7ccc-f4e1-4f9e-ac01-27a6c9e50396",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87394a2c-85ab-4820-8dbf-85e19cf27809"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4e6be74-8abd-49bd-a7e4-11b091550835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d0e79d-eb3b-4167-813f-5e4b875ff01e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "847a339d-cc3c-47a7-939c-3b4429a366b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ff5dcde9-cef5-4b03-b271-1a8917667659"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "926523dc-6735-433d-97a3-8740172ac9a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70bc6fe8-5ddc-47e7-be85-e71d5deba874"
            }
          }
        ]
      },
      {
        "id": "87ebeeba-e9bf-42f0-86c1-b6dab48917f4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "853d899d-4f2c-41bb-b3f7-010bcd2a464c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e82d9133-9365-4cee-97d9-0b9814669be7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e9d24f9-b609-406c-a9cc-d0507ad7b8e5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ee802d-342c-4367-8136-624f87411ab2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e11c074d-1b3e-488d-b47b-1c13b33d2986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a8a8b7-055b-47d4-b7ca-1802fc6c7ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7da4fa12-7e49-41b3-a148-f560fca51446"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a24b2e2-47a5-4f87-87a8-813f305a8f56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "819707ae-6f6f-4051-a2c4-e2d291b1b11c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75e2b714-c260-47df-94b9-3d22ec01f929",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a17cc4f-3e3b-463e-b4b9-9e920c80772c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cddc7b9-606d-46db-8abd-544557997c20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9789ccb-f502-4017-b7c9-754b75ca4660"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf2d8bff-dde6-4bca-8d0c-50417b37e1b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c628fbcb-ad25-456e-bf3f-0b7468c7b6ab"
            }
          }
        ]
      },
      {
        "id": "88e6476a-998c-4100-b47d-3734624bf405",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dc49c7af-6eaf-4065-8538-e3ba507bb2c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e927e9e4-a1b6-4f64-8613-1289e0ca6da9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38bcfff2-864c-432b-ab4f-5e4dbe9bee58",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5516ef67-7fd6-4f59-b559-63b9f237a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "928aeb46-ee9f-4d30-a36b-b5984b0bbc67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c7ccaf-32d4-4ed0-afda-45eea5331b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f01302e-ab8c-4d10-bcba-f6f127775215"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57ad5abc-6e4b-4bde-adc2-ad738e35a993",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c3962ce-28a5-47a0-b151-3bdb1f5a9aad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40fabfee-3dc1-48db-99a4-565e969fd2e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6346f11-bbb6-46cb-9dec-842c1096f6ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b6ab3df-2f08-40b2-ace7-49dbebc8dfdc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "23b0b4f0-067b-4a20-b075-c9518575bcde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18ffd8e9-481e-42d4-b2ed-c44ed4a35fb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b58ad7d7-7a25-490a-b876-93fbba159195"
            }
          }
        ]
      },
      {
        "id": "48e16dc8-71e3-4e87-8b22-4ef1f3b95782",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68346adb-7155-4cca-ae8f-097f8909ab53",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e70280f9-a853-4d0c-8bc7-50558d968c9c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2baaddb7-a476-4664-9588-7b0e980a5abb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a18ac417-0a26-4bc8-a419-52a0a0f735c4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5e9529c-db81-4209-9721-632376ab63b6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 116.89473684210526,
      "responseMin": 8,
      "responseMax": 548,
      "responseSd": 71.05710187367015,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699749437844,
      "completed": 1699749486110
    },
    "executions": [
      {
        "id": "69e7e3c8-b89c-45dd-b084-11b391e7e1d1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "584dc761-f71b-48e8-b725-b0a2fa978f68",
          "httpRequestId": "26cea897-ed0c-4b01-aa49-81446df22935"
        },
        "item": {
          "id": "69e7e3c8-b89c-45dd-b084-11b391e7e1d1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5b955757-154f-45f3-8ad0-5ab86150dfe8",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "acf75989-1735-4389-8f93-92f36ba46320",
        "cursor": {
          "ref": "bd69a9d3-a1d9-48e6-bfb8-ed0739f47e2f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e9adaf6e-5b2c-4e1f-9135-c5547a70f3aa"
        },
        "item": {
          "id": "acf75989-1735-4389-8f93-92f36ba46320",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "802f3924-c3f0-4e2e-a543-f08533e09e2a",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "d7b2710a-9230-4f7d-872a-26dad64eecce",
        "cursor": {
          "ref": "c60e8e3e-32b3-4bc1-929e-a51fcc2053e1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2888e1d2-c2fe-49a2-b66f-13bbd0dd5af5"
        },
        "item": {
          "id": "d7b2710a-9230-4f7d-872a-26dad64eecce",
          "name": "did_json"
        },
        "response": {
          "id": "8cab2a80-54a8-4f34-8aa2-46f6cc128b4e",
          "status": "OK",
          "code": 200,
          "responseTime": 341,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d40b541-9d72-44e1-ae10-4f710a858550",
        "cursor": {
          "ref": "1ddb91b0-ca74-482d-8d1c-cacc9a26c36e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89aac06d-1b3a-46fe-b2a7-fc5a3998f4b9"
        },
        "item": {
          "id": "5d40b541-9d72-44e1-ae10-4f710a858550",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9a721c4-08f7-4e01-90e5-4864998f3fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d40b541-9d72-44e1-ae10-4f710a858550",
        "cursor": {
          "ref": "1ddb91b0-ca74-482d-8d1c-cacc9a26c36e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89aac06d-1b3a-46fe-b2a7-fc5a3998f4b9"
        },
        "item": {
          "id": "5d40b541-9d72-44e1-ae10-4f710a858550",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9a721c4-08f7-4e01-90e5-4864998f3fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6a441e-6b38-43a8-9df9-79fdb2f58515",
        "cursor": {
          "ref": "a1e90b9e-0be1-4168-abaf-59fd6d5c2b6d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f406b162-9606-4d59-b707-bcdedc904b6b"
        },
        "item": {
          "id": "5f6a441e-6b38-43a8-9df9-79fdb2f58515",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "301451e5-3c06-43e5-a5a0-d9b4945183e3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51333fe6-d80b-46b2-9584-3fd4bbef7d51",
        "cursor": {
          "ref": "9d916b73-ad91-45a3-86db-f48571fa3fee",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6784d0a2-763e-445b-afc9-962de86a8708"
        },
        "item": {
          "id": "51333fe6-d80b-46b2-9584-3fd4bbef7d51",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "12770231-2ce8-40ac-bfec-f6414149409e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707eebde-430f-491e-8ae1-a6c21fe9c54c",
        "cursor": {
          "ref": "eb851733-d060-414c-8c2c-0f8b943c8c59",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8775a22e-56ba-4d02-841e-3034e58fbb62"
        },
        "item": {
          "id": "707eebde-430f-491e-8ae1-a6c21fe9c54c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "677421a6-15aa-480a-aef0-0529e5b0b887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde259a4-110c-4641-bdcc-0b20975d53b2",
        "cursor": {
          "ref": "17737f6f-7ca6-4cd0-86c7-856e0883915d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "54875aa1-19a4-493e-b447-6e613e549bef"
        },
        "item": {
          "id": "cde259a4-110c-4641-bdcc-0b20975d53b2",
          "name": "identifiers"
        },
        "response": {
          "id": "59788ba4-115b-4087-876d-338669a9702c",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ece50d-9a5b-4e8d-9fad-122084ce5671",
        "cursor": {
          "ref": "aa7d1f8f-1a77-4fbb-982b-d0a4f2f82e81",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2e38098b-4593-4009-9462-c4601e34d493"
        },
        "item": {
          "id": "83ece50d-9a5b-4e8d-9fad-122084ce5671",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0d526977-88a0-4a8d-b88b-3a12753b53c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6362bc3-30b4-4a43-af26-84cd2587b697",
        "cursor": {
          "ref": "252a5550-e787-4b3c-ace5-9bea2069c612",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3cb5df4c-3a64-4e72-9ebe-b364387d9da5"
        },
        "item": {
          "id": "d6362bc3-30b4-4a43-af26-84cd2587b697",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "20618e00-3544-4949-adfb-0a7cb2432208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725e16f8-d025-4111-9603-b16334656507",
        "cursor": {
          "ref": "4e28acb2-09dd-4151-80a2-3c6ee24d1c80",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7806873b-bfcd-4018-96e0-1feef439dd20"
        },
        "item": {
          "id": "725e16f8-d025-4111-9603-b16334656507",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "44deedb7-a9fe-4e98-9be1-644423385e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fecf73e-ef2b-4cf2-bdb7-f086eddd6182",
        "cursor": {
          "ref": "53624818-f45d-480a-b17b-041cd26d7005",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "46770d67-4be4-4ffe-b142-1ebe73cc1b59"
        },
        "item": {
          "id": "5fecf73e-ef2b-4cf2-bdb7-f086eddd6182",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "27260ab7-8613-4501-b773-385944530cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab03a45e-bdc2-4458-914c-3ced82db40c9",
        "cursor": {
          "ref": "a87232a7-27f8-4c25-b702-3fd8439616e0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2c011b3f-2f0a-48a5-8320-b96d69523335"
        },
        "item": {
          "id": "ab03a45e-bdc2-4458-914c-3ced82db40c9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2f4df318-fcbb-410b-ab84-e6151ad845cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7abfa4-39c6-44f1-bef9-1febfe58f2b6",
        "cursor": {
          "ref": "7cfa9ac3-bd02-4655-ab55-e4177e157731",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "16aaf6e6-646a-46cf-b8b0-6b09f96a1a88"
        },
        "item": {
          "id": "ad7abfa4-39c6-44f1-bef9-1febfe58f2b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e4448924-e6aa-4bc2-ab98-596e28dd8072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36822831-bd66-43aa-8afc-130ca119d5d3",
        "cursor": {
          "ref": "802a1645-5de7-4645-965d-97519b953917",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f2e7a86c-de5f-46ac-8aba-90b740ce37c6"
        },
        "item": {
          "id": "36822831-bd66-43aa-8afc-130ca119d5d3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2b0a35ea-139a-4d1c-9dba-661a5520ecad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac6f764-a2a9-42ff-bdb9-8b3ae6782a37",
        "cursor": {
          "ref": "4f9479ac-4604-4de4-8cea-e143e7b18886",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a29f1643-ea84-4b26-9885-6e54250f5073"
        },
        "item": {
          "id": "5ac6f764-a2a9-42ff-bdb9-8b3ae6782a37",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "48e59a3e-6fb4-4d6d-807f-bbdcac22d5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea58354-463e-4841-b029-9e1b028a29e2",
        "cursor": {
          "ref": "ba7fc980-e914-4627-8bca-87a3a0df4778",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a821ce4e-238d-474b-8a2e-2fd2cd7aae1f"
        },
        "item": {
          "id": "2ea58354-463e-4841-b029-9e1b028a29e2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c40aa09a-e042-45d5-8734-534bee0332a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01aa0bb1-08cc-40f0-a8fc-9787ac108a79",
        "cursor": {
          "ref": "6644a82d-c275-4865-b5e2-b641dd91a9fb",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "265dec69-a7b2-4edd-8861-370666a0ada4"
        },
        "item": {
          "id": "01aa0bb1-08cc-40f0-a8fc-9787ac108a79",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e1a61da8-d0b0-4359-81d2-9cdf067ea324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259a8e74-2c25-4c30-848b-8e1655e7d266",
        "cursor": {
          "ref": "bd936493-d7b4-4f06-9a29-25ea2c763206",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2a31ba1a-af9c-42e2-b39c-a7693936dcd4"
        },
        "item": {
          "id": "259a8e74-2c25-4c30-848b-8e1655e7d266",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "87389889-3267-4f20-afac-3e898e226750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb31bd7-f41a-48ed-9b04-6d0bf305962e",
        "cursor": {
          "ref": "df52abeb-8731-4fb5-9b1c-22d9d750ac3b",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "22969e87-0dd9-4a9c-bb0e-8a7f435ea8ad"
        },
        "item": {
          "id": "0fb31bd7-f41a-48ed-9b04-6d0bf305962e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6d7cc753-cbf3-45d9-a550-a910cebaba75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7d5f96-dbaf-48d8-b8a5-2f3a3da0c405",
        "cursor": {
          "ref": "192ef1d8-417b-49fe-a755-7981ea85c9d9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a11a77ae-0a5c-4193-8f7c-36aabb08d8e4"
        },
        "item": {
          "id": "0f7d5f96-dbaf-48d8-b8a5-2f3a3da0c405",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2238e692-a05c-4e62-9c32-6a441997bb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6ef030-c28c-4003-9536-0f255e780bbb",
        "cursor": {
          "ref": "7cc5fab7-2220-473b-9c01-d39abd3cad23",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c361cc01-4c59-4942-a39e-1aca9726db7b"
        },
        "item": {
          "id": "6a6ef030-c28c-4003-9536-0f255e780bbb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0d6b630b-acdb-4342-8bc5-bb18c05540e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e4de19-d0e8-445f-9968-53db3300661b",
        "cursor": {
          "ref": "d45e29b5-f2ce-4b83-821e-e78bce88ab6c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f37449af-561f-49b4-a0f0-5049cf450a8d"
        },
        "item": {
          "id": "32e4de19-d0e8-445f-9968-53db3300661b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8f14149b-6665-4448-a761-f7d7179daa7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d9ed78-75d5-4312-acd5-3d2e4bd548dc",
        "cursor": {
          "ref": "e3b37172-bd10-43c9-ab14-142e1b937554",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d938fb79-a520-4eab-95ca-475ccc4d3a9a"
        },
        "item": {
          "id": "97d9ed78-75d5-4312-acd5-3d2e4bd548dc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8de3cfc7-642e-4d14-be36-3a046672ac84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca43427-6dd8-422e-a082-cfc1211ace16",
        "cursor": {
          "ref": "d3354d78-e5c8-45ad-b5c0-38d5eb9ede81",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c7164de7-3edd-4a5e-9cac-d702071a0e96"
        },
        "item": {
          "id": "2ca43427-6dd8-422e-a082-cfc1211ace16",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1cefe7d0-e58e-4af3-a969-779988a8c18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba79499-15b9-49b5-b73b-b48fa7e3ae84",
        "cursor": {
          "ref": "0da4b561-a52d-497d-8c14-fea8c6f71a54",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ca008a02-4814-4811-8343-a959d67fd47b"
        },
        "item": {
          "id": "9ba79499-15b9-49b5-b73b-b48fa7e3ae84",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2d3c06dd-5fcd-4696-89e3-54acd1414a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa5e475-3536-43df-8e75-75d5054fe340",
        "cursor": {
          "ref": "cba421e3-200d-4bc5-b619-9388b710696d",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a7e06b47-0069-41cd-bbbb-8400d9964bcd"
        },
        "item": {
          "id": "3aa5e475-3536-43df-8e75-75d5054fe340",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5cf172c2-e0ee-4cc3-ae1f-939d237ce491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1858240-f8a0-428e-beef-33ee1ba91f0e",
        "cursor": {
          "ref": "d360e97c-3a5a-477d-846c-1d06de8dca63",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bfdd27e6-3954-4b75-8ec1-a7b7e3180a11"
        },
        "item": {
          "id": "d1858240-f8a0-428e-beef-33ee1ba91f0e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bc6e16c7-0833-47b3-b233-9a4b61b90336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5635e3d-c1bf-4f3c-b4de-9e9ae398fd4c",
        "cursor": {
          "ref": "0a7b800e-ab57-4d40-98a3-eb39e91c4b64",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8571c473-eac0-48d8-9a3d-8d4ffe713416"
        },
        "item": {
          "id": "f5635e3d-c1bf-4f3c-b4de-9e9ae398fd4c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0fe57fad-522f-4f07-8a88-b7f727777e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff03a918-f8d7-4e41-9585-de4575e9c776",
        "cursor": {
          "ref": "b1355a57-ea71-46a6-8eae-1255331bbcad",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e8d92a6-287c-4ccf-92f3-119db4facaf5"
        },
        "item": {
          "id": "ff03a918-f8d7-4e41-9585-de4575e9c776",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "307e01ff-c930-496d-9bdf-93b48ba47e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ba7bb2-14bd-4e35-854d-2f9e87c5ef6e",
        "cursor": {
          "ref": "7545cf3e-49c1-47b2-9ae5-95c68ce97124",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7bd720f0-4b30-4d96-b90d-240516139fa8"
        },
        "item": {
          "id": "64ba7bb2-14bd-4e35-854d-2f9e87c5ef6e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "241c9fbe-2e00-4fb1-941b-9dd9a51b7e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40efc4ff-2ce0-41f8-99b8-33ea1269c875",
        "cursor": {
          "ref": "e0b49900-a4ca-4ebf-8aaa-7c1c344902c6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5b5e1b81-5eb9-4406-9add-d68e24a331d4"
        },
        "item": {
          "id": "40efc4ff-2ce0-41f8-99b8-33ea1269c875",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2d8a485a-e7c7-44c9-968e-8c06c256a465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8f171d-dae2-446b-bfef-b8d1eb46672b",
        "cursor": {
          "ref": "48f0cfc9-612f-469c-830b-b6be83871fec",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b564af71-a446-4da0-b545-f746d52cd0b0"
        },
        "item": {
          "id": "fa8f171d-dae2-446b-bfef-b8d1eb46672b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8467b659-cf8e-4e76-afe8-69737e07ed31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e2165c-5103-47b2-9347-f6f082ad78b0",
        "cursor": {
          "ref": "1e1bd22d-c1c2-410a-8cdb-d16fea0e4e1a",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "31f9a19b-b073-4547-91a3-f3185c69e83d"
        },
        "item": {
          "id": "03e2165c-5103-47b2-9347-f6f082ad78b0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "38a3e513-ecf0-4baf-8d83-eeb6279ed065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afb056f-7ae6-49bf-9f8b-76bb24ffd8bb",
        "cursor": {
          "ref": "56ef4a21-92dc-4a29-8fa4-bd7f2b65ae92",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "687937bb-170a-4b16-8634-f8620a231277"
        },
        "item": {
          "id": "4afb056f-7ae6-49bf-9f8b-76bb24ffd8bb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6d93d4a2-8943-4905-933e-092784e2f621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1327c730-a779-4e99-92de-726905a23302",
        "cursor": {
          "ref": "dd86c38d-2482-411c-80cf-a841968fd890",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "946758dd-9f0c-442c-95ff-a17277812c4d"
        },
        "item": {
          "id": "1327c730-a779-4e99-92de-726905a23302",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b0e06163-d7cb-4fc7-851a-14ae6719f7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79fb728-8dc3-4adf-ad43-1d7f79fc98f8",
        "cursor": {
          "ref": "a1d149e6-66cf-40be-a3a4-41a4518ea39e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e719bf1e-9608-46ac-9fee-de78bbe0293f"
        },
        "item": {
          "id": "c79fb728-8dc3-4adf-ad43-1d7f79fc98f8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ff80dca0-d91c-4bf2-b660-c30ff82191b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7a81a8-29eb-4c96-8a03-5b359521df67",
        "cursor": {
          "ref": "c9c1e10f-e23f-4c55-b5a1-0dbbe0289a1a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b2b6c1e8-a896-4d18-bccc-0267f299f3de"
        },
        "item": {
          "id": "be7a81a8-29eb-4c96-8a03-5b359521df67",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac6b87c3-3a0f-4b3e-a7f7-433afe2f45d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006c4bc2-bf8e-4beb-82fc-b6a54964bc6e",
        "cursor": {
          "ref": "6a50ec68-602b-49e2-861f-dbcf17c1ece4",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3b0b0a65-f672-4944-b5e4-9cfb50c05789"
        },
        "item": {
          "id": "006c4bc2-bf8e-4beb-82fc-b6a54964bc6e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b7507a69-7049-4a0a-ad9e-610e0a5403ee",
          "status": "Created",
          "code": 201,
          "responseTime": 521,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "60bf0304-faa1-43fa-b506-44438cf0a65a",
        "cursor": {
          "ref": "b745a116-ea24-409e-9176-21539725a8ca",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "03a3e9f2-6afa-4e8a-9ea2-b9d65d6eb555"
        },
        "item": {
          "id": "60bf0304-faa1-43fa-b506-44438cf0a65a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ebdbdba8-e54d-47eb-b11a-ea2c13a98939",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0b84a46c-8357-4400-af1c-ff45a6085a02",
        "cursor": {
          "ref": "22da932e-f49c-47ad-8be7-9be04c49c8df",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e162c8a4-6515-4292-87d5-7f7fd8a5f974"
        },
        "item": {
          "id": "0b84a46c-8357-4400-af1c-ff45a6085a02",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5b90082f-d402-468d-97c2-087c1da82c64",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ff8d309e-db1e-44ab-b698-92eb0b7f4467",
        "cursor": {
          "ref": "bcf12eea-c5e0-40bd-a462-477f4a09ab77",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f7dd5d42-7f8d-4c80-9cbb-30c6fe3c6974"
        },
        "item": {
          "id": "ff8d309e-db1e-44ab-b698-92eb0b7f4467",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "49df3108-73de-4dae-8bb4-228e1acba2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e028f4-a716-48ae-a814-c3d962bd0f3e",
        "cursor": {
          "ref": "a7de700f-ddce-4c99-a00e-c734ced0981b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66e53694-d4b8-4f21-bacf-ccdf8ef441f0"
        },
        "item": {
          "id": "11e028f4-a716-48ae-a814-c3d962bd0f3e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cf2a25a6-4313-434e-8d2e-237c481f649d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "56108384-fc81-459b-804d-506cd3802e4d",
        "cursor": {
          "ref": "25774338-f18e-46bf-bc84-1b6e1943a6b1",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a593b1d4-42d5-4ff1-b834-a59ca2c9781c"
        },
        "item": {
          "id": "56108384-fc81-459b-804d-506cd3802e4d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e87dc7f7-8a9c-4770-ab84-170d73701a7e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "70e1c134-a276-4fcd-9cd8-907d1204b18d",
        "cursor": {
          "ref": "b3f44761-6baa-4eef-bb43-fa56becccaee",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "36ac419f-076f-457d-9577-e98cf71cae87"
        },
        "item": {
          "id": "70e1c134-a276-4fcd-9cd8-907d1204b18d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2c9eac77-8da9-42e9-9578-8a8eafe324d6",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bb02003a-3ff3-4b7d-b17b-f8ec9ca0034f",
        "cursor": {
          "ref": "67b13e2f-bbe4-4b8b-8814-df835be74e8e",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6617e646-f937-41ff-abb5-bf9043207372"
        },
        "item": {
          "id": "bb02003a-3ff3-4b7d-b17b-f8ec9ca0034f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e1427127-a655-4d97-b780-09d311ff720b",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3a1716fd-3a9b-4424-a160-67ccc5be0f55",
        "cursor": {
          "ref": "e10ee87d-e1e0-4a68-b65f-648a806ba128",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6c1f2a4f-3e4b-4647-a8d1-d91d002d18af"
        },
        "item": {
          "id": "3a1716fd-3a9b-4424-a160-67ccc5be0f55",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "27b91513-8a01-4fb6-9be7-82fb0fd08fb4",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d97e8e9a-93c6-4a40-b598-015dab5b21da",
        "cursor": {
          "ref": "6aac5cfe-4fdf-4a6a-b243-415ec3baa361",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5ad92d20-bdb7-4530-8e49-82f545b46d8f"
        },
        "item": {
          "id": "d97e8e9a-93c6-4a40-b598-015dab5b21da",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b11fbd64-271f-44e5-b6d2-fa10d082fea9",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ff18d495-c5b9-4353-a17f-481eaf6ad3d3",
        "cursor": {
          "ref": "8cdefb40-17e2-4a55-9de8-44e20a77ffe6",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "693aad16-2454-4b40-bd0e-1a8928062eb6"
        },
        "item": {
          "id": "ff18d495-c5b9-4353-a17f-481eaf6ad3d3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f6978a17-f9b4-49eb-851d-41b69697de4b",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "506790f1-62ef-4ca3-9d95-3829137d606f",
        "cursor": {
          "ref": "e686fc41-4599-47b9-aa7e-6800626e7aa9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "17c74048-e776-49ef-afe4-2a3822ca4516"
        },
        "item": {
          "id": "506790f1-62ef-4ca3-9d95-3829137d606f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "94c42e81-82f7-4c5b-ac9f-64ea4fcf18e4",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7b05f935-f870-4edd-8013-25f86566ff2f",
        "cursor": {
          "ref": "f8bd0407-57cd-45f9-b9fd-2510c220dad9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cf1e7bed-9c2f-47d6-86f1-747f9bbc2c20"
        },
        "item": {
          "id": "7b05f935-f870-4edd-8013-25f86566ff2f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2ddabdd6-501c-4e17-b8e8-8f704fa36f53",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f465cb9-b495-4bd8-96a4-c44f6f16a481",
        "cursor": {
          "ref": "3c830f8a-e3c6-4fe5-9218-a56067187b21",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7f1bb94d-6883-4b32-889c-6ac46f599f6f"
        },
        "item": {
          "id": "2f465cb9-b495-4bd8-96a4-c44f6f16a481",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b7ffa7b4-201f-4298-89e2-38a1fa837195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a97f3f2-cd16-4348-aa42-4eb5e7f27f63",
        "cursor": {
          "ref": "7b6fe99b-fc15-4127-b223-bdb7cba5206c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "65efb52d-e319-48b0-895e-902ecec4e0f1"
        },
        "item": {
          "id": "5a97f3f2-cd16-4348-aa42-4eb5e7f27f63",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e6b3e374-d0d1-4844-8b1b-d957abd3546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73f3f1e-af21-40e2-9c0f-dca8f21842b3",
        "cursor": {
          "ref": "ef8c9142-bc47-443e-a04b-1a9c26235d81",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "50440db3-4170-4a44-8c3d-8eb190d1caef"
        },
        "item": {
          "id": "b73f3f1e-af21-40e2-9c0f-dca8f21842b3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6dde12ea-5c2f-45c9-98d4-990654ae26d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff5a40a-32d1-4204-ae2a-f9ab4c078270",
        "cursor": {
          "ref": "7db5457f-d65e-4f86-807c-20217676d23e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "10d51c2d-636e-4ca3-a3f3-60b2163e8ff8"
        },
        "item": {
          "id": "7ff5a40a-32d1-4204-ae2a-f9ab4c078270",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22eeb19d-8f30-4d65-afec-da7a361c7fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a8112e-f082-46ba-b29e-fea0f2aa2003",
        "cursor": {
          "ref": "137abd0b-8c1f-4c42-84a3-936c9bf0460f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7e32d489-ada4-4786-8244-4e666f0ade2f"
        },
        "item": {
          "id": "66a8112e-f082-46ba-b29e-fea0f2aa2003",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fc61ee80-98ad-4208-bb5e-ecf290552df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc77339-8a9e-4f37-878e-a5187af9aae4",
        "cursor": {
          "ref": "e84bff20-05dc-403c-818a-87f3aa465627",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9961554f-485a-44d8-a1c7-d291e98058d3"
        },
        "item": {
          "id": "4fc77339-8a9e-4f37-878e-a5187af9aae4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f5bb4944-700c-4097-888b-c022e268939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f990e26-324e-481d-988b-36239650d215",
        "cursor": {
          "ref": "b930ce0b-0d76-4f4c-89ac-5b730b856c68",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "139bde55-7a9e-4491-a310-1a738883b931"
        },
        "item": {
          "id": "6f990e26-324e-481d-988b-36239650d215",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3dd8c15b-c058-46d0-938d-92c3d85b137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2495a93b-e45e-4662-9809-652d35cb9c23",
        "cursor": {
          "ref": "af98de0e-08af-4ed1-8848-d68b5125cdfc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f86fda53-4a5e-47e2-83b3-65889e159570"
        },
        "item": {
          "id": "2495a93b-e45e-4662-9809-652d35cb9c23",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "707e211b-982d-4182-b5d8-72c7403f7472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c792ce-c11f-4c3f-9710-a6769d036dd1",
        "cursor": {
          "ref": "a984310a-5668-4cee-8055-7b007311fc8b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "432e23d5-5414-4395-b9fd-8c69d1f2f072"
        },
        "item": {
          "id": "13c792ce-c11f-4c3f-9710-a6769d036dd1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8ab4af1b-5920-4b16-a5c2-83ad69b464a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d76414d-4cd3-43ef-9a49-dd2dc8b6ff1f",
        "cursor": {
          "ref": "391c57e2-55fa-4aa0-86af-c76dcedb6cc7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6e7867d1-b801-4467-800c-a6fe97fcd9f7"
        },
        "item": {
          "id": "2d76414d-4cd3-43ef-9a49-dd2dc8b6ff1f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "97a737a7-d0a3-4be3-8783-cc9deabcc6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834535f7-01a8-4d5b-9616-8c540009174b",
        "cursor": {
          "ref": "2714ec3b-6069-43d5-aed1-70211fd4c719",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9acc84cb-a7dd-4dcd-a939-16a7cbbaf787"
        },
        "item": {
          "id": "834535f7-01a8-4d5b-9616-8c540009174b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a412321c-3cea-4614-8d8b-22a7364d272d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f920c6a-0522-4d48-9073-0a7ac0ca65d6",
        "cursor": {
          "ref": "81988e70-6893-47ee-990e-b33fabd715bf",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d912dfc5-f549-499b-ae2e-2ff289cddfd3"
        },
        "item": {
          "id": "4f920c6a-0522-4d48-9073-0a7ac0ca65d6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "53642d17-e0b3-40f1-a44a-f99ccc548565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237bb15c-6541-4f18-be23-31b04b55ba06",
        "cursor": {
          "ref": "3cbcad9b-c2dc-4cb5-932b-4b7e3a4c0855",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aa012abc-2b89-411d-93ab-0103fb0f9e97"
        },
        "item": {
          "id": "237bb15c-6541-4f18-be23-31b04b55ba06",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "736aef3e-7f28-4c5b-8a78-47669442d90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007c6b54-be40-4590-b345-ee7b004b3df3",
        "cursor": {
          "ref": "e11e86c3-0c9f-4e33-b6d3-f6c05b00fd88",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "def2f3af-e51d-4edd-8126-ba815e188d89"
        },
        "item": {
          "id": "007c6b54-be40-4590-b345-ee7b004b3df3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f29d2ef5-3318-47c1-bb63-0002ff7c4f52",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c4175145-91a2-44d7-9d44-a4e7c7405ab2",
        "cursor": {
          "ref": "179c6116-8455-47ed-96b6-333a24e88d52",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6f55f7e8-ce0d-4bf3-a450-cc757cb2c1a9"
        },
        "item": {
          "id": "c4175145-91a2-44d7-9d44-a4e7c7405ab2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "43181a85-a5c1-48a7-9790-74f16b2a4cc5",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "481360bc-f964-41ec-9484-667dcc04fca4",
        "cursor": {
          "ref": "62975e0a-f015-43c4-b89b-738ff4d5d428",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "24fec38b-c3b6-4a2b-8302-4965397678da"
        },
        "item": {
          "id": "481360bc-f964-41ec-9484-667dcc04fca4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d134273a-5f46-427b-90a3-408596168635",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "51a21120-ea86-4d56-8366-4204c3d96b75",
        "cursor": {
          "ref": "e143d928-d342-4da7-bb85-a855bd21c3ed",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf15c630-f0d3-41b9-a810-7441030524a6"
        },
        "item": {
          "id": "51a21120-ea86-4d56-8366-4204c3d96b75",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0aeccbb2-aeae-4a12-b51d-b9754a01228e",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1850d748-37f9-4028-b93c-8cced1e9e37a",
        "cursor": {
          "ref": "267968e1-c99c-4a68-9d33-dab7fcd188ff",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4bd18abd-4c8d-400c-9f91-fe70374b28cf"
        },
        "item": {
          "id": "1850d748-37f9-4028-b93c-8cced1e9e37a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d2b0dac8-5c06-49da-a763-9db575dc2549",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c58aba03-87f2-49c4-b927-2c72908460ce",
        "cursor": {
          "ref": "99bd760a-7081-4b97-8c47-4850d5205e31",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6c458170-d5fb-4df6-9765-557511f9b0ac"
        },
        "item": {
          "id": "c58aba03-87f2-49c4-b927-2c72908460ce",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d1930934-34dd-45d4-9085-b675249fbf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92974ec0-5a3e-43a2-a7ba-3949d378e630",
        "cursor": {
          "ref": "f72e24df-3f20-4d14-b9cb-10965a0ae393",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f585a579-cd23-49ce-9dac-81a440212206"
        },
        "item": {
          "id": "92974ec0-5a3e-43a2-a7ba-3949d378e630",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d5389ed4-c76f-4b0a-9a15-120c66f12c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f5d34b-821d-4c0b-a4b3-6755d6dd2085",
        "cursor": {
          "ref": "34de0b49-404c-4a8a-9941-9d594d3dc23c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "90aa8c9e-88a5-400a-bdea-04215d5cc28f"
        },
        "item": {
          "id": "78f5d34b-821d-4c0b-a4b3-6755d6dd2085",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e7cae69b-5a83-4b6c-8344-51bbc9fb6daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e76936-5996-446d-a22d-5dd2001cfb29",
        "cursor": {
          "ref": "c89df8f7-aec6-4bed-8f92-56687aa36ba0",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6efc42e2-841b-445d-b46f-0589c1e9ef10"
        },
        "item": {
          "id": "02e76936-5996-446d-a22d-5dd2001cfb29",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f72fd1fa-7b1c-44a6-be47-106f7ab32585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c4fa5-924f-4bcb-8b01-12e1b3dcd2d5",
        "cursor": {
          "ref": "4eb72e04-9fa6-4ae9-bfc2-3e94c9292494",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "47a00658-8113-45d4-8110-64d03eca8390"
        },
        "item": {
          "id": "e35c4fa5-924f-4bcb-8b01-12e1b3dcd2d5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8f77047f-a46e-4d78-af4b-672fde5d29c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3224a49-793d-4d1a-9661-7ba7df88c76e",
        "cursor": {
          "ref": "f3a2dc2e-2fa9-465b-8cac-878d84590075",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f1716156-c6af-40be-be39-9c5f2c3914ec"
        },
        "item": {
          "id": "f3224a49-793d-4d1a-9661-7ba7df88c76e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a1c0ebf7-6c7a-4ce0-95e5-4a54b2e9d318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c694cb5b-9caf-4306-843d-17289c5a67c7",
        "cursor": {
          "ref": "16fa68ef-8c6b-4d2a-a6fd-374be662c54c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5b33e986-dac6-4871-aee9-61b1c0888994"
        },
        "item": {
          "id": "c694cb5b-9caf-4306-843d-17289c5a67c7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5a39d2e9-2fb3-4358-969d-d1da0f37e6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9da2b23-c778-479c-bc21-882e5a7c7774",
        "cursor": {
          "ref": "8ec5f77b-9bd8-42e8-82cc-f1a8d5672f5e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2862b579-7249-4e8c-af95-8d25f910de48"
        },
        "item": {
          "id": "f9da2b23-c778-479c-bc21-882e5a7c7774",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9c4aab24-d03d-4161-850a-a848c3268486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f0f42a-7715-4797-98a6-e45dc9243e26",
        "cursor": {
          "ref": "c8c0cf34-3389-4c61-8aea-d1feb5fde557",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ee5faaba-52b1-4098-a0b3-1129bf8058ec"
        },
        "item": {
          "id": "f6f0f42a-7715-4797-98a6-e45dc9243e26",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a7ec95b5-78d7-4e51-b361-312d1b1d44d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706ee054-8973-4bb4-be74-291de260849b",
        "cursor": {
          "ref": "4c0bfcbf-0717-41a0-b204-62b54059afe3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "30eaf8be-e17b-4def-90b5-cfd0bbf4f2ac"
        },
        "item": {
          "id": "706ee054-8973-4bb4-be74-291de260849b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3c1b3e17-cf8d-4727-a112-8059cfc76eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f5fc03-eb0a-470f-a06a-03854f725212",
        "cursor": {
          "ref": "bb8ab5ee-4eb3-4a48-a1b8-86ca716474d9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cc5ce6ee-66df-4430-b98d-9cd0dd58908d"
        },
        "item": {
          "id": "26f5fc03-eb0a-470f-a06a-03854f725212",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c22bce0e-3492-47fa-af75-60731b247783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca347a02-3170-4063-a29f-cf85d7e8ba9f",
        "cursor": {
          "ref": "47d7dfb8-ecd6-42de-90be-9d32f9cd075f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e7e49764-2827-48ca-8cb1-f1e5f72e724f"
        },
        "item": {
          "id": "ca347a02-3170-4063-a29f-cf85d7e8ba9f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6d36db8a-0ff3-4166-9105-0f0e39158eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6213e8-176a-4a6d-89a2-e8fe991c0228",
        "cursor": {
          "ref": "3dd05130-9b2a-466b-904a-5ef732143b52",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1b27a266-971c-4240-bfc1-53e444a5006b"
        },
        "item": {
          "id": "3e6213e8-176a-4a6d-89a2-e8fe991c0228",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3a8d2b76-d7e1-4549-a628-2a9bb2ba84dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dc4d0d-7743-45b1-90a4-5343f5bf1ba3",
        "cursor": {
          "ref": "aeed521b-c694-424f-ae02-a67ccd3dc9d7",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "73f81e2c-f102-4b3a-b285-ed61e9138a12"
        },
        "item": {
          "id": "d4dc4d0d-7743-45b1-90a4-5343f5bf1ba3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "77445cde-7008-41e0-9396-54b34a33b6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239e870d-1f61-4f7c-a1ef-80baf47fd544",
        "cursor": {
          "ref": "b703786d-53db-4f0a-9466-50d5779b7fed",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "171c2cae-c687-44cc-a7ce-f589782480d1"
        },
        "item": {
          "id": "239e870d-1f61-4f7c-a1ef-80baf47fd544",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fc89d7f0-1e77-46db-9a34-c519ae405bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6aacc2-042e-45ba-89d6-7ea1c2d96020",
        "cursor": {
          "ref": "d3105ab8-e8d7-48d0-bfff-dcf8db538210",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a8c43d58-6318-4925-9deb-ac220112bb2e"
        },
        "item": {
          "id": "1f6aacc2-042e-45ba-89d6-7ea1c2d96020",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "45e3bdb1-a215-44d6-b569-a3a3fa123eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df9d0f9-dc49-48f3-b957-ac44efe7f950",
        "cursor": {
          "ref": "dab9c80a-949c-43eb-a974-3880c0367a75",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "07b84d7b-e5fd-44bd-b21a-15157e6ff5b0"
        },
        "item": {
          "id": "4df9d0f9-dc49-48f3-b957-ac44efe7f950",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81b449ed-13e9-4f84-9276-0d4000ed7746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef669cfe-2b37-4769-98e3-a7cd37ae995d",
        "cursor": {
          "ref": "8fbbd100-5318-4662-93d0-8280b0f40977",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c781e3ea-7163-465d-a3bc-35d8e17896ce"
        },
        "item": {
          "id": "ef669cfe-2b37-4769-98e3-a7cd37ae995d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0c99ced6-ba36-42cd-b8db-f0cc7fbd0bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ef8cae-7904-4265-b32d-e6a31c457785",
        "cursor": {
          "ref": "6e257c91-0cd0-45f1-b9f4-448cc66002e2",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a3d427ec-b3a4-4c10-a986-027dbc787db6"
        },
        "item": {
          "id": "33ef8cae-7904-4265-b32d-e6a31c457785",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bc70894f-17d0-4676-921c-b4dad6e1b7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e81e8f0-830a-483e-8fde-f9e83733e93f",
        "cursor": {
          "ref": "db29f38e-c4d7-41e9-8da1-ced84f7e1d66",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2c7e5ba7-ee7f-4277-ba76-9aadf970234f"
        },
        "item": {
          "id": "4e81e8f0-830a-483e-8fde-f9e83733e93f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ce539564-0688-4ead-b9c9-700b63291731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53b8e30-c344-4b52-8c7d-319256de11fe",
        "cursor": {
          "ref": "75276f7f-7899-40e8-aea9-190346dfca9d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "67d3dbb6-631c-4d3f-a9df-2a3e0b4fce08"
        },
        "item": {
          "id": "b53b8e30-c344-4b52-8c7d-319256de11fe",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1a273a36-287f-46ee-8c8b-1b1b4e91dbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8265d99c-0fb0-467e-87ba-1ecbb3de49f2",
        "cursor": {
          "ref": "81200540-1218-4add-a243-bfb1e98a7623",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "faa3bc5c-ffaa-412a-b0d8-6575770fb183"
        },
        "item": {
          "id": "8265d99c-0fb0-467e-87ba-1ecbb3de49f2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "774fd91d-8a34-4ac2-8e60-9f9b2b88d109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819d13ba-ef0c-4b21-95a0-8629885ae737",
        "cursor": {
          "ref": "fd0422c7-44dc-4744-ac52-a25f3db8c3ea",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fa23ab1c-fedc-4238-b6a8-621bc520e4d8"
        },
        "item": {
          "id": "819d13ba-ef0c-4b21-95a0-8629885ae737",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5bd0a3f9-cff1-439c-9d7d-a484a0948741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4aec62-247a-4cd7-95bd-61f9927002c4",
        "cursor": {
          "ref": "51e31ba5-625a-4ff0-bca4-e5d279d0de64",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f2e777d6-1060-46d3-9735-bf7f03a92355"
        },
        "item": {
          "id": "7e4aec62-247a-4cd7-95bd-61f9927002c4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "26f6906f-7bee-421b-9bea-952b34c2461c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491b2344-f262-446d-87fa-ff67f47ad8e1",
        "cursor": {
          "ref": "adba1fb2-fb05-44b3-be53-4c71df90fad3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fe666ff7-4f12-4679-80da-33066db532f7"
        },
        "item": {
          "id": "491b2344-f262-446d-87fa-ff67f47ad8e1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "52536449-cc43-44a8-b402-7ee6ad8ce389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68955cc5-52e3-42cf-8edb-4ce353faa3f7",
        "cursor": {
          "ref": "d1454d18-c289-43cf-beb5-20ce4ffb21dd",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c43ee1b6-6be6-4599-ad95-8386c117f20a"
        },
        "item": {
          "id": "68955cc5-52e3-42cf-8edb-4ce353faa3f7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9ebe23eb-faeb-429f-936e-9afe8965d3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ce849b-f18a-40e9-8a8d-70623fbc15b7",
        "cursor": {
          "ref": "f500c083-40fe-4634-8e4a-8ce3a39238dc",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "505d53e1-8dea-416e-8a67-a8a0f6bffe41"
        },
        "item": {
          "id": "e7ce849b-f18a-40e9-8a8d-70623fbc15b7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b2a01ab2-8c6c-40ac-a76d-f5de0e0a907d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4566c4f8-a783-4084-8955-ba6ee4b1d63d",
        "cursor": {
          "ref": "b99f1c25-bef8-4c33-a42c-6458c940d465",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9cf87115-4077-4bf7-a773-4ce5339e77a6"
        },
        "item": {
          "id": "4566c4f8-a783-4084-8955-ba6ee4b1d63d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "90a6c5b8-826c-4fc1-af51-a153d8842eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98ebe00-89d1-4f1f-96d6-a51391584ce8",
        "cursor": {
          "ref": "47ac1fdd-809f-4533-b700-5d4dd028a214",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f2e5c58e-5772-42cd-b8fe-d983e5db015c"
        },
        "item": {
          "id": "b98ebe00-89d1-4f1f-96d6-a51391584ce8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "09424208-781c-4457-82c2-d7281fc8db6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7e5935-694a-4a68-966b-e64d39820c3e",
        "cursor": {
          "ref": "50564a35-1254-4f65-81fd-2704301ccb27",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dd019231-2dd1-4c53-9f4e-65fe6a16f358"
        },
        "item": {
          "id": "bf7e5935-694a-4a68-966b-e64d39820c3e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "83ce8d91-013c-4586-9cc6-ba3857bafd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0a1cb1-9d65-4a3b-992f-7746b44f13dd",
        "cursor": {
          "ref": "9a0dbc92-3c3d-44b4-98da-b249c4fbb968",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "533f3aa3-8f57-4ff6-8c69-93ea463352b4"
        },
        "item": {
          "id": "1b0a1cb1-9d65-4a3b-992f-7746b44f13dd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "46073ee1-ccae-480d-a0dd-60e22477d673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b29a35-162f-493e-9a23-09ce68b8f0b9",
        "cursor": {
          "ref": "6957a63d-1d3d-46d0-8742-ae3ea02a2385",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "518f9085-4f84-4ae0-882f-b2df4f84de82"
        },
        "item": {
          "id": "06b29a35-162f-493e-9a23-09ce68b8f0b9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9e6e79b7-1979-4af7-9408-a43e62f4a6cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33f5243-079d-4b05-90ec-60a344607b0f",
        "cursor": {
          "ref": "6c19e5d3-2b5e-4dfc-92b9-30ee0a90ab21",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3fb9e2d3-7eab-4cb1-baf4-4568585d970a"
        },
        "item": {
          "id": "c33f5243-079d-4b05-90ec-60a344607b0f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "cd4d5aae-af5e-46d6-bfe0-92a57380c9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c8835392-b33d-46f7-b66b-737bb3a872cc",
        "cursor": {
          "ref": "f07d05bb-38db-4910-9d86-4fee12458084",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9c314f21-ce08-4dca-bbc3-85e4b8344ab7"
        },
        "item": {
          "id": "c8835392-b33d-46f7-b66b-737bb3a872cc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "93ad795a-5eba-424e-baa4-592cdbb74b63",
          "status": "Created",
          "code": 201,
          "responseTime": 548,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78b5272-5642-4a21-83ac-3978fc93a9d5",
        "cursor": {
          "ref": "6b99e3cc-1729-4ba5-9f12-9caacb59618f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5b15f243-7e8d-49d5-81dd-65d6e2b77993"
        },
        "item": {
          "id": "f78b5272-5642-4a21-83ac-3978fc93a9d5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d630236e-1289-40f2-9cb4-1f8cc56b1b08",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4730750c-e6fb-4360-9891-0783f740eb16",
        "cursor": {
          "ref": "6d8362e1-4689-4d4a-94db-7e9498d55ed9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7299ad02-5d4e-4dbc-a438-be8e16ba7b09"
        },
        "item": {
          "id": "4730750c-e6fb-4360-9891-0783f740eb16",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "57d7873e-5408-4c74-ba79-12cf2266621d",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0abda85-6b98-4001-8750-adaef0b258b7",
        "cursor": {
          "ref": "14995962-de3d-440c-be75-a74077d1df04",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "27646459-edee-4389-8057-53b143988816"
        },
        "item": {
          "id": "e0abda85-6b98-4001-8750-adaef0b258b7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4bbb8a80-78ea-4bb4-957b-ab81999be456",
          "status": "Created",
          "code": 201,
          "responseTime": 400,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3e2676-d9e1-404d-b5fd-09cafa7a284d",
        "cursor": {
          "ref": "10137f05-a625-42bf-8041-4b56eee4e5ac",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6285a8f3-c88d-4d2d-9d2d-ed252a187641"
        },
        "item": {
          "id": "ec3e2676-d9e1-404d-b5fd-09cafa7a284d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aaafba59-d90b-4e5a-bebb-b74ba14ffb0e",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-12T00:37:39.289Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-12T00:37:39.289Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "68c6c904-381f-4569-b5e4-fd87234a456d",
        "cursor": {
          "ref": "b2169a0c-06d7-4274-ad5b-8f685c37b4be",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f061947c-9789-4032-9548-7e74551c5d8e"
        },
        "item": {
          "id": "68c6c904-381f-4569-b5e4-fd87234a456d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5e5022e7-c5f0-4281-8ecb-99b86cfe6a06",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf58836-58a1-438c-8323-c876401fc826",
        "cursor": {
          "ref": "e8e0c612-53d1-4be8-b34c-32f21da06b10",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b0799757-ccaf-47bb-baab-0b180d144907"
        },
        "item": {
          "id": "7cf58836-58a1-438c-8323-c876401fc826",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "283384a4-49a2-4f3d-9094-62f841c4793e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf67781-9c64-4cf1-9610-776d36516c3f",
        "cursor": {
          "ref": "7dab4699-d6d9-4f5c-873d-8b5659d53292",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2af80367-60ec-4fa0-b39c-f5927587af7b"
        },
        "item": {
          "id": "5cf67781-9c64-4cf1-9610-776d36516c3f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ba5c772-71fd-4d58-9314-80e4f6227afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b894ee8-8a9d-4be6-940a-9fccaef62e0a",
        "cursor": {
          "ref": "8c8f4f2b-f431-4918-9621-c6609a0359af",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "230c6e8a-62af-4e9c-956f-bf0bb14c1724"
        },
        "item": {
          "id": "3b894ee8-8a9d-4be6-940a-9fccaef62e0a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "51e56624-7df8-4183-8090-04a1ba9f35a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65b5f6e-a47d-49a1-841e-c9ba423edc68",
        "cursor": {
          "ref": "c58d894f-8934-4efa-812c-7d1d1b2df720",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "07944075-62b0-4aec-9be4-a30be2a92861"
        },
        "item": {
          "id": "c65b5f6e-a47d-49a1-841e-c9ba423edc68",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ffa2c794-ef4a-4730-a187-d2476f7d0005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b6b33c-1c59-4c43-bcba-c3b1a0b31145",
        "cursor": {
          "ref": "0bf10814-0a3e-41a3-b6c6-7ef5a0dd663b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0b299123-19de-4ebc-ae68-b35861588429"
        },
        "item": {
          "id": "19b6b33c-1c59-4c43-bcba-c3b1a0b31145",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f57e9d5e-91f6-4cdb-8175-3efbaa0a4703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f847d005-260c-4412-b842-a482ba1cb1a7",
        "cursor": {
          "ref": "35ac0305-a49e-4f70-a832-f13ec32ecaf3",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ce22e24d-20af-4bd6-93d8-eff7346cef28"
        },
        "item": {
          "id": "f847d005-260c-4412-b842-a482ba1cb1a7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c8b506f0-8092-4795-a152-a6d9c2aacb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34f8b95-d15a-4e4e-b2c6-559807c44b60",
        "cursor": {
          "ref": "ee78b9ee-5d62-4488-8406-a212f800e499",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5b3e9411-563f-49d1-b608-04bc508a930b"
        },
        "item": {
          "id": "a34f8b95-d15a-4e4e-b2c6-559807c44b60",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "69164b49-29a7-4225-8b30-a1048b1a0a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168d0e36-dd06-4b10-891d-048b465ec194",
        "cursor": {
          "ref": "12069172-5d48-43ad-8b81-bb8852e14ef4",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d844d78d-7fdc-46da-a8ac-784df6bca96c"
        },
        "item": {
          "id": "168d0e36-dd06-4b10-891d-048b465ec194",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "403eb7b3-7dba-4d88-b39c-bb67b7da10a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc350561-68a8-4ca6-a42c-96d73fccd010",
        "cursor": {
          "ref": "97dd188b-46e3-458b-9e17-bd486e91aed3",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7f93541d-2ab8-4453-ad34-057925495279"
        },
        "item": {
          "id": "dc350561-68a8-4ca6-a42c-96d73fccd010",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7fc57d9-f9c5-41b2-880b-21946fbb0a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8b814b-0b06-4938-8cfa-f071bac383b1",
        "cursor": {
          "ref": "98c8fabb-35d0-4d1f-8d60-edb1ccf5f309",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "140dabc8-5331-40d3-8a19-adcac5619b02"
        },
        "item": {
          "id": "eb8b814b-0b06-4938-8cfa-f071bac383b1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5dca7c7f-bc40-4fa1-9750-76e63bb5d269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542ee3f0-2044-4cc5-892e-93b2fb7d708f",
        "cursor": {
          "ref": "f3b7b868-6a0d-4faa-9520-3970c2e7c718",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b4d19940-1d50-48df-9805-18d1242ee220"
        },
        "item": {
          "id": "542ee3f0-2044-4cc5-892e-93b2fb7d708f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6eea8ec2-4c77-4e28-9492-f893220507c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ceec58-2d6d-4992-822c-759a35ed1a91",
        "cursor": {
          "ref": "c7d38eca-d46a-4dae-b520-31a858940981",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2220d89f-6451-4d7c-ad1b-464647397a20"
        },
        "item": {
          "id": "52ceec58-2d6d-4992-822c-759a35ed1a91",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "755b9131-4d51-4b29-b691-1846cf71a562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53870ae-5420-4acc-a0fe-dddc74773c65",
        "cursor": {
          "ref": "5f55ebb7-5162-4475-a2e7-5293242c99d8",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "589e1ffd-b685-47e6-a0da-6bbfd2ca2535"
        },
        "item": {
          "id": "f53870ae-5420-4acc-a0fe-dddc74773c65",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0456e80b-d832-43fc-8e9b-9c648c5eebe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b199cb-1e82-479e-8dab-5ed2534cb8c4",
        "cursor": {
          "ref": "9f021217-13f6-459f-ae5e-db4e3bde3985",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "44bf8d1e-7d4c-49ef-aacd-192a15eadfd6"
        },
        "item": {
          "id": "50b199cb-1e82-479e-8dab-5ed2534cb8c4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81636d41-4d1d-479a-8263-adc5bfefaf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd37344b-e0da-4d2d-8339-1956b05d7c3d",
        "cursor": {
          "ref": "aa0a5f9c-b16e-43c9-bb7e-4c9c33f4bfa0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8c380126-a921-4ff6-9060-56559b684d08"
        },
        "item": {
          "id": "dd37344b-e0da-4d2d-8339-1956b05d7c3d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "926c8e47-a266-4528-a8b7-4945bd0fec14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94221369-d7b5-42ae-b48d-d817d410b95f",
        "cursor": {
          "ref": "2d88e2db-73f5-4050-986f-d3cb9e6d183e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "89a6c28b-42d8-4045-a4f6-f844456b0342"
        },
        "item": {
          "id": "94221369-d7b5-42ae-b48d-d817d410b95f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9bc85589-2947-4cad-ad1c-afec8397f3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d28164f-35b8-48d2-a5fb-a7dd60b9107c",
        "cursor": {
          "ref": "1a63fa4c-bcd1-4f74-928e-e841c860c495",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "94d9ec67-a680-4083-8cc5-18eb790c4de4"
        },
        "item": {
          "id": "0d28164f-35b8-48d2-a5fb-a7dd60b9107c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d7c75cd4-832d-4da1-87b4-f928eeb4003c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee98a63-72c8-4c34-8796-42462798984b",
        "cursor": {
          "ref": "626102da-5fac-46c2-9ad1-e5411444f858",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "31aa3601-7cca-4513-ab7d-249e8fb9a347"
        },
        "item": {
          "id": "1ee98a63-72c8-4c34-8796-42462798984b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "59e7d8c4-ddb6-4ce8-9236-25411aeff12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a6d194-33fc-4565-acc6-69b871dac607",
        "cursor": {
          "ref": "67a8ae21-52ea-4cbb-9b55-a46f0620cbbf",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1044058b-210b-4f4f-8756-7863cfca1874"
        },
        "item": {
          "id": "c2a6d194-33fc-4565-acc6-69b871dac607",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "edbbc9a7-7873-48f8-8134-dd0f91919824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ee4fff-3ac8-4dd7-86a5-e778dd8b9e36",
        "cursor": {
          "ref": "870021ba-b4a1-4a9d-9d35-741ef3f6d839",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ea884c55-6eaf-4549-8201-793677c5be5f"
        },
        "item": {
          "id": "80ee4fff-3ac8-4dd7-86a5-e778dd8b9e36",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eee09253-4515-49a3-bc80-3792a1dca29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bd5375-6f17-41fe-b53c-bb67a940674d",
        "cursor": {
          "ref": "185fc785-6887-468d-8852-caff76663d18",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "317e12d0-8694-4ce5-980d-de3b161c9483"
        },
        "item": {
          "id": "a3bd5375-6f17-41fe-b53c-bb67a940674d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1bb5719c-2ccc-4b69-9e8f-fcc3531b6ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4254cc-e0bb-4181-aea5-b70ccf28f27e",
        "cursor": {
          "ref": "734b21bf-e4fa-445a-b021-a7f749833cc6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ae98d3c8-eb97-4064-80b8-0c5954843de4"
        },
        "item": {
          "id": "df4254cc-e0bb-4181-aea5-b70ccf28f27e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "36a94f5e-0caf-4dc8-971d-38a8b73f3bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d75f81-149d-4d28-97f9-bd049b2b6cbf",
        "cursor": {
          "ref": "fd436bb2-a163-4b88-80f5-2df7bd96828c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5a789f30-3b20-4657-bc1a-6739b5179102"
        },
        "item": {
          "id": "c9d75f81-149d-4d28-97f9-bd049b2b6cbf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a634bec5-e505-49bd-80ad-d10a0ec9bcd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfa7bac-789c-414f-b953-449fe773692b",
        "cursor": {
          "ref": "3be57c14-2e83-4949-aabe-0615863f0562",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "99197e54-e0b1-452e-a162-24afe4f91573"
        },
        "item": {
          "id": "fbfa7bac-789c-414f-b953-449fe773692b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "02bd126a-7e90-439f-8612-71045b808fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488f32c7-04ed-4e30-87d7-6f762386c91b",
        "cursor": {
          "ref": "f4a513b5-0e60-4ad0-a92e-972ef72a4e63",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8e38cef6-e5ab-4598-ba2d-20d4a3467a00"
        },
        "item": {
          "id": "488f32c7-04ed-4e30-87d7-6f762386c91b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7af80ea6-2097-4226-9f8a-2b6031ccf5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9d2721-9219-4f64-9a6b-e163473d79c1",
        "cursor": {
          "ref": "31447272-d00b-408d-b574-11d18750e953",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f8c0a3b8-2df6-4810-abcf-97374d37c1cf"
        },
        "item": {
          "id": "6e9d2721-9219-4f64-9a6b-e163473d79c1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "af702f5f-b22e-48e1-9b7e-e5fadb546f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a513d4e-87e2-4414-b446-81fe2781fe6e",
        "cursor": {
          "ref": "715cb820-003d-41b4-835b-a02cafc5687d",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "215e689f-420b-43df-943c-0d435f73b3be"
        },
        "item": {
          "id": "5a513d4e-87e2-4414-b446-81fe2781fe6e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "500b76de-bf15-4d41-950a-911b0c86f8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a348be1-5d6d-4be7-9878-02960f92d6e6",
        "cursor": {
          "ref": "df896307-baa9-4dbf-b541-a24e6b5b2695",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f1141668-6191-44e8-ac5c-6de43b6c3393"
        },
        "item": {
          "id": "7a348be1-5d6d-4be7-9878-02960f92d6e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d74a5b69-826b-4df8-9742-718a18cf68b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772d6a6c-2d17-48c4-95a8-80c5d1e276e3",
        "cursor": {
          "ref": "1585812b-41f9-40f8-96b6-32d85327d290",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "013601ba-3f3b-4f47-906a-b675ac3155f0"
        },
        "item": {
          "id": "772d6a6c-2d17-48c4-95a8-80c5d1e276e3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "09399c08-d573-4fe7-bc99-84667c7c5239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8695da4-85e1-4179-aee0-f99816e66a90",
        "cursor": {
          "ref": "217f6508-d687-46e0-bf5b-f448e762f22e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3a4b9f5e-e23f-4236-be21-55bbdf16050a"
        },
        "item": {
          "id": "d8695da4-85e1-4179-aee0-f99816e66a90",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2f071817-1620-4fd7-a3ec-7b72ff37b92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54da32c-3ea6-4cb3-9667-03102a1b60bf",
        "cursor": {
          "ref": "8871819a-0a29-444f-8825-22932457aee4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ae8b484f-3855-42ac-8ce0-5f9d85475996"
        },
        "item": {
          "id": "a54da32c-3ea6-4cb3-9667-03102a1b60bf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f0ad1cd4-e0e3-449e-bd2c-888f780358bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8918f2a8-21b0-4b97-b96d-02b08fa6c91a",
        "cursor": {
          "ref": "0d03acaa-8ae1-4ff4-aa00-bc5e53ae6074",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e22c3561-7258-401a-bca5-2643efcdc71c"
        },
        "item": {
          "id": "8918f2a8-21b0-4b97-b96d-02b08fa6c91a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ffba7098-d71c-42f5-bb56-2e275d278e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ff1e9f-9186-4fc2-bad9-3eb556389c53",
        "cursor": {
          "ref": "8a694ae0-9fba-4abc-ad28-e01746d75ab6",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9189bbd1-1da6-47af-a93f-8047f48e2175"
        },
        "item": {
          "id": "65ff1e9f-9186-4fc2-bad9-3eb556389c53",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ddfdc8b8-0a16-48ea-80eb-9055a741f87e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b9acb6-c9bc-41d5-8f21-1a392586f778",
        "cursor": {
          "ref": "521f588b-67af-4fa5-b5e8-01d967a0dccb",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5ee74da9-bb19-4068-8745-9d7a8b9580d9"
        },
        "item": {
          "id": "53b9acb6-c9bc-41d5-8f21-1a392586f778",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "858a1539-d8da-4d59-884d-1ad4549c2aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c92703e-d327-45b5-b3c5-95d8b9e865db",
        "cursor": {
          "ref": "5eac160d-0348-4dee-8e63-c63a0b6e6908",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5a80dfd3-1080-4868-801e-c88ced3e2b26"
        },
        "item": {
          "id": "9c92703e-d327-45b5-b3c5-95d8b9e865db",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6c6110bb-3710-4cfd-a9e4-52b591373bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0326fd-faee-4071-a198-3f3cb378ff81",
        "cursor": {
          "ref": "228cb1f6-8ca6-4084-bf0c-023bd566aacc",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9802e683-b28f-4e59-a2e5-fce9432c2e83"
        },
        "item": {
          "id": "ca0326fd-faee-4071-a198-3f3cb378ff81",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "87cb8b8f-a7c0-4e54-9b2f-b71991c7ca5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f7e670-ae3d-4e41-93b0-8327f73e44bc",
        "cursor": {
          "ref": "ee25da60-c530-466e-986e-5d64f3e0b51e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "830fd3c3-1749-4116-8854-b5486c594bdb"
        },
        "item": {
          "id": "56f7e670-ae3d-4e41-93b0-8327f73e44bc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d550e59-ff1b-449e-bbb7-e2fd2931785e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be42c952-b6d1-4326-83b4-033492b48302",
        "cursor": {
          "ref": "24299cbf-7a97-4fe8-90d3-0b3ba353dd08",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4d300f70-83fc-4efc-b1dd-ca0a49c19d23"
        },
        "item": {
          "id": "be42c952-b6d1-4326-83b4-033492b48302",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "654e368f-fabc-458f-9d71-52b1ef1e9dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e16a893-87b8-48e6-bc0d-2315bb3aa326",
        "cursor": {
          "ref": "41322b39-b968-4d61-acf6-31c74175c784",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "95688d65-0263-4d49-a4fb-0e294386b266"
        },
        "item": {
          "id": "7e16a893-87b8-48e6-bc0d-2315bb3aa326",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5bf217b-c7e6-445d-aa62-19dfcd31a66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7126d46-b2bd-4b31-a97d-81367b2ac165",
        "cursor": {
          "ref": "0e6cdcd1-2f57-40bb-86ab-80b2272d5bae",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7bdf3a94-ef6c-4650-99a4-f0f940b735d9"
        },
        "item": {
          "id": "d7126d46-b2bd-4b31-a97d-81367b2ac165",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "83eb71e1-d9e7-46e5-a973-283326cd30bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbead2f-39a0-46fe-99a6-f8529c127dc4",
        "cursor": {
          "ref": "722e6fc7-a7c8-43e4-986e-919694150192",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f09d8228-8af8-408d-be09-b5287039c7a9"
        },
        "item": {
          "id": "bcbead2f-39a0-46fe-99a6-f8529c127dc4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a460d6c8-affd-4cfc-a02b-7a30ee7f6a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e03e6a8-80ba-4dc9-afd2-86a3ae10df30",
        "cursor": {
          "ref": "3d08d9e6-a2e2-4112-90c5-64dccd43affd",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bdda427b-06ed-4355-9893-aea95a9c1a4f"
        },
        "item": {
          "id": "5e03e6a8-80ba-4dc9-afd2-86a3ae10df30",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "39e894ce-c5cc-4666-bded-a69f0cde53af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac33d2e-f52c-41a6-a1ed-a23c003471de",
        "cursor": {
          "ref": "97af8171-1843-4252-8626-5cee68e23b4f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "21052f7a-f839-4e8c-a5fc-51fd9214e4d9"
        },
        "item": {
          "id": "fac33d2e-f52c-41a6-a1ed-a23c003471de",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "183d1083-3c47-4d4b-9f41-06edcf01cc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000b45a8-e039-433d-a576-db855cd3e774",
        "cursor": {
          "ref": "54426e7a-faae-4829-8226-ba42a56f4049",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "087e1f39-d59d-4877-b69e-4906383fb633"
        },
        "item": {
          "id": "000b45a8-e039-433d-a576-db855cd3e774",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0242b44a-6ea3-4e72-9d2d-0a52945bca93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8f37d8-63e0-4e7b-8073-e319b23ba59b",
        "cursor": {
          "ref": "700eb0b7-3cd4-4167-91e9-9a881df8e838",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d3f8a999-586d-4fdb-9d1a-f2e5e1815b64"
        },
        "item": {
          "id": "8f8f37d8-63e0-4e7b-8073-e319b23ba59b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8691a176-aa2d-40ad-985b-4966e0aa7d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce76ebc-c419-4324-ab17-8736ead7dafb",
        "cursor": {
          "ref": "e4a167dc-6f1a-4b05-880a-b837515e30d9",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5fcef997-70ce-4b19-9125-0dbb10b15cf0"
        },
        "item": {
          "id": "3ce76ebc-c419-4324-ab17-8736ead7dafb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1957e0e9-ffd9-4043-b9ca-e40fea588aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f8778f-056f-4650-ab75-7687e1ba9578",
        "cursor": {
          "ref": "d9059137-8569-472b-8b9e-16fec0df4b80",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "227a8243-86ed-47f0-97b6-9be3ac7870d4"
        },
        "item": {
          "id": "51f8778f-056f-4650-ab75-7687e1ba9578",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6e0c0c98-5020-4c1a-9f14-d09b0f9f1798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55392140-d3d0-4cdb-af18-439899b39988",
        "cursor": {
          "ref": "8eb636ee-fca5-48f7-9df9-582991d3e804",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3a92cdb9-cd97-4789-a3f4-3faa65c0b7c0"
        },
        "item": {
          "id": "55392140-d3d0-4cdb-af18-439899b39988",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "60a71dbf-fce2-4814-8fa2-a7cb367887fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879c88aa-3f5d-4069-9014-b2cb54e886f1",
        "cursor": {
          "ref": "f9286366-f88b-4a9a-bfc9-90b145e2786c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9b1a2e10-3b00-4908-a5fe-e659f04984ac"
        },
        "item": {
          "id": "879c88aa-3f5d-4069-9014-b2cb54e886f1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0dad4d19-563e-40ce-8200-419bc84b2849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8bccf7-6909-4915-b752-33e2dc7a9b06",
        "cursor": {
          "ref": "5e5038a3-867d-4c2d-822b-f8935e069dc4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4727fb85-9622-4e25-9061-2a797502284e"
        },
        "item": {
          "id": "9e8bccf7-6909-4915-b752-33e2dc7a9b06",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cdc0f41f-035d-4cca-9376-732f327cf87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e66f98-8320-4402-a12e-9c739e80c7e7",
        "cursor": {
          "ref": "abd62edf-1814-4bda-ba57-2f4266bd5e1d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6f022ec1-50a9-4555-9a47-fa4bea8d7e38"
        },
        "item": {
          "id": "16e66f98-8320-4402-a12e-9c739e80c7e7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a690c664-b82b-4c34-a3dd-4f4eeac83fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a645110-82bc-4474-bd9d-ada80e7e622f",
        "cursor": {
          "ref": "eefa5a6b-e847-4f0f-a0b1-05d84d6d454a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "45619a47-324f-4e52-847f-1940057932fc"
        },
        "item": {
          "id": "3a645110-82bc-4474-bd9d-ada80e7e622f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ff7e0b32-9251-4aab-ba53-7785f436d858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c660430-af03-43a6-8849-1b2e85ab05ce",
        "cursor": {
          "ref": "56bb4491-820d-47a7-a491-e7bde2a57c50",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8c402c94-c77b-4cb1-8046-afbbe0e8b736"
        },
        "item": {
          "id": "3c660430-af03-43a6-8849-1b2e85ab05ce",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e9155b20-49e5-4f1f-85b8-9d13dacbbea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c433da73-3e94-4915-838c-9b1e63c61eaa",
        "cursor": {
          "ref": "f04d070c-b530-41ee-b93b-2264f8bf82a7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "37bcff35-5dd3-453d-bbf7-724db06f83ba"
        },
        "item": {
          "id": "c433da73-3e94-4915-838c-9b1e63c61eaa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ac7a5c65-5358-4b96-90a3-b5f72676bfa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f23b6d-7a73-4176-9ff7-4280b491c8ac",
        "cursor": {
          "ref": "00da22b1-7f77-4ec3-bc2a-d6fdc333faa1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d0c58fb4-fbcc-4d2d-8016-7e215282c924"
        },
        "item": {
          "id": "54f23b6d-7a73-4176-9ff7-4280b491c8ac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e011c666-2010-4408-baca-d4b26c5122da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0ae004-0d80-40cd-9ed6-e5b45567cd7e",
        "cursor": {
          "ref": "038badbc-72a0-49ee-97b4-dcc1e0d75f78",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8ec839fc-63b8-4d29-b675-0b5d421a7aaa"
        },
        "item": {
          "id": "6d0ae004-0d80-40cd-9ed6-e5b45567cd7e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "57b0c7b2-44c0-4db9-a7b6-5c2112023fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3af8731-d961-410c-835d-730aacfcd08d",
        "cursor": {
          "ref": "1a619602-f154-44bb-84bb-fc28f150fc85",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f1f31e0b-8984-430c-baaf-175caee849fa"
        },
        "item": {
          "id": "a3af8731-d961-410c-835d-730aacfcd08d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "00f45db0-4344-4f09-ac78-51132e2abae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fb32e2-a095-42f0-98ab-d2da57e3c7fd",
        "cursor": {
          "ref": "fcd6b161-fc79-4918-ba05-c33ba50a573d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a8fad2b7-ec41-41d0-a3f0-cf5d94380c2a"
        },
        "item": {
          "id": "21fb32e2-a095-42f0-98ab-d2da57e3c7fd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f4e945c3-bb96-4605-9133-82032138a993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3cefbe-9efe-4333-a88f-0740f9584396",
        "cursor": {
          "ref": "30dffd2a-4c29-4929-af7e-97fcf70937c2",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "55e45c4a-0221-4f0f-b4cf-122e9fe3467f"
        },
        "item": {
          "id": "9d3cefbe-9efe-4333-a88f-0740f9584396",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3e042af4-7b34-4f0e-9e5f-fe575ea620b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0899bb71-66ee-4ff5-928d-61e33f9add36",
        "cursor": {
          "ref": "4cda44ec-f0e5-464c-9c6a-1a6b07468733",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4fdc8a2c-c783-4575-b537-784e3457707e"
        },
        "item": {
          "id": "0899bb71-66ee-4ff5-928d-61e33f9add36",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "14dbeda4-56e7-41c8-a2c0-0431e4f7bbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ed4ab7-bd9a-467b-b4b7-bf44ea54a891",
        "cursor": {
          "ref": "3a80fb2f-8503-4f77-8dce-13a03fc54802",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f9a74853-516b-46ed-98a2-87075d5fa676"
        },
        "item": {
          "id": "f7ed4ab7-bd9a-467b-b4b7-bf44ea54a891",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c2a4d601-3e74-4c68-83ba-3ccdd3e972d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449a6ae8-89d9-4174-b64a-1f9621015d96",
        "cursor": {
          "ref": "38ee8d8d-0f93-4174-86e2-36cb808581d4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "72cd1310-680f-4fff-b474-e958cc12d58c"
        },
        "item": {
          "id": "449a6ae8-89d9-4174-b64a-1f9621015d96",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3edea2a1-ee00-43c1-857c-7445054dee51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1298053-e978-45da-8966-bc7a72232b58",
        "cursor": {
          "ref": "66e01c27-e1c6-42ca-95f5-c0485d76c752",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "160ab9eb-ff57-4d26-848d-a3a8829c9cd8"
        },
        "item": {
          "id": "e1298053-e978-45da-8966-bc7a72232b58",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "77cd4298-d666-4f50-a191-a2ccd4b56dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd720129-e791-4895-a09f-e858444140c0",
        "cursor": {
          "ref": "478c73da-0b23-4ef3-adce-209b2784be4d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "34dd7614-c583-4330-a817-51783ddbd252"
        },
        "item": {
          "id": "dd720129-e791-4895-a09f-e858444140c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4292c603-3d2c-4168-aa9d-7f4b27462690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0519c3f6-a96d-4c55-9f8a-c33521984fe0",
        "cursor": {
          "ref": "974e9668-aa79-4378-aa77-d39aff351911",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4edf722d-7b97-467a-81a2-c366447a9c28"
        },
        "item": {
          "id": "0519c3f6-a96d-4c55-9f8a-c33521984fe0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "554ef6c9-30b3-40fe-9a83-76cf5600cba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41177253-e2b6-4501-b188-802800d7a048",
        "cursor": {
          "ref": "2fdb1e2b-10a6-46ca-a0ad-b89d53f24de4",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2c1da87c-470e-40e9-82dc-a514cae10884"
        },
        "item": {
          "id": "41177253-e2b6-4501-b188-802800d7a048",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2832fcb3-e326-4455-b805-69bde49b1cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94288851-d745-4651-91a0-c9855004c0e9",
        "cursor": {
          "ref": "b03cb886-a788-4d38-8ec4-e337c41dacb1",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2db81b40-7410-44a4-9a54-8b337dd3b738"
        },
        "item": {
          "id": "94288851-d745-4651-91a0-c9855004c0e9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2dcd3365-68ad-4726-b17f-9f931faa7c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cc57ac-3714-44ac-b667-14b3754a337a",
        "cursor": {
          "ref": "6e2a07df-5caf-4161-ac0a-3c398c41f9ab",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "135c8206-2856-49fc-8818-1da64b7ce976"
        },
        "item": {
          "id": "34cc57ac-3714-44ac-b667-14b3754a337a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ef57a0e5-032b-4cb2-bc4c-e00a72516cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8322ea-6fcf-49e8-b19e-819f0a829e4e",
        "cursor": {
          "ref": "48863dfd-b90c-44d8-adfb-183761a50b33",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "806d752c-a494-4ea8-90f7-17fecc014004"
        },
        "item": {
          "id": "1f8322ea-6fcf-49e8-b19e-819f0a829e4e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "574da30d-4482-4698-a1a3-c6caa381f0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0873545a-89bf-4168-b664-5db954d5249f",
        "cursor": {
          "ref": "31a84e96-3ca1-425b-a6c2-f16c5b36712f",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0a38a7ac-af36-4e03-9bb0-6e8e8428b42a"
        },
        "item": {
          "id": "0873545a-89bf-4168-b664-5db954d5249f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f9245ca1-f257-4e39-9e26-39aa40dd1365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37013e52-02fc-4715-b820-3c0ef2b8fa69",
        "cursor": {
          "ref": "017ef6c5-3f43-41ae-b9e2-bc08bf4b929e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "395abfbe-91fa-4113-a123-3fabdeaf51ce"
        },
        "item": {
          "id": "37013e52-02fc-4715-b820-3c0ef2b8fa69",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "370f3178-34e4-4463-a994-e4373da75f6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691cf90d-5022-45d4-a451-9154dba9cc8f",
        "cursor": {
          "ref": "e5187610-b8cc-49fb-a8e7-715161696041",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6142c7f9-0806-478c-97be-45bbd3b959f3"
        },
        "item": {
          "id": "691cf90d-5022-45d4-a451-9154dba9cc8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1c0a3e2-9460-4b5b-ae61-16b114155bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480ef7d1-c9a7-4694-beb5-c3077976dd16",
        "cursor": {
          "ref": "ede47b59-700f-4ef6-a602-9fed9204b9a9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9a8c7bfe-7a89-4202-9b6a-41e3508ef79e"
        },
        "item": {
          "id": "480ef7d1-c9a7-4694-beb5-c3077976dd16",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d0f0b399-04e9-46db-8bcd-7c7712e9f051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f87b20-7a30-4fe3-8102-60e19507f9e7",
        "cursor": {
          "ref": "c5fb16ec-f5b6-49d7-92df-bc88267971a7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4ad7c27a-389d-4edf-9cd3-7426b89a5275"
        },
        "item": {
          "id": "95f87b20-7a30-4fe3-8102-60e19507f9e7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "749eba42-cc7a-4cc2-b812-ba52a2d53bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a8cff9-1eef-4746-9477-1c15b2b120ab",
        "cursor": {
          "ref": "fb982a71-ba3d-4a92-bcf5-e07c517d2fa6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fcfe16e3-befe-459a-b4b0-eb8b3567b3b8"
        },
        "item": {
          "id": "84a8cff9-1eef-4746-9477-1c15b2b120ab",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5fcc21f1-5b18-4ac2-bce3-55a17aa5283c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85d8cb8-8ccc-4135-bc96-d0a24f234ae1",
        "cursor": {
          "ref": "dbc686a6-2a73-47c1-8ab4-869847837a47",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a0ff375a-9ba8-46b2-82b1-709d008a03d4"
        },
        "item": {
          "id": "d85d8cb8-8ccc-4135-bc96-d0a24f234ae1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5b132d23-2016-4186-861b-48017a1bfbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18c572f-bae2-4c33-8db1-870a5f8e8e77",
        "cursor": {
          "ref": "2877c863-a10d-4ba6-9048-5042eec7c3fc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bb90baf8-5c7f-4918-aad8-e2bc2762763b"
        },
        "item": {
          "id": "b18c572f-bae2-4c33-8db1-870a5f8e8e77",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "64b6df72-3611-4b19-ae05-63edb95825b3",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "77dbe847-28be-42fa-be26-87860351eb49",
        "cursor": {
          "ref": "73934b01-6fd4-4c54-800b-343f2bc281e1",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e45add20-59ed-42ac-ba75-24253e2357e7"
        },
        "item": {
          "id": "77dbe847-28be-42fa-be26-87860351eb49",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e4689c05-0950-4400-9a18-ea4c0650b4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c783c34c-cd81-4d09-84bc-f9b5dd877892",
        "cursor": {
          "ref": "ac477937-79ab-41e4-bab5-3cd66456ffec",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "921df805-d331-483d-8e03-f850311766b8"
        },
        "item": {
          "id": "c783c34c-cd81-4d09-84bc-f9b5dd877892",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7e2c9be5-daea-40d9-a347-6c7121145992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4207369-13d0-4a7a-aea0-1f3fd1159a64",
        "cursor": {
          "ref": "c515cbb1-fde4-4d05-8859-d7b24fd35529",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf503c40-cbb0-45f7-ad59-d05301a53761"
        },
        "item": {
          "id": "a4207369-13d0-4a7a-aea0-1f3fd1159a64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f5db7743-d1c4-423c-bd5b-8895f94b0465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad9e2ed-4fbb-4b98-ab79-d901dbe4b6cc",
        "cursor": {
          "ref": "c3a5aca5-6c83-4bd4-b809-3fee226d4a86",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "21bcab4b-8bf4-47e9-ba96-63e136bdb95d"
        },
        "item": {
          "id": "bad9e2ed-4fbb-4b98-ab79-d901dbe4b6cc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c66031bf-b78c-47d3-9f8d-e8216dc1b44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55a332-9472-4a05-868f-013156284943",
        "cursor": {
          "ref": "af4ac569-96c7-4f81-9b68-ce26b1870498",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5c9f190b-b074-4ab3-91b3-fe153ca28d0b"
        },
        "item": {
          "id": "1a55a332-9472-4a05-868f-013156284943",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "91887aa7-472f-4361-bac3-2ecf1ea95bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e2a82f-b2a2-4217-a35c-d930d2b8a480",
        "cursor": {
          "ref": "a5cbc898-4742-4f7d-8453-b53a6d3c7bfc",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "26f7dc40-f451-4bc0-b00e-5a4fcec564fe"
        },
        "item": {
          "id": "d3e2a82f-b2a2-4217-a35c-d930d2b8a480",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2823131b-ceed-473e-87d1-d7c87be72da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4534681b-0b15-44a0-afc9-08a7b86786c4",
        "cursor": {
          "ref": "c6820068-af1c-4bd9-9c28-3de00a7879c3",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "05acb8dc-db73-4b6e-a3d4-d3f22c73bab2"
        },
        "item": {
          "id": "4534681b-0b15-44a0-afc9-08a7b86786c4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3439436b-e1fc-4771-b24b-8af256be0d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2befda59-bbe5-4dbc-a2e3-547a9bb7f0af",
        "cursor": {
          "ref": "5c4b1a85-fd53-4767-a33f-0e9d40f33ad5",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0e570506-96d2-43da-b69e-6a61a082a63e"
        },
        "item": {
          "id": "2befda59-bbe5-4dbc-a2e3-547a9bb7f0af",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9ba2bd9d-b1f3-45c1-95af-4effd2dc5a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e15e640-65aa-4180-8ced-f1de6d24557b",
        "cursor": {
          "ref": "1c4b1ac7-2283-4af1-a931-2def4431a897",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "54bfed9c-11cc-49ec-b187-922bf576b93f"
        },
        "item": {
          "id": "6e15e640-65aa-4180-8ced-f1de6d24557b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0822f8b4-1784-466e-9b01-dac7c6c3f6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3e2bfe-fa18-44a5-952f-8ed8f259e21b",
        "cursor": {
          "ref": "d2c0fcfb-6b1f-4389-be51-30b3ef4d97f4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5f427641-53f6-45e4-803b-7d776afe7b0b"
        },
        "item": {
          "id": "be3e2bfe-fa18-44a5-952f-8ed8f259e21b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6fbd3a83-073a-473b-b295-4d2b1978baa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acf3307-6ed9-470a-ba91-38e46871c049",
        "cursor": {
          "ref": "80848da1-daf9-4956-b999-d96f55532afa",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5b8dba0e-3e33-4738-8338-419cf55a2642"
        },
        "item": {
          "id": "7acf3307-6ed9-470a-ba91-38e46871c049",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "263c995d-7c4c-4686-9f99-3e9a6f191d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae16e2d2-3754-4faa-982f-cacc5a7a50f4",
        "cursor": {
          "ref": "cbb0a604-fd22-40ac-9841-6da5aeb0507c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b919b454-4c12-464e-a7a1-376008d7f428"
        },
        "item": {
          "id": "ae16e2d2-3754-4faa-982f-cacc5a7a50f4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "af4053ca-fe86-4075-9d69-90614c8a9fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb75d2df-b658-4194-8419-40eeeff612f6",
        "cursor": {
          "ref": "720a01c9-0222-4e21-abe8-1afd6f0ca2db",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c5f9205-577c-47f1-a7f7-d7e45ab3be7b"
        },
        "item": {
          "id": "eb75d2df-b658-4194-8419-40eeeff612f6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "de362232-95b5-4f8a-bdec-40d8bf085758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1daec0b-efb2-4bac-b755-eaa6ef9c5d67",
        "cursor": {
          "ref": "2f03996a-ea65-4dc3-b5c2-adff7b1b7a14",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d4459f20-ea7a-46b3-b08a-e78ac6401f52"
        },
        "item": {
          "id": "a1daec0b-efb2-4bac-b755-eaa6ef9c5d67",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4f99ced2-6e37-447d-a411-1fbcd7bcafc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bff3d6a-b569-4244-8d0e-bc59bbecf088",
        "cursor": {
          "ref": "ca497bf0-b31a-4526-a0ea-f9c7298a4e19",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3167f902-39da-4e9e-a153-ac2e4825df45"
        },
        "item": {
          "id": "9bff3d6a-b569-4244-8d0e-bc59bbecf088",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b95d5dfa-d599-44cd-ad1d-b03d93bab622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0057b58-d07e-4964-b863-6801c1f94859",
        "cursor": {
          "ref": "4d6c9f47-32f4-4d35-a89a-e1481c80d100",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3e6135d4-b04c-4b50-a52a-b5e2d81e02bb"
        },
        "item": {
          "id": "c0057b58-d07e-4964-b863-6801c1f94859",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e5c8c35f-8b5f-4551-a999-d7c1b065f65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19454073-2465-405a-8280-85564b83bf99",
        "cursor": {
          "ref": "6dc3d64e-5754-4944-8eca-ca98ba35432f",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "20b8eb45-9fcb-4620-9c91-b59fe5afa837"
        },
        "item": {
          "id": "19454073-2465-405a-8280-85564b83bf99",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7ec92057-6118-41bd-b8a1-695d06530d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2989d2bf-c3b9-489b-9b25-a73ab414c005",
        "cursor": {
          "ref": "288de2ef-10b9-4146-bbdf-5fdf3df6377c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3b0e8baa-b049-470a-8c80-d778cb43674d"
        },
        "item": {
          "id": "2989d2bf-c3b9-489b-9b25-a73ab414c005",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bf80d3f0-d06b-4e76-a84e-81143d9ab7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ead7240-9bbe-43c5-af6c-3a0c3fb15ae7",
        "cursor": {
          "ref": "1c4af65c-9dfa-4ca8-956d-df38a1b26f0f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "160d24d7-d3b2-40f5-b885-c5a72296869e"
        },
        "item": {
          "id": "7ead7240-9bbe-43c5-af6c-3a0c3fb15ae7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aae3d746-6d7b-468a-a17d-531e48a59607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de25e86-18c8-474c-85a4-4bc2fb2d3d58",
        "cursor": {
          "ref": "fec6b7df-060a-4cda-8abf-8e7db264048d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1d446844-ede5-4f23-81e8-d18915286cd7"
        },
        "item": {
          "id": "0de25e86-18c8-474c-85a4-4bc2fb2d3d58",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "887f1fb5-b325-481a-a545-0c71d842177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29649058-7ddd-4b71-8a01-6be8d09d75e4",
        "cursor": {
          "ref": "c80325b9-c90e-4280-8f88-8e42b3999847",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1963604c-b349-4b30-9179-dbd7bc433b96"
        },
        "item": {
          "id": "29649058-7ddd-4b71-8a01-6be8d09d75e4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1a060160-4dec-4ada-b723-55ea0e8daea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d89e61-cb4d-4bb1-954d-c85816cbd4cc",
        "cursor": {
          "ref": "24ba1f36-47b1-4225-8f17-b66a079057f2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4af3311f-b8ef-4f27-bf1e-03b8bb9a81d2"
        },
        "item": {
          "id": "71d89e61-cb4d-4bb1-954d-c85816cbd4cc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a4300716-748c-4513-8255-cd9139d7ee90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555d56d7-dd54-4dc0-97fa-cddf5ef56b18",
        "cursor": {
          "ref": "2aeec87c-4f02-4ba7-a0af-2e7a4765693e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "94bc83a3-5fe0-432f-85e0-08bb5af9539f"
        },
        "item": {
          "id": "555d56d7-dd54-4dc0-97fa-cddf5ef56b18",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2a1d3a1a-88b7-4531-9967-b5808aa52792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a8e0d9-aecb-4bbf-9422-5b8fb80e5bec",
        "cursor": {
          "ref": "5eeee78d-6c8a-4d99-b007-e6d61905c70d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3443ba15-b463-44ef-92fd-1cff3bf72b1e"
        },
        "item": {
          "id": "c1a8e0d9-aecb-4bbf-9422-5b8fb80e5bec",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5d527879-0b22-4bc6-a88c-0448428d1f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be444cc5-615f-4d89-9112-bb150f2e7d2d",
        "cursor": {
          "ref": "e346c5c6-0ad4-4690-b519-11e52be3f2ba",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "93896928-ae46-41da-9a0a-a20e0204e49d"
        },
        "item": {
          "id": "be444cc5-615f-4d89-9112-bb150f2e7d2d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f571fb84-23c5-4d2b-8883-a1b9ceab47be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bdf55d-2b21-4ff5-a640-813e8040d132",
        "cursor": {
          "ref": "67897f15-b854-4207-bdac-3902e29df390",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2160ad38-f140-457e-aeb3-2902886c0e0b"
        },
        "item": {
          "id": "57bdf55d-2b21-4ff5-a640-813e8040d132",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4d3fcfdb-fb46-4cfe-bf95-02b8f9197958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107487ab-bb65-482c-9070-286834ab2e8a",
        "cursor": {
          "ref": "a0ad37b0-3694-41c8-b0dc-cbcc595fd9bd",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "13370524-f3c4-4078-9e63-954c22f8233a"
        },
        "item": {
          "id": "107487ab-bb65-482c-9070-286834ab2e8a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "010c5d6d-ee87-4bd9-ba39-ad383896f562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f97d0e7-c745-4d4d-a9a8-adeacaa1259c",
        "cursor": {
          "ref": "aff7fcc5-645a-465d-809f-ff9cb85828b4",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b571af04-ad9f-46d5-8263-9261750a70a5"
        },
        "item": {
          "id": "8f97d0e7-c745-4d4d-a9a8-adeacaa1259c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "56e8cfbd-c0af-4b88-98ec-23ef65584125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186c303e-45fb-4e78-aea3-2a2b34a7018f",
        "cursor": {
          "ref": "fe326b6f-4252-4a29-ac45-de07b317d07d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a80822ca-06aa-4202-8b55-0aed8d90362a"
        },
        "item": {
          "id": "186c303e-45fb-4e78-aea3-2a2b34a7018f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d6a3fc21-836c-4cbe-8ed5-b8d7bf2ef54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdcee9a-78a8-47b8-a2e1-b8784d9f3fca",
        "cursor": {
          "ref": "064138b9-6da1-4679-81ff-b8e82d166231",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9cf5c207-2e72-4cba-beb8-8d4496a5c731"
        },
        "item": {
          "id": "1bdcee9a-78a8-47b8-a2e1-b8784d9f3fca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cac76927-a3a2-42df-9234-fa5ce92474ca",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "42c12da5-4d8c-40a9-a453-994ce383d2b7",
        "cursor": {
          "ref": "720c97ef-e7c9-4fab-aca2-07e2e73ff3b8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a4d97672-d849-44b9-bc10-d26381d20f46"
        },
        "item": {
          "id": "42c12da5-4d8c-40a9-a453-994ce383d2b7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0d3ff2e5-7aa8-4299-8103-72eef7d3ac27",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "f38b9f59-a13f-4258-b7c0-b6500c234177",
        "cursor": {
          "ref": "1004384d-8b58-47ee-ae98-50d7e204866a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "63898b78-e211-440f-8591-482f7b0e81af"
        },
        "item": {
          "id": "f38b9f59-a13f-4258-b7c0-b6500c234177",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "877af6e4-149f-4205-8fe2-371d579d1d14",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bb6c64fe-faba-431f-b0f4-44ed6c4ebeb4",
        "cursor": {
          "ref": "a877665e-e509-4774-805d-7486af7b6054",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c8e9e2a-dc8e-4813-a9c2-7e1535abc1e6"
        },
        "item": {
          "id": "bb6c64fe-faba-431f-b0f4-44ed6c4ebeb4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "12626eba-4144-4e73-bacd-b697dcb86c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7143012-e7ad-4d08-8cf7-0e5e95d4e78a",
        "cursor": {
          "ref": "53ca6aa7-4c60-4ded-87ec-e84bf99c68e6",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "75d33dac-94b7-44dc-91e1-55a044e1b259"
        },
        "item": {
          "id": "a7143012-e7ad-4d08-8cf7-0e5e95d4e78a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ef9de1e7-939a-434c-8768-913e707775fe",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4b59968b-342b-46e4-af55-e085b417ba9f",
        "cursor": {
          "ref": "52404d28-a3d0-4d6e-8701-00b17ace7288",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75e6b2b2-0dfc-430a-beb0-ea9dee7d8b79"
        },
        "item": {
          "id": "4b59968b-342b-46e4-af55-e085b417ba9f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5bd05bc7-dc69-4f43-92dd-f38136872145",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a268fb8b-346b-480d-a370-a20df61001b5",
        "cursor": {
          "ref": "6ebf4298-34ba-4cd6-9f07-88242de99e39",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6ed9b5a5-7987-4cd5-ba5e-f0fcba42d842"
        },
        "item": {
          "id": "a268fb8b-346b-480d-a370-a20df61001b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fc1382d5-d909-4799-976a-cf6b67263071",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1508b55d-7b69-4907-8570-39666b5b2b17",
        "cursor": {
          "ref": "f5d49561-20b9-4305-be2e-7b79b2129471",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c57b892b-7add-48f3-83cb-80a37f54e489"
        },
        "item": {
          "id": "1508b55d-7b69-4907-8570-39666b5b2b17",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "70bb2a1d-05c1-42fb-aaf4-fb706b739053",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0991958c-6746-44ac-bf58-b2ebcdf86475",
        "cursor": {
          "ref": "cecf12f7-d734-46e7-8b10-de26d9bfd3eb",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b239a446-eed6-4565-ba04-9359a62c6a9b"
        },
        "item": {
          "id": "0991958c-6746-44ac-bf58-b2ebcdf86475",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e00f6f23-b8c6-4a07-b9c1-07850675e029",
          "status": "OK",
          "code": 200,
          "responseTime": 298,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9a60ce41-ebb0-4f77-8dbf-67de50175171",
        "cursor": {
          "ref": "fe7b7291-dca2-4979-b737-56c81ff0f7ba",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4bb3ed0c-3d30-46c5-8ce4-32128e66cd0d"
        },
        "item": {
          "id": "9a60ce41-ebb0-4f77-8dbf-67de50175171",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "095a8a2e-8a2b-4e4c-8518-7a559923d81b",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "58bb9b50-3e67-4dee-8ef1-78188645d0d8",
        "cursor": {
          "ref": "ddb5c7f9-7421-4739-a933-0233b0d7c7ad",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "270f99bf-9fdf-4445-9ccf-8dd6bf21bb4a"
        },
        "item": {
          "id": "58bb9b50-3e67-4dee-8ef1-78188645d0d8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d22ab52e-a4f8-43d7-8cbb-1b7b24e85374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e2153-cdc3-472f-86b5-b535682a65e9",
        "cursor": {
          "ref": "fe0e0eb4-c432-42f8-a6dc-a8e6016d46e6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f9a0d00c-fc4a-463c-aa68-bf3a0ce522f2"
        },
        "item": {
          "id": "118e2153-cdc3-472f-86b5-b535682a65e9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "39ec8457-771b-4ee8-9ff7-97f5af3bfa51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91e4cbe-482d-445c-867d-29abe9f787e0",
        "cursor": {
          "ref": "8ed6c581-e6c1-4458-abbb-b905016cf825",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c6d14e51-278e-4036-b3cc-90e4c3000442"
        },
        "item": {
          "id": "c91e4cbe-482d-445c-867d-29abe9f787e0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3c004d6e-44f2-46ba-8a3e-9ec463dd4d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba57032-a0c0-49b5-ab6d-ddd25b728585",
        "cursor": {
          "ref": "93b09396-52e3-4a6f-a7c8-7ccd700e816f",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8d365a2b-2ffe-44ef-8ca0-8a116265f73a"
        },
        "item": {
          "id": "dba57032-a0c0-49b5-ab6d-ddd25b728585",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aacbcbf4-27f0-4e6b-b550-c449a27ff5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1756b82-1177-4f68-b48c-15bdb458e001",
        "cursor": {
          "ref": "c8dc568b-635b-42a6-8d3e-785a30f91bdb",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "170c96fc-c613-48b7-ab44-0866ca3d2bf2"
        },
        "item": {
          "id": "c1756b82-1177-4f68-b48c-15bdb458e001",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "427d373b-0530-4adc-b3b5-60761b711ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbed0ff-8e55-4135-8dbd-4e937be89b40",
        "cursor": {
          "ref": "83ad4030-a198-4eba-a301-a45db1ec7a17",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0319fc31-0389-4be6-8c7c-b3c68385c343"
        },
        "item": {
          "id": "ebbed0ff-8e55-4135-8dbd-4e937be89b40",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fa58728a-bde3-4f95-968e-590a50384b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7778ff-cd62-469d-b933-a7de1bbf8b55",
        "cursor": {
          "ref": "3225c7b7-6bf0-4247-9242-346163ad0164",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a216af54-794c-40de-8bf5-527521432c8f"
        },
        "item": {
          "id": "8a7778ff-cd62-469d-b933-a7de1bbf8b55",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1f536406-c382-400c-ad9d-19649e52d688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0925bf93-5667-4cec-9495-01ed4e2abae0",
        "cursor": {
          "ref": "a690e63c-ccca-40db-adc4-6c5aec379b0f",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "00190c1b-8e0f-478a-a1f9-dfc554110cca"
        },
        "item": {
          "id": "0925bf93-5667-4cec-9495-01ed4e2abae0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ad541fbb-104a-4515-8494-2c6e9623a43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54330965-2783-4dc9-8d97-02092d0237f7",
        "cursor": {
          "ref": "b8c9947b-bd04-4196-94a6-ca591003583e",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f8490981-3e47-448f-a8fd-c9f18228313a"
        },
        "item": {
          "id": "54330965-2783-4dc9-8d97-02092d0237f7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5eca273b-7770-49ad-809b-136bb49e13a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc4faf4-3e50-4941-a735-988fdc7fb97f",
        "cursor": {
          "ref": "c16ac18b-e782-432a-8b39-6597e9c3ac9a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9d568592-b676-485c-8701-67f0b1743ef3"
        },
        "item": {
          "id": "bcc4faf4-3e50-4941-a735-988fdc7fb97f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6f41d28d-19da-4605-a9c0-a54facd7dcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d67be1-e6cf-4ade-be38-30f1a6bc7cc0",
        "cursor": {
          "ref": "ab08f8a4-56ee-49ef-8e63-7cda486e1234",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e918bfb0-82d4-44ce-9f20-50645dedcef3"
        },
        "item": {
          "id": "b9d67be1-e6cf-4ade-be38-30f1a6bc7cc0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "833c2d2c-4d32-482e-83d3-05cf5c1059ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1de7e2-23d8-4292-8cc9-bfa33071e185",
        "cursor": {
          "ref": "10eb7f3f-2a2d-4ee8-944f-54807715a13c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "048a2a3a-5a95-4b76-8d78-7d7e80a77315"
        },
        "item": {
          "id": "ea1de7e2-23d8-4292-8cc9-bfa33071e185",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d56890c2-1c8a-4344-be86-8c423d9fb5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ae3d58-eb69-4998-9edc-5e0e6e066093",
        "cursor": {
          "ref": "b9ca1a75-6abd-4646-b171-3343e312d459",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cbf1035b-ff01-40fa-9a78-04c63e20a7a9"
        },
        "item": {
          "id": "a9ae3d58-eb69-4998-9edc-5e0e6e066093",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3f0487a4-255a-447a-a5bf-de48d0df2550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43dac29e-0eec-4bda-84df-192130c714d7",
        "cursor": {
          "ref": "49a7e6df-0547-4fa5-8c60-43c800df5532",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5570cea5-f709-4299-a83e-98023ba89ed8"
        },
        "item": {
          "id": "43dac29e-0eec-4bda-84df-192130c714d7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f4e34db-1db2-4799-ab65-2ba21904282e",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7accaf25-6611-4a2e-bcfb-3a9ddcc751bc",
        "cursor": {
          "ref": "c79a5f49-cbb8-4ed7-8b85-5d9b239a1d3e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0fbad3b7-3d3d-462a-b643-264b2930e377"
        },
        "item": {
          "id": "7accaf25-6611-4a2e-bcfb-3a9ddcc751bc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "759aa9d2-9b97-46ff-9485-3714691dcd63",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ca564611-abde-4c7b-b85e-c917e58c43d5",
        "cursor": {
          "ref": "94bf119b-2ae0-4d47-aee3-33c8ddc4ae0a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ee115d93-5e04-496f-a981-6c87bf82fe17"
        },
        "item": {
          "id": "ca564611-abde-4c7b-b85e-c917e58c43d5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f8ac154b-ad51-4654-84af-a5973692a360",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8432d6fd-5103-45ed-a56f-bb861e797f16",
        "cursor": {
          "ref": "a63a8e4f-8173-417c-87ac-91c35e923dd3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f61e4732-91e2-45f6-ac96-133825e97a0b"
        },
        "item": {
          "id": "8432d6fd-5103-45ed-a56f-bb861e797f16",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ebee18c6-5895-4573-9e3d-21eae76f2ea2",
          "status": "OK",
          "code": 200,
          "responseTime": 394,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8a038c10-bd95-4a42-a01a-16c3f5623235",
        "cursor": {
          "ref": "3556a471-7b55-402b-9d64-abb4eab56fc6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "54f31371-839b-4f09-a912-4605e03807f8"
        },
        "item": {
          "id": "8a038c10-bd95-4a42-a01a-16c3f5623235",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "983d7742-4865-40dc-bd34-512c5b858636",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "bdb5d7dc-fccc-4631-b83c-b87bc3198956",
        "cursor": {
          "ref": "3ba25eae-a90b-4750-930a-fe72d435d76b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd77b824-535b-458e-be61-87ae1d9e5a4b"
        },
        "item": {
          "id": "bdb5d7dc-fccc-4631-b83c-b87bc3198956",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ce35e514-33e4-49b1-861e-a81dafd3685d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56dd6f3b-1899-4c43-b1c0-b42068c060a7",
        "cursor": {
          "ref": "0334e7dd-2c9b-43ba-a1dd-69fad6384ef8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "622459d7-7899-4c7f-9e3a-c980e7ca283d"
        },
        "item": {
          "id": "56dd6f3b-1899-4c43-b1c0-b42068c060a7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c99d0b2b-17c2-4289-b124-f8f3a3d59b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07155e20-de54-405d-b5e7-55638ee3b84c",
        "cursor": {
          "ref": "ff5a7d76-7aea-456a-bedf-dad89eca83d4",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "09ed3a22-b048-4e2c-8309-bbc864a9b16e"
        },
        "item": {
          "id": "07155e20-de54-405d-b5e7-55638ee3b84c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "68de9c31-295b-4671-aabc-fd8e659e4974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b295bc-14c0-40c5-bf4f-5f51689c04c8",
        "cursor": {
          "ref": "2bc3568a-41cb-4916-8f1b-5bc1fd2b44a6",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "66cb75ba-0c1a-4b22-8efc-a766a9040a00"
        },
        "item": {
          "id": "69b295bc-14c0-40c5-bf4f-5f51689c04c8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b8683312-d6aa-46a2-9263-bc523b104752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecf1905-5977-4122-aa70-4b4c9b306472",
        "cursor": {
          "ref": "0fa16d5f-2d84-412b-b1bb-18528bc22981",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bb26cba3-1b68-493e-afa2-dddb9cbd384b"
        },
        "item": {
          "id": "7ecf1905-5977-4122-aa70-4b4c9b306472",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3e28fe10-9690-4977-ab8d-d24dd4d8a9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ab9418-146f-4fc2-a10f-a6a7d36f96a1",
        "cursor": {
          "ref": "91de26b1-386f-49f5-95d1-815e67cacf14",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9dac3d81-29fa-48c4-b946-9c9db84a1b5c"
        },
        "item": {
          "id": "05ab9418-146f-4fc2-a10f-a6a7d36f96a1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dcb83bfa-8ee4-4493-821b-f89e0e9d4335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad336313-64a9-47ab-a8e6-b429a01e0588",
        "cursor": {
          "ref": "d7f58020-ba5f-4703-9a73-73c192c0c68d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "24baafc2-a3c7-4b5c-866d-7633a7ce0111"
        },
        "item": {
          "id": "ad336313-64a9-47ab-a8e6-b429a01e0588",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c3c04a29-1075-4030-a178-321c62fe9111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d081f5-bd71-4a20-9172-187ee4bc04df",
        "cursor": {
          "ref": "0935f614-9f20-440c-bd00-0e2713b0c072",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "25d0cfae-477a-49df-a2ac-9269847489c5"
        },
        "item": {
          "id": "43d081f5-bd71-4a20-9172-187ee4bc04df",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "51b8d99b-4818-4657-bf09-df4838ad221d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832181e6-bded-4ed3-9dcb-a01c3dd46108",
        "cursor": {
          "ref": "ee579c78-7ba4-4057-9312-cc854844c064",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a81b084c-ced0-4e6b-a769-a579d7c12185"
        },
        "item": {
          "id": "832181e6-bded-4ed3-9dcb-a01c3dd46108",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "59b337f8-5daa-4389-9833-bb939774a202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1d0802-c072-4549-850c-82dd959217bd",
        "cursor": {
          "ref": "68108d93-4b0c-4c1c-9e99-fbc599a771cb",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d596b420-3867-492a-bf2a-3bae43083884"
        },
        "item": {
          "id": "bd1d0802-c072-4549-850c-82dd959217bd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4e680a35-a46c-4dd0-8711-ce90cdaab490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d652f8-3797-4024-81f1-726633715e0c",
        "cursor": {
          "ref": "9089c509-3e62-41e3-940d-26f9e45cc19f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0f0e10cb-3bfb-411f-85f6-5369b0d73d73"
        },
        "item": {
          "id": "04d652f8-3797-4024-81f1-726633715e0c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e3103552-c3cc-4121-aa21-b53d8409ae3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df42d7c-947b-40a2-83ad-b037b0b8bf01",
        "cursor": {
          "ref": "5bee9e50-a285-4274-ac91-15bc057c087e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "90fd8df4-d265-4af0-8e6e-8bde66f79912"
        },
        "item": {
          "id": "7df42d7c-947b-40a2-83ad-b037b0b8bf01",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "640bd5f7-3bfb-486f-b360-b58a0976fd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cf0bb4-cd57-4b01-ae91-69faaa48be1f",
        "cursor": {
          "ref": "7c1204d2-a37c-4293-aa7a-4aab318b40b2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c0f2ad25-60cb-4410-8d59-b03516feeb69"
        },
        "item": {
          "id": "20cf0bb4-cd57-4b01-ae91-69faaa48be1f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "634ed9cf-1784-4371-83ac-708c820dcd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80e5a9b-556a-4018-b897-3af476685c9c",
        "cursor": {
          "ref": "f0aae4ae-214e-4996-830e-080c8c4af814",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d50cc45e-7f08-45da-abe8-22650b4dad3d"
        },
        "item": {
          "id": "e80e5a9b-556a-4018-b897-3af476685c9c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "80152d4f-7ab9-47f5-86dd-e3b2dfb4e652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c1e5df-4d83-45ba-93a0-ea3c050c3e64",
        "cursor": {
          "ref": "59b50558-fab0-4bb7-84b5-efbfa9bc5960",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "801cd000-72fb-4138-9732-902293981045"
        },
        "item": {
          "id": "e1c1e5df-4d83-45ba-93a0-ea3c050c3e64",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "28a82e75-ffcb-42ca-92f2-18648d46e38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9789d83-df82-4ded-8f31-501b3e8f8a6c",
        "cursor": {
          "ref": "9bcbd5bf-5028-40f2-b0ea-452f2675c736",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "03ca78d0-7b84-4489-b94f-6c2b82e8ecc9"
        },
        "item": {
          "id": "c9789d83-df82-4ded-8f31-501b3e8f8a6c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "32f0629c-9700-4917-b082-3b006121593b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5550655-29f5-49d1-ada9-8f16845e6aa1",
        "cursor": {
          "ref": "bb7448c0-38ca-4d84-84fb-cff4b8915878",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bdcdbd26-00c7-4b7f-b9c5-5f1567eac8a9"
        },
        "item": {
          "id": "e5550655-29f5-49d1-ada9-8f16845e6aa1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8fc40e2b-833d-4a5f-bd7f-505ddbbd45de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54d6931-8a68-42c6-825b-d9ac855f50a4",
        "cursor": {
          "ref": "e7506cf5-2915-46f7-bef7-2b4c02c00edd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "58226abe-f2f5-442e-90db-b87c9a671ecb"
        },
        "item": {
          "id": "f54d6931-8a68-42c6-825b-d9ac855f50a4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "38812b52-c37d-4c65-823d-52213b851cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df803f38-a26c-4f68-ae40-36a9c327570d",
        "cursor": {
          "ref": "b134c7ee-8b55-442e-a0e5-115f60560f97",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ef267ea4-18ed-4589-b824-a568aea647ad"
        },
        "item": {
          "id": "df803f38-a26c-4f68-ae40-36a9c327570d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dc1f8dc7-16f5-4b8e-b7c4-cb352ae3eb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2440c2a-d21e-4ce1-af45-25d6e543e132",
        "cursor": {
          "ref": "dd26281e-ba57-4f42-81af-510159c346bb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "12750d5d-286a-4af6-8fff-b93b95a878d6"
        },
        "item": {
          "id": "f2440c2a-d21e-4ce1-af45-25d6e543e132",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e05b4c82-80df-46a8-9fd2-f2c904b44f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1201bf5c-16bb-4789-a662-6732253535bb",
        "cursor": {
          "ref": "1ce8a3f6-7a02-4af2-b58f-ffea17408f22",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "aab2b8d3-0d1e-4b30-88b5-7af8f3a276d6"
        },
        "item": {
          "id": "1201bf5c-16bb-4789-a662-6732253535bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8c288e63-f737-45ae-b830-fa571b660f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6058ade-b701-4198-9e3a-21f040057e94",
        "cursor": {
          "ref": "5246f495-a413-4e30-a25a-b6c7814a3edb",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "225946ed-0323-4dc6-85dc-1c934f4d5560"
        },
        "item": {
          "id": "e6058ade-b701-4198-9e3a-21f040057e94",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7865591f-edd5-4391-a9d6-fb238643780d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56755442-8f69-4a13-994d-6500cde4edc0",
        "cursor": {
          "ref": "aa3afb71-4ac0-4ec5-a6bf-30859671cd1a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a8882d2d-bb63-4a6a-9736-37010db4c984"
        },
        "item": {
          "id": "56755442-8f69-4a13-994d-6500cde4edc0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6c7a0cf0-768b-4192-911e-91af08a85356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592f5153-3fba-4170-af6f-76877df8c58b",
        "cursor": {
          "ref": "fc51f1a6-746e-4379-be42-5e36901e452c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a699a490-ed62-4c94-97be-729fe6c610af"
        },
        "item": {
          "id": "592f5153-3fba-4170-af6f-76877df8c58b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f00c5671-58e3-410f-a033-e2b1dba09cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743f3bf4-8501-4417-8fea-0d71caf68447",
        "cursor": {
          "ref": "7c5bf4d0-5a96-46a8-a371-84851c7108f3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5470000a-45c3-403e-a794-394ec93e4682"
        },
        "item": {
          "id": "743f3bf4-8501-4417-8fea-0d71caf68447",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ffafa80f-f75e-4b19-8f6a-dd72da0953e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc5f7fa-86e0-4d08-8c6c-ae3d54fcce2e",
        "cursor": {
          "ref": "f15564a5-e41b-4cce-b8c1-0c4c8ebd9481",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "51d4ca51-9cdb-4b15-b506-a07d5d72f68b"
        },
        "item": {
          "id": "5cc5f7fa-86e0-4d08-8c6c-ae3d54fcce2e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4a45edec-0ca2-4e5d-bbcf-68266bf92508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fdcec-b60e-488b-a65a-5c6b2377556d",
        "cursor": {
          "ref": "1d6ba211-a000-41fc-92fe-fe006146832b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a8401f87-feeb-4454-9e6e-fbe58ba9864a"
        },
        "item": {
          "id": "9c8fdcec-b60e-488b-a65a-5c6b2377556d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7d52b296-43f8-4d69-a484-940daca2c5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f8911f-de19-437b-ad0b-275da3b6710f",
        "cursor": {
          "ref": "b9450583-284c-45fc-8fd4-64f0886b7778",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "df0a4c23-11f6-4d5c-b437-a44cbb25aea2"
        },
        "item": {
          "id": "59f8911f-de19-437b-ad0b-275da3b6710f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab6c6d96-a61d-4d1c-982e-99cc812c5246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df566c6-21aa-46b7-93f8-e4a7814629e8",
        "cursor": {
          "ref": "d4ce0326-36d0-433c-8881-e2b15c01b5df",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b71ae6e6-70fb-4bc4-b606-494f601e2e67"
        },
        "item": {
          "id": "1df566c6-21aa-46b7-93f8-e4a7814629e8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "acb65f3a-3214-48e4-97bc-a35709a3746e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba12b9ab-a70d-4bd2-a255-8be51667b238",
        "cursor": {
          "ref": "f8b730c1-bd17-4bb3-9bbc-48576cf1c4ab",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9410bf7e-fa9f-45bd-844d-7b4c941580eb"
        },
        "item": {
          "id": "ba12b9ab-a70d-4bd2-a255-8be51667b238",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ef2f53ed-4d3d-4c04-8f9c-d33c4cb136ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca3a04e-8922-4e36-ac07-afa40b131584",
        "cursor": {
          "ref": "bc434e09-5c4d-4c23-b298-a6fb877fa8c4",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3c9ddfbd-9cde-4971-ae98-ab1d5613841f"
        },
        "item": {
          "id": "3ca3a04e-8922-4e36-ac07-afa40b131584",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2e9ae04a-7b1b-4edd-aae1-f269d1c79e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491356ac-0d44-48bb-8c31-223f9922cdaa",
        "cursor": {
          "ref": "831f4dab-5580-4d0f-9e52-ae99aaf8fc20",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3478b963-904c-4cde-bfc6-9b9ae90ebcc5"
        },
        "item": {
          "id": "491356ac-0d44-48bb-8c31-223f9922cdaa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "33b34f6f-9372-4a1e-9c88-fac1be268301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93844032-b8cd-4c97-ae74-15136acdc01a",
        "cursor": {
          "ref": "8c8bd588-ad1b-4421-8869-ffef1d1f2043",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9b1ff943-e149-4ef0-8ff7-56f7a911c8c7"
        },
        "item": {
          "id": "93844032-b8cd-4c97-ae74-15136acdc01a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8558eaec-97fd-4265-aa83-d9db04e24cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e0fea6-0704-4621-a989-9e8b439af76b",
        "cursor": {
          "ref": "8b95c009-072f-499f-aeb5-c9b26137ed67",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f4d9fde8-633b-461c-a27d-6f0fd59a7fe2"
        },
        "item": {
          "id": "f7e0fea6-0704-4621-a989-9e8b439af76b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "94fb9f16-3bb3-4931-8913-a3df55fe1de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0286643c-6aac-4b55-a836-b245892f01e3",
        "cursor": {
          "ref": "49d52097-b00e-45d7-bad5-264086f525ae",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "782ea7ab-9ca1-4e40-bc7d-734ba52fce23"
        },
        "item": {
          "id": "0286643c-6aac-4b55-a836-b245892f01e3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "19a79360-ab7b-42aa-99dd-a19d459310eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b207b4-4a29-4f52-81c6-f53b9597410a",
        "cursor": {
          "ref": "a200e03a-a82c-42e6-bd92-a0fd2477b441",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "93b1296f-f9f2-403b-949d-5f120b2a9e12"
        },
        "item": {
          "id": "25b207b4-4a29-4f52-81c6-f53b9597410a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "133a7a17-22cf-4cc2-a3de-05fd30f73174",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b35d15a6-d0e6-4472-92ed-dadb21643a01",
        "cursor": {
          "ref": "cbf22cd0-a585-4bce-a4f7-50b743c054d4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "884d7dee-1f13-4b0b-9e6d-127061531274"
        },
        "item": {
          "id": "b35d15a6-d0e6-4472-92ed-dadb21643a01",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1f1096e6-eb8a-4b7b-9c8e-28c24e5aa3e7",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "802586c5-f438-41cb-aca1-f4e8e8f9509d",
        "cursor": {
          "ref": "0a479f6a-7f0e-465b-a479-d976029afbf5",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1e56e646-6a81-4c42-8f8e-784ab75be692"
        },
        "item": {
          "id": "802586c5-f438-41cb-aca1-f4e8e8f9509d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "03e7aba5-a9aa-4b1f-ad7f-ed1d8ec9c8bd",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b2c190-55bc-44a6-81ab-44061c090ead",
        "cursor": {
          "ref": "480ae5e4-2e3f-497c-a6c9-7d329222ea51",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b40d3129-3d5e-4895-9494-9d0c73b20802"
        },
        "item": {
          "id": "14b2c190-55bc-44a6-81ab-44061c090ead",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a868d4ff-0cf3-4f40-a06a-6a33cc0527bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b2c190-55bc-44a6-81ab-44061c090ead",
        "cursor": {
          "ref": "480ae5e4-2e3f-497c-a6c9-7d329222ea51",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b40d3129-3d5e-4895-9494-9d0c73b20802"
        },
        "item": {
          "id": "14b2c190-55bc-44a6-81ab-44061c090ead",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a868d4ff-0cf3-4f40-a06a-6a33cc0527bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9d24f9-b609-406c-a9cc-d0507ad7b8e5",
        "cursor": {
          "ref": "8cf7ebba-3635-450f-b778-9462ddd167f1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "149abf53-dc0b-41d0-a554-54fa23014a66"
        },
        "item": {
          "id": "2e9d24f9-b609-406c-a9cc-d0507ad7b8e5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b455c6ce-2577-45a6-964c-70963f71d75b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bcfff2-864c-432b-ab4f-5e4dbe9bee58",
        "cursor": {
          "ref": "b7c6e753-a360-42b6-9598-afcdb884edad",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "24374cb5-d969-4a09-a669-3e2781e242c1"
        },
        "item": {
          "id": "38bcfff2-864c-432b-ab4f-5e4dbe9bee58",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "95df92e7-8cdf-4660-b800-f8671f869f24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}