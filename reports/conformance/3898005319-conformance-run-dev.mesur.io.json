{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1b14f1e0-e721-407e-aa13-5f897dcae9ce",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c23cbe55-8ad5-4f85-bfec-57c8a5172cbb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e51f30c-55f9-4c94-97ea-629ca19cdc9e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "28a25a6f-f42c-4094-8321-99986a241658"
                }
              }
            ]
          },
          {
            "id": "c2dc935a-c3d8-4148-aa6e-41c6276022c2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5dfcd948-491f-45ca-96ac-c9f4bc172583",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e4e4529-7b2f-4850-bf53-281d5f3e9b07"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d8b7f6a0-e7fa-4928-8c26-f1248a07330a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "07ac697e-3815-42ac-9133-792883f2cc53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b9d9e81-a534-448c-94ca-dcf1d63e3f5d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba57c9a0-2774-49b2-bff6-1c3272c631e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6c6e60e-67c6-4933-903a-5ca7935fa1f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cf24724-1695-4d13-8b5f-5c48f181579a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca5209a2-40ab-437b-9fb8-ffa4803f72c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f0b3d82-a8aa-442d-bf48-65d23f81125d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cba02998-b6e5-4f7c-8c93-0127831a91d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f85734a5-2746-4f0e-86b2-54530356d6ee",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e535caf1-2728-4319-85ed-b9600328ce82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d5582ca-bcb8-4969-b3f2-96241c797e89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98f3640d-e4ed-4d69-a18f-91eb1c018fcf"
            }
          }
        ]
      },
      {
        "id": "e3c8e862-bdc1-4f8b-8229-27d597907684",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d38b9079-cdcb-40fe-9d94-0c2528fbd977",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36fb9afb-c83e-403f-ac1f-c58fa54fd0f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10dbd57e-ad86-4c16-be97-10b60824d5b8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644637a2-a64a-4779-bca2-75a837e8059e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d178bb77-fbe0-460f-9d9d-371be0a460e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09dd2a3-25ab-4ae1-b6a6-1f9d76053010",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8505527d-c3d3-4214-a077-bf3547623624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c125c1cc-ee30-4667-bf8f-84ea95bc3bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01734d9d-a89d-44a8-b707-63ff31a5d982",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cab90d-1814-4db3-a80c-fc57584b09c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5aa2651-d6aa-4070-a383-0f4baab22116"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "802fb80d-d18c-4934-b8f4-0657edeb700c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1939750c-990a-4edb-9781-44244735a034",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb7b1b0-4d10-4841-92e2-3f99f6e0d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6963a68-9886-4b58-8bca-eaa198435887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d92fc-b765-4c74-8eb1-d215d2dc6d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7889a5-8c49-468e-a151-0244c38afe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8e0dc4-167f-41cb-b3a8-39c82054798c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa18736e-a600-4e2b-9102-ad28ae081686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4acf73ef-ec96-4a22-b7b4-d1470f67f9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59829a46-fee7-45d2-94d8-b8c2e2cd34da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "641b1de1-9df4-41ea-ae54-dedd406fa73a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c64a5f1-df7e-4b37-bd0a-6c439a81e9e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5b1715f-4411-4948-b753-de5b2a5e4299",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91c7e768-4c8c-4e42-b06a-8ad9ff77e073",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e5dbbfc7-586b-44ce-b73c-7c652efba448"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c645163e-3c57-4d76-b1b2-233714ace7a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f7d3988a-414e-4c06-84ea-17a757f0f184"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "833f46ca-0f99-4e22-9adf-3b17c249921e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b262b555-6ecc-459d-8bb5-dd8021faa17b"
            }
          }
        ]
      },
      {
        "id": "ac62b9d5-9a90-46eb-a1e3-b1a4dc5cc0fa",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b201dd30-84cc-4886-8fa3-df1cb559660a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c004968-8963-41e0-81e5-deb5d012a237",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b812e3cc-b774-49ee-92b3-e1c1e7060f03",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e8d4b6-e759-49b9-a5c6-2f72846a1546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b414d2b7-d58d-4310-b490-608c45a9c576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7d869c-f579-4871-8ada-d6834e4c0798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f128b84-ceff-4515-92a0-96d3f423b74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b615ac8-8479-4857-92db-79f7318ea98f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e179b7e0-faf9-4278-a4be-aff7bb1ffe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da63402f-d8f3-4d55-b515-abe8ac293818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778261a4-429f-418d-a202-1be3fd8d7af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4ecbf0c-b9ff-4cbf-a7be-0f4e190d38f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09502224-958b-433f-a395-6ed9374b181a",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdde39d-a9fb-470d-8922-2d5db02006c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004881cc-2694-46e2-b04c-ac0c167631e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596c5c97-c861-4027-9d59-bee513195d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6e582ae-73bd-431a-8e20-7ec15a5d8f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cc94d4-b511-4ffe-841f-076f23c3f2ec",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eba862-cbcf-46cf-b6eb-b2dec33b09c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d97f42-1c24-4648-a09a-c2cec26f169c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2916e20-e860-4c7d-a0e7-44e6174ef59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6f8e915-1334-49a8-808a-2d627f6ea2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6610d789-4e97-49f1-89bc-53fd848fd252",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df368af3-50a9-4a9e-9eb2-e5791c7bc8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e175e4-c9a6-4efd-a5c8-fce7f71c8733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a905d5d6-6eae-4d56-a47b-740df5d10e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "978c82a4-a641-4d13-8d10-38b022448699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad5005b-b72b-495f-bbb3-68d3ba444d7a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa453e61-87a3-4bab-8ccb-0b0c11109fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03a3637-c5cf-459c-99d5-c69f561a93db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1165d7f1-3a9e-4402-b9c7-b0d4b1e73621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1527546f-bb62-42ce-824b-c906d3a66023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b66c26e-970b-4d1b-a466-7bd0b16d4337",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f8d8ae-dbb9-4014-b1d5-083b0913c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a386078-ba27-489f-a0b7-623d2223390e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da4476e-b42b-438c-a192-f8875086a3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87a10aef-c269-456f-beb3-8d9ddd8aa5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea43d74-1891-4023-90cc-73373506c5cb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85c0ee4-3184-4a61-99d6-ff68658b27a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa7b65b-51bc-4866-ac97-5c826425f2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65f02bb-0a80-4e33-a2ac-e5280e43fe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26ca3b66-7ef8-46d3-bd1e-d88ee5bf01ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbee7fa-de64-4468-b7b7-26dfcf6cb311",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18888bfd-01ed-40a3-a429-a3ad029d3d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d4f129-589d-46d6-8026-2a76bb604357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978b6cf7-f8d6-4f9a-a491-a401a2e7bde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cf93b90-39de-40df-89ac-67849b72aa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875d3286-5143-4b3f-b896-e9db17112281",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fcba8f-41f2-4e1c-b64f-625f1f67106d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8296ef60-c937-4380-84a5-934697b20415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278317a6-aca8-42eb-947d-e3bfd5d15824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e93faef9-745f-4370-a9e1-3841b636012e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e83de55-4e9d-4669-a0d1-e8b4661e1cfe",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f40198-eb32-4f51-8e6b-bc41cab82094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4840fd-b98a-4088-8e08-9280ce039920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c9b5f2-204f-459d-8678-f340f12334e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84f91234-305b-4584-aae7-ad17b934b665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42eeb256-b791-4c9f-bf67-92c462491087",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec160974-3beb-44b6-ae55-48301d178544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1d8fe2-2727-40b8-8c6b-232b6649543b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7a954b-34b0-45d3-8891-f51f58607e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e6f0134-bfd5-491b-82ac-3d3db0673e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33224fd-ce05-45e4-b20c-3b581909142e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7425dfb0-ef12-4d18-9f62-bd79b89c1da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8598b3f3-5ee7-4ad0-b3be-f69339205496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511f502f-300f-4057-bcf4-cb602a053037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2062a5da-1cdc-40d3-9299-8f2d3116c926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cb4163-ba64-4ed5-a07e-89e5c1694a01",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f2a71e-ad2d-4f27-9a37-aa905776007e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213faa01-0a70-4397-944f-135a7995aff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b0be6b-4e14-4c73-8df5-485882262f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "31dfa629-ce1d-4511-95b7-9b9272bb746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87847ba9-305b-4bc9-9537-76941d66503c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef82c617-1e86-41c5-832a-cce301cf047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54a26ff-bc00-42f5-a081-b7d21a728e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d710dea8-4407-49bf-b3f8-d5f7cb30e810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5e780c7-b15b-42dd-b5f4-4a869557f219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8cfa58-14d0-4bfb-b29d-1fac5c5c06df",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59763fb6-a261-4821-aead-60f31d48406a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a3b2c7-d194-41bf-b9c9-8ca46a7834bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273b739d-c9a0-490a-a573-9d2d0b5b5fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da1a6f5a-90e1-4308-a4ad-b50a94611be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec972bd-02da-4a97-ac9c-54f5ec7a9e84",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d877d4-b357-46f3-8ded-0fb8d11c9cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4026bfd9-1bda-4e82-8e1d-bfb9d599d1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4133b63d-8e17-4e3f-9bd1-fb6b8f3cf1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f05124b3-ad40-4a16-9d82-029154c58763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbee91b8-82d5-4c89-b610-b7288de69201",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5519b3-d636-4057-9f27-2757cc587095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f1eae3-6596-4584-af3c-4fbed27b67b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0a98e0-3795-4ef1-b662-cb3a34babeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d0205d9-bc04-41ae-a8d9-4ed9a4dfa47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f482abe7-bb1f-4209-b605-de6c1d27e042",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075af5d2-9a6b-4405-b66a-b791b499173a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4ab183-6219-4246-ace7-dd959ac0c1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce426b8e-de17-44b5-bae6-c8c809c3d2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d87473e-f78a-483b-89f8-86935075cfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc176bc-f3cf-4ca8-bbfa-b713cc7a7048",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b2aeb1-3849-4885-97b9-5b232e0eb622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d227818-2160-4a3b-891c-b3505c646338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b40ca49-e7a8-49b6-b78c-0f9fb71765bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "407a211c-1afd-4373-8da8-a64e469e81a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81900649-e361-4193-827c-a0a38f92c194",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e007c6a-d047-42ef-aaac-9d9357f47a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c523938-4091-416b-9693-54010c110b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dc1304-73d4-4e72-b481-17b8ac505438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a39d2e-6d1b-49ec-8a38-f31dbc9fef43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041d3f69-a966-4f65-9fe1-2f6168499d3e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ca1419-7d29-47d8-9a00-d34ed30a0f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e342b0b-eb02-4e45-b549-52859e0be99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096e65a7-2fad-4218-8e11-bfef6215dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca453e9e-b952-44c9-b578-750c05448d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51a93e3-b507-4f68-93a4-a0169b538da9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df88f55-a68b-4cb7-8d7f-9a4b95c11544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0263efe0-af17-4aba-806f-529aee45cdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6956818-82e9-4d52-9bef-3c97efeff902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ae2969-5fb1-4c94-a6b7-cc772b4f200a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76906362-8ce6-42d4-bdf4-2e3ac0ca204d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44261b59-4f4b-49a9-bb2c-39729fef5631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b874bc03-a903-4026-836f-ae67d1fc7249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b56b1d-e61a-45a2-9a47-2ab43db33878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7150fb-85bf-4129-bd48-54d384ee5fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0aca59-5813-434b-bfc2-203d9a4d8723",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af455b0-4a00-4288-9e93-024915acea09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1a1e84-9195-462e-9278-8e4e74e095eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f12927-1b28-4240-955b-fb8c9d222840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e093b05a-68cd-4bd8-a640-ee15bf9c4bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45572e8-06c3-4fb5-94e5-611fff92dd93",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6572df14-b285-482f-8614-10cd1934629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7eb52a0-1d5a-4441-ad3d-9ab1d04e6d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def7b492-a840-4546-9c5d-5ced17772cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "647ca167-942d-4d52-b987-008e7c6ca089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe0969-a5f3-4810-bce9-1d2dfc7f9ae7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47865d7-484c-4a0e-9458-de72925e8043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f4d77e-586b-4436-ae14-b2b2011141a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1187ca8e-e65d-40b6-8dcd-96494a972967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "054aa64a-9927-44b8-b9c3-a9414bb98f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db20b23d-7a6f-4874-86bc-7f05fb2eb02b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30a8493-c970-4fdd-9c81-d813db79acda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ff7350-8e08-47bc-b83b-88037a05dbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6adb7f-9a9a-4b8c-ab55-f8f662c61c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e864cb4c-5533-43d2-9ce1-abdf67484c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b1b6a-d224-406c-a66c-c17b8d0af4f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680521f7-5d63-4ba8-8cf5-5c8a9db12644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0380275b-ed75-446c-857c-da417bf253c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8e1289-4251-4f28-82b8-7d9380a02200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e0fefb-febf-4e63-9355-cff83cb88617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ade5689-b9fa-4ff6-b068-c07dc715805b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8819a213-c4b6-49d3-b33c-e683f8845a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfef1ca-8482-4a11-b645-9565e6eae094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f794453e-4126-43b3-b6a2-8d42d1730463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "246aaf3a-ff11-4515-bc42-a2a728d21571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c42d013-23e8-405e-9446-74f14d78d0d2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b158bcfc-3ef9-486b-8035-35eabfdadd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f5ae9c-40d9-4a99-b220-b5c7afef02e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81539aa-811f-4f16-bdae-0b8e30b83ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8495d099-b5ee-41d4-8bab-79af2981cf49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04126e13-7ba4-4987-8c73-2ad34df42c61",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf97bf3-7385-4a3d-9094-62f70ca1d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7060fc07-175c-4bd2-8b80-6e1c6c323d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e56b65-7fe4-49da-b52f-83912e7410c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a69a612c-395f-4d18-b547-509bef8d4025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ef9bd4-1dd8-489e-92a8-61d0979f97c6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b1c76-8a0f-488e-bf74-fdb609f01755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1b88dd-153a-44b8-b88a-f411530049cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f51e84f-b1ca-45c8-88c0-09cfd14f555a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66d19dd-7b6f-4ca1-a226-8e20a866ecec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2dd774-05c5-4326-b5e4-ebecf801689f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308e15eb-0603-4214-adc2-3df28d00b74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fec6c92-aa75-4410-a219-44291ca08aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fae20c-f77e-488a-be14-9b429a34d24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a879528-5600-4574-bd05-436ae396f820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67367105-cb8c-404b-91fc-62b3840c075e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a85e30c-3703-4572-b748-d453788541d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69bfc1e-cd8c-4f13-90ca-0061060e4ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c10d78-5c1b-4bba-8cc4-a570b456c694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e451b1ba-93c4-46a3-862e-ae7f25d0137f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0744391-f80e-4bcb-a992-ce5a7bf34b10",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d90a5-5392-45f6-a735-6e5fa4b87c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd5e142-d9da-4ba7-80c2-6eb17f1910f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f6f062-95bb-4faf-8f89-59fbff719608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "147b2db7-77f3-45c2-9250-08830a3f5c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a21e6a-d2e5-47ec-91a8-5c92f260bf59",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8757d2a-8d39-4c98-b681-81f48f989c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6706452-b3f0-495a-abc9-37e0260b6fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f98d27-600f-4de2-b1f7-9486a5d75f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d112c1-ae91-4789-8ca3-21701a2f5286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb47ef32-3b6e-4bee-b1b3-07195f2cf992",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5279c2-e2bb-4d14-8893-f9b83f3d59d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09d8e52e-81ca-4c5a-bd3f-9059063f103e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a3d18-508b-48f9-9431-1b72d8969091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f86c485f-b1a8-446c-9328-b7c8d9055a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36657e09-17ae-41b1-80af-beabf76e9377",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91964a8f-6eaf-42e1-ada8-7d35ea5f0666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd02faa2-c1ad-48a2-a956-645068c6b113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9974c537-97a1-4fbb-ac4b-4a564eb05278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9189cd99-61d9-4875-8ebb-30a6f4d14d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2da3f74-4f30-4675-9bda-4bbc0df01fbc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137eb656-1e60-4f6d-93a1-ae8e99513acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6f34b4-9f9f-46f4-bfc0-a63feaad3b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224fff42-1ef7-4f10-b4bc-df6549c1874e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "db3d17c5-1a62-4753-9067-a7ddfb7cdd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb82f41-6f92-4cdd-b943-c652be16da8d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3d76ca-10a5-4024-8a47-5ad6a752426f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13df8d3f-2a74-42c4-9b2f-8522c2a6f6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9011910e-76c9-4deb-813e-6e4aeba70d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3050252a-6888-44ae-a3e5-826e32092f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3dbd2f-145b-4516-9215-0d4a6d04faaf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f052f957-f02f-4689-8fb7-8865bcdaf669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566f50b2-f7a5-4dac-b92d-15639fa0ee8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930a11ee-9a50-46fc-a55b-55059743f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d51227b-071a-48ad-9675-47fd397577aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5603749-e599-4378-8707-b84fd79721a5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe89a78-3b26-4e30-a748-1a14430826a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f36eb0-3bd6-4f27-8fa0-bb65a9b0e9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94856fb0-b534-48dc-a734-e8239a4879cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddc7cdf-9584-4bc8-8a3c-b7481260cba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be76408b-f930-4dba-bf20-a42d0cd9d046",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece19b55-9f3d-4caa-9423-88a4eb9ee4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f92f15-480a-4b28-bba2-8c9286a94197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ef45cd-7776-473c-a811-d2aa40c8152d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9d2a5a-4a8e-46f7-aa5e-d9510085d939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1220d57-dccb-439e-984c-3cad7612abc6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5063fa-7e8f-4eb4-b136-a85935e2685d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a314f1-c960-48ee-901c-a555b55093cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd06f4-a78c-47d1-994b-7e78b3755f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "45847880-cbee-40e1-a05b-e6b65684baee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082bb199-b25a-4f8a-89ac-7226e32c552b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6132efbb-01f2-4e77-99a4-2acce7e7623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5cba6d-6537-4121-ab22-a50d53a390a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164de61b-3564-4cf0-8f2a-faff64c81699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa75ca3c-1460-4db5-b015-cf5818d97ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d37f8a5-2456-44c4-be9b-180d366f4247",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a08174-23d0-4ba1-adde-573a964eabc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5932ba39-3bd8-41f9-b550-015719ee3826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbecc8f-da53-495b-9fc1-4dd4494ee286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30c7b7e-cd38-43d8-80e8-77c309b7f632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91abf267-d738-4d12-92d7-d093e8c354bf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11b3d7d-4123-4ec0-bed8-a3f521cdfc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d3d42b-dc3c-4184-9bb5-ff79a34a9bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ed5136-2e57-4d3e-95da-a457a7e1bec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b905a6-2180-4f44-956c-efbf6169f450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaa849d-bb8b-4b25-8458-f0ec8f03570c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450bf8f7-b8bc-4f76-a35d-587163954778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318689df-f570-4bd8-9803-7fd13f6f17fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec81770-c1c2-4993-af3e-845bdbf77fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f99429b-8e24-41ce-8411-5aa81fe36615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab677d0-a8a7-4834-a7e2-97fd18f43cac",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b170481-72dc-44fa-8d14-42f741d980a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996abb2b-9a47-4291-8139-25a21c6aa824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1963419a-02cd-4e7a-bae2-62f6176ef19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d25211-d865-46d7-989e-33efb962d5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f9876a-532e-4aef-a418-16b23da2223e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72709c3f-9394-43e0-84c0-db812b50ec23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fac76f7-43af-4b77-9f92-a7056b22d4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37653c24-f19a-4225-902c-5cf271375bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81b49f36-8225-43d6-91da-83a4d10ee302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ed3273-74aa-4916-b2bb-6539f5c2aac5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1384a5dd-773a-4fb5-be8b-11bf5ed32d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dafa1c1-72c8-421a-b843-67314e2f6e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391b8434-c5e1-4ade-8021-31a6d2d628b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82505493-5dff-44ae-9c23-b3c4b10b9eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeb1115-0960-4a05-b04e-9c92afceda18",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d93e68e-1413-40fb-a60e-9ad5b5d929cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a40889a-c189-4cd2-90ac-5c28ae3e25dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e392fcb5-f256-4dc9-901d-25c3ac532e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce805baa-a213-4162-ab7a-b69ca4ea4ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85bff7a-b4b9-4a45-ac42-bf8af9cef99a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da495950-0f21-4362-a67a-c49b1ad162b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0361bb-ea1a-4430-9913-a612ccb07a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fca942-be8c-419e-83bd-f5b24e1a4ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc46b4f-bfae-47c5-ab71-984c0704988f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64325e6-3b5d-4020-a0ce-778f978c2a75",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46c785-a832-444e-aa99-31fee1e36d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc6e79a-5bdf-45b9-89ed-7cc7c5da7807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289132d3-f730-4a73-a04d-db754980a945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62c1829-20a7-4c75-bc88-a2fb1ee36621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ed171e-9736-4d4b-85ec-4f86fe815cc2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199d0d5e-fa73-4b22-bf54-663d031c131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad1b3a8-9284-4661-80b7-97563f361cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c2da41-1594-48bc-bcd9-8aa7aee87b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1065cc06-1755-49c2-a2ee-2217b3c51d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ba8759-65f3-43ef-910a-d674bafa16f6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb9e591-1878-4a05-bde6-c556da5da3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e382784-db2c-4b65-8808-529ac1ef8078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbf3d8a-3d3d-4d79-96da-57badf35b275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b1bef2-50c5-4d09-bca2-70fd40cc20bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3d193a-ed06-4401-81e5-dc3b2356306d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8cdd62-84cf-4112-92cd-25c6d7cb2dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec8734d-c6d1-4cd5-a1fb-bfcabd7e1814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9afcbe-1983-455b-9e0f-d0eb09c0864b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f7e708-4a3f-4377-8144-5d8b295c0f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d380473-bfed-467a-a633-ebf937a1743e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12dca66-a0af-46aa-af1a-402e8e29d6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02652427-0374-45df-9094-4147991964be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1125cc14-8550-4a93-b5a7-ad0e5a189cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a246a6-bacb-4aff-9bd1-c61014108a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a827b28-03f2-49f6-b80a-03b5f3df64c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e507f2-749e-4c0c-b29b-6c0a3e2f789e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046c97a6-dc74-46c4-999a-004641425203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1491c7b-f926-4fdb-98ac-f55b34d0dd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd5b7e6-cfc8-4bca-adb3-c28c9b8ed7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762d7045-5fe6-43f7-bba1-e3f659548d54",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818f8e26-e0dd-425c-940e-db8174a3f55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cde2f65-77f4-4517-89b9-9b49622b9eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcdba13-ee1c-455b-a033-37c78672ff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69c50d6d-8b72-4a7b-a840-d01e8e71184a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06023b08-e72e-4a5c-bf65-479d6ca23f49",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3cb2ee-b2a2-4b10-b8c2-91531bb4e7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8341619e-7ccd-4c0d-9dce-b9a02340dd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1103f865-f37b-4f5a-be3c-d2d57ce2d594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8976bcc-4dcf-4be7-8d3a-2daab2be7751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4659ea-208a-4342-965b-15a4cbfce75e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75c8852-06a0-4424-bed8-bc4b48f63dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee8b92d-cee9-4487-ac22-d7c9b3a315b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eeb9a76-fbce-43e2-b59b-4fba21f3b03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "250502dd-a53d-4fa8-be44-00e0e21174f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a10d777-6b66-428a-8076-a3d4278cca74",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d328f1c-7c82-4517-9e2d-41ec39506f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f93a1c4-90d6-4598-a812-0f3a9bb4a8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b222077-6983-41d0-b27b-7ef8e3eaf645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b6ccb9-30f8-41ec-9b3d-bbddcc01183f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0bb0df-0ebf-477c-ac55-83cccf708964",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a873d7d1-1dcd-4b74-accf-5998b67870f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f2a201-8f1e-4a80-b2f5-91a8a214754d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06371127-c5e5-45a7-9c40-92a6b19ca404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "50cc9139-f0e4-42da-b9d7-bb9bd084f00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fea8af3-a080-4bcc-b6a9-56b96716fbcc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eb6372-79c0-45ad-a73b-7d6f8657d94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfdb7f9-7064-4598-a526-50eab79e1faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab82364c-4061-4787-a624-2e5d07a01797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d451a9e-4e77-4da9-af50-5b390615c8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9473c1-a31c-4ba3-b79f-b5ad971e1aeb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab75517-1ba5-405d-9362-cbd7cac84e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957e31b4-3b10-4bc7-bce5-8ecf7eb96229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90ef1dd-177c-44aa-9062-52a3ebf2dd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8c1abc-4e4a-4563-865c-41c4c96d5ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec25310-11ce-4bad-aa56-46111558fc30",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc8225e-6cc8-4e45-aadd-ba708c9d486f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6479690b-c859-43d3-b474-bad0cd77d15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0187e38f-3890-4abc-ab48-fe64c3d124c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be4efd7e-bb09-406b-847a-d18eb54eb293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404f527a-8dbe-4ab7-80e9-76389f1223b5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f329235-03fd-4106-b155-b42efe262778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7356b9-ef4d-4333-b723-8da21922177a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae085bd0-06c5-4cae-ae04-e4c5b5da9283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b091074-5116-4d31-b4e0-2abdbde6dcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2de6ee3-0ddf-40e7-8c18-3bf1258575cb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e85ffe-486c-4465-aad8-942746eee5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18500722-b298-4f5c-ba69-1bcc137f7a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e24ac02-773a-48d6-80e2-9868c89ed738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b984f9-6c1e-4abc-81fa-1cdb22eb40ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23629db-0240-4998-a1b3-343bf2bb2be9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f7066d-80d2-41fc-9d68-71d18cb8dfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbe55d9-b8fa-4110-9940-ad7fc052dca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9078dce-bf73-4114-8137-c1806646bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "040a6c8b-0388-43d2-8e89-c6ee91bdcd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a26c67e-2c39-42c3-9b94-c5301f1f38ea",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62f4fcf-b151-4fa2-9e9a-6a8d91811364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6920e6f9-f962-41fe-89d9-2e4e53a22316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbe7f14-9a15-44cd-a237-a12eb0455483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf09b88-4d48-4a01-8d6d-e8ff22043280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea49a7e5-0643-415e-abb5-39cf4936ff9e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c33097-ca46-4947-9653-65750df72e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c132e12f-b017-4f03-9e02-50006ec5f25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e1f84d-c987-41b8-8688-362d02638d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "379456e6-668a-48f6-913d-15cfdbabf785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d184fb03-26ce-4f79-ad58-df8a40e2b8f5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b057ad-cd58-4057-a16a-15d0d3b7e014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91355e36-eb27-4b25-9685-6fd59a0df728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63ab7c1-a814-47d9-9faa-50e33e1a0db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "821a2fea-4873-4653-bb6b-43aaf9c70f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13865d26-1c45-413d-8049-4dac1f96c75d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7295771-4265-4e1f-8bcc-0a19ac7f21d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3643d1-8084-42a5-8e9e-1fc8c7de85b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04925a02-f74e-4557-a530-cff148b0ceeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebfb9cc1-38f8-43d1-8b3f-ea2a9a9d82ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29000505-bdc2-4885-a6d4-87bae6395f76",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9795bf-f855-4ea2-8cd1-f290c0568cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4218aaf-f0ac-414c-9491-bf66fabccfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99d4f23-c0e7-432e-8e33-89bc656ea986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b36d93c8-d6b7-4635-9005-7992080591a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1916a5-828e-4789-b3f0-a0dd761106b0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b49e1f5-8445-401d-9d31-552e95c98734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a05e65a-ea92-4bfb-b980-9c7199c9fcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47875751-41ad-4ab3-8e38-18b2e4c56ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e685c857-3e99-4ed4-b2c2-2e0681224c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae72f5b-c0a1-4352-a3d1-d2cf965729f2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6506985-578d-4c0d-89f7-2210e3363a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924ad88e-8e36-4ed2-93b2-ed9345fd26e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982c6914-9eba-47aa-9bc4-d9164f80467a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d458b812-8513-42c0-a2ff-e9ace7c39fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29263ecc-af30-4fbb-a420-10fc7d4dcf97",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbeb4b3-645e-4304-8cb7-7b95c71bf5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f35418-6fd5-425c-8cd4-cdb38afed3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c06fd5-6fd0-41c8-85bd-2bbbddf6c7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea2292f-e1d9-4fc8-b88f-0abafe0849ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a3ce00-7220-4a52-893e-f377f49c3fab",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15843e7a-e6ff-4a6d-b1b8-d45cb20c00b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2e68cf-0df1-4429-9119-557cad05b4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851be77-95bb-4c01-a565-b6b32b493279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74583f65-ae11-47f9-9c06-c8f0190984cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde1b24-3ffe-44e0-9914-ac055a2f0feb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061b8ca8-1379-4cf5-b4c3-7c151ce62393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68780bd-bf9b-4a79-97e5-50926828ff73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab9db61-aa50-42b0-9fe2-f478d91bda79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa6818c-9e5f-49a6-879a-2b24d042a4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c98ae6-f07a-42ed-9c41-e005e9da5777",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3937c7d-7f86-4bfa-9ee8-1fdea2e25c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5cb785f-3574-4ced-aad9-b0daa11d7c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48052a54-0ffd-4f07-b357-1215d27f5718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8e4398-5996-4be0-81f9-5600120755c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd47187-5587-42af-8601-af4f1ebeebfe",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c145575-04ad-475f-be7b-082e10f358c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4ba3f2-6077-4bfd-b29f-efa8eb02fb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115009e9-5888-417f-8be9-3060d4044721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3725bb29-0fdc-41a5-af63-4be57b14a24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7995cb32-ecb3-4961-8639-754cb62d85f1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03366c60-880f-485c-ab9d-6290dc56a21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f574722-77fa-4424-84bb-ac989a496895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dc9913-20a5-4475-8ec4-783d304273da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4c6acb-40f0-43ee-bb88-fbb1b26b991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d493513-a618-4365-8f75-1c25be3b79b6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ed58bb-9ef1-42fa-9615-651074f2bcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c4ab05-c38b-4821-9b13-6271546c7624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1897570c-6bc1-4e42-b887-67f812e2ad0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fe4506-6595-486c-a8a8-0580e03b4d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59c4865-73df-4b21-901f-6a475493b60e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610db905-60a1-46c4-a45f-2f276ee16037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f87cf3-dd4b-409a-a430-9874cff9b2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be7beec-08b4-43dd-8e02-587ed21845a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0e2b3e-09f3-40e4-982a-dea8f3a65cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207dfe6d-819f-4ef7-b229-74ab7686dd89",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1ac48-f9c7-44d2-91df-5b5e3a1f5976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bcc1cb-46d9-4f42-bf24-a5baedff9bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8b42c9-7423-4987-b0cf-5aa2fd16bfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74764d73-e02f-48ff-b367-1ca592a40ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69e8fdf-8736-4ef6-a59e-5bce1a74ffbd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75d4238-86b7-4a57-954b-3a6c01fa2125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ace594-61ee-45a5-a97c-4f80e6f8f6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898b92d7-3fff-4719-8515-e88be40013e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "986c14e9-2350-413f-9a0d-3a362f594459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64022088-cc46-44ea-a718-ff1b46b5d8d0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d073518d-411e-4726-8189-dc216438316c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d9cd6c-2ac8-4665-bda3-28c646f0debc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dd4318-ed39-42a9-b5b1-b80217b9b460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b3bb1c-3725-47b2-95ca-5cc927146ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad0c185-365d-4e5c-8459-d98c3844505e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0415c2e7-cc8f-419e-b96f-a589a3d637f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c3a557-8720-4a49-b9f6-1874391a119f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dcbe9f-d171-4804-87ca-3cd46ef85366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "58a06f8f-d904-4e94-bff4-ebda51600310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3b8fb3-628f-4dd2-8288-78bd6a873cfb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f6aea5-38ee-498a-bfc0-1bae53655675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff25fbb-5658-46d4-8844-f09fd8abee97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7503f467-7322-4866-95e2-5c743c0bbe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6530cf4f-a0d0-46c1-ac70-0c63e0f60e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4b170a-394c-4284-9f24-373a8c23cd65",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273de051-01c6-4e0d-aded-325ec66d4369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053d23ed-7cc1-4874-8c68-b4dc2b20da6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afeaf1cd-0f1f-45af-b9ac-28310acfdd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37e435cf-8dbb-4084-b456-d2f12f05243d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f60914-7936-4499-ab7e-7188aa740bec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ab24ee-7c66-4a61-b219-eac488e8b932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cadaa77-30d0-4bc1-aedd-34d7bd75e42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fcbeba-d60c-4284-bc57-0001fe32af0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4068b047-58e1-41e9-addd-4ebd4fce285f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eab2ac5-8e71-44a4-a2d7-0c4d8736770d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc61646-8b70-4eb4-94c5-46639a55b8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "13f59e90-7f38-46b7-bba3-b1f89fa29a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c00b94e-c2d8-48ef-85ea-c963078ecb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8d1a7a-706f-4acf-ae85-bc8ddf5e147e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00e6a695-b690-42da-bd55-ef610ef6836c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "121989d5-992c-4530-b580-a645befe3039",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14256e8-ce25-4e0e-8d49-63ad7d12e7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe94335a-0563-4f39-9623-897adbc6ec75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135e4b7c-cca1-4e67-8c9f-2fd3fe66c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "766077a2-d4b1-4e2b-a7f2-15560696aa8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ca3e8d-73ef-4f45-b09e-d52e592ab85b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4518c8d3-9817-4898-9a2d-7bf1a2f3b319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32e9dcf8-1171-4afe-942e-64b727df7d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b6f9ee-096a-4dba-b41c-d13880f64407",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "63ed5843-d0f7-4586-9976-c1eff0efa771"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c49daa2f-0ba3-455b-b542-efdde301e996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "027a0ec6-2311-4f08-bfce-5245cb61c643"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a03e4c6f-63bc-42f7-8705-3347fd7fd396",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55adef25-2776-41a6-a662-f54957aa2035"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "386b444b-d2f8-4bce-9545-3b167dee20bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a8ecc8a-30c3-40ec-83bb-7590dbb6ee7e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54952215-1306-443b-b719-d38b1e03dba2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15f5ba76-631a-44e4-99b3-6a171b67a46f"
                }
              }
            ]
          },
          {
            "id": "8a8f5c26-1bac-400b-a828-cb7528560174",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78a8df8f-4671-46f3-8dac-6d150aec4d73",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "656260a9-5fe0-4329-bd55-19a83d99068e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7990d12d-8eaa-4c98-a64a-0de97a3d0286"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ac9572a-8586-44b0-a928-cd59f1477651",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "68b98ef7-1642-4744-9875-3b18f6b4e544"
                    }
                  }
                ]
              },
              {
                "id": "d259178f-509d-4231-b102-befd39d46502",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af79ee18-590f-4898-bc4d-1a685b46d618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ce5a4e9-5964-4e86-a0df-ed85d3fc6a9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07c7860f-cc53-4607-a2e7-674137764247",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "47e565ea-b68d-4fb5-ace4-ce2e9e176479"
                    }
                  }
                ]
              },
              {
                "id": "320ab487-b316-4a3f-8908-3545fa945d97",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1eed82-9be8-490c-a8ab-50d6df5b9eb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c6e5e44-1651-4996-8dae-7f15dd0510a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7303021f-853d-4bb6-a648-2016e7648e0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "53181e9b-4e20-419e-a3d2-6e9e0e467b28"
                    }
                  }
                ]
              },
              {
                "id": "5331d68a-0e09-4a68-a8c9-8ed7219e9b98",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dff2bd43-e493-4b39-9218-d95452834a80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9d41ed2-3982-49d7-bf1d-d0e592f04421"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b59af833-c90c-4dec-bba6-410d46d42c71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "de4c641e-25d2-422c-bb0b-d65469de878a"
                    }
                  }
                ]
              },
              {
                "id": "cd0e5a9f-8b88-49e4-9a68-76b808b81751",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9932c3b-6940-41b9-8569-386c7a2c9e99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89a89c2a-24f6-4140-8ca9-6b02bc3913b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d659345-5e3d-4760-836b-a35740e1a84e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36e8ec09-304d-4f46-805e-871ea451ac2a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb33b89c-5209-4000-8f1f-0be1e904f54b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a827ebbc-5086-4542-88dd-300fd444bbdc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "337bbe0c-2cee-4ca9-9b1c-9365cb9083eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "307a7019-e742-4ae2-b781-00991fbcd250"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f22ba4a9-34c6-4695-ae1f-68a3d1f71a20",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "42a0bbd8-b381-4a68-b64e-625b10226058"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02fdf0d1-d950-4e35-b21a-058960377cdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9023e455-9600-442a-b239-41b0122fdc3d"
            }
          }
        ]
      },
      {
        "id": "84d3cea0-474a-4747-a33c-256f6f53f66a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8d7096db-8d0e-4a70-a904-3e53da1be146",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1bf1f0b-4cc3-4724-94bd-6020de13565c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b6d9cf6-6883-4452-8835-57b96ab33291",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745a9d83-6092-4324-bc8c-4cb801560b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783aeed1-a983-45cf-b22b-8fc9ab247718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58e3971-a6e7-46dd-8c66-c00196b66af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b56c834-bab0-4b00-8e40-7808b8542973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c972c3-5ac9-4260-bc42-f77893c66a6a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a0267e-e0ad-4807-922e-fb78db9bc060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a05ffb-e5f5-4b22-9c37-9f12885fce73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a482c231-867e-4c4a-8893-a140146506fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0af099a2-b12a-433a-8b33-6235fd28d64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47bc47e-b9ed-49fd-a10e-0c9359a0c5b1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e491afd3-7b63-4bf1-9c18-5257561e07d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b74da17-6885-4076-b9de-00e0812243df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c459897d-6e04-4034-a2d4-724d4150c8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d31c51d-f1be-4c35-9b6b-2f115834d257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47f558d-e24d-4acd-bca3-d8546a3280c7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fc520c-5fce-42ba-909c-744f16c4aaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20345420-82bc-4f53-be28-43879fd2a0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec318c38-0cfe-4490-8fc3-4f1a788975e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "798fb475-7d91-4607-b53f-40d48509c4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa898efe-ed7d-405a-83ec-18998bfc68f1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c414512f-1641-436f-887c-45a4a40af489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0ab187-be4e-4238-9e97-7239a249751f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a4367f-9e5c-4f11-a6fc-62c1d0371de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f326e6f-9022-4b61-9614-a61fc8ed0e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98bf8d7-c564-4c1e-9e00-9be6bf1428cf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fc2a62-4aee-4db5-80ec-b5899f32705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ce510e-92fd-4408-a868-5ad3a6e29d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1359d457-b150-4322-ae92-c71ac0872852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "648dbb8e-0da8-4493-89eb-cc2a7c1448be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ebf5ef-904f-4ceb-8a6f-65b26799d79e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb7d75b-3957-4a50-991f-df1491ebf549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1507922-b4c0-43d3-b988-bf02007948fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c4992a-1ff7-45de-b43a-8aa9a3db82c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f43f72b0-67c0-45aa-9d61-45bab09d5b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bf9f11-ae6a-436e-bb8d-2ee86bee86dd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcd0abd-8f36-44f8-be02-28c041b9432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebbf724-35fc-4db9-921b-d7cb6d507888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a33f32-de30-40ce-b868-bfcf952d06b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12674b9f-2cf6-47ad-be70-5ac51aa5ce82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb921f3f-48d4-4c65-a800-fc47c94a80a8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5b7d2f-d5c5-416a-aa24-8a098f315074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2096c547-d220-45c6-b821-f5c50367f817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05870730-d8f4-4371-8337-2f82bd9bf6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e58db794-4ebd-4a76-988c-4a987aed30b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470219be-eddf-4b02-8358-ff2c8377c27b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea42255-3697-4637-a602-1170a2142dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b562303-0b99-40af-bfdb-2be2e48ad0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc17518a-97aa-421a-821d-07e699b97b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c55731a6-4d90-47a6-b150-4dbdbf90394b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0029dc11-a2ac-444b-89c8-af49413ce78b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0858dfa8-00d4-43c3-91e6-d6c27dfd3c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc66adfa-0ada-491d-83d9-3ed3a1512b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594b73e4-fd2e-47b4-9e9b-22b9d31edaad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "81133c30-9cd6-4aca-821d-842cfc4509bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df24f73-0ce2-4161-8558-9de1bc03fbc4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef9bc1a-2ba4-479f-b01e-08be1cac13d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6da78e-95b3-4151-b5f1-df6ed252db07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e35076-9abe-476f-bdfb-77a2c128c959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ccf7e5-4163-4703-95bc-cfb76d0fb287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a64e2d-ace2-4c4b-b985-376c1dd502c1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5181a24f-f65a-41eb-9a37-5b3b41db04c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e04640-2326-49dd-8e07-c22bc144bcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087c041d-d343-4204-b611-49d1333d29c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfbfabf-e4e3-44c6-bbdf-44cd0bb702e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b40d07-ecf5-4484-83ff-990febd95101",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3648ed72-9ef5-4644-9b47-f3956cbc7881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd57856f-8897-42dc-87b7-8b66c6a50021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5c6806-a714-468c-978b-f5322463f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7bd96f-52c5-4ff3-a16a-e140a020dda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770eabdb-3112-4841-9145-9052b2acb43e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48723267-5eb5-49eb-a2c9-059094cf3843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4775d0-bb53-4023-9331-5310882519d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8797c5b-cd41-41c3-8a39-679c92f4388a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0688817-0628-43c9-a23b-a73605bebec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c5d5d4-1ee9-47e9-88cf-de9ff2f59d25",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84978cd3-3954-46b9-be22-e1eb20c940d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0736a4-0b42-44a7-8f37-2da4310bd222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4294c0fa-37d6-46b6-95a9-8160175481a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb755b71-75fa-4a92-8277-4fec560fbf8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843a8ef5-22b5-4a68-8cfc-e0f9a7595552",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9814e333-ad66-4cb3-8be4-307312e73692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33205a35-f22f-4767-bce4-a793a4108615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1398e3f-d14e-47f1-a2d0-931e550337d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9a60ba-8cae-449e-b8d3-1da7b5910d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93782ef-ff26-4829-a6df-4bfb4a9cbe53",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6662022f-f2a7-45ed-bb01-0e278380ab4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3c29d2-925e-4904-9c81-6fe985e15b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a619aa88-5f7c-4f53-bde8-b3cd143d1bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c5c82a-a5c1-4fcf-9fa9-9691890d35f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00e86fe-375f-4a89-a3e2-84e0ea03974f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b2648e-14e3-4d97-988b-6de580d76c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff44337f-7b98-4a78-9853-d1c5d041365f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcbb729-090f-45d1-8f7a-f7ee273a7d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5884dec6-7822-4cbc-a2e0-1111429f273d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d28e8c-e3db-40c3-b13f-d8be280fafff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2fef66-f6d3-4e8d-8f09-7b49e0bef76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c57640-c3e6-43a1-b78a-c86ad5ffd5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919c0312-8b34-4eca-b5dc-a524f81fdaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c38f499-a628-403d-b520-498170dbe135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8ae0ec-df4a-4959-9829-a9461e71446f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0df1ad2-3f0d-498e-8f59-f2318b92850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9a20ad-3f2a-46c3-bc7c-90364681139a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954a543d-18a3-4e44-ba87-642dca0d4c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc7eec2-a68e-4de4-9205-6dfa85d5361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a4a71f-cc2c-404b-b118-5806ad88cddb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96666048-6111-4ebc-912b-fc2bd2744e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdacd359-79a3-4d2c-88d8-af6ec9ba2562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480b300a-b5d2-4bab-8f6d-b022bfecb148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c69372ef-1c8e-459d-ade6-779ceb63cc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4887d57-7064-44c2-b4a3-b9947442946f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c3cab6-4053-491e-85fa-ca811304a104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5db20ef-d15c-4df9-a1ed-206cbdb0555c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe3352-1b74-4092-95fb-c5c7948b087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8520bb1d-9a64-40aa-b10e-fb5a52e266a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0fc899-d5de-4342-88c8-b13f5c8c3726",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e6b6a5-940a-4dc3-a1ab-1fdc740b774c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ad5ae4-e4d4-4694-94ce-9355d6a5bc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb71ef45-b93c-409c-acf3-c500f3e7e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f152edf9-29b3-472a-9672-c2c797f056ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a2519d-a722-4b2b-9452-3b914a7ceb41",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4ef660-5b55-4b16-a4d8-f23cbbfa8453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d462c97-34da-4a19-bdbe-4138e2c471bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7310b3f-75ed-425d-84fe-2d87184e93fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a73c826-b66c-43d5-9593-2fd01dfb85ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fd8df7-97b3-4870-97cc-83a89bf4fecc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f63815a-1829-43ff-baa4-114e241bc847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3038725e-585b-4383-94f3-7b4f28783dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdee7d0-3536-4c2a-bff6-9ba13c7ef011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f49673-e1d8-43f4-b630-993dc1924f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe4e34c-e16a-43e6-9ec0-a439f04931b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c51da68-60aa-4e03-b240-4ed4a56643f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5363db8-9e58-498d-a9e7-19c6cfb39e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b06ca75-1a72-4c79-aa53-0898d2213668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e22c8a1-6424-40c4-8691-38710cc313ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec550bd-146e-4a59-9087-717f8f191d49",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a767e9-b084-4031-bdf5-f214683d0952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4c60e0-6193-44ca-baa0-f9723d468f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9321a47c-385a-4f9a-9db3-161896882bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d89773c-ad76-46ea-848c-6f8cd279c41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27957bac-7b00-488a-8fe7-7f69be01f013",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26232dff-260c-4c35-a5e0-6e90c9135ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43ca87d-e15b-49a4-86ed-5fa75659958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a1e8b7-1e07-4974-810a-5f65a477d251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90059081-2554-4767-8965-f54c652809f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fe72ca-2e62-4a92-a13f-e1a96092f201",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6747610c-d936-49ff-9f7a-0c457b79fd4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf84b31-7e7d-4175-91d1-8d8b5342f29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e1edd1-c610-4dde-af32-e5d6c2a35d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f233ce10-084a-4a41-9ca7-08406cfd9e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832459da-7a30-423d-93cc-43d13689ff14",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8f48ee-938c-45c2-81b3-ddbc7bb05cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b6334a-9432-4500-8c57-331bb0054fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106b79d7-cda1-432b-9f52-cd8f76f66e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dc4ff4-0bff-4ef5-be73-6dd41ab564bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb6e6fc-863a-45a6-ab2a-24d1f2f15fee",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf5424b-fe3e-45a9-abc4-1114a25b1fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8d9009-b2f0-481f-8bd4-e401eaaf8ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff58b86-3355-43af-8974-44f842f64cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb30a3bf-1936-46b0-b024-8d1e5a18b369"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55b4563d-6ade-478e-bd4b-bb88fe0bdf73",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1cd951e5-900f-4382-a221-f89348947c37",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79764262-ce26-4adf-9980-3d3a164161ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfefc2a-e27f-492c-acfe-9b29219dd531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b0a7c3-0ba7-4d63-8d8e-11b943090c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b526fdf3-6cdc-4f0c-b503-f646feb7c189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b53510-c7c8-4502-8806-55a4b19f5860",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe903fe-ad10-432e-8a17-ce0e1d10d5db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "528f9173-a1c0-4b37-8e9c-7c4d80693053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c07ef8-a8fd-4a92-b8d6-af9652c36fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9536c100-3ba2-496c-90d8-e87e7bfa9968"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50c3dc57-bc1c-46a3-92ae-0da1ad32cf27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23e4c558-9e87-4821-b5ee-e19923f3344c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c40c50a-53cf-4696-9809-7cf95b82ec46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9f6ceea-1d67-49cb-b7e5-d1aa49ba5e51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1d964e4-362b-4363-ac90-d515a32d3641",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "862637a3-5aeb-4715-a7d9-532644f428f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89991bdb-7a1a-4157-8c1c-6338d96e9dc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66f5a11b-a0ef-4156-8ebe-93abc13a34f1"
            }
          }
        ]
      },
      {
        "id": "d41c4c64-cf7b-44c0-8d4e-0361b9f3d015",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0e85a3d3-aaac-4f69-a9d3-d8949fe68fc8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a75a4dc9-ad43-4010-a338-0e1c762c2cb4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "418c2d03-2ad3-4573-a6ad-36eaba8d638f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eecd8c-0101-4fc1-81b1-e9b199db9104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e11a6a8-c01b-4ba1-97e0-a2d078edc7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7b56be-2180-4ca2-9d8c-627277162e15",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a1c0ec-ca33-4dd8-8d52-a212bb1c35e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97be1530-8f4a-456b-9a0e-ac8be9c70ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097f814a-f8a8-4815-94ae-8c54963742ef",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b60f56-5a24-4fa4-b0e6-2d808244b8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948e927c-595a-44ad-9f0b-36d94d3cd0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17349943-db91-413b-87e8-cc67af3b1a4e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac8a475-9ba7-453f-a56f-32ed59369571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8dbd4c-356c-4a1f-b66e-1f4e5dde7764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be16fb7-8a2f-4a20-ad6c-cd4a351b3348",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae30446-7156-4993-ac4b-8702ebf32a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96131cfa-ce90-4852-bde2-9eaed61bbd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9000c0-6878-4496-9226-1e28ac71788d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92287c49-5be3-4125-a0af-9552dd60c38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bfa1d3-7471-4f3f-83d0-62b21ddf4fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55281ad8-cb56-45fb-8928-96b3b2c4f2dc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd2237e-bd9a-48e9-9058-7b44212138c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80531a0-69a6-4570-b0fb-ce77219ba404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3affca98-4bf2-463f-9ec2-b5bc2cd54140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87c74c4-d790-465a-a6b8-34b54316d0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c814ebb7-508b-4a60-9ed7-0f50305d341f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c38c18f-f2ec-41eb-9148-bb314294fbc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92135322-6953-47ed-80ad-20bf8f8f7163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe775f-4b89-4237-8a16-4c648885091b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9403984-1e67-4e84-bfc2-2f66d9b9b842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83639885-8a6f-4f89-8c4d-7302e9516926",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fbd419-0698-48dd-b2ee-0ae39cbb8714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51467f5a-3ca8-4834-8dc4-dd0f6a5ea1a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698dcfc7-a728-45ec-83b3-000f1e447cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df7c9ca-04a0-44fc-8433-cb804881b19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0158636-0b16-4c8a-ae1c-c635f1ab940a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4b7576-8904-4562-a462-577c6c2be5bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27ba85e1-3156-41ee-8179-dd39a97d4238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ee67e7-4f4d-465b-9291-cc21dbdd1eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a44fbd-a2ba-458b-8e4b-a6ac18d59cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee37d5e2-b03c-4f00-b7f6-17346611ef10",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08fbad0-f5d9-476c-88b9-7b9c44b4e9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e236f5e6-1c05-4090-9806-75893182f011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56542912-e234-4b4e-9316-0cd6f68d0815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b10dc32-c375-466e-93a5-7b578b8fdf92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e902ec7-ceaa-4748-b25b-16ff81394d8b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c709a76-c6b8-4d1b-bd20-45e9fd3312d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef2edd3-50b7-43aa-b15e-4f61f918f6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece3353d-9d31-4a28-a009-ec896e57bd55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bab00b-56ad-47f4-bab7-1a11425fb6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a391f6-1531-41db-b865-fdc971dc775b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02bef65-055b-4503-88ee-6d4b82e2b78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e54c5992-3f64-483c-adbc-bb87c9373106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b89eae-7bde-4c3b-a6f4-a29a4360563a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe957032-9628-4ce0-8d1a-49e7f3ffb3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783bda31-71b5-4368-9f69-dec8c1a1eb0e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc89b36-a42b-43ce-851b-3b7534652015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f7d7fc0-329e-441c-9290-240c263aef2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c834f10-ac0d-4f99-973b-8fceca761791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae12202-4749-4197-93b3-b86f440eb3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e382022-6088-44b3-af55-6f226018a579",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373ccf89-fda1-4895-b70a-2cbf77545785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab2aae6-5837-4734-8e08-1702e46ac05b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07987dd-158a-4e4d-b1ee-92ffdba79b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f2fe97-0578-43bb-8016-4c5d112daf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b9220a-180d-45ab-a26d-4107ba26f377",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5824112b-e025-41e3-8db6-9e66eb35665b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42116f6-8dd6-4c09-9f3d-3945da865d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afad3f6-e51a-4935-8a22-431b77fd1b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977bb2b8-3a82-4203-98ad-998e696999b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451b8de8-5654-4f7a-8065-fe51d1c24918",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b71f8e-8ea7-4d1a-88b7-39a036842188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b967ef42-b4ed-4022-91eb-0dc2eeb073c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fda2bc7-1cb8-499f-b066-edc0b761d062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75471705-160b-474c-9612-e497ed105a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd62c965-be6b-4352-8233-71b9a7589681",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472d209e-a1e8-4d70-bed6-632c907bad70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416d5bd2-254c-4815-bc2d-7e9a05f5a8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a00ea9-a21d-4fc9-83f0-6719b262f983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabb90fb-cc51-43a0-aa52-613c6950f831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a829d52-0917-4098-8805-500deac7bf49",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a717359-3415-476a-8f1e-4e871753024c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d6980a-54f7-45c2-ab82-0b93e474baa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65233e1-037d-4712-aa25-0ff9cf2eed11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1686bbb5-8a28-450b-a71c-003c4cfbfae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c3e7f9-3824-48a6-91ac-5e730be950ec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d972ec10-11d2-4fd0-86a5-7ae85b3c00fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e64700a-7e61-441d-a250-b59a65ca1b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047087ad-6d59-498e-b2e3-49ac8e1f4d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec3162a-de92-4eb5-8546-f491cf6f2dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f1f8e8-fb48-4004-8f61-39b578b8ea8f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966f49bf-e4e8-41ae-92f5-ffdacf00d851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05aab88-982d-45a8-80c2-8bce0a308771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dcc417-5f39-4d70-a1b1-7b3f3f3b257e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520c051b-ab4c-4105-968e-0e7812e7e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1272643f-6e22-4a68-a3d0-92e4ee7d0fc6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5e11d9-7e75-4516-b07e-c0a2cf906f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a01262c0-5768-474f-af56-8fb9ad1fbea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110566f1-eb05-43ac-bd5e-e607109edccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c19afa4-9b8c-4118-89bf-0b181b5cf966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b47831-4c7a-4d2d-8f93-c22cd883b671",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5117ac1-c1ff-4c97-b4ed-ede10e6f66a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28843a2c-49ad-4f94-a41f-f6f9b147a54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae068bc-97d0-4013-b7c7-fd1b3ec33aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b77d485-18d7-482d-8aae-f2b2f7b02b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21891feb-fbd7-4124-92eb-a66c411dbc82",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c631062b-d813-4588-98e5-db8055d6fccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fb6290-097b-458c-a41d-3b4ae2c36764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53fd78a-27b8-41c3-9c7d-710d76eeda0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173038e8-d5ea-4fee-9c6a-d26954e702cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504ebd18-bd7c-49ec-8c6e-81127d0da362",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa2e9c1-0fa6-4ca8-893d-a0c319fb1be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789b292d-c186-4eb9-887a-bfa6fc97ed1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c91f54-3ec4-43dd-bf86-0dd314bee4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6179280c-390e-4624-9a01-7b7a575b503c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc91d559-80f7-4f0c-89a5-93bf2ad089e5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5d80aa-65c3-458a-b916-00f7ae3669de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc528f15-6837-46ce-a417-f03e17ec5b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8c1bab-a1a2-4c3c-9bdf-d4b1718daf17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3452f2-debf-436d-ae78-5ce5c543d126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a760d95-fa20-45b9-bd61-54e2dc732f98",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f09cf7e-6b67-45d2-88d6-238b352b2198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0692c0dd-ebd6-4f37-8e07-e51506d10b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51ac003-3175-4209-ba35-c718aff27abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7f9f5d-68d4-4a63-9600-cdd88213b2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c701267-1ef2-43de-8fb2-c7ed237cee37",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237648a6-f1f1-42af-aba7-7d8a3a395efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683a4f96-047f-4217-a326-2d0323f0f465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef21579-d115-4d12-8936-cce969fb933e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f81e5ef-0e56-45dd-bd77-b310096c3484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117dd2a6-c94a-48d8-9a4b-314073cd585a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03599883-e1f7-46e6-8655-2385a4659b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83e342c-6df3-494b-adf3-1db0744e74ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a668b7d-4e32-4ce8-8099-537453fedadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4445dc9-2050-4301-a28b-6fe7307dd158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508f2ec7-20f5-4096-a184-567152ea1e69",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca97331-97b4-4536-a7d9-3d61219ab040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab5f070-9394-4cc6-b94c-35cf87121481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ddf4f3-e4af-4f4a-8dc4-f820439ad5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a2b5db-9553-406d-92fe-60e214ce51bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3658ef63-636e-4954-a38b-db086e5093e9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47e27fc-8b68-498c-bf74-39103602f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892fd365-fed6-4476-8856-1d27288bf691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f56700a-a7b0-4fde-a25d-d360595c0941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6417e518-1eb8-4d5b-b6b5-aa2756e16b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd36baa-f164-4f61-a4b9-e897f4fe9b0e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52de9073-3606-4d64-9eb0-94255ec2a21e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89d19c85-e24f-4409-bee3-da096e807e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62cdaa3-7a11-4fa8-9bb5-ae9c6049550e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717630fe-ef74-4fc9-b059-6875901164f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5f436a-e032-438d-ae66-48a6d49ce963",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643b840e-00af-4db3-9537-92faa1193fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec998f6-89d4-4890-a136-1c7951a57ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6e268c-cb1e-4643-9cbe-4e0316d932ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5ab875-805b-4b9f-8f14-721b595a5363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12036bd-3b18-447e-853d-26902a79e2be",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca161e7d-c2a1-438a-83b4-334e06b0ea5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f12f062-8cb4-4c02-b494-8b5390fd6edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df1f889-6044-4ad6-b22d-6579948ccb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88823b06-e479-4908-b957-e91b68922440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f49618-ab4b-444a-a9fc-a7e7eba080d6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db8ec05-6382-4440-b585-03101f971853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ac6bd67-8b7b-40e5-b49a-b950a2f1ab50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbc6554-1188-42d6-a0cb-a6bb31c9686a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56324191-b5d5-458d-9574-5b7d92665403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b867f2f6-4de4-4ba5-b45b-a49d63e50658",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8275eaa-ae2a-48d6-8717-0ee4d5c8d952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6682431c-0cea-46aa-aaee-169498615414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e6fca8-c462-4bc9-ad51-440f07e79c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc95a4ca-89c9-44b5-9816-15b3f3f11e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c699ab-d28c-46cc-a94e-8a8f2385ea73",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1ecc10-90b7-4db9-bd6e-330cf8b5c0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914f915c-aebb-4f05-ac26-32f627f873c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab9625d-5f80-4ba3-9dcb-b306194c6524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5e13c9-b679-4d4a-9466-095b453c808f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6888f8-90d8-4acd-bf2c-63887327337e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defea491-99ea-4db2-9872-0b9d6881c660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b7fa7c-d42f-45d3-b15b-e50fbc4ae72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256d8725-3cec-43c2-a361-05bcc27946bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1274ba-779c-4ce5-872e-4b5f0a422c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa0f55b-79d0-4aec-b2d3-a5cf00a9e16f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0783e35a-ab7e-4296-b61b-942d467683bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a4aff5-5a62-4aae-bb95-93118c318332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b680792e-5a87-4d25-aaee-da44da9356f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc519492-1268-4d5c-9ff2-6e64be10d1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47fe2a1-83ec-4452-bf9c-ef7ca6b9c625",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb7b7d1-00fb-4713-aa26-580ecca19548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040c8fba-53ac-41f0-836b-375a43890ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ea9fa-23c6-4193-bfed-42f4a0f9c6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccaa7156-f9e0-470e-a259-8a57f5b48c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17157b9-18dc-4753-99e7-311f53a6a70b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f47831f-d690-4129-a3af-f5419e941a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164ed32a-6d63-4fce-a462-6785c1f30e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ed0e16-036a-4183-a465-c921de06266f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b03873-4c36-4915-b327-525a5c374aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc165fad-ddb2-48d9-bfad-3b8b5ad867e0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e35b2e-2d41-453a-855c-e06e70aeba96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3238b521-1f5b-44b9-b1cb-b94d366baf42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c1193d-530d-4077-a312-541103fd0522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47051f49-6a58-4d45-b99a-41fef909af86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff1bb12-e609-4b47-95e3-40c56087338f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c177460-5b9a-4540-bcab-f388c858c01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4358d8b-61ab-4e3e-9ce7-79167ac73610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc229f5-0fe6-40f4-8c31-28aae2a2b27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103f5cb1-f5a3-4067-a9e3-25f3d9037475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6a220a-e428-47cd-b373-c4a3dc2e275e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1c00a3-3645-437a-baf0-3407f875c1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc14565-692c-4a37-8a2b-6053434fef77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7005a56b-ba5c-4f11-8192-b808ad332968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cff37a4-0cc2-4a5e-933b-81fa52684fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e563dd-8fcb-42f9-a4a6-f6732f6f7d6a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ce4620-bfb1-41ea-9479-04a7e33bc66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2001e396-4819-4624-be7e-85696fe336c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ea0316-bfdb-409d-8c88-82dc19315455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a40c53-6089-4c1f-9a74-3c7e9e3d2f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b24906b-cf00-4f06-aabe-db7358154111",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9e8f0d-923c-4c1c-9fd6-003aec72444c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763566a0-4542-469b-82f5-e4b84cd50142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107c6383-30fd-4720-b026-ea051a88a9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff6970a-30d5-4646-9196-e4983501e4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b23fdc7-56ef-47fc-a1e4-8fd356ee2e44",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb5588d-9d4f-4220-aa40-b72c6d746392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeda088-2f21-4b33-8392-1ab459bd49ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae65625b-0482-489a-bdc6-f4ea92e1f8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a9471d-f8ff-4ee5-a832-35bf9e683d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dff306-a680-4473-8e0f-4cefeab1c5c6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b2fabe-50c0-4e75-8d45-9934cfd3494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0b9c61-8331-4796-a3b2-bad7fa7c8fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b434a6-9beb-4def-a8fa-80b1f7d7ea77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c3d972-2cb9-4884-8847-69c7cd169fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9a76e5-242e-44a9-b39a-f7e8b6eacee5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b87b99-2e56-4df3-af53-0ead1122fea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8479564-8efe-4254-bd50-ee18fe2413ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301d0a5d-e68b-4614-84ce-f920e3e4fce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63076c08-bc47-4d72-852f-5ecfe997871f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab894b8-290f-46a1-973b-b84daf93677e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677d7c2f-625d-4b0c-b6f4-0e4efd6e2fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b237393c-1974-4c00-a93c-c6c5a46d9a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60618c5-224b-4e68-9dda-d269aedf2831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354b46bc-84e4-420d-bda1-331db8f62000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea9d92f-8fad-42d4-8493-bca12ef6958f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26de1ec-2e95-4e2d-9019-3d3d71cf8519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2eafd22-cf90-4a1a-b33a-b596e604a5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd35919-2f69-4cdb-ad60-524e585d1a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd365c94-8953-4c6f-ba90-e5eaa88005ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244cdf31-63c7-4426-8434-87388bc96f17",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738b30cb-07a4-4f52-b251-0b11bd131052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117864c9-0dec-4ecb-8ae1-199ec3f8b14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda56ee0-079b-4537-95c5-9e2ba2fda1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35484f5-d103-4764-8858-c0b98129c767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5c442a-5bbb-4172-adc6-ce8314ccc3a1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ad6b16-bad6-469a-9de4-f44b7b5dba4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5663d03-a289-4651-a42d-307d56b0bac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bdec1e-9545-4e4e-977a-3d2a6e3e1875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dacd33-30a4-40ce-b396-3d3caaddece4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36ed85b-f102-4ceb-a80f-a2c9909a94bd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8a6b42-3d31-4b9a-af83-7be1fae5ee18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd5a0f3-8ba2-45c4-a717-102b2b31fcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e362a464-c488-46b7-aa8a-ead3c738c3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3a5455-9658-45e5-89fb-a59f47227f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e31e64-e23c-4558-af69-51985b45048e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d246b39f-c2cc-4398-b4c1-091dac6233d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d4d632-59dc-447b-a4c3-629ec6d4951a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1207fe2e-4383-45c5-8a5f-729dd445f33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2d35f9-1f2c-4b54-a6a4-9054943aad79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5aeb507-9717-44c4-ade7-86b926b23658",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca92d23b-a034-4584-83ec-ee56a59c3fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4972b873-57c6-4761-9948-f8a4c999fce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5f0f23-9137-48e0-a96a-b1efb47a7b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8fd686-ff06-4e32-8640-28f6f5020722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15caebfa-0378-4977-88c7-d8ee6d89623a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058c1a47-59c6-458a-a4f7-81f87bc55fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5afb2d7-c7e0-467a-b2b7-b9235b17126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb772ed-5c55-4b37-8ae3-1bcb16e03666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bbab7e-f815-41fd-9af4-0fe164c1af75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c077fd-e63e-41d5-9ee3-83a2029272cf",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b1edef-3708-47ac-ace5-2f0e2999ce12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a14a45a-4888-4f55-90b3-a69c8ab349e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bcda83-8e0b-4837-a60b-2df242698a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e513b90-952f-45e1-b2ae-6624388ad21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7e54ee-bd82-453b-a346-cda4a7a841cb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e362e71c-a7d3-46af-aec5-45c362ba8298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9c1347-f5e3-41a3-9f4f-7b7982b4e432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e40e4ef-a583-4572-946e-c6a758a6c829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d34754-ef61-4f07-8acb-d4a357c56fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5da6d40-81d0-43a6-afe4-e10d51c78097",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd75ba13-dbc6-49ef-98a7-3cd438b05c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35e594d-a478-4fce-ab15-09d0c66d1fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b373053-fbaa-4c87-82fb-65e324dc802b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cffd7b-4311-43b4-86fb-bb8ad5b9b23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84314e7e-ebd5-4ab9-853b-51f3002e0af7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272c173c-8ec1-4050-a656-1ee62b969a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6fcdd0-4837-41d5-8743-8b85f1628fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca8f658-e48a-4bdf-8054-cd89e6ac858c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71ac458-1466-441e-9b5f-7989d98ae447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319ad474-fef5-4821-a167-2859647cda15",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ea0196-7e7f-401a-99c8-2f664c75a993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ab4e9e-931c-4730-bddb-23f72d295b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84122a97-a96a-4d9f-a39e-78007d4802f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc618902-d4c1-446c-86b8-5878af4263ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acb61c6-3fab-4d76-89f6-e03b1d4aaa0d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f02d242-7209-4381-ae63-49417cdfd849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd118af6-5143-41e8-8e11-1ccd8f69c08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2a0ade-9d31-48a4-b0de-75438c26c5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdedee3-255c-4843-b6e6-56eac40c47c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c006e3-7d61-45a6-a097-eaeea2db490b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410c87d0-1417-47fd-a2db-92c62a8ed8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf3f479-7e0c-498b-b117-76ea6e8e8ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feb916d-4425-4710-a49c-9323dbc4d15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5a9452-fe56-4f31-93e8-4abacae9a25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4338bcf7-332d-476f-a13b-16d8d57b8fec",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61515aca-99e0-4363-b831-52f196e9e92d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260416fb-2706-44e4-a75d-f41afea8302d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9453f76f-2cfa-4813-9256-fcf6de8aacde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3581b97e-5414-481a-85b9-d6f9e32f9f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abd1765-c1fc-4e8e-8d7c-417c96cd2524",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9058d192-e6b6-48c0-bbcf-41bd9f3c8531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5204c05b-91a9-4ed8-9a1b-3bfcc96e614a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2ff786-1707-41d2-bda4-0e080a08d2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a699ff54-078a-438a-8499-5ab81f2a5a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e2cb56-a6fa-45ad-ada0-ddd0efe9738e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9a168e-0a1c-46cf-a18e-9f9717d54111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb80771-e048-4f8e-a2a4-430f8093cb27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f419363-b71c-467f-9bb0-6fa8a7abd395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72be3350-4ca6-4822-b9aa-945adb071597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84062e6e-f682-48c9-a841-3fb3b43aa6ec",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ed5354-9258-48c3-bd84-5617affb7fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f02b1f58-bc5f-4340-9dc9-75b83caa8bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165e7cbc-a457-46b1-82ca-75a459cf6a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6eac0f-4e38-4fa6-a976-741561364758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d18d550-5abe-4c7f-a708-5acacfd692fc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873964a7-37f5-47ff-bf24-40d860c55f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "420f4dde-e0b6-4955-914d-2b1e1ca6ae98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e33ccd6-e6e2-4f3f-a729-4e6951b83ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca28b138-b819-47b2-92a1-4e9b17cf3ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bb425b-a406-439b-b122-7434dd2f57fe",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c946f8-2b4c-44d5-b8b9-212782982881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548ffd49-4ad6-42bc-b613-afdf1621e294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04c0f5c-9f92-452d-b1cd-610d07f60cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e943372-fc7a-45c6-bec1-7badb2d86665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138dd1b9-5953-4277-bebe-a1e055910c17",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a50f70-ca81-4dec-8064-c9b5131bc425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18998038-2112-41d0-8514-106734340113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ee8170-f173-41ac-abce-4d5f422c6662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48ffd9c-2d21-475d-8f59-9063861e1fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae2b1dd-7e53-452d-9017-b419d84193b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db41c6f6-6ac9-42ff-9746-570de6db35ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dea0988-380e-44a6-8dba-7782faf04b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ad6dc6-c223-4ac5-bfca-190980e3f22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0797b998-d453-4e20-a3a2-41dc86f5fc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a606283e-d475-4fb7-972b-8e58b7718364",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9179f37e-51dc-435c-936d-d609483298f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac2bf453-4643-4c98-89fd-f8655880e4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64955dae-6c3f-48fe-b07b-89d9f9e1311d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba3fdc7-bc06-4367-873d-7a6ee25cbff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeafb18-341e-42d8-a1d2-fb49121b6aff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe21e81-8c77-4678-91a9-791f1e43cebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35cee8c9-a216-42db-bd92-3b3b643ce722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be79f1a7-6c37-4e83-8098-68868bc9ef26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e187e18-dfaf-4abe-81d5-efedfe029851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2e627f-6491-4b02-88c1-7717e7dd9061",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd431467-f60d-422a-b89c-94ee05ccc471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afda0b39-02e6-4023-ac79-9eed2ccdc785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35e3b85-f415-4828-a2f9-6d3b95bea16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b7c715-60c1-4b96-978e-630a25c9b2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b11f509-0131-4fa4-8083-66b929d160e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145cb28b-9f5a-4431-ba93-32669bfbee70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55ab3585-263b-4470-b090-aff2a6a0d1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7607451-6527-4406-ad1b-d281720ac654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ad552f-8616-4365-9818-176607fee043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9317ea-5b43-4796-9980-e596991a2244",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac33d51-a6e3-479a-a21e-73a047d4da3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f465cf49-96ae-4615-b5b7-a21cbecff5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cddcc5-cbdc-4095-bc2f-64511e5fd897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428f4fbf-1bf7-4ada-bf02-71f352373a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124f98e1-1294-489e-ad49-f6667a244e1b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1977733f-c6a9-4ee9-8727-8ea9421700b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77efa27c-1ab0-418f-b216-6ac702ae8c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5967fcb6-9f25-4a4c-baf7-3de9ba4faba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b9dfa6-91c9-4763-a355-a4725b11e23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10ffa32-7643-4435-b98f-6a1aa34f5209",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed3f4bf-42dc-455a-9c6f-d4e7ca8fdd54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d6e648-e361-44fe-b29f-8caee88c2b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a88cd64-b0d7-4d66-b6f8-c54697122c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac838be1-0dd9-4867-8469-2c75aa0e8ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346fdb05-66cc-412c-a2cb-be8625f696f3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b34d26-d0d9-455e-a50e-99c50e91e2fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742fef03-0bb6-4db3-8cc9-77a9bfb4d81b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9449d14-740e-4e65-83a0-57ea873e04f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887f6058-f1c0-462a-9cb3-0bb734ad761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a657b9-ade5-4ad3-95d4-524db37feb77",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95462a32-c1e7-407d-9644-7f99e7166da2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16baa38-2938-40d3-a7a4-af241d83c402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f778e96-6017-47f0-8bae-8ef5d31d265b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e66c1a-0d34-4d94-ae60-52417983112d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac1abd9-4e97-42bc-a463-2e0974d56d7f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba623b5b-0a9e-4a16-9958-893c68826833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f41c6b12-3b9b-43f2-9dc9-d5852d107d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaad4452-bf8a-4b54-ada8-5316d4be1326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626f461b-6567-4704-9ce4-ebda4378623b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96473d03-340f-4dfb-8239-2f9507b2b546",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145d4913-21e4-4adb-ad5a-8f63a6db661d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9b6409e-2037-4ce7-81cc-1d8318b2273a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b8bad7-283c-41c0-a4f2-d792857af973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1be34a-9f2a-4c12-9251-2e3776d6f141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c36eff-182b-4024-a50e-223264bdcbf0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e02330f-3d25-459b-beb1-7455d2cb83ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44aaf791-27d0-4acf-a689-54b9c26f160a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae845257-8866-4e82-b718-9a7feef0c4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901f60c0-6969-4ab6-a268-c0880a6d1e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572aa221-d47e-4e1a-982f-2198d3f85812",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd623fb-6464-4dda-b043-4423502b3211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3a61bc-dc63-4141-8e92-fe18f5d90395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb47d01-e711-4b79-8c32-8c3bc0153f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994ab27c-4f23-456c-930f-d851efb68c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d095bc51-d940-4454-8918-443106808f09",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4662fe-48f7-4903-8fdf-2af8eb115eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6547004b-ebaf-41fa-ab64-c1cff351ba1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34e9fa9-2654-4c95-84a1-7dbfe4d208ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588904f3-cb4c-4fad-a78c-9eb15fc9ca3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da679dda-5024-44bb-b533-4788d0b2eb04",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceccc74-a1de-4a64-8abf-842b23516478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "792c7b40-3317-4deb-a90a-944b82ea918e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc57d40d-e67f-4341-8842-601b1ab0f3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8ee5e7-07d4-42cc-832f-6101f9822b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1e1384-647c-491b-9c25-3448ea708c57",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf899e0-8adb-4ff3-842d-14e6e432a3d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46be52ad-e1cc-4e44-93f9-7ccb7b3855dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1fc951-4149-438f-a987-c1e10a2e82eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dab486f-97de-4887-98d8-6fbe7b64a5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcca924-bd2e-4ad6-95c5-31fde6b8dc70",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1234ed7c-30e2-434f-b97b-b059bb02584f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f5d1c8-0525-42e8-8a85-a8fa221d4f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30333642-bc42-43f7-bab2-afb999eac3a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05acaaf3-78ec-4453-9e64-2e8503803d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e5c29-0a34-4bc5-858e-ba8b8cf99b03",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c5ddc1-3eb5-4f88-99fe-b1ae0d52614a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e00bab-b9a4-48d9-98ba-21e99da1d584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501c636a-51ca-424e-9dee-54deb03cd3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c00363d-64cb-4682-a589-1f9b4e0f18bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c115c8-cf3e-4763-ac5a-25fede35dfcd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a4d5af-18d3-46fd-90a3-fcfb864790e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eaa0893-4bff-4417-93d8-bb16ba58f8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9254afc4-6db5-46b2-ad73-507dda36c35f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22205665-a850-470c-8a93-8aa4431e5a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e51301-6b04-45d1-a488-81d715fc3de5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc767d-1877-4682-a819-7db8bad81c45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d624774-b9ca-48cd-adf2-b5e3fba17713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3c4fd1-f1cb-457b-8c1f-66a97b725426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10027efa-5002-4ae1-822a-c8f31db74dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00b7a3b-56e0-4643-8b70-d373ae8df95c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e26b61-c7f5-4d03-9541-e6c92b593b7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a11a8fd-e945-4dbb-8363-920c145cc8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6064dcbb-6ea5-4798-8426-539cc25e69bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62939af8-c2a9-4cf2-bca4-0df6a293888e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3893336-f73c-480e-9e37-ec062a8b9415",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcffc272-7b0d-45ce-8c69-4f7550fff2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c71a62eb-7ca5-4d95-8a3c-f4cd0d020533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6d41d0-7daf-48ac-88da-e8724b9049e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe77f41-35f3-467f-adaf-adf6b3bda69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d4cc35-5c55-4d4a-974d-a3e88e3f954d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ba30aa-c29d-4fa3-a377-f0d4467952cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30cbeab7-7a0b-42a8-843a-49551f1ec460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8922daf-194b-4d25-b613-9de1b0947920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49921bf7-01b8-4412-8f4e-5c8644d6c412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1fbe70-ff4f-41f0-b2a1-90edd103f064",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520a594e-dec1-4176-a976-441ff401a5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de2e828a-959a-4962-9fdd-6c55a1df131d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f25b13d-5a24-4938-bbd6-069975f83fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40147c3-4387-460e-8ba0-09df09daf45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc39f1c5-cd36-4c25-ac40-f80a6c35c8e9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8c6aa0-add9-407b-8650-1df6951344e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c298df42-158a-4845-a9a1-aecf78519cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058b7386-82e8-4829-927a-75b4cbb906e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f15289e-5306-4862-828a-cee291240b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cd4934-0919-4fa6-b568-7fa89440d33f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6ec471-e8bb-4542-9e28-8d22928ceba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad7c3407-0bb8-4fe1-b205-df1552049ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7af813e-2a4f-4763-bd4f-392f0f523b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548405c1-51f1-466c-9e5b-f39ca784efa5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc260ef1-be26-4116-bfb4-b4aafd1515f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04863ea3-7b16-4318-a94a-1c78bf558c51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e802fd4-8026-40f2-9183-3897989aac13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed6e8a3a-6fb6-4b94-84f5-3f7e01c57e33"
                    }
                  }
                ]
              },
              {
                "id": "225a78c5-090f-4261-80f7-b6beaa01d783",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f90ab504-60d2-4e52-b54c-8bc8ba8ebdc3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157ed4ac-9e5e-4b9d-80de-bbd009e53bd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cbe80db3-c4d3-42b1-83ac-6c12888328a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de67aba0-ed0d-427b-a690-475fca12b941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "078c72b0-0161-41cb-b30a-44510b1fdf69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e13194-d603-4c77-81b8-470b7e4a4e0b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c291000d-b7fa-4aea-a615-611602c4086a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dc71b9d2-7222-4deb-878d-fa894a1b593f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a62f97b-b68a-4a5c-8286-96e1d44cb6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47417296-c6e3-4ac0-ae7d-d0c245d73ad3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "328e8c2b-9cca-4b9f-b84a-8b6c0f206057",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e8678af-2786-4e48-acf0-a8b169454641"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af27b4f3-3c67-4e52-8598-5d7b31e51aeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "022788ba-18b5-4e4c-994a-91bbf73f2346"
                    }
                  }
                ]
              },
              {
                "id": "8c197c2f-8e70-45ec-a368-c426121916d6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2b4c82cf-1d58-4332-a62e-9c5c74c62745",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c56143a-fcc9-4fc0-9dee-4eaceecb7f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ce03fc34-2ad8-4f93-8096-3060f9297c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b31c83-8b24-4b19-9102-9d7cdfc11eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1086f86-787a-47b8-a86d-6f815b5132e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f5fba336-a46c-4acb-a890-3fb539349af8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86f581fe-be1e-49f2-bb0e-3ceb518f459e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "296ac46c-8f5f-42d3-8eed-51113e545a4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7becb2ba-567a-48e7-9074-c352e9976fc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab07c7e9-5dfc-439c-9601-bf24179cf963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4dc021f-7b61-4535-bc82-2255b8acde3e"
                    }
                  }
                ]
              },
              {
                "id": "3f61d5e7-fde5-48dd-8475-f0f99696a9ad",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38da4cbd-358e-4786-b3b2-165373b228c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c2799977-dfcd-44af-b8c9-f1f505a82034"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66fd8df2-e6bf-4cd3-9a6d-e7db94b0fb29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3565b60b-e46b-4699-a21d-0bee54df1224"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98a180c8-a7db-43ab-b4a6-f55aa7bbc414",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3e2424bb-bd32-4fc1-b204-1a7c1b1b3144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f41c10c-346d-45ae-93dc-a64471d93f9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f601b0f-d034-498c-ae50-0ad716afe1fb"
            }
          }
        ]
      },
      {
        "id": "95dd9da8-3902-45a8-a2bd-86ce2751b1ca",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d5a7a6e0-1ac4-48fc-8586-e059159a0a96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86f767e3-4324-4920-8e81-11937bff5ad1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d304d070-33b3-4c7d-bb43-e6aca5a2905a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c676419f-e5da-4623-8a7f-74810b70cdb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5c38b2-d407-48ef-acb8-c9ea3e44ebab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1acb2721-16bd-4845-98a5-f4fc4c81e4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa259006-a584-432f-9776-afd307a53033",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c61aa5-8e08-425b-a914-64a9b36ff6d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "982cd25e-1036-4bc5-8430-53dc4f7bf609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e20a85a-c160-4732-a580-e94de4a7b33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7ce31c3-c3f2-4ce1-9556-6c859b5ebb9f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42b8d553-74de-434e-8bb2-1fc1d3093506",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62f52c3d-5d77-4d4d-adf8-6e94bc62bcaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cc72402-6a39-4f77-b342-4ecacd107b8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6ce9dc3-33ef-4620-a880-ada3527dc086"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "626af9e6-10f7-4a1e-8048-609a9ba294a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1b4139f9-fd84-42ba-80e3-99b219d46c80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c33b4bfd-a6de-4d9f-baa8-453e1ebf3291",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b166521-e35e-443b-acac-6f57b7769fc7"
            }
          }
        ]
      },
      {
        "id": "948e1478-bef9-410b-82c2-1017733375b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2a25dbeb-c2cc-4e86-8150-a57549e2187a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b88bf28-a321-4760-8505-0fd3d9bb7749",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abf8512e-d16c-4825-94fd-39911b85d7b0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48dd08e-52e5-4f84-b22c-f72cc23fbced",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6cb940a-9c76-49bc-bb12-2384ac94c1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1549d15f-1837-40b6-981d-f8ceb3114065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6cd8559-4698-4f80-bd7d-4d03a5bf38ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7570a0-3526-4ead-9fec-2d2120c9b82d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9167df4a-8e25-4af5-90d4-3d6bbfd63588",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2b645aee-8bcc-409a-bf31-cde4c55a5693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717d7513-e00c-4839-ba69-8f6838f36ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fef263c4-ab0e-47e8-8e14-e95f83c7ec22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a18b474f-835e-4c61-b7ef-a20de4d5d737",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fbaa4ed-3b14-4ef6-8560-d244322a9a27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15fc1739-f75d-4800-9920-72a39c4bca98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b216315a-3fff-45d8-bbc4-7a18bf3e18a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b329d6f5-cba8-4c85-beb8-1a20114d2ccb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c634f276-8c42-4555-bad2-6eb0445bcbc0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64f64111-ae97-4f22-95bd-4a7965d09661",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1a3f4b3-b621-4d40-a145-6681b299132f"
            }
          }
        ]
      },
      {
        "id": "445fc846-24b5-464b-b848-7d8ac32c3e76",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1eee3625-b195-47a4-aded-88a8e6ba7d50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04ff61d0-ad9c-4921-b859-3cc0119ec2f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53c0c79e-18ba-4732-8868-cfc7a57da926",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfff141f-4093-4496-83a9-d669ee8ec6c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0c22e7f-b693-4446-ad6d-a6552b98ecd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fce7f16-e144-4dc2-be4b-ac179001128f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba728958-547b-4a2f-b27b-4a7bd5f26b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1210aa11-c315-4e5e-9436-c8d23cae20ee",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c8fb46-2ce5-485c-9ba5-904a32a2864d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "af14eff2-93c4-47c9-8921-86dd320e0d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e3b129-f737-4e87-80ba-385e2990e6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eb87be3-a20a-4611-a648-80dedd6ddf78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60d26106-422b-445c-8286-ec1de867fd87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d1cf225-0965-4967-bbf5-9d62ce272655"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84e4af98-b97a-41e3-ba5f-bc088a9befc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25bc93ab-9914-4acf-b2e6-ddc6595b659a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7350b8a0-03e2-4b81-b42f-e6bf86252dcb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e91622a9-707a-4ddc-8956-f3b2c13a36e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07f30b68-75d0-4762-a212-bde16c6f4b2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c86928dc-cbc2-4d2d-97c1-43bad69e5c85"
            }
          }
        ]
      },
      {
        "id": "5625ee17-a175-4d42-a475-815a664522a4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08b118c4-2e3e-45f4-8f15-a2515836c7b5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8001230c-0f5b-4340-ad33-35bee802614c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1ad24ab1-3e28-48fb-8611-0577dcf060e7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdff8d0f-ad84-453c-8391-288b644f2057",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9417270d-2ef9-40c1-a0eb-7cdf0df86851",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 145.73282442748092,
      "responseMin": 8,
      "responseMax": 1115,
      "responseSd": 174.53936428758908,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673483994628,
      "completed": 1673484045529
    },
    "executions": [
      {
        "id": "c23cbe55-8ad5-4f85-bfec-57c8a5172cbb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0551f7bf-549e-4293-93cd-47517900f580",
          "httpRequestId": "e4ac57ba-99b8-4229-ab3f-ed74d148c959"
        },
        "item": {
          "id": "c23cbe55-8ad5-4f85-bfec-57c8a5172cbb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1a0a4f2b-193c-4dda-831f-a43fddf7845d",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 0
        }
      },
      {
        "id": "c2dc935a-c3d8-4148-aa6e-41c6276022c2",
        "cursor": {
          "ref": "258e47c9-07ed-4b2a-9d1c-8df9c1b41cdb",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "979727ad-187a-4d64-8607-22b3c179c9bd"
        },
        "item": {
          "id": "c2dc935a-c3d8-4148-aa6e-41c6276022c2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8d6f7d4a-36a3-469d-8187-d0f8209845c4",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "5b9d9e81-a534-448c-94ca-dcf1d63e3f5d",
        "cursor": {
          "ref": "097b6127-a9cd-4287-9a0d-9c2c1aa66b37",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d6d5643-3d68-4c7a-ba79-85512b8ae6f1"
        },
        "item": {
          "id": "5b9d9e81-a534-448c-94ca-dcf1d63e3f5d",
          "name": "did_json"
        },
        "response": {
          "id": "be945382-3f14-480a-81bf-a7f32519a4a2",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dbd57e-ad86-4c16-be97-10b60824d5b8",
        "cursor": {
          "ref": "0adee347-bc04-487b-80d1-08b1af98f841",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83224704-4937-428b-b08f-115455397e51"
        },
        "item": {
          "id": "10dbd57e-ad86-4c16-be97-10b60824d5b8",
          "name": "did:invalid"
        },
        "response": {
          "id": "6f320150-3dd9-4e18-acd8-91bd28f9c85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dbd57e-ad86-4c16-be97-10b60824d5b8",
        "cursor": {
          "ref": "0adee347-bc04-487b-80d1-08b1af98f841",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83224704-4937-428b-b08f-115455397e51"
        },
        "item": {
          "id": "10dbd57e-ad86-4c16-be97-10b60824d5b8",
          "name": "did:invalid"
        },
        "response": {
          "id": "6f320150-3dd9-4e18-acd8-91bd28f9c85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09dd2a3-25ab-4ae1-b6a6-1f9d76053010",
        "cursor": {
          "ref": "68282255-0b23-437b-ae72-0a94691e21de",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "36790929-72d9-4440-b7b3-568fd1c058f7"
        },
        "item": {
          "id": "b09dd2a3-25ab-4ae1-b6a6-1f9d76053010",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f43437a7-9ad7-4c80-869a-4f9728257a18",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01734d9d-a89d-44a8-b707-63ff31a5d982",
        "cursor": {
          "ref": "71d877f6-f4d0-4c5c-8d13-8852c0983eae",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2a242b1f-b95c-4953-9a8e-2bdebceac868"
        },
        "item": {
          "id": "01734d9d-a89d-44a8-b707-63ff31a5d982",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bd5ad514-85fc-406e-bc0d-ba663d7a6765",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1939750c-990a-4edb-9781-44244735a034",
        "cursor": {
          "ref": "de766462-dc1a-4ec7-9cba-05420023eefd",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b37628e3-0463-4321-ab79-f810b545d957"
        },
        "item": {
          "id": "1939750c-990a-4edb-9781-44244735a034",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2faab769-8108-4c7d-816e-baab5492ad82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8e0dc4-167f-41cb-b3a8-39c82054798c",
        "cursor": {
          "ref": "7308f98c-594e-4816-b90d-d95327cb1ab1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7753f2e7-f62e-4627-a229-021ce18ede60"
        },
        "item": {
          "id": "df8e0dc4-167f-41cb-b3a8-39c82054798c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ecbce744-a398-4e12-9ce4-b39ac546ef3b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8e0dc4-167f-41cb-b3a8-39c82054798c",
        "cursor": {
          "ref": "7308f98c-594e-4816-b90d-d95327cb1ab1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7753f2e7-f62e-4627-a229-021ce18ede60"
        },
        "item": {
          "id": "df8e0dc4-167f-41cb-b3a8-39c82054798c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ecbce744-a398-4e12-9ce4-b39ac546ef3b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b1715f-4411-4948-b753-de5b2a5e4299",
        "cursor": {
          "ref": "f8935a66-b2f6-4d4f-aa00-2e4bfc297dfa",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "26812f7c-f450-4240-b72d-0d24830d87be"
        },
        "item": {
          "id": "c5b1715f-4411-4948-b753-de5b2a5e4299",
          "name": "identifiers"
        },
        "response": {
          "id": "05410084-1b86-429a-ba33-d8404e1c5659",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b812e3cc-b774-49ee-92b3-e1c1e7060f03",
        "cursor": {
          "ref": "816418a0-e893-4277-846e-3f36bbd3439c",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9f6e637d-0f95-4fcc-af44-0a57748a5af4"
        },
        "item": {
          "id": "b812e3cc-b774-49ee-92b3-e1c1e7060f03",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6e4829c4-7a57-4a0c-946c-37f64efcede2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b812e3cc-b774-49ee-92b3-e1c1e7060f03",
        "cursor": {
          "ref": "816418a0-e893-4277-846e-3f36bbd3439c",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9f6e637d-0f95-4fcc-af44-0a57748a5af4"
        },
        "item": {
          "id": "b812e3cc-b774-49ee-92b3-e1c1e7060f03",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6e4829c4-7a57-4a0c-946c-37f64efcede2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b615ac8-8479-4857-92db-79f7318ea98f",
        "cursor": {
          "ref": "787961f0-849f-4992-b7d2-92cce00fa4a7",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9f707209-c92e-482b-aee8-11acc1963de7"
        },
        "item": {
          "id": "4b615ac8-8479-4857-92db-79f7318ea98f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fba47d6e-6e4b-4140-a91a-58fc74fd73a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09502224-958b-433f-a395-6ed9374b181a",
        "cursor": {
          "ref": "36889d66-d3b7-4e26-9ff6-f1b114f11405",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "58da8bdb-cfd2-4308-adfe-3ef5197ce875"
        },
        "item": {
          "id": "09502224-958b-433f-a395-6ed9374b181a",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "10429611-1887-4640-9a21-82905e4b0d21",
          "status": "Created",
          "code": 201,
          "responseTime": 588,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "36cc94d4-b511-4ffe-841f-076f23c3f2ec",
        "cursor": {
          "ref": "933fbb2a-e472-4595-b315-90660e171c4a",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "903a19ce-a915-4b75-9002-06b467f82099"
        },
        "item": {
          "id": "36cc94d4-b511-4ffe-841f-076f23c3f2ec",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "422c5de8-9eea-4a0c-a1e6-6de759b6ebff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6610d789-4e97-49f1-89bc-53fd848fd252",
        "cursor": {
          "ref": "aebeeb12-b603-49e8-9672-8b0cf0ea0496",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0f13ae76-dfbc-4724-9302-c810bd6e2070"
        },
        "item": {
          "id": "6610d789-4e97-49f1-89bc-53fd848fd252",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e2e9b2dd-5e5c-443e-9039-1005fe74740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad5005b-b72b-495f-bbb3-68d3ba444d7a",
        "cursor": {
          "ref": "40109178-ae26-473a-adf8-fde56fd0e03b",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ef5c5f32-4bde-4f6a-ba2a-9d3058fef194"
        },
        "item": {
          "id": "8ad5005b-b72b-495f-bbb3-68d3ba444d7a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c55250ef-0dc4-4401-8d71-ba98547df080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b66c26e-970b-4d1b-a466-7bd0b16d4337",
        "cursor": {
          "ref": "1afd3c23-c56f-4f2a-bf9c-11c7fa2885f8",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "18b55c1a-519b-481f-aeb3-807a60b43a59"
        },
        "item": {
          "id": "4b66c26e-970b-4d1b-a466-7bd0b16d4337",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b64785ce-a4f2-424b-9544-455e1f7f2499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea43d74-1891-4023-90cc-73373506c5cb",
        "cursor": {
          "ref": "a1615d96-74a0-41c2-8d6f-22cd22783562",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "442367e1-85a2-48f5-8300-a0013104aaa1"
        },
        "item": {
          "id": "7ea43d74-1891-4023-90cc-73373506c5cb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "94801ec0-03eb-4197-8d3b-c4f7ad3cbbbe",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0cbee7fa-de64-4468-b7b7-26dfcf6cb311",
        "cursor": {
          "ref": "d906347d-b1d2-4234-8d4e-e4e9f94c1e9c",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "69d520ff-614a-4aa1-8492-f2b40cb19163"
        },
        "item": {
          "id": "0cbee7fa-de64-4468-b7b7-26dfcf6cb311",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5a313b80-8044-4b34-8b22-df0c72798848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875d3286-5143-4b3f-b896-e9db17112281",
        "cursor": {
          "ref": "8b252bf7-fa04-47d6-8003-b157560e39d3",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "10a0648d-4e0a-42e6-b88e-476313d0823e"
        },
        "item": {
          "id": "875d3286-5143-4b3f-b896-e9db17112281",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4fb578be-61e5-4f5f-8abf-98e9f1e2fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e83de55-4e9d-4669-a0d1-e8b4661e1cfe",
        "cursor": {
          "ref": "fa572b2c-574c-41bb-9bd4-b00b478e3c7e",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "76f934cd-befc-4c67-ac4e-fd5a2ff927ba"
        },
        "item": {
          "id": "2e83de55-4e9d-4669-a0d1-e8b4661e1cfe",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f5d31696-af39-4e6d-b7b7-3368f59c0a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42eeb256-b791-4c9f-bf67-92c462491087",
        "cursor": {
          "ref": "644f4501-1714-4dfd-88f7-b56684c91a14",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "590af875-5102-409b-a0bb-335670aa0c67"
        },
        "item": {
          "id": "42eeb256-b791-4c9f-bf67-92c462491087",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "09ebd642-adf7-439f-a287-15bd9a78b6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33224fd-ce05-45e4-b20c-3b581909142e",
        "cursor": {
          "ref": "121fab54-f0f6-4b9f-83f1-0382531c2a41",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0b41dadc-635b-4983-910b-9387855b77bd"
        },
        "item": {
          "id": "b33224fd-ce05-45e4-b20c-3b581909142e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "db90f34f-a7e7-419c-add6-79cae4da5f86",
          "status": "Created",
          "code": 201,
          "responseTime": 589,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "60cb4163-ba64-4ed5-a07e-89e5c1694a01",
        "cursor": {
          "ref": "e70fb47a-ac6c-4ef7-9049-5c1dacebd4ac",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7ec8be44-f5a1-40fb-9ae4-f72c0a111c1b"
        },
        "item": {
          "id": "60cb4163-ba64-4ed5-a07e-89e5c1694a01",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "56c45256-b335-4158-bb8f-f76482709712",
          "status": "Created",
          "code": 201,
          "responseTime": 1115,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "87847ba9-305b-4bc9-9537-76941d66503c",
        "cursor": {
          "ref": "ae6a2ece-8f09-48e3-9792-179c589b0497",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d418738e-eba4-44b7-addb-c42d48cbc6ed"
        },
        "item": {
          "id": "87847ba9-305b-4bc9-9537-76941d66503c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a99e1c1b-2fcb-4241-b029-f1c805613d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8cfa58-14d0-4bfb-b29d-1fac5c5c06df",
        "cursor": {
          "ref": "3dd97dc8-31fa-4f54-8151-a1bf2152bdaa",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d1f4cf6a-a0ae-4f20-9fd7-83a9e8085a6e"
        },
        "item": {
          "id": "fa8cfa58-14d0-4bfb-b29d-1fac5c5c06df",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0bcb312b-ebda-4c40-8e1d-48951154ddec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec972bd-02da-4a97-ac9c-54f5ec7a9e84",
        "cursor": {
          "ref": "22bc5afd-3473-4e71-8d0b-f40375098be7",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3d1e226d-fc8b-4d71-a7dd-aca7a14af202"
        },
        "item": {
          "id": "1ec972bd-02da-4a97-ac9c-54f5ec7a9e84",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3e9811d7-c038-427a-b271-c96dab19e428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbee91b8-82d5-4c89-b610-b7288de69201",
        "cursor": {
          "ref": "6f5132db-3a49-4f0e-a006-ba88d82eee1f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8285f997-d248-47d8-a7c6-ede33035a5d8"
        },
        "item": {
          "id": "fbee91b8-82d5-4c89-b610-b7288de69201",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "17d208c9-f690-451c-8fe3-71a6b17615ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f482abe7-bb1f-4209-b605-de6c1d27e042",
        "cursor": {
          "ref": "636aed9f-dd5a-460d-be5b-5e741504f122",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5cb233f8-bafa-4fdd-b540-df897fda2319"
        },
        "item": {
          "id": "f482abe7-bb1f-4209-b605-de6c1d27e042",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "48599f37-f86a-407b-9c9f-7458cc4d5479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc176bc-f3cf-4ca8-bbfa-b713cc7a7048",
        "cursor": {
          "ref": "87b69b66-7370-4874-8057-a44e575e286a",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "05fb43c9-e164-4eec-8cb8-0de968c478b2"
        },
        "item": {
          "id": "ebc176bc-f3cf-4ca8-bbfa-b713cc7a7048",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f92670b4-982f-4d15-8a13-981eba192b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81900649-e361-4193-827c-a0a38f92c194",
        "cursor": {
          "ref": "41aa4b0b-15d0-49df-98e4-aa78f341701b",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c99f07d9-3a01-4d7a-aa5c-16b64bd1603d"
        },
        "item": {
          "id": "81900649-e361-4193-827c-a0a38f92c194",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c4116021-2a37-4aa0-bb21-27ca9c7bb63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041d3f69-a966-4f65-9fe1-2f6168499d3e",
        "cursor": {
          "ref": "c88fa714-b605-4bee-9155-8f1da1d3070d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5681a609-9e4d-4252-9127-dc44aad2ee08"
        },
        "item": {
          "id": "041d3f69-a966-4f65-9fe1-2f6168499d3e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "abbf61ac-cd25-4739-a9fb-922fb166756f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51a93e3-b507-4f68-93a4-a0169b538da9",
        "cursor": {
          "ref": "39e83046-4250-4c10-a213-c11bf762c602",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cef97938-351e-43be-b431-f2736119ce3f"
        },
        "item": {
          "id": "c51a93e3-b507-4f68-93a4-a0169b538da9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dda6fe31-99b1-4d94-9272-87b8450f9ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76906362-8ce6-42d4-bdf4-2e3ac0ca204d",
        "cursor": {
          "ref": "77a6bdc1-d9d4-46d6-9d91-efb485d82d16",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "020db322-f73c-4027-abd1-01a72d4378bd"
        },
        "item": {
          "id": "76906362-8ce6-42d4-bdf4-2e3ac0ca204d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e472e331-543b-46ff-a7cb-669bc9800721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0aca59-5813-434b-bfc2-203d9a4d8723",
        "cursor": {
          "ref": "f1f005d2-a986-47ec-89f2-43394f62ea3f",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "45db3bf0-d6e1-4f79-a38e-b343b77cd3b6"
        },
        "item": {
          "id": "9a0aca59-5813-434b-bfc2-203d9a4d8723",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fa411e52-aae8-4ecb-a722-2f9426c19e86",
          "status": "Created",
          "code": 201,
          "responseTime": 741,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a45572e8-06c3-4fb5-94e5-611fff92dd93",
        "cursor": {
          "ref": "7d7b5953-88b2-4a99-a273-de1c591bfae8",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "15a373c5-7047-42c7-aca8-5a2c92633e8c"
        },
        "item": {
          "id": "a45572e8-06c3-4fb5-94e5-611fff92dd93",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9c0e44f7-cfe2-445a-a45f-7dcac8bf512d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fe0969-a5f3-4810-bce9-1d2dfc7f9ae7",
        "cursor": {
          "ref": "0c56b226-6b8c-44a9-ac2e-f544ddd37189",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0efc59cf-3002-4dc1-a99d-709be2bd70ad"
        },
        "item": {
          "id": "b9fe0969-a5f3-4810-bce9-1d2dfc7f9ae7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b030a20b-a570-43c6-840d-5c68188dc3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db20b23d-7a6f-4874-86bc-7f05fb2eb02b",
        "cursor": {
          "ref": "0a926863-c11f-4c90-a658-9e016fbb818a",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c20d878f-1b02-47a2-9f54-4b0ff3c61263"
        },
        "item": {
          "id": "db20b23d-7a6f-4874-86bc-7f05fb2eb02b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "45e3e5e6-f505-4094-a28b-cd4070db3657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b1b6a-d224-406c-a66c-c17b8d0af4f8",
        "cursor": {
          "ref": "64966e7e-c9a4-4829-81ba-284794c271c1",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cdccd058-e635-455c-a8eb-1b3f5655c7d0"
        },
        "item": {
          "id": "d83b1b6a-d224-406c-a66c-c17b8d0af4f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "06ef37a8-4cf1-4265-93c5-7b28ca859a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ade5689-b9fa-4ff6-b068-c07dc715805b",
        "cursor": {
          "ref": "65af32b5-6ee0-46ca-aeb8-ef794454a400",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "414f42c2-4296-4be3-873d-bc5787463b1c"
        },
        "item": {
          "id": "3ade5689-b9fa-4ff6-b068-c07dc715805b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dbb7b360-d447-45d2-b978-80ec75c695b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c42d013-23e8-405e-9446-74f14d78d0d2",
        "cursor": {
          "ref": "ce863450-6f4f-403f-a422-500b1b97877e",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3d8eeed2-70e0-46bf-ba43-5fc9bdbb384b"
        },
        "item": {
          "id": "9c42d013-23e8-405e-9446-74f14d78d0d2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "24dfc642-516e-4f82-b602-6826b92603f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04126e13-7ba4-4987-8c73-2ad34df42c61",
        "cursor": {
          "ref": "215e961a-e501-4e31-aa33-5113a4e507e3",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c028759c-d674-4617-aeb8-f824c9c549ba"
        },
        "item": {
          "id": "04126e13-7ba4-4987-8c73-2ad34df42c61",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0c2d2b5a-9350-462d-a336-718a4ae7006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ef9bd4-1dd8-489e-92a8-61d0979f97c6",
        "cursor": {
          "ref": "464ae22c-fc39-41c5-a0c8-38eecd590a11",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8ae33000-85b4-42b2-9e05-d6d1ca5a6a2e"
        },
        "item": {
          "id": "35ef9bd4-1dd8-489e-92a8-61d0979f97c6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d5c9eeb0-d207-4799-97f6-d55d64fc79c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2dd774-05c5-4326-b5e4-ebecf801689f",
        "cursor": {
          "ref": "43847f52-8396-4c24-8eb8-dd852f284566",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4026b323-8ccb-406d-86f9-106a6a18eab4"
        },
        "item": {
          "id": "0b2dd774-05c5-4326-b5e4-ebecf801689f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0bcf69e0-781e-4160-9e94-2c1c6c473b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67367105-cb8c-404b-91fc-62b3840c075e",
        "cursor": {
          "ref": "3f4c0be7-55b9-4014-aa72-66642399ac34",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "211d4938-46c6-4fc7-baee-9a31c669d153"
        },
        "item": {
          "id": "67367105-cb8c-404b-91fc-62b3840c075e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ff99747b-9a68-4e96-affa-8aa15a2c58ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0744391-f80e-4bcb-a992-ce5a7bf34b10",
        "cursor": {
          "ref": "16d68fb4-31e9-44ba-a574-8af9bc8e038d",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7e9ac39d-55be-46d5-af30-70c78eeae70a"
        },
        "item": {
          "id": "b0744391-f80e-4bcb-a992-ce5a7bf34b10",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2fd26917-3886-4b2b-a6d4-116b516ad080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a21e6a-d2e5-47ec-91a8-5c92f260bf59",
        "cursor": {
          "ref": "e29973e8-3e9e-4a9c-bdeb-bec711018b87",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d3712a2c-0799-496b-b8a4-ec19bcfdcf4d"
        },
        "item": {
          "id": "a9a21e6a-d2e5-47ec-91a8-5c92f260bf59",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2852f12a-5e53-49ea-ba59-76ecded6e46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb47ef32-3b6e-4bee-b1b3-07195f2cf992",
        "cursor": {
          "ref": "1566718e-648f-4533-9a32-624e005129a0",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cb3abdcc-ec8b-4f60-a342-8852fcab6d30"
        },
        "item": {
          "id": "eb47ef32-3b6e-4bee-b1b3-07195f2cf992",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7aaaa65c-6e8c-439c-83eb-616fb4d9a781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "36657e09-17ae-41b1-80af-beabf76e9377",
        "cursor": {
          "ref": "4293376d-9339-4ad0-98de-ad88e1fd407b",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2f4033e0-b792-4f88-8e21-14fc278f80b9"
        },
        "item": {
          "id": "36657e09-17ae-41b1-80af-beabf76e9377",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "747d7631-6756-4a5c-a453-0ecaa140aa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2da3f74-4f30-4675-9bda-4bbc0df01fbc",
        "cursor": {
          "ref": "36caa8b3-a17e-491d-a542-057b0c40e636",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a634b63d-df51-45fb-ad23-b105ef34a0c4"
        },
        "item": {
          "id": "b2da3f74-4f30-4675-9bda-4bbc0df01fbc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d579fe8a-1751-4ecc-9f19-3dd3239521a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb82f41-6f92-4cdd-b943-c652be16da8d",
        "cursor": {
          "ref": "4310fe3b-eaff-432a-b53b-192cfeb71d8e",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "788ed3f1-9199-45d0-9330-daae62331d3b"
        },
        "item": {
          "id": "ecb82f41-6f92-4cdd-b943-c652be16da8d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e769644f-b6f9-4eb5-aa59-222a9993c37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3dbd2f-145b-4516-9215-0d4a6d04faaf",
        "cursor": {
          "ref": "ef61ecb7-19f9-4e21-8d02-9512e8160a6f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d91da6fa-0259-40e8-aab2-84b63cedcef2"
        },
        "item": {
          "id": "6f3dbd2f-145b-4516-9215-0d4a6d04faaf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cc728ef2-ebab-4614-998a-59331ff5f165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5603749-e599-4378-8707-b84fd79721a5",
        "cursor": {
          "ref": "2bcfc229-7770-4a86-9d82-fadeeaeab14a",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "98b8e6a5-8bf2-45ea-8aaa-319cf7e95924"
        },
        "item": {
          "id": "c5603749-e599-4378-8707-b84fd79721a5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "21751091-66c7-43fa-9a82-d7918cb53e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be76408b-f930-4dba-bf20-a42d0cd9d046",
        "cursor": {
          "ref": "d0e9b2cb-db8d-4877-a54e-23f6cc627cf0",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0e04a636-7a23-4c84-8795-134ba03d9351"
        },
        "item": {
          "id": "be76408b-f930-4dba-bf20-a42d0cd9d046",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6e2f68b4-49c6-45d9-b53e-bd8b9e3945e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1220d57-dccb-439e-984c-3cad7612abc6",
        "cursor": {
          "ref": "b29b0188-bd20-47b2-86dd-aa9adbdfe32e",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f42b4817-69b9-4826-b46b-061ed01ce681"
        },
        "item": {
          "id": "a1220d57-dccb-439e-984c-3cad7612abc6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a956c517-cb12-4d65-95b3-3b6f6bd072fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 397,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "082bb199-b25a-4f8a-89ac-7226e32c552b",
        "cursor": {
          "ref": "033a1f7c-9d48-407b-b3e2-14917daf41ab",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cecb990e-f753-4f19-bb22-8d71257baf00"
        },
        "item": {
          "id": "082bb199-b25a-4f8a-89ac-7226e32c552b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4e34f386-7049-49a9-a996-39513922e961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d37f8a5-2456-44c4-be9b-180d366f4247",
        "cursor": {
          "ref": "f2978262-9a38-4872-8391-8faa49427b89",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6a2c407c-68d8-4f44-ab8d-06e6d50dc089"
        },
        "item": {
          "id": "9d37f8a5-2456-44c4-be9b-180d366f4247",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "eedd5d52-1202-40e9-a450-ed8615fb3683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91abf267-d738-4d12-92d7-d093e8c354bf",
        "cursor": {
          "ref": "a063b06d-9fa6-4709-af4f-89288fc6076b",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d5bb82ff-1813-4fbd-925b-b76cbc7c3b73"
        },
        "item": {
          "id": "91abf267-d738-4d12-92d7-d093e8c354bf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b6779689-8947-412e-9fbc-2d75ba08ee28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaa849d-bb8b-4b25-8458-f0ec8f03570c",
        "cursor": {
          "ref": "64db52bb-48aa-4dbb-bb47-f2fe9de1b8d4",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bd746514-eae7-4144-a220-11c722483601"
        },
        "item": {
          "id": "6eaa849d-bb8b-4b25-8458-f0ec8f03570c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f01f0e03-a3dd-4e4b-b7ec-ee5a1bdc4c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab677d0-a8a7-4834-a7e2-97fd18f43cac",
        "cursor": {
          "ref": "b38e38a1-319f-4544-b828-c744fe451e3a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "588ac4f8-c3d5-4b67-87e4-5788ad89d947"
        },
        "item": {
          "id": "7ab677d0-a8a7-4834-a7e2-97fd18f43cac",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "52a350a3-6308-4eae-89e1-05984ee66f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f9876a-532e-4aef-a418-16b23da2223e",
        "cursor": {
          "ref": "f0b34d68-da2e-41fe-ad3e-2b221502b128",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4474f4a7-9888-4672-a209-c586f24ed4fb"
        },
        "item": {
          "id": "f1f9876a-532e-4aef-a418-16b23da2223e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "49acda78-eba0-4d95-bf46-da0285e4c799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ed3273-74aa-4916-b2bb-6539f5c2aac5",
        "cursor": {
          "ref": "2ba0e935-e271-4200-9139-e7d3f5e281cb",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9d4c4039-c1ff-4594-b357-2f23cf5d4a5c"
        },
        "item": {
          "id": "b2ed3273-74aa-4916-b2bb-6539f5c2aac5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4d5c80b2-b6dc-4434-ad5c-a9aac325ea09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeb1115-0960-4a05-b04e-9c92afceda18",
        "cursor": {
          "ref": "a4021d55-f4d3-433a-a627-ea7b078519e8",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a3ca4f3e-029a-4fbb-8292-d788ed05d352"
        },
        "item": {
          "id": "6aeb1115-0960-4a05-b04e-9c92afceda18",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bf95d665-fd74-4a2d-9a43-b1664a57a88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85bff7a-b4b9-4a45-ac42-bf8af9cef99a",
        "cursor": {
          "ref": "900b7f0c-e9e1-4ae9-9e63-bbdc515fbfa4",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "842832ab-4ff5-4f27-8735-e888bfee94c5"
        },
        "item": {
          "id": "f85bff7a-b4b9-4a45-ac42-bf8af9cef99a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9746c873-e26f-4e7d-b669-4e54ddc5ecbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64325e6-3b5d-4020-a0ce-778f978c2a75",
        "cursor": {
          "ref": "2606bbe9-e362-4aa2-886a-3efdf16826cf",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4608dd04-1ab5-4c3f-a46c-c9ff069c39ec"
        },
        "item": {
          "id": "c64325e6-3b5d-4020-a0ce-778f978c2a75",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "25ff2616-a2ec-4ba3-8553-c2206f9bf30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ed171e-9736-4d4b-85ec-4f86fe815cc2",
        "cursor": {
          "ref": "9027c5f7-b1b4-4ae3-8e1a-c22784d52502",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d42b9dbd-bf7a-4752-a342-7d510f12cf5b"
        },
        "item": {
          "id": "33ed171e-9736-4d4b-85ec-4f86fe815cc2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "97f75193-c82c-4db6-9061-d9942ff089af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ba8759-65f3-43ef-910a-d674bafa16f6",
        "cursor": {
          "ref": "1be56bcb-1d1b-4077-9bdb-a23c1c6a0617",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9feb4ffb-4d94-4cfa-8580-537eebde507f"
        },
        "item": {
          "id": "08ba8759-65f3-43ef-910a-d674bafa16f6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8ecf1f43-be83-4027-b334-5eefa646a91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3d193a-ed06-4401-81e5-dc3b2356306d",
        "cursor": {
          "ref": "b62dbcfb-0656-42df-89fc-9bf601b1e9d7",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e47dbfdc-644b-470f-b59f-e2413126958e"
        },
        "item": {
          "id": "bb3d193a-ed06-4401-81e5-dc3b2356306d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fba39127-98f8-4139-b761-d89a61b0481e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d380473-bfed-467a-a633-ebf937a1743e",
        "cursor": {
          "ref": "c66934fb-fb93-451b-b30b-927cf3ea13fa",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a34100b1-933a-4df1-a3e0-8c9204678c04"
        },
        "item": {
          "id": "1d380473-bfed-467a-a633-ebf937a1743e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7fba973a-aa72-44b8-9f0a-f9a88a91852e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a827b28-03f2-49f6-b80a-03b5f3df64c4",
        "cursor": {
          "ref": "5fb750db-781b-4ffa-ad04-824d58159e5c",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e85a47c5-2534-44e6-a4ce-7b4d9271d2c1"
        },
        "item": {
          "id": "8a827b28-03f2-49f6-b80a-03b5f3df64c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d7dc5973-1a41-49d3-a195-d1418dd4d4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762d7045-5fe6-43f7-bba1-e3f659548d54",
        "cursor": {
          "ref": "c750943c-81e8-48fc-a1f4-dfa99e8f0a71",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f8e9f186-e15d-4ca4-a89c-60fb7f2888a5"
        },
        "item": {
          "id": "762d7045-5fe6-43f7-bba1-e3f659548d54",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e90f373d-6586-4e08-8967-e39019a080dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06023b08-e72e-4a5c-bf65-479d6ca23f49",
        "cursor": {
          "ref": "d4db93c7-4bf2-4d66-9e95-88d4976fad73",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c482cfd3-eca3-408e-bd6a-ed07b76c6d5a"
        },
        "item": {
          "id": "06023b08-e72e-4a5c-bf65-479d6ca23f49",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2f970434-91d7-4570-93e4-a5b81ee6c5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4659ea-208a-4342-965b-15a4cbfce75e",
        "cursor": {
          "ref": "e84f672c-0ede-4ff6-b8e8-82242ab610f4",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f93a7b9a-5059-4244-9a07-db87f8ae8dd3"
        },
        "item": {
          "id": "0f4659ea-208a-4342-965b-15a4cbfce75e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d9a619ee-4c0a-4faa-a1c1-b28641cc9951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a10d777-6b66-428a-8076-a3d4278cca74",
        "cursor": {
          "ref": "b2880482-bd06-443f-ba5e-a89edc646e22",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9b4a5422-28e6-4c1a-9db1-bf6fdc31be30"
        },
        "item": {
          "id": "7a10d777-6b66-428a-8076-a3d4278cca74",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "93f0ad37-f093-4ac6-b04a-721047160bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0bb0df-0ebf-477c-ac55-83cccf708964",
        "cursor": {
          "ref": "176548a5-054d-48bc-a64a-70e2571ee86e",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2d18056e-fd67-4572-b6d1-87cc9bd5e2b4"
        },
        "item": {
          "id": "bd0bb0df-0ebf-477c-ac55-83cccf708964",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6e451cb2-54a5-4d34-8f05-1e96300ae7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fea8af3-a080-4bcc-b6a9-56b96716fbcc",
        "cursor": {
          "ref": "96a285bc-ce0a-431d-a02a-3eb84c8ae593",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6cb3b65a-7926-4bce-a83d-194b13b42eca"
        },
        "item": {
          "id": "7fea8af3-a080-4bcc-b6a9-56b96716fbcc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5630ef7c-a252-4791-9f51-9f026891a9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9473c1-a31c-4ba3-b79f-b5ad971e1aeb",
        "cursor": {
          "ref": "6de7a8f7-4e69-4298-a4f7-3303221802e8",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "22f3418d-00a0-46a1-9a8b-1fa064efb6f6"
        },
        "item": {
          "id": "3b9473c1-a31c-4ba3-b79f-b5ad971e1aeb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c803f5fe-b9b6-4fc6-bceb-705ec02edf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec25310-11ce-4bad-aa56-46111558fc30",
        "cursor": {
          "ref": "1b74de4d-54c9-442a-825b-424bd4a651cf",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9bd576d7-21f7-4854-bd2a-3cf98d014c81"
        },
        "item": {
          "id": "1ec25310-11ce-4bad-aa56-46111558fc30",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ef90cd20-3097-4c12-8f4d-0891514a7583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404f527a-8dbe-4ab7-80e9-76389f1223b5",
        "cursor": {
          "ref": "247aeb5b-de18-4ca7-9301-1bd222c78281",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "288af511-d0c3-4003-9efe-50f937688d28"
        },
        "item": {
          "id": "404f527a-8dbe-4ab7-80e9-76389f1223b5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "12daa00b-1669-41b9-9899-e3dd228384c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2de6ee3-0ddf-40e7-8c18-3bf1258575cb",
        "cursor": {
          "ref": "6cddecdd-d47c-439b-93dd-addc94e83638",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e81cb4c2-09c5-4d52-88f2-770f754dda1b"
        },
        "item": {
          "id": "b2de6ee3-0ddf-40e7-8c18-3bf1258575cb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e059a1ed-8f87-4f03-a23f-694448473c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23629db-0240-4998-a1b3-343bf2bb2be9",
        "cursor": {
          "ref": "fc1154f2-6f4a-442b-ae87-01a33ac6764f",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e4c0fc9d-c11f-41bb-9010-bf1ec3d5fb5c"
        },
        "item": {
          "id": "a23629db-0240-4998-a1b3-343bf2bb2be9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c02d1212-9bf9-4d56-907e-f03080ec1312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a26c67e-2c39-42c3-9b94-c5301f1f38ea",
        "cursor": {
          "ref": "adbb15a1-2ed8-4b30-9a83-11abd9f0a8b1",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "91f678c7-ab49-4ed8-8643-e75c640c01d2"
        },
        "item": {
          "id": "7a26c67e-2c39-42c3-9b94-c5301f1f38ea",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "655dbf04-a216-4694-a89b-e55658e1253f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea49a7e5-0643-415e-abb5-39cf4936ff9e",
        "cursor": {
          "ref": "8f404364-a0fa-42f6-8c2c-111b128f19cc",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "849ad3ab-b4ed-4ee4-b7f1-eacae87804d8"
        },
        "item": {
          "id": "ea49a7e5-0643-415e-abb5-39cf4936ff9e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c58bf817-32af-40be-848e-47b437b9809a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d184fb03-26ce-4f79-ad58-df8a40e2b8f5",
        "cursor": {
          "ref": "c622d1de-ead9-4eee-a647-ce5c7b6a6e92",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a1e6c24c-5df4-4e4e-8903-8b967b83eae8"
        },
        "item": {
          "id": "d184fb03-26ce-4f79-ad58-df8a40e2b8f5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8e577b89-65e4-42d9-86e0-d50898a213e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13865d26-1c45-413d-8049-4dac1f96c75d",
        "cursor": {
          "ref": "9ae67f13-9c04-4ca9-89a1-36491fa8fe06",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7e715744-f748-4ebb-8356-400d672ffdc1"
        },
        "item": {
          "id": "13865d26-1c45-413d-8049-4dac1f96c75d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "57746554-1699-4568-b48f-5b9327c9667e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29000505-bdc2-4885-a6d4-87bae6395f76",
        "cursor": {
          "ref": "0bd23b7c-7d86-46a4-a35d-11b21d9e5d80",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1ae8e321-f94d-4766-b06a-009df32a0fb2"
        },
        "item": {
          "id": "29000505-bdc2-4885-a6d4-87bae6395f76",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7e994416-9742-4adb-969e-7b2bc3736d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1916a5-828e-4789-b3f0-a0dd761106b0",
        "cursor": {
          "ref": "90c279ee-b0af-425f-a072-98a40f9e3f6c",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d95409ad-2234-49da-ac6f-ee92183aea1f"
        },
        "item": {
          "id": "fc1916a5-828e-4789-b3f0-a0dd761106b0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a35997ad-3d3d-4de8-8eb8-1c302ae5de17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae72f5b-c0a1-4352-a3d1-d2cf965729f2",
        "cursor": {
          "ref": "18c5b892-91fd-4d05-a9ab-419875cda5b4",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0742b3b9-dde8-4ebe-8376-bebac70ffe38"
        },
        "item": {
          "id": "aae72f5b-c0a1-4352-a3d1-d2cf965729f2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7c15b047-083c-49e4-9593-59e1e4eeb71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29263ecc-af30-4fbb-a420-10fc7d4dcf97",
        "cursor": {
          "ref": "434425c4-b2f1-4d3f-b254-b5d55a186043",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "aca9a900-4b27-4d0f-8281-7f23f4723db7"
        },
        "item": {
          "id": "29263ecc-af30-4fbb-a420-10fc7d4dcf97",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8383ed2a-65e5-4d21-be34-1b13fcdde3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a3ce00-7220-4a52-893e-f377f49c3fab",
        "cursor": {
          "ref": "116245ce-c013-4db0-ad1b-8184adf22e38",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91f06995-9d73-4790-ba61-d543e6b7dfab"
        },
        "item": {
          "id": "d1a3ce00-7220-4a52-893e-f377f49c3fab",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8ad9a3cd-90bc-4243-ad35-8286128073a1",
          "status": "Created",
          "code": 201,
          "responseTime": 733,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "3fde1b24-3ffe-44e0-9914-ac055a2f0feb",
        "cursor": {
          "ref": "1ec46a76-2fd8-4ff4-bca8-e6513a60c687",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8860c0e3-7cfd-46eb-a239-1ae332e7b908"
        },
        "item": {
          "id": "3fde1b24-3ffe-44e0-9914-ac055a2f0feb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "79894c90-702b-48b4-9c41-a33e007278e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c98ae6-f07a-42ed-9c41-e005e9da5777",
        "cursor": {
          "ref": "ac39381d-ae2d-47c1-9287-693f9d5b84c8",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de7d2bcd-48a4-44cd-b78b-0f68cb2b66e3"
        },
        "item": {
          "id": "90c98ae6-f07a-42ed-9c41-e005e9da5777",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b292fe4-98de-484a-8888-8fcddf8f721e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd47187-5587-42af-8601-af4f1ebeebfe",
        "cursor": {
          "ref": "2b7d252d-d70b-4eea-b8b3-1c2ce057652d",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4ee3fdd3-6ae1-4775-96ae-335dc9f1d45f"
        },
        "item": {
          "id": "fdd47187-5587-42af-8601-af4f1ebeebfe",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ec543ca3-3e1a-4eb4-ba8e-2b3c63e04d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7995cb32-ecb3-4961-8639-754cb62d85f1",
        "cursor": {
          "ref": "598c4e7f-10f0-497e-a203-9a20dc38b583",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc237087-88c3-425d-91d2-c067340e758a"
        },
        "item": {
          "id": "7995cb32-ecb3-4961-8639-754cb62d85f1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "515d6277-3ef1-4c59-8e17-cba677737f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d493513-a618-4365-8f75-1c25be3b79b6",
        "cursor": {
          "ref": "5b9076fb-b308-4e5b-b444-d35bbae21988",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dac22633-6189-4f3e-9f4a-931ca85552e2"
        },
        "item": {
          "id": "5d493513-a618-4365-8f75-1c25be3b79b6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d48f4a1a-58ad-4a05-84a6-1a45115cbfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59c4865-73df-4b21-901f-6a475493b60e",
        "cursor": {
          "ref": "26234758-e8cf-42f4-b658-3a064b6dca11",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7b0955a1-5247-4d92-905e-c531975532fc"
        },
        "item": {
          "id": "f59c4865-73df-4b21-901f-6a475493b60e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8067d3fa-c2a2-4f45-a12e-8bbda0f037ff",
          "status": "Created",
          "code": 201,
          "responseTime": 724,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "207dfe6d-819f-4ef7-b229-74ab7686dd89",
        "cursor": {
          "ref": "0cf55feb-b615-40c2-ad1a-474f2b9ad427",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5a160d68-2b8f-4edc-9e4f-d6d8551d5fb6"
        },
        "item": {
          "id": "207dfe6d-819f-4ef7-b229-74ab7686dd89",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1694afac-92b4-4175-a6b1-5bca60f26f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69e8fdf-8736-4ef6-a59e-5bce1a74ffbd",
        "cursor": {
          "ref": "9f8ce390-c3dc-439b-aaaa-a0fe7dbbe549",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "37b9427a-14de-4120-b1c6-7cf64499558f"
        },
        "item": {
          "id": "a69e8fdf-8736-4ef6-a59e-5bce1a74ffbd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ff1ad641-8cb4-415f-a92e-263f609e6bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64022088-cc46-44ea-a718-ff1b46b5d8d0",
        "cursor": {
          "ref": "68ec94d7-323b-47bf-95f9-4dcd5bfc7f86",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9e067c32-8cc7-4265-ba58-5eef1f3d451b"
        },
        "item": {
          "id": "64022088-cc46-44ea-a718-ff1b46b5d8d0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bc10b37d-d2b8-491f-a6d7-2808c7d4d359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad0c185-365d-4e5c-8459-d98c3844505e",
        "cursor": {
          "ref": "19516ffc-9d3b-4433-8950-83a85f040cbe",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e52959a1-7bf2-4e43-bcee-d1990f68a949"
        },
        "item": {
          "id": "4ad0c185-365d-4e5c-8459-d98c3844505e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "79a04401-a632-4537-b7e8-6b40204aee18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3b8fb3-628f-4dd2-8288-78bd6a873cfb",
        "cursor": {
          "ref": "dd5a753b-d582-4b84-bb0a-609f39211693",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c49408b5-5387-43c0-b6bb-5eaacab395b0"
        },
        "item": {
          "id": "9f3b8fb3-628f-4dd2-8288-78bd6a873cfb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "beef2294-d714-42b5-a907-efb43a3fb48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4b170a-394c-4284-9f24-373a8c23cd65",
        "cursor": {
          "ref": "5ff7800d-1d13-4bda-8b9a-c071e637bf26",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c9bdbd89-e358-4e71-a981-01392d53017d"
        },
        "item": {
          "id": "ef4b170a-394c-4284-9f24-373a8c23cd65",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2cdd1934-cda3-4101-a60e-1e3762657e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f60914-7936-4499-ab7e-7188aa740bec",
        "cursor": {
          "ref": "99cf02b9-3179-4a24-a558-8a3906c52649",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b57c422b-554c-45c9-b438-e5906d6ae6e1"
        },
        "item": {
          "id": "72f60914-7936-4499-ab7e-7188aa740bec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "01f0eeba-baf3-493b-bca2-5e8cfa4e563e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eab2ac5-8e71-44a4-a2d7-0c4d8736770d",
        "cursor": {
          "ref": "212cc275-e965-49ee-826f-b713e764f725",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b6c07707-47bb-4efa-8dcb-0beacdfe6e93"
        },
        "item": {
          "id": "4eab2ac5-8e71-44a4-a2d7-0c4d8736770d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3a63c699-172f-4d94-9ac2-b0dcb58c3b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121989d5-992c-4530-b580-a645befe3039",
        "cursor": {
          "ref": "59e8b599-2218-47a4-b3b1-c4cc1496c3b2",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "22fa5b47-5271-4dc4-8c83-4b4d449e31ce"
        },
        "item": {
          "id": "121989d5-992c-4530-b580-a645befe3039",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a6acc9f2-f6e6-4db5-a5ae-ee27852f6768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b8ca3e8d-73ef-4f45-b09e-d52e592ab85b",
        "cursor": {
          "ref": "7126ec8d-c193-4fec-9012-d084702ec11b",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ffed725d-5ba2-4cee-8659-81ee33b20ac7"
        },
        "item": {
          "id": "b8ca3e8d-73ef-4f45-b09e-d52e592ab85b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "25941460-e644-45bc-8b3c-d48879b22e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "78a8df8f-4671-46f3-8dac-6d150aec4d73",
        "cursor": {
          "ref": "3d1eafb7-3758-4796-9da7-2544fac28406",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7b74efac-4d4c-4dc1-8441-4a227c8c86fb"
        },
        "item": {
          "id": "78a8df8f-4671-46f3-8dac-6d150aec4d73",
          "name": "credentials_issue"
        },
        "response": {
          "id": "414b7a64-5361-4dd6-a719-bfbc27cf536c",
          "status": "Created",
          "code": 201,
          "responseTime": 716,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d259178f-509d-4231-b102-befd39d46502",
        "cursor": {
          "ref": "6ca2ad7c-0dfe-45d7-9c97-55a8d6e4818e",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "32abe8a0-f0ad-47f3-9499-476937d6a2d1"
        },
        "item": {
          "id": "d259178f-509d-4231-b102-befd39d46502",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d4386b50-8c3a-49e7-9a75-f6ca1811cd16",
          "status": "Created",
          "code": 201,
          "responseTime": 722,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "320ab487-b316-4a3f-8908-3545fa945d97",
        "cursor": {
          "ref": "bea0a22b-b2d7-47fc-9ee0-fb0e4279de32",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1b40070f-c569-4925-9831-4bd4d01a4ece"
        },
        "item": {
          "id": "320ab487-b316-4a3f-8908-3545fa945d97",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a4892151-8c47-4d38-bce5-b439eec00f77",
          "status": "Created",
          "code": 201,
          "responseTime": 700,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5331d68a-0e09-4a68-a8c9-8ed7219e9b98",
        "cursor": {
          "ref": "f64c974f-24bf-4603-9730-9e3bcd895e48",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f63988b-6968-4814-ac4d-54402ef7683b"
        },
        "item": {
          "id": "5331d68a-0e09-4a68-a8c9-8ed7219e9b98",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1738648d-fcc2-4302-9865-cf03acde092d",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0e5a9f-8b88-49e4-9a68-76b808b81751",
        "cursor": {
          "ref": "ad17e7a9-2937-4247-9a80-e26d11f7e53d",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8628252c-f388-443f-8848-94f0fdfe967e"
        },
        "item": {
          "id": "cd0e5a9f-8b88-49e4-9a68-76b808b81751",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "35370efb-00ab-4f86-95fd-7e796657b45a",
          "status": "Created",
          "code": 201,
          "responseTime": 710,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6d9cf6-6883-4452-8835-57b96ab33291",
        "cursor": {
          "ref": "98ef5a65-d2cb-44a3-8c32-51ca895b9fb6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cab3f99b-8b17-4549-b1a4-e2836af4bc78"
        },
        "item": {
          "id": "1b6d9cf6-6883-4452-8835-57b96ab33291",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec0fdb65-e3e2-4742-b20f-e96650e09752",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1b6d9cf6-6883-4452-8835-57b96ab33291",
        "cursor": {
          "ref": "98ef5a65-d2cb-44a3-8c32-51ca895b9fb6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cab3f99b-8b17-4549-b1a4-e2836af4bc78"
        },
        "item": {
          "id": "1b6d9cf6-6883-4452-8835-57b96ab33291",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec0fdb65-e3e2-4742-b20f-e96650e09752",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e2c972c3-5ac9-4260-bc42-f77893c66a6a",
        "cursor": {
          "ref": "0293964e-c07f-4653-af77-ea173fe2f157",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9ab927f-8ac8-4a31-ae3b-ad69e73bb2ef"
        },
        "item": {
          "id": "e2c972c3-5ac9-4260-bc42-f77893c66a6a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "096e7722-ebce-4d76-88eb-cb8be7931c73",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e47bc47e-b9ed-49fd-a10e-0c9359a0c5b1",
        "cursor": {
          "ref": "f6c260f8-2e3e-4d82-847c-340da65602b8",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "04929e3d-c6da-413e-b6f0-31b7593ee1f1"
        },
        "item": {
          "id": "e47bc47e-b9ed-49fd-a10e-0c9359a0c5b1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2eac1e7e-bb6c-4c72-822b-be08409f85b3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e47f558d-e24d-4acd-bca3-d8546a3280c7",
        "cursor": {
          "ref": "176a7816-da5b-4679-abcc-e3a58eea8736",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6afd2acf-457f-4000-aa6f-3309cb6ca2b2"
        },
        "item": {
          "id": "e47f558d-e24d-4acd-bca3-d8546a3280c7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e38fe365-f2e3-4f5a-8ab1-c9da110f9d5d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "aa898efe-ed7d-405a-83ec-18998bfc68f1",
        "cursor": {
          "ref": "5cb9957c-b8f8-4fa6-83c6-40825f685a98",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0f618c94-b2e4-493d-8d11-0b1b5dff1d3f"
        },
        "item": {
          "id": "aa898efe-ed7d-405a-83ec-18998bfc68f1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c32c1a53-63a5-4249-a788-a7e903f5c3c1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a98bf8d7-c564-4c1e-9e00-9be6bf1428cf",
        "cursor": {
          "ref": "6c8eb3ba-266e-4463-84ab-c82ead65d00b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a2caeb83-0d1b-4d4f-bd09-d4ec0b03faaa"
        },
        "item": {
          "id": "a98bf8d7-c564-4c1e-9e00-9be6bf1428cf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f7555f0b-fb7a-4edd-af8a-3f80931cc7e2",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "17ebf5ef-904f-4ceb-8a6f-65b26799d79e",
        "cursor": {
          "ref": "0859dbf5-7670-4cc9-846f-1ea6a00a150c",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3669f1e6-4fad-43e6-b98f-ddd700becc02"
        },
        "item": {
          "id": "17ebf5ef-904f-4ceb-8a6f-65b26799d79e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f407d2f-521a-4abb-aa59-3853cb63f1a7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f3bf9f11-ae6a-436e-bb8d-2ee86bee86dd",
        "cursor": {
          "ref": "66575caa-3f32-4a43-94a7-2ec6a0bcdcd9",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5262b3d0-184c-43e9-b2c5-f3741fd50870"
        },
        "item": {
          "id": "f3bf9f11-ae6a-436e-bb8d-2ee86bee86dd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "03e0cec8-826a-4103-9f51-ab08f21b96c8",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "bb921f3f-48d4-4c65-a800-fc47c94a80a8",
        "cursor": {
          "ref": "5c5b8f9a-7872-433c-ab8c-740bdd329041",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d272df42-ed2b-40f4-8b9b-35c4a8a70990"
        },
        "item": {
          "id": "bb921f3f-48d4-4c65-a800-fc47c94a80a8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "994cd150-c1b3-4a94-b1ef-295d175d0091",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "470219be-eddf-4b02-8358-ff2c8377c27b",
        "cursor": {
          "ref": "808171c3-b8fe-4f83-a5d9-6bef13b24e3c",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "94d28814-b8e4-40e6-8079-a1b64bca1216"
        },
        "item": {
          "id": "470219be-eddf-4b02-8358-ff2c8377c27b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cfa6d71f-5591-41ed-9c77-aad67a605f1c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0029dc11-a2ac-444b-89c8-af49413ce78b",
        "cursor": {
          "ref": "508353fb-926d-4959-a7b3-79caf8de8f13",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eb57885c-1e9a-4dc3-ab8f-1fcc26cd876e"
        },
        "item": {
          "id": "0029dc11-a2ac-444b-89c8-af49413ce78b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2e2e1594-3355-4f97-8b8f-0b6ae4be785d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7df24f73-0ce2-4161-8558-9de1bc03fbc4",
        "cursor": {
          "ref": "7767fe3f-c633-4267-8e60-0b3d6fc9dd7c",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7bd55a4-aac2-48b8-aa28-271f6beb8924"
        },
        "item": {
          "id": "7df24f73-0ce2-4161-8558-9de1bc03fbc4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c353e548-874c-4d93-ad31-74e31dd73707",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f0a64e2d-ace2-4c4b-b985-376c1dd502c1",
        "cursor": {
          "ref": "be33ac26-0528-420a-841b-733136567c3a",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6b8ed10d-69b3-47fb-9dc0-310334df8095"
        },
        "item": {
          "id": "f0a64e2d-ace2-4c4b-b985-376c1dd502c1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6c13de26-bd24-4ccf-87e8-3789f84d17fd",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "90b40d07-ecf5-4484-83ff-990febd95101",
        "cursor": {
          "ref": "fa648497-6a10-4240-aa62-d3b4c6416459",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a7a7456b-e183-4cd6-9312-cd2fd70c7cf5"
        },
        "item": {
          "id": "90b40d07-ecf5-4484-83ff-990febd95101",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27234196-9d31-4582-b8d0-92d979cb1615",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "770eabdb-3112-4841-9145-9052b2acb43e",
        "cursor": {
          "ref": "4d8d2341-c954-4fdb-8aaf-42b4686237b7",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "738e5b37-eec4-4366-b42d-a1393ae1be44"
        },
        "item": {
          "id": "770eabdb-3112-4841-9145-9052b2acb43e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3506f921-4dbd-4bad-81cb-e9a3e60544f3",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "99c5d5d4-1ee9-47e9-88cf-de9ff2f59d25",
        "cursor": {
          "ref": "60cabd59-d437-498b-98ca-94a0c617ff67",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "01ab4a5d-0784-4229-af58-ec343a3835ee"
        },
        "item": {
          "id": "99c5d5d4-1ee9-47e9-88cf-de9ff2f59d25",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "44ee9128-ddb9-4f50-87ca-ffa68c84f62a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "843a8ef5-22b5-4a68-8cfc-e0f9a7595552",
        "cursor": {
          "ref": "f13998e7-dcee-4c18-b133-f72cf7db2ced",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "43f8247e-0d6a-4b0b-acb9-b374022d5d39"
        },
        "item": {
          "id": "843a8ef5-22b5-4a68-8cfc-e0f9a7595552",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0992a5eb-19ea-42ab-af44-f2efc45700a6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e93782ef-ff26-4829-a6df-4bfb4a9cbe53",
        "cursor": {
          "ref": "a8757c68-c1ad-4864-96af-56eb7234c0c9",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e6d4a43a-628d-48ff-981a-c4f94a849966"
        },
        "item": {
          "id": "e93782ef-ff26-4829-a6df-4bfb4a9cbe53",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "19000679-f742-4b69-acd7-2c4ef1024c32",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d00e86fe-375f-4a89-a3e2-84e0ea03974f",
        "cursor": {
          "ref": "e89bd0cb-9ad7-4e6e-ad5a-c7fa1731864d",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "db8a6a47-06b4-4fa1-aaaa-6a1bf79b7249"
        },
        "item": {
          "id": "d00e86fe-375f-4a89-a3e2-84e0ea03974f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "42a0fae9-945e-4acb-aed3-0a2c3be0f747",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b6d28e8c-e3db-40c3-b13f-d8be280fafff",
        "cursor": {
          "ref": "2344d08e-513c-4744-92c9-43a682996749",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a68d20ab-577b-42e9-8e21-b20403e2d0fc"
        },
        "item": {
          "id": "b6d28e8c-e3db-40c3-b13f-d8be280fafff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cd125cbb-c5d2-445d-b56e-674236b4cd39",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "ea8ae0ec-df4a-4959-9829-a9461e71446f",
        "cursor": {
          "ref": "10a39599-f3fb-40e4-8e64-c1f8c21f85cf",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "365a334f-4874-43ba-ba08-9b0cd3fa3f8a"
        },
        "item": {
          "id": "ea8ae0ec-df4a-4959-9829-a9461e71446f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd849c38-835e-45a7-93fd-0275ed14a3e1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c3a4a71f-cc2c-404b-b118-5806ad88cddb",
        "cursor": {
          "ref": "21ded9cb-1ec9-4123-81bd-50850d2bb3a3",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fa413e0b-9367-43b8-98de-fb10662bf164"
        },
        "item": {
          "id": "c3a4a71f-cc2c-404b-b118-5806ad88cddb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "69563843-77dd-46ea-a72e-b221b3072528",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b4887d57-7064-44c2-b4a3-b9947442946f",
        "cursor": {
          "ref": "9a8510ab-e917-4971-a690-6d1e6351983c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "78ba3dca-1065-435a-93de-cc112dd2b0f5"
        },
        "item": {
          "id": "b4887d57-7064-44c2-b4a3-b9947442946f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c1f2bc76-876d-445d-89eb-5ec7b32e1e41",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ae0fc899-d5de-4342-88c8-b13f5c8c3726",
        "cursor": {
          "ref": "b6da7ea7-04a5-4e66-b7a1-a6ea7e9c7e9a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d6153be7-ccde-40d4-80fa-5992b0a2b128"
        },
        "item": {
          "id": "ae0fc899-d5de-4342-88c8-b13f5c8c3726",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8a98abb3-1357-4168-8f5c-9950cea1af71",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "41a2519d-a722-4b2b-9452-3b914a7ceb41",
        "cursor": {
          "ref": "68359e79-c3d8-4434-9976-8ee20941568c",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0162ac65-92af-4b8d-b16c-5ff05ae112d6"
        },
        "item": {
          "id": "41a2519d-a722-4b2b-9452-3b914a7ceb41",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "531fb466-5997-4959-97b8-deaf52434ee5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a5fd8df7-97b3-4870-97cc-83a89bf4fecc",
        "cursor": {
          "ref": "fc90aea8-eff5-4052-b533-318a5757a3e4",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "29e841e0-3411-4686-8b48-8cde1e123c4c"
        },
        "item": {
          "id": "a5fd8df7-97b3-4870-97cc-83a89bf4fecc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0ae1b08a-23e3-4530-a5ae-a11cb8e33df4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1fe4e34c-e16a-43e6-9ec0-a439f04931b4",
        "cursor": {
          "ref": "224b4134-4840-4349-9b44-544c62e0fefc",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5ca6a878-4480-4f3b-9e33-502ba9384bc9"
        },
        "item": {
          "id": "1fe4e34c-e16a-43e6-9ec0-a439f04931b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "584a1218-a694-4212-be37-9bc3e16e5982",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "bec550bd-146e-4a59-9087-717f8f191d49",
        "cursor": {
          "ref": "6933c567-d7c0-41ff-aaa1-cf1509051f86",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "409a01a6-781a-4c8c-ae35-2f2b6903e865"
        },
        "item": {
          "id": "bec550bd-146e-4a59-9087-717f8f191d49",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2bea8a23-6d58-4c0b-a45f-c219cc358d3f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "27957bac-7b00-488a-8fe7-7f69be01f013",
        "cursor": {
          "ref": "68187fe7-2442-48b6-9bf2-21b5270f9bfb",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "35fbcac0-f3e9-4ff7-b40a-00820fd00d05"
        },
        "item": {
          "id": "27957bac-7b00-488a-8fe7-7f69be01f013",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fae580b5-1bb1-4567-90c8-4ede597a3242",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b5fe72ca-2e62-4a92-a13f-e1a96092f201",
        "cursor": {
          "ref": "615fc697-7afc-4d2b-9602-87321b14ec10",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ca576fee-ae22-4baa-88d7-9d8fa5eac162"
        },
        "item": {
          "id": "b5fe72ca-2e62-4a92-a13f-e1a96092f201",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "62c4b841-2571-4b80-a353-a8a6a0096f58",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "832459da-7a30-423d-93cc-43d13689ff14",
        "cursor": {
          "ref": "97043c60-e955-4b99-9dac-34f02ee52569",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1dd56e18-7174-4576-bcec-b4dcc406f931"
        },
        "item": {
          "id": "832459da-7a30-423d-93cc-43d13689ff14",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "15389cce-820e-46bf-bfe9-2cebc07990fc",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1eb6e6fc-863a-45a6-ab2a-24d1f2f15fee",
        "cursor": {
          "ref": "517da851-dce4-40ad-9206-e7f8a21e206a",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a7da79fe-d416-4624-8e64-68918da25701"
        },
        "item": {
          "id": "1eb6e6fc-863a-45a6-ab2a-24d1f2f15fee",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b56f0f5a-986e-4006-8268-15576be50e6b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1cd951e5-900f-4382-a221-f89348947c37",
        "cursor": {
          "ref": "efe97949-f094-4064-9a24-2f38ad96092b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "478a9603-3a8f-4aa6-92ca-847044c42c5a"
        },
        "item": {
          "id": "1cd951e5-900f-4382-a221-f89348947c37",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "db4017b3-af9c-4230-84a9-38cd2252f415",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b53510-c7c8-4502-8806-55a4b19f5860",
        "cursor": {
          "ref": "43fbb70f-26bf-4276-ae6d-b7843ae3e65d",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c6cc2a76-da24-46a9-87d2-a9a505137f76"
        },
        "item": {
          "id": "63b53510-c7c8-4502-8806-55a4b19f5860",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ff39d8c9-720f-4eb0-b090-c53efc1b69e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418c2d03-2ad3-4573-a6ad-36eaba8d638f",
        "cursor": {
          "ref": "e21718ea-01d3-4f7f-b029-c08cd65a0854",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "098da675-2d1f-4e87-bd48-e95bb87e4ca6"
        },
        "item": {
          "id": "418c2d03-2ad3-4573-a6ad-36eaba8d638f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "10352ebe-f7fc-4b9f-bd2a-c6cc2f2926ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418c2d03-2ad3-4573-a6ad-36eaba8d638f",
        "cursor": {
          "ref": "e21718ea-01d3-4f7f-b029-c08cd65a0854",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "098da675-2d1f-4e87-bd48-e95bb87e4ca6"
        },
        "item": {
          "id": "418c2d03-2ad3-4573-a6ad-36eaba8d638f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "10352ebe-f7fc-4b9f-bd2a-c6cc2f2926ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7b56be-2180-4ca2-9d8c-627277162e15",
        "cursor": {
          "ref": "ae509c88-9124-4416-ac7a-5614fefa8df2",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7d8155d9-5f16-472d-aa6a-5b2db3f0f06a"
        },
        "item": {
          "id": "1a7b56be-2180-4ca2-9d8c-627277162e15",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a8809c02-e0c0-43ad-bbbf-dadd68102bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097f814a-f8a8-4815-94ae-8c54963742ef",
        "cursor": {
          "ref": "ac79be95-0fbf-4ae6-a318-974c7189578f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a16817e4-9bf8-4256-ad2a-c920ab69854f"
        },
        "item": {
          "id": "097f814a-f8a8-4815-94ae-8c54963742ef",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fc05c79a-942a-484d-bda2-39723f0f611a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17349943-db91-413b-87e8-cc67af3b1a4e",
        "cursor": {
          "ref": "bcf7bb3d-0dde-4cfc-a446-9612ff311afe",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "913600c0-5559-458d-a244-c68d0213f2bd"
        },
        "item": {
          "id": "17349943-db91-413b-87e8-cc67af3b1a4e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5219356b-f3f5-4ba3-8f7d-0471c450b193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be16fb7-8a2f-4a20-ad6c-cd4a351b3348",
        "cursor": {
          "ref": "baeb9b23-e51a-4f5b-9a8e-d5543473dad8",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1a96b067-3399-497e-8b19-999a6ec40ffc"
        },
        "item": {
          "id": "4be16fb7-8a2f-4a20-ad6c-cd4a351b3348",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "16e8dc99-b6cd-4466-8f4e-ce271a59070b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9000c0-6878-4496-9226-1e28ac71788d",
        "cursor": {
          "ref": "50ac981c-1c30-461e-9967-2860a8fc826e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b62e231f-8a62-4cfe-8718-49713b83508c"
        },
        "item": {
          "id": "6f9000c0-6878-4496-9226-1e28ac71788d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "46e5701b-73fe-4cd0-9be9-4d506b53f683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55281ad8-cb56-45fb-8928-96b3b2c4f2dc",
        "cursor": {
          "ref": "539be5fe-f13c-4091-b491-d2d79b67dd29",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7d5bb497-3126-493f-8274-8815885f25ef"
        },
        "item": {
          "id": "55281ad8-cb56-45fb-8928-96b3b2c4f2dc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "343c9263-0603-41c0-a2aa-63732290791e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c814ebb7-508b-4a60-9ed7-0f50305d341f",
        "cursor": {
          "ref": "b5194364-5069-4f9a-955c-210e25f3b3f1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a82d18eb-bb51-4c74-beb6-7b63c9ad8a6c"
        },
        "item": {
          "id": "c814ebb7-508b-4a60-9ed7-0f50305d341f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "01b51468-a460-471f-8a18-f828db89f554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83639885-8a6f-4f89-8c4d-7302e9516926",
        "cursor": {
          "ref": "abedda36-c159-4a97-b946-2c72e3b95523",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6146f8c9-880c-4d09-8f8a-28d4e0714b86"
        },
        "item": {
          "id": "83639885-8a6f-4f89-8c4d-7302e9516926",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "45fd1b96-9088-40e8-a368-1d4d45347086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0158636-0b16-4c8a-ae1c-c635f1ab940a",
        "cursor": {
          "ref": "4fd60b0a-ac4f-4211-861e-427ac2204f7a",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5d229642-9cfa-4a92-be80-f3586ffb0943"
        },
        "item": {
          "id": "f0158636-0b16-4c8a-ae1c-c635f1ab940a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "44778556-110b-4d70-b437-1195e33952e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee37d5e2-b03c-4f00-b7f6-17346611ef10",
        "cursor": {
          "ref": "4fa45c7e-2ef2-4012-a139-34d61265fa50",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d3f26ba4-88f9-4d30-8b3a-a69e183e02cd"
        },
        "item": {
          "id": "ee37d5e2-b03c-4f00-b7f6-17346611ef10",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9b9bd3ec-d34e-4cf9-893c-75e60c87ba5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e902ec7-ceaa-4748-b25b-16ff81394d8b",
        "cursor": {
          "ref": "6306a4ad-4179-4165-99d2-94b5472d8390",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "025046c1-33c7-477e-b633-c7647972d540"
        },
        "item": {
          "id": "0e902ec7-ceaa-4748-b25b-16ff81394d8b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "35aba086-bc27-40f6-8249-92c37cf8c3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a391f6-1531-41db-b865-fdc971dc775b",
        "cursor": {
          "ref": "251790ba-3108-4249-b7ac-61d2a6c63aae",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1185352c-87d9-401d-8e25-ebc190970d61"
        },
        "item": {
          "id": "23a391f6-1531-41db-b865-fdc971dc775b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cf62915e-f285-410a-8aeb-15180b5a30ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783bda31-71b5-4368-9f69-dec8c1a1eb0e",
        "cursor": {
          "ref": "4ae96a87-527e-4eab-82c1-276f30763d1b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0c37c15c-678a-45be-abba-3c5159afcdc5"
        },
        "item": {
          "id": "783bda31-71b5-4368-9f69-dec8c1a1eb0e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "23d540f8-139a-42c6-84ed-fb29cc312627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e382022-6088-44b3-af55-6f226018a579",
        "cursor": {
          "ref": "f95f256a-5414-418a-a5c8-c62ea171a8b3",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2eec5710-35b0-4764-a0da-97563a9809ec"
        },
        "item": {
          "id": "6e382022-6088-44b3-af55-6f226018a579",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "be0fe78d-5023-4141-9454-bebd71cd6a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b9220a-180d-45ab-a26d-4107ba26f377",
        "cursor": {
          "ref": "02ff2a3a-fd3d-41b1-9590-4237eccdfbf1",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4e833115-7b29-4c80-b2c3-0542c6a433f3"
        },
        "item": {
          "id": "75b9220a-180d-45ab-a26d-4107ba26f377",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c8c3ca81-f571-4a68-a653-339b4d8e9c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451b8de8-5654-4f7a-8065-fe51d1c24918",
        "cursor": {
          "ref": "651a8afc-58c7-4d20-ae94-0efda1d03a8f",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "56515836-3d08-4b8b-8f25-d4e8eb8308cd"
        },
        "item": {
          "id": "451b8de8-5654-4f7a-8065-fe51d1c24918",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6db6d5ca-67ce-43f2-a657-ebda41236638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd62c965-be6b-4352-8233-71b9a7589681",
        "cursor": {
          "ref": "a65668fd-7ece-4c91-bd26-45a5b80ca173",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5d010278-0484-4b2c-b1f9-58f61005a163"
        },
        "item": {
          "id": "dd62c965-be6b-4352-8233-71b9a7589681",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "5981bca9-04ce-4697-9fad-a9d2f8f2792d",
          "status": "OK",
          "code": 200,
          "responseTime": 646,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8a829d52-0917-4098-8805-500deac7bf49",
        "cursor": {
          "ref": "df4a12b6-38b4-4b2c-8663-13bc873e02ef",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0c67336d-26fa-44b1-be9c-6e5528e903f8"
        },
        "item": {
          "id": "8a829d52-0917-4098-8805-500deac7bf49",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bb88b985-47e8-4624-8cf9-e297e51b7a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c3e7f9-3824-48a6-91ac-5e730be950ec",
        "cursor": {
          "ref": "ddf146c6-7b67-4cfe-987b-2d797ddbf683",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d76e78fe-aca1-4123-bfb7-b704303e8182"
        },
        "item": {
          "id": "d5c3e7f9-3824-48a6-91ac-5e730be950ec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d67cc8c8-05cd-4d60-9d7e-e3fa2a3f1d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f1f8e8-fb48-4004-8f61-39b578b8ea8f",
        "cursor": {
          "ref": "d01a969c-80c9-4d4c-93f7-c6ec2a2af3c8",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ca040f01-f2d7-4f1f-b661-1b4466915e95"
        },
        "item": {
          "id": "88f1f8e8-fb48-4004-8f61-39b578b8ea8f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f5677078-29eb-488c-9043-f204433690d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1272643f-6e22-4a68-a3d0-92e4ee7d0fc6",
        "cursor": {
          "ref": "e23d128b-917a-46a0-8ba4-694bddd01024",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7e36fdbc-e31b-4ea8-84a8-a5ea6c0ca787"
        },
        "item": {
          "id": "1272643f-6e22-4a68-a3d0-92e4ee7d0fc6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "065326ab-5aba-42a4-b3d3-5bf13f8b634a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b47831-4c7a-4d2d-8f93-c22cd883b671",
        "cursor": {
          "ref": "da06ae54-9946-48e5-bb67-a31010ca7dd2",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6ea13520-1963-47a0-aa62-e439aa66c633"
        },
        "item": {
          "id": "89b47831-4c7a-4d2d-8f93-c22cd883b671",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "325ab6bf-c812-4281-97d8-f3ac9614d981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21891feb-fbd7-4124-92eb-a66c411dbc82",
        "cursor": {
          "ref": "1aa55b65-a430-4cf1-b948-1836e8e4ce0e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1ece5b7d-b29e-4fdf-9206-428583147625"
        },
        "item": {
          "id": "21891feb-fbd7-4124-92eb-a66c411dbc82",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "db6ab4df-b961-40eb-b147-25f615c903e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504ebd18-bd7c-49ec-8c6e-81127d0da362",
        "cursor": {
          "ref": "bcaeeac2-63d5-4c04-bf8d-b1c49ec67a35",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "52708cac-89d7-408d-8c41-f76a72eadd9c"
        },
        "item": {
          "id": "504ebd18-bd7c-49ec-8c6e-81127d0da362",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4e92106f-4cc5-4bf8-b580-43d3bafacce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc91d559-80f7-4f0c-89a5-93bf2ad089e5",
        "cursor": {
          "ref": "81537471-b2f4-4f93-ad97-c0c44ebdc7e4",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9a3e9933-2825-4a04-bc0c-8caebd3a4cf6"
        },
        "item": {
          "id": "bc91d559-80f7-4f0c-89a5-93bf2ad089e5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ca2ec1c6-9f13-4804-b894-7486ebb9d1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a760d95-fa20-45b9-bd61-54e2dc732f98",
        "cursor": {
          "ref": "3e0c1f9a-ba88-4030-b162-02f42b91f897",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cc4c31c2-b836-4040-8196-79d64dac1bbb"
        },
        "item": {
          "id": "2a760d95-fa20-45b9-bd61-54e2dc732f98",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "373ab4b2-3d3a-47f3-9b05-e97df113bb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c701267-1ef2-43de-8fb2-c7ed237cee37",
        "cursor": {
          "ref": "799cf671-f5c0-4311-baa2-a3d6d4074d23",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d6d07377-a69e-47be-ab5a-82dbdf83a652"
        },
        "item": {
          "id": "5c701267-1ef2-43de-8fb2-c7ed237cee37",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0b0f58a3-3b58-4b8e-ac80-7b182d0323ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117dd2a6-c94a-48d8-9a4b-314073cd585a",
        "cursor": {
          "ref": "8facd2df-3c69-4716-bf43-c75427308145",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a9a7267b-74eb-4c86-a37d-82767f886e07"
        },
        "item": {
          "id": "117dd2a6-c94a-48d8-9a4b-314073cd585a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6129c182-64b8-4787-86dd-584b5a973829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508f2ec7-20f5-4096-a184-567152ea1e69",
        "cursor": {
          "ref": "f686c3d0-703b-46bf-ac4b-e2a2a5810f51",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b5f8a96e-74b9-43f0-8076-ce6f332c12cc"
        },
        "item": {
          "id": "508f2ec7-20f5-4096-a184-567152ea1e69",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cd1a43a8-17b2-44ed-8532-2433dcd3ae34",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3658ef63-636e-4954-a38b-db086e5093e9",
        "cursor": {
          "ref": "e8621b0d-45fa-43d2-a452-169446163b10",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e3a3601a-01d5-42ea-8bfc-a36cfcae6258"
        },
        "item": {
          "id": "3658ef63-636e-4954-a38b-db086e5093e9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5c3f646d-11e8-4b6b-b9df-0d190d1a7af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd36baa-f164-4f61-a4b9-e897f4fe9b0e",
        "cursor": {
          "ref": "96e2877a-780b-4061-bd10-4594570948ed",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "14dfcf4f-3d37-4204-b2cb-0130bd423797"
        },
        "item": {
          "id": "cbd36baa-f164-4f61-a4b9-e897f4fe9b0e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f25e68d9-fbc4-4360-a2ba-4111873678c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5f436a-e032-438d-ae66-48a6d49ce963",
        "cursor": {
          "ref": "f2efb202-af1c-40f7-98fc-a7e822d8e880",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f2d4313b-33fd-4eaa-a601-093efafbf2ef"
        },
        "item": {
          "id": "1b5f436a-e032-438d-ae66-48a6d49ce963",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3b11a2bb-779e-4f1d-87f5-781d5c2d5599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12036bd-3b18-447e-853d-26902a79e2be",
        "cursor": {
          "ref": "50e1910b-b4d7-4470-8c24-ebf5ac9e3baf",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8648df7f-5ad3-4bd6-a808-370d73affa49"
        },
        "item": {
          "id": "b12036bd-3b18-447e-853d-26902a79e2be",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "80754b73-6fe4-46cd-ac28-9032d55e2ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f49618-ab4b-444a-a9fc-a7e7eba080d6",
        "cursor": {
          "ref": "9b6ab171-b965-466e-aaa0-1a52a48b260c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0be19ad7-ef59-4123-af2b-da669f2406ee"
        },
        "item": {
          "id": "a9f49618-ab4b-444a-a9fc-a7e7eba080d6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e2c2ccef-7669-417d-95c8-8333da9dbc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b867f2f6-4de4-4ba5-b45b-a49d63e50658",
        "cursor": {
          "ref": "15886a85-1909-4eeb-b889-ac7c9420184c",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4c4870ee-b5cd-4fdd-8c07-e59951fb9d6b"
        },
        "item": {
          "id": "b867f2f6-4de4-4ba5-b45b-a49d63e50658",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "41b0ce00-caf1-41a9-b48d-364928c6981e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c699ab-d28c-46cc-a94e-8a8f2385ea73",
        "cursor": {
          "ref": "588251c5-ca40-4b73-9d02-a6dca3e91ab6",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "05fee6bf-d416-48d4-9e64-21c65478bd6d"
        },
        "item": {
          "id": "35c699ab-d28c-46cc-a94e-8a8f2385ea73",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "afa0163f-76be-479e-9e1e-30dabf89a9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6888f8-90d8-4acd-bf2c-63887327337e",
        "cursor": {
          "ref": "a326991c-6b53-41ea-af10-d913e8a37cba",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "541e7fb2-c53a-4770-a5e9-07408f121650"
        },
        "item": {
          "id": "ac6888f8-90d8-4acd-bf2c-63887327337e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1590e3ea-4e30-4ed0-b1e5-c1f408bec8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa0f55b-79d0-4aec-b2d3-a5cf00a9e16f",
        "cursor": {
          "ref": "f3c7f39f-d34a-4d25-a712-734f854fe0df",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb5253ec-cf08-4823-89d7-17df6537aeac"
        },
        "item": {
          "id": "0fa0f55b-79d0-4aec-b2d3-a5cf00a9e16f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8a66a3a0-c91e-464f-b472-f3c65d01ecb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47fe2a1-83ec-4452-bf9c-ef7ca6b9c625",
        "cursor": {
          "ref": "a00d3682-94d4-40d4-8f11-669f119c3f48",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5323d822-51cd-4ece-9c91-ac6ce6d3c4bc"
        },
        "item": {
          "id": "b47fe2a1-83ec-4452-bf9c-ef7ca6b9c625",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "05ed4751-f286-49ce-8fdc-385cfb0bc208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 903,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17157b9-18dc-4753-99e7-311f53a6a70b",
        "cursor": {
          "ref": "56a10d9c-02d6-449e-bcef-660d7f5a4d84",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3fbc7e24-5a56-43b8-9aef-37ea88c011ac"
        },
        "item": {
          "id": "b17157b9-18dc-4753-99e7-311f53a6a70b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6b0413f7-88dc-4a7a-81e0-d504238a0d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc165fad-ddb2-48d9-bfad-3b8b5ad867e0",
        "cursor": {
          "ref": "9fef5802-9059-47fb-97c1-c40a8d453394",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9fd0dae-4546-485a-83bf-49676b5ca49c"
        },
        "item": {
          "id": "fc165fad-ddb2-48d9-bfad-3b8b5ad867e0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "82e5646c-b130-4717-b0d6-679eb3e10d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff1bb12-e609-4b47-95e3-40c56087338f",
        "cursor": {
          "ref": "ec5a545f-a97f-4124-bd94-05aadf9fc4b8",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7df0fdd6-36fa-4b0f-b4aa-5eae278b03e5"
        },
        "item": {
          "id": "cff1bb12-e609-4b47-95e3-40c56087338f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6dee003b-c725-4b5e-a374-f0c4f67f32b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6a220a-e428-47cd-b373-c4a3dc2e275e",
        "cursor": {
          "ref": "5dec3e37-63cc-4f37-bf0e-6a53b0d1345f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4a3a943-0b50-4a9f-b36a-71c76d8f4a1e"
        },
        "item": {
          "id": "7e6a220a-e428-47cd-b373-c4a3dc2e275e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c1b290ea-246d-4d3f-84f7-35ac52ac6966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e563dd-8fcb-42f9-a4a6-f6732f6f7d6a",
        "cursor": {
          "ref": "479c6078-d227-4a0e-9ce0-5af81b41e782",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dbe99eb5-2afe-4254-b635-075a2162d6e5"
        },
        "item": {
          "id": "d6e563dd-8fcb-42f9-a4a6-f6732f6f7d6a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0a1dbcbc-4e2b-4f7b-ad30-774b6da69f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b24906b-cf00-4f06-aabe-db7358154111",
        "cursor": {
          "ref": "40305de1-e6eb-42a9-8ad0-bdcfc3160504",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "13af728a-1a39-46c3-8492-71be46640611"
        },
        "item": {
          "id": "2b24906b-cf00-4f06-aabe-db7358154111",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cfef86b5-d209-4cb6-b2cd-641a3b90f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b23fdc7-56ef-47fc-a1e4-8fd356ee2e44",
        "cursor": {
          "ref": "da3d2edb-62ad-412f-a167-4b17baad1512",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5ab4e406-1de4-4381-be5a-884d90c7bab7"
        },
        "item": {
          "id": "1b23fdc7-56ef-47fc-a1e4-8fd356ee2e44",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b789e5ca-68e6-4249-995e-4179bc9bfa48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dff306-a680-4473-8e0f-4cefeab1c5c6",
        "cursor": {
          "ref": "41504033-2ae6-4fab-894a-7cca3b1afb8e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "051144ba-266b-4f19-80a4-049e20d194a6"
        },
        "item": {
          "id": "60dff306-a680-4473-8e0f-4cefeab1c5c6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5cb89a81-bf33-4709-b060-244400f3c705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9a76e5-242e-44a9-b39a-f7e8b6eacee5",
        "cursor": {
          "ref": "ec405448-1c86-4563-88f3-27bc60ee9d88",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fc00ed71-7bbc-4a7f-ae15-65b1e20c17cf"
        },
        "item": {
          "id": "ca9a76e5-242e-44a9-b39a-f7e8b6eacee5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b46cbf3-39fd-4b83-92bc-e1b14937d8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab894b8-290f-46a1-973b-b84daf93677e",
        "cursor": {
          "ref": "fe58ee55-6aec-4c94-8752-502f2c9f3452",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fc42c14b-1baa-4f5c-b511-a6141f42e2fa"
        },
        "item": {
          "id": "7ab894b8-290f-46a1-973b-b84daf93677e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6f252dce-191a-4b82-8469-e873448c9e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea9d92f-8fad-42d4-8493-bca12ef6958f",
        "cursor": {
          "ref": "0316b98a-32be-467f-a832-d5f6a5016675",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7962ec8f-02bd-4e82-b3ba-2025b71e2cac"
        },
        "item": {
          "id": "2ea9d92f-8fad-42d4-8493-bca12ef6958f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0433a27f-2b56-432d-81f2-20ed83b82960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244cdf31-63c7-4426-8434-87388bc96f17",
        "cursor": {
          "ref": "d7c77416-f0b0-4cc8-afad-cdb60fb506b6",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9e90b7a7-9d5f-4eb0-b8bb-eefdf341a4ac"
        },
        "item": {
          "id": "244cdf31-63c7-4426-8434-87388bc96f17",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8bacd599-50b2-4ca8-8cd0-c30edb768c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5c442a-5bbb-4172-adc6-ce8314ccc3a1",
        "cursor": {
          "ref": "ce336375-3b3e-4c8e-a537-0fea6fe701fc",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "680f5911-0c00-43ca-9e6e-22f25686ae70"
        },
        "item": {
          "id": "3d5c442a-5bbb-4172-adc6-ce8314ccc3a1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed102d94-f30f-4fbc-9492-29803a2e398c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36ed85b-f102-4ceb-a80f-a2c9909a94bd",
        "cursor": {
          "ref": "28e0f837-e667-4363-bcc5-ae60760f828e",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f9999ad3-7aa8-40e6-a65c-0bf8b22399ba"
        },
        "item": {
          "id": "d36ed85b-f102-4ceb-a80f-a2c9909a94bd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e208f72b-e4cb-4eb1-a913-0c8093b536aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e31e64-e23c-4558-af69-51985b45048e",
        "cursor": {
          "ref": "e30ec1c9-1242-46ae-8487-e270930d2d56",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f83f0dd4-b7df-44b5-83ea-66f081547b37"
        },
        "item": {
          "id": "24e31e64-e23c-4558-af69-51985b45048e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "71ff2b5c-a0de-4aa5-9c86-250355699e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5aeb507-9717-44c4-ade7-86b926b23658",
        "cursor": {
          "ref": "d9141bdb-619d-4b59-9b1b-458ce4f30631",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7804a4c3-8de1-4377-a3d1-68a8ce0aa4ed"
        },
        "item": {
          "id": "a5aeb507-9717-44c4-ade7-86b926b23658",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7bf1a64f-de11-465f-ae9e-c34435d98862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15caebfa-0378-4977-88c7-d8ee6d89623a",
        "cursor": {
          "ref": "dec56988-970d-4251-a48f-22af0e262420",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "432c5ee6-e4da-41a3-abf3-a3bf20fb8045"
        },
        "item": {
          "id": "15caebfa-0378-4977-88c7-d8ee6d89623a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8f539120-a1b6-4df8-80e2-a1ce63649486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c077fd-e63e-41d5-9ee3-83a2029272cf",
        "cursor": {
          "ref": "72c8aa28-65a9-47a5-840a-2fdb13682330",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9935369e-1746-4afc-837d-c1c3969439b3"
        },
        "item": {
          "id": "19c077fd-e63e-41d5-9ee3-83a2029272cf",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "08614d26-a6ce-403f-bbbb-ea5e09cfd591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7e54ee-bd82-453b-a346-cda4a7a841cb",
        "cursor": {
          "ref": "03cf202b-ab0a-4709-8c23-8eaf4c512c1b",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e2a71137-eabf-433e-b215-1f5f22273bdc"
        },
        "item": {
          "id": "2d7e54ee-bd82-453b-a346-cda4a7a841cb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dc27616b-f6be-44e8-86aa-370e94015a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5da6d40-81d0-43a6-afe4-e10d51c78097",
        "cursor": {
          "ref": "ce99a625-1318-4cea-91aa-4bdbf1e81973",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6cc7b5e8-429f-45e3-b6af-b4c8a8d76f84"
        },
        "item": {
          "id": "d5da6d40-81d0-43a6-afe4-e10d51c78097",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b600b989-bd4c-442e-846e-caf2e24b21f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84314e7e-ebd5-4ab9-853b-51f3002e0af7",
        "cursor": {
          "ref": "7c67f5ff-4f0a-43fb-b5ab-d0d2a4e115e5",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "11160bbc-634e-439e-8b34-8c30b5648d82"
        },
        "item": {
          "id": "84314e7e-ebd5-4ab9-853b-51f3002e0af7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a5dd9936-f108-4df7-a2fe-59548f407c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319ad474-fef5-4821-a167-2859647cda15",
        "cursor": {
          "ref": "b5dd7b6a-43ae-411b-b0d2-17fe56ebc974",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a8714a4e-c096-4740-a96a-3543eb2164b9"
        },
        "item": {
          "id": "319ad474-fef5-4821-a167-2859647cda15",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1b20ec43-0f2a-4352-ae3b-6fbfc554ff84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb61c6-3fab-4d76-89f6-e03b1d4aaa0d",
        "cursor": {
          "ref": "ff6ec7d6-5131-44fc-bef4-b24d6edac196",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ed775000-7c3d-43f5-a844-011e747b9232"
        },
        "item": {
          "id": "9acb61c6-3fab-4d76-89f6-e03b1d4aaa0d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "06c1e734-36e2-44c8-8156-d730860987f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c006e3-7d61-45a6-a097-eaeea2db490b",
        "cursor": {
          "ref": "59d89ea8-6fad-4cdb-b24b-8fd8a61d6599",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d4b08b56-01ba-406e-9a7b-701513d87b50"
        },
        "item": {
          "id": "21c006e3-7d61-45a6-a097-eaeea2db490b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "291d7ba2-9ef9-4560-a1ef-b70481319305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4338bcf7-332d-476f-a13b-16d8d57b8fec",
        "cursor": {
          "ref": "1bb7bb0b-4b75-461d-9308-b2e9110be623",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d0c8ecdc-5b69-4f7f-8d20-5ccaa5ae5f1d"
        },
        "item": {
          "id": "4338bcf7-332d-476f-a13b-16d8d57b8fec",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ab301d84-f3d2-400d-bdf4-7f186f76de6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abd1765-c1fc-4e8e-8d7c-417c96cd2524",
        "cursor": {
          "ref": "8c25a74c-55bb-4231-a784-c1569836e284",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a7ba9e0e-bec7-4dab-b5ea-66f48aaa22c2"
        },
        "item": {
          "id": "8abd1765-c1fc-4e8e-8d7c-417c96cd2524",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "10ab1d82-a8d4-43b2-9b89-4aba950c6c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e2cb56-a6fa-45ad-ada0-ddd0efe9738e",
        "cursor": {
          "ref": "7788276e-8241-4774-bd32-d31a0158f64f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9163e6e8-1f16-431c-99cc-bd2ad630758f"
        },
        "item": {
          "id": "12e2cb56-a6fa-45ad-ada0-ddd0efe9738e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6164157f-3d02-4829-8fd6-38d9a5e4377c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84062e6e-f682-48c9-a841-3fb3b43aa6ec",
        "cursor": {
          "ref": "2f4180ed-9f0d-48bc-b38c-455596cf8b80",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4c3bde7b-9acb-487a-8e9c-e75b9398ffd5"
        },
        "item": {
          "id": "84062e6e-f682-48c9-a841-3fb3b43aa6ec",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0cd6820e-5de9-4de3-b875-f0b42c9e0b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d18d550-5abe-4c7f-a708-5acacfd692fc",
        "cursor": {
          "ref": "0179ff5a-f936-42f1-aee5-5f7e0ddf994f",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ef1d8001-a408-41fb-b99e-48f32442de61"
        },
        "item": {
          "id": "9d18d550-5abe-4c7f-a708-5acacfd692fc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3b38a3f3-4cd0-407c-9a85-77d79b81da65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bb425b-a406-439b-b122-7434dd2f57fe",
        "cursor": {
          "ref": "4ae07227-221f-41e0-8583-f9739639e9fd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "75f37846-886f-4568-b260-547244226642"
        },
        "item": {
          "id": "b5bb425b-a406-439b-b122-7434dd2f57fe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c3e32199-6a54-405b-ab00-5de176859ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138dd1b9-5953-4277-bebe-a1e055910c17",
        "cursor": {
          "ref": "b7080ff5-7c19-4f4e-bca3-306028875c72",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a4f6fc3d-6875-4493-99eb-6ec3d471ecfe"
        },
        "item": {
          "id": "138dd1b9-5953-4277-bebe-a1e055910c17",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fe2424bf-1635-403a-a86f-fc0aa66d2192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae2b1dd-7e53-452d-9017-b419d84193b1",
        "cursor": {
          "ref": "33939c99-1818-4d5d-946a-896413bc0c21",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fc158a6c-07c2-40d7-a2c9-ce7a432577bd"
        },
        "item": {
          "id": "eae2b1dd-7e53-452d-9017-b419d84193b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e0019fc5-5703-47b0-b1bd-bfc3f8ed398e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a606283e-d475-4fb7-972b-8e58b7718364",
        "cursor": {
          "ref": "9e2754f2-8f14-47ed-b477-721c9897cf1e",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e23cf1c6-6b8b-4a87-a03f-d1b4b00b7379"
        },
        "item": {
          "id": "a606283e-d475-4fb7-972b-8e58b7718364",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9b9bcdea-0f04-47e2-b457-d14295418b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeafb18-341e-42d8-a1d2-fb49121b6aff",
        "cursor": {
          "ref": "00f3bf49-dd7b-41c3-aba7-4d5f57c3019f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ae99fe55-300a-43a2-a85d-47ca9ee67750"
        },
        "item": {
          "id": "9aeafb18-341e-42d8-a1d2-fb49121b6aff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "23d8e48c-1bbf-44ca-9b54-d9600644e0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2e627f-6491-4b02-88c1-7717e7dd9061",
        "cursor": {
          "ref": "c1e6d558-66de-4aae-ab5b-1b2288a71ed9",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "78ec870c-2053-447c-a7f8-d29212ad11ad"
        },
        "item": {
          "id": "ba2e627f-6491-4b02-88c1-7717e7dd9061",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3b5fc3ab-e517-41fb-b30e-cbca7931a1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b11f509-0131-4fa4-8083-66b929d160e5",
        "cursor": {
          "ref": "74b1bbd1-37b1-438a-beeb-d460d332e4d5",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4dfb70e4-af49-432e-9b18-f8e7c581b57f"
        },
        "item": {
          "id": "6b11f509-0131-4fa4-8083-66b929d160e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9426e5a6-cfbd-4db2-8854-8f0df9685065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9317ea-5b43-4796-9980-e596991a2244",
        "cursor": {
          "ref": "f03139a7-6f41-43a0-9905-50e5a26ca996",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d1f5c64e-e8d7-4ebe-be8e-328fb2ed7f5e"
        },
        "item": {
          "id": "dc9317ea-5b43-4796-9980-e596991a2244",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e6b74837-9b70-4309-8671-db55ed2acd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124f98e1-1294-489e-ad49-f6667a244e1b",
        "cursor": {
          "ref": "5a3b2273-1216-4f20-a27a-88a4fd8bfb8c",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cc7fafb0-6676-429e-b76f-ad8fc93d9654"
        },
        "item": {
          "id": "124f98e1-1294-489e-ad49-f6667a244e1b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "01c2763b-a951-48c6-bd05-d4b201505ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10ffa32-7643-4435-b98f-6a1aa34f5209",
        "cursor": {
          "ref": "d3a22bab-b7a6-43a8-b926-41b36c0fe367",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8cd250b3-ea70-479b-a409-150dc7ed2f11"
        },
        "item": {
          "id": "c10ffa32-7643-4435-b98f-6a1aa34f5209",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bc167a97-d716-4b63-a78d-b37dc84ce5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346fdb05-66cc-412c-a2cb-be8625f696f3",
        "cursor": {
          "ref": "03b3732e-b0b7-4fc4-9e61-6b4d8a7db9ae",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "df01c174-6ef0-45b8-a0f9-398b5e58e1e2"
        },
        "item": {
          "id": "346fdb05-66cc-412c-a2cb-be8625f696f3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "266caa55-ce12-407e-a641-edb419b09407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a657b9-ade5-4ad3-95d4-524db37feb77",
        "cursor": {
          "ref": "f9adabf4-d446-4518-91b9-be7f11f5f952",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "df5bea9e-4238-4056-9189-a8bbc30048ff"
        },
        "item": {
          "id": "b3a657b9-ade5-4ad3-95d4-524db37feb77",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0790103c-3974-4aeb-ab57-1200ab97a4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac1abd9-4e97-42bc-a463-2e0974d56d7f",
        "cursor": {
          "ref": "fc856b5a-4329-4410-9ea7-d3bb1dfb7c5c",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "91a7762d-e61c-4787-bea4-15279f407fe1"
        },
        "item": {
          "id": "9ac1abd9-4e97-42bc-a463-2e0974d56d7f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3f8926ec-ac25-4abf-b2a6-dffeb352ee34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96473d03-340f-4dfb-8239-2f9507b2b546",
        "cursor": {
          "ref": "787e7c63-c6fe-44ee-8955-d3f271dcffb1",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e1133929-821b-4140-9c7e-2f18950b7813"
        },
        "item": {
          "id": "96473d03-340f-4dfb-8239-2f9507b2b546",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e19063fa-f42f-45c4-a33f-2e9deec7ca6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c36eff-182b-4024-a50e-223264bdcbf0",
        "cursor": {
          "ref": "86e85f55-f39f-49bc-962d-23e43561c719",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "97b445aa-f9e7-41f4-a6dd-91e438442c09"
        },
        "item": {
          "id": "43c36eff-182b-4024-a50e-223264bdcbf0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f699b0f3-5a94-4d7e-b34c-3dc9dc51aa01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572aa221-d47e-4e1a-982f-2198d3f85812",
        "cursor": {
          "ref": "e0877314-0c04-4c1f-80cb-41f9375ec2e2",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dfb3402f-a406-4303-91ed-9930c850502f"
        },
        "item": {
          "id": "572aa221-d47e-4e1a-982f-2198d3f85812",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8cf57c2b-3e51-443d-b34c-4e0be75f3dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d095bc51-d940-4454-8918-443106808f09",
        "cursor": {
          "ref": "daf00355-ac2e-44d8-ad47-1727cea6306f",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "184f8664-e596-47d5-ab19-dd7d1a292328"
        },
        "item": {
          "id": "d095bc51-d940-4454-8918-443106808f09",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "36a34fbc-e14b-4e6c-b1ed-69b5a3c9d908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da679dda-5024-44bb-b533-4788d0b2eb04",
        "cursor": {
          "ref": "bf88af82-40ab-4600-86c2-30dc1a86ac44",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5d3b855e-bc52-49aa-a175-8e9481abd774"
        },
        "item": {
          "id": "da679dda-5024-44bb-b533-4788d0b2eb04",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9918a940-345f-4601-835b-9d7e0bd1c1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1e1384-647c-491b-9c25-3448ea708c57",
        "cursor": {
          "ref": "69b05eb6-4062-4987-a299-f5a61c255771",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "830d1059-dba9-40eb-8060-7d33c4d00c35"
        },
        "item": {
          "id": "0a1e1384-647c-491b-9c25-3448ea708c57",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "76734740-3f26-4bc6-94e9-f3cbef2248fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcca924-bd2e-4ad6-95c5-31fde6b8dc70",
        "cursor": {
          "ref": "82c6e5d3-f0fa-4d2d-9473-471425af8d3a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b091b849-bc9d-48aa-b0e4-61d68eba9db5"
        },
        "item": {
          "id": "efcca924-bd2e-4ad6-95c5-31fde6b8dc70",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9b904d5e-dde2-428f-a62b-1a3fba67ee87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e5c29-0a34-4bc5-858e-ba8b8cf99b03",
        "cursor": {
          "ref": "b80432f4-f4ef-49aa-8e40-92ecc754b202",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "88adb486-39d4-4f0c-a149-31506bd58a4d"
        },
        "item": {
          "id": "ee3e5c29-0a34-4bc5-858e-ba8b8cf99b03",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "aacf273a-c11b-45a5-bd9a-3d9cacd7b0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c115c8-cf3e-4763-ac5a-25fede35dfcd",
        "cursor": {
          "ref": "3ce09119-9a1a-4d16-823d-758e818f1258",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7aeac102-c157-45c7-a026-41106a5238e6"
        },
        "item": {
          "id": "47c115c8-cf3e-4763-ac5a-25fede35dfcd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d4f1cc06-1bfc-4ce4-ad08-4dc5b5843eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e51301-6b04-45d1-a488-81d715fc3de5",
        "cursor": {
          "ref": "f3529828-dfff-4ddd-b5c9-c9af7be0988d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "50506340-3bb7-454d-ba9c-cc03fe5bc063"
        },
        "item": {
          "id": "97e51301-6b04-45d1-a488-81d715fc3de5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b5d7923c-4ceb-4b1e-961d-ae5c13bc35e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00b7a3b-56e0-4643-8b70-d373ae8df95c",
        "cursor": {
          "ref": "b7752f82-8ac1-436f-9343-872a86e45c43",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "08286621-059a-4596-bd3e-edc7130feb2a"
        },
        "item": {
          "id": "e00b7a3b-56e0-4643-8b70-d373ae8df95c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5fced13c-e4a1-487c-9194-7a47cf9369eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3893336-f73c-480e-9e37-ec062a8b9415",
        "cursor": {
          "ref": "92803086-2ab2-4b58-9577-3f6db1020a56",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c53bc1d4-d7dd-45d2-ac3d-800e6df8ca74"
        },
        "item": {
          "id": "d3893336-f73c-480e-9e37-ec062a8b9415",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0885aa33-5c76-4e97-aae9-9f2e78fcdea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d4cc35-5c55-4d4a-974d-a3e88e3f954d",
        "cursor": {
          "ref": "8a3ca9d2-5d4d-4a21-a67c-a32112dff084",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7a353def-8e56-429f-be7d-8003e43ed73f"
        },
        "item": {
          "id": "f0d4cc35-5c55-4d4a-974d-a3e88e3f954d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ffce26dc-46de-42ce-8df1-37dfa2e5d077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1fbe70-ff4f-41f0-b2a1-90edd103f064",
        "cursor": {
          "ref": "3da5cce7-0329-4b3f-921b-6135f81c8058",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "be96333a-c92f-4bdb-a993-4d6460b92842"
        },
        "item": {
          "id": "ad1fbe70-ff4f-41f0-b2a1-90edd103f064",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d7f4e79b-7249-4dcf-82b0-505cf1e97f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc39f1c5-cd36-4c25-ac40-f80a6c35c8e9",
        "cursor": {
          "ref": "ba107fc6-c51d-499f-8b5a-6b677a17c8fc",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8f68a6f9-dbf4-419e-b54f-9c41b284a01e"
        },
        "item": {
          "id": "dc39f1c5-cd36-4c25-ac40-f80a6c35c8e9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b64c03ae-86d7-4888-a0dd-47330ae39916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cd4934-0919-4fa6-b568-7fa89440d33f",
        "cursor": {
          "ref": "50e2e13c-4c59-43be-95ad-d1c4d1d6cb0f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "246412ab-cbb3-40f2-a62a-61b46f380509"
        },
        "item": {
          "id": "83cd4934-0919-4fa6-b568-7fa89440d33f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20f55220-c260-4716-a8e4-a7e746e9b351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90ab504-60d2-4e52-b54c-8bc8ba8ebdc3",
        "cursor": {
          "ref": "38148455-c5a2-4e46-bb9e-d824333545bb",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2a30edb5-7268-40bf-ab31-25f76c55d997"
        },
        "item": {
          "id": "f90ab504-60d2-4e52-b54c-8bc8ba8ebdc3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8639919-91a7-4191-8ae3-5e362db9cb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e13194-d603-4c77-81b8-470b7e4a4e0b",
        "cursor": {
          "ref": "e24293ff-a984-4fef-97a7-8438dcc21300",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4547381d-6076-4878-8e32-6b1c53a8baca"
        },
        "item": {
          "id": "05e13194-d603-4c77-81b8-470b7e4a4e0b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f6d05bc2-c0d7-402d-a3f9-ebdc3531d47f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4c82cf-1d58-4332-a62e-9c5c74c62745",
        "cursor": {
          "ref": "e6284256-febb-42e6-91e5-9c3ca0ad3b59",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dc624499-5708-4763-89f7-05ac9ee82ae9"
        },
        "item": {
          "id": "2b4c82cf-1d58-4332-a62e-9c5c74c62745",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e9e27ac5-d7c5-4406-8e45-c1fa7099fe29",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f581fe-be1e-49f2-bb0e-3ceb518f459e",
        "cursor": {
          "ref": "4acf9b37-cdef-41e3-b422-ba6db9e39289",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fb65ba8c-0052-4479-902d-e4057e095809"
        },
        "item": {
          "id": "86f581fe-be1e-49f2-bb0e-3ceb518f459e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "44a8aeff-2d99-477e-918c-e6f0ee0a8ff2",
          "status": "OK",
          "code": 200,
          "responseTime": 652,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f61d5e7-fde5-48dd-8475-f0f99696a9ad",
        "cursor": {
          "ref": "68e2edcd-04b9-44dd-9632-03122ba1ded5",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32b0b593-c399-4e40-9f20-af9c28b34084"
        },
        "item": {
          "id": "3f61d5e7-fde5-48dd-8475-f0f99696a9ad",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "16fd5776-c409-48b4-abc3-cf2863408bed",
          "status": "OK",
          "code": 200,
          "responseTime": 603,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
        "cursor": {
          "ref": "cce771ad-f860-4d6d-8cee-ff0a8e5ca293",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1651291d-7ecc-4ca2-a834-11ece5f2ac61"
        },
        "item": {
          "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b528d085-5b77-4c2f-a80d-ce126be5cb43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
        "cursor": {
          "ref": "cce771ad-f860-4d6d-8cee-ff0a8e5ca293",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1651291d-7ecc-4ca2-a834-11ece5f2ac61"
        },
        "item": {
          "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b528d085-5b77-4c2f-a80d-ce126be5cb43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
        "cursor": {
          "ref": "cce771ad-f860-4d6d-8cee-ff0a8e5ca293",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1651291d-7ecc-4ca2-a834-11ece5f2ac61"
        },
        "item": {
          "id": "65182c48-eea9-4a7b-b60b-88be032b9f6a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b528d085-5b77-4c2f-a80d-ce126be5cb43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa259006-a584-432f-9776-afd307a53033",
        "cursor": {
          "ref": "f4e4226d-2a34-47e5-88a5-429181e923ee",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f65480ae-9a3b-452b-b104-559159c801c8"
        },
        "item": {
          "id": "aa259006-a584-432f-9776-afd307a53033",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "62f75423-f74d-48c2-aa72-42782c5c6a8d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf8512e-d16c-4825-94fd-39911b85d7b0",
        "cursor": {
          "ref": "359a0375-8260-441a-9c7e-0569c5a4ba65",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "651ae1e2-7add-428d-8bfe-1c621dcd1669"
        },
        "item": {
          "id": "abf8512e-d16c-4825-94fd-39911b85d7b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "75cbb5fb-09f5-420a-8390-6c5209bf4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "abf8512e-d16c-4825-94fd-39911b85d7b0",
        "cursor": {
          "ref": "359a0375-8260-441a-9c7e-0569c5a4ba65",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "651ae1e2-7add-428d-8bfe-1c621dcd1669"
        },
        "item": {
          "id": "abf8512e-d16c-4825-94fd-39911b85d7b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "75cbb5fb-09f5-420a-8390-6c5209bf4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8d7570a0-3526-4ead-9fec-2d2120c9b82d",
        "cursor": {
          "ref": "593ac13f-c422-4ff6-adf6-2be063bd7a32",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "67f5aa27-f446-4200-9eed-73f476b7864e"
        },
        "item": {
          "id": "8d7570a0-3526-4ead-9fec-2d2120c9b82d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ea4293c9-b06c-48f2-aec6-79f67279c4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "53c0c79e-18ba-4732-8868-cfc7a57da926",
        "cursor": {
          "ref": "46503fb0-6503-47b1-a760-53999795ec6b",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c5044e7b-1334-42e2-afdf-951041cfcd2a"
        },
        "item": {
          "id": "53c0c79e-18ba-4732-8868-cfc7a57da926",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0cc4fd3d-3628-4b05-9e1f-d9510c63a9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "53c0c79e-18ba-4732-8868-cfc7a57da926",
        "cursor": {
          "ref": "46503fb0-6503-47b1-a760-53999795ec6b",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c5044e7b-1334-42e2-afdf-951041cfcd2a"
        },
        "item": {
          "id": "53c0c79e-18ba-4732-8868-cfc7a57da926",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0cc4fd3d-3628-4b05-9e1f-d9510c63a9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "1210aa11-c315-4e5e-9436-c8d23cae20ee",
        "cursor": {
          "ref": "73c90099-43de-4e69-a3bf-4b7748e014ce",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d35f4f31-bf7c-4978-ae90-672371d94ede"
        },
        "item": {
          "id": "1210aa11-c315-4e5e-9436-c8d23cae20ee",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "dfd7280d-27b7-4f81-81b6-116fb1c9cf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}