{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "09e44b10-adbd-45af-a290-3cfc35003d6c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "71d2243e-1fa9-4559-b92f-6ec5fe17d021",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67d858c2-58d7-4627-a553-12d9ac040b68",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "42652eed-d1e1-4a37-a6e9-7716bd3d7c02"
                }
              }
            ]
          },
          {
            "id": "3d908cc7-2326-487a-838f-603ebedac7bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76df16c3-5553-4252-8846-fa11657a5c23",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c48f4a9b-3e20-4f2d-86c0-f36cc538e3a5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c10602eb-98c3-4d96-af81-5aaabb03ca86",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e7e4e992-7b35-4c32-bf44-5bf1530d096f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59656e95-3b10-4886-8950-1c7424cc25de",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4103176d-e4ac-4374-805d-a3f15486aef2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9430fcfb-05ee-4e47-a73e-1ad260044d48"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ec9bbd4-cbcf-44bc-8a6b-77a1bf75e738",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a04a679-b7c0-43f6-8e29-50ff1ef9d4b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b14c0618-61dc-4f41-8bd5-36de337d4e90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c2b2615-a51c-4800-a4ce-d62aec5cd0c6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0c80917-7fee-4324-84bd-b7fd0f7c77b0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0acdb43b-8c5d-42a0-b9b0-37e16eda24ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58c6fced-d361-407d-acee-1b2929d29990",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc663afb-a715-4f63-8b16-bb8b3607c6f3"
            }
          }
        ]
      },
      {
        "id": "b523e7e3-f10d-41d5-a694-2232028e6f4a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4650c0b5-5359-4b41-99f5-407ceaea2f56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8f523ae-9331-40f7-8b1c-7bdcf2dc68cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2965ae8f-035d-444f-9516-7d1f0f80df73",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9a03d1-b6b6-4c5d-897b-6ebb43747bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b37227f-b6ff-4697-b989-7acac1db1744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f7bd98-b763-4110-90b6-37b080b3ec1f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7deb260f-074e-4c9d-9671-ec39404eee7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d271969a-7618-4b69-9e12-ce8d3008a201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca685e79-b117-4b89-a2b1-8173dbb1dbca",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10974e41-e0d5-441b-9270-9f7885fc0398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a5dd104-6750-45b9-8180-12c32c42f582"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d241e098-4f30-4725-8349-39fd8683143b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05278db3-7f1a-4ee9-9a1d-f396eecf0eeb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a27e464-98ec-4d73-b48f-3c5053ce9f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e15445f1-189c-4614-9b26-7d1c69992bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f444b33e-0b07-4b9a-b881-72d02d9cbb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca84a690-7fcd-4fa6-9e62-9bf7ed8e5c80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6e1e7ea0-c077-4bd1-bd8b-2cf66aa4ec90",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ca7ab2b-b7fb-4625-849b-4d4d0efc9fa1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65566bfe-b5c2-4d14-86eb-c119b92fc274",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "df5f2e8a-54b5-44ab-8e69-22ea2755b17b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b86d699a-cdfb-45a6-b751-82b2840478bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "718bd181-fc8d-43fb-8b40-213fea7ccde5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f42dba13-e0ef-4c64-aa97-a2f02336b749",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "affbfd91-f21d-48f4-a4c3-c66957290949"
            }
          }
        ]
      },
      {
        "id": "10e1ebd0-d047-48f3-9fde-0ac3457e3110",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7354d791-8277-4441-9f94-0135cd91422b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0436a2d-139d-41b9-8781-2cde0b91c74c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "af85ce9e-5544-4355-8d54-a9d57c92ac75",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56846bd-baf1-4279-a1f7-ec90692be5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52c4755-ba46-4d3a-957d-2c59e7be03df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03e1524-e3a0-4297-8447-387897f9ac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37ee2024-5cb2-4c10-b2b2-0b86b0bc125b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca24fc26-4a27-4646-8e9e-7fa6edaefb49",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bb0923-addb-4d31-83f3-ad1c9182d696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42061e9-c969-4f5a-887b-efa42061e6dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30877671-78e8-49fe-8e91-2b34ae36432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d9ebf4c-2074-4a9f-8cb6-63c51f94f167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c24906-55df-489d-ba79-ec704a86b492",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1f3421-dd84-4c8f-bacb-bdd91fe755f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c41f73-b489-4a5c-a357-70574350c8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1f56dc-6589-4d16-b934-3d1fa3e90a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34b82e3f-1925-4698-9879-c85624247bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67e1772-0101-4637-aeac-669db6692407",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccdb8f7-4442-4b37-8a38-9327134ac446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cc90f3-6efc-45f7-b9a4-f38dca5ae1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6718d989-b525-42ae-8ffc-ab8bb3d5c747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4138b754-38f8-40c1-bf0e-f61b08966665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e05b39-8153-49c0-80ad-f6915b3b2241",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202fb684-df9e-4337-ae1d-0d4fe4759c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d377b428-ca5a-4ec8-91b2-eacd7fd2f7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527ff2d0-bd02-40df-9393-18ac3855f385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2f20b23-0358-487e-a751-7900bd980acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ef4fdd-4f6f-4fa7-b552-6a50b8f3a247",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df08a61c-d96c-4431-815e-6c1b8ecd64f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1d1bed-fcce-4dfc-993e-843abc9a004e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab1a733-008b-4ee9-b57a-3491aef37104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31f6a071-6f2d-453f-87ec-2f693f8b9707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213e71a5-5b34-4471-a255-5a64217ce679",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bb08ba-0c27-446b-8664-805f55aab72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2302e8-47f8-46f5-9849-ccbebf9e8ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57904dee-abc1-44d9-ae98-6bcdcccec432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41b18caa-67c3-4a6b-8061-b582ad75f77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721d1fe6-ecb7-4456-8a1b-6ce18afe3bee",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c006739-1bfa-438d-9b6c-3b1f398ec22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457f915b-8cb8-4f55-9625-b6c2c627be76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04755b10-34b6-41bf-ac1a-2e199efeb7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e104510e-e7a1-4d26-b6ac-57b73e35e0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64bc54a-f579-4f53-9e11-2d777fe54415",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44be880-14e7-4992-bd73-bd1cc219a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e39fd4-b450-42be-bec1-f13d43248dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89666039-a386-4e13-87b9-a9c7594726db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc3fadb1-f1bf-4f83-a6ab-6d89c1dcd4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc973de-be4f-40a9-88bc-b6dfcb3cf9df",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fee14d-1d65-4549-9420-b720febf8d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9e9275-792d-44c2-9258-204bff6be012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b8a5fa-e4a1-4cb3-8a0e-a0aacca49369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3252aa6b-d29b-410e-9fb8-cdd2c99c7ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3216306b-34ec-4456-ba53-96778e26cdc6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb5b56a-370b-4b9d-b344-ed92ee55d3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cd066c-4b85-49ba-8f27-f55041ce0054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35d5c54-877a-4a65-b203-fae7a3756040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3975013-f0f2-421b-a989-c391c473f451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cafb49-28c3-4d88-9c36-57c49a91225b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a559a3e8-7f13-46e7-8786-915aed8cfecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec6153d-2e9e-46d6-a0a0-8f9c90cade37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856ab9d3-ee85-4bbb-a500-3c56a48e6477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e809ecc-e837-4ba7-96db-f7ada99389f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043427b0-bb4e-4a34-99db-11990f79ef39",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0432f5c2-e701-442e-818c-e66814f9afff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562e0e26-75b9-4412-ad6a-43abc5cb28ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6e784f-a44f-4f09-a344-63b84b642c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63e5613d-c3fc-4b95-9efb-7ee4120c455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462d6b6c-8e1c-4721-bb56-c762b366d86a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a71f0b8-f9c4-4c03-b29a-5691980ea7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d74e343-9be0-416f-a236-289392282e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f13d6c9-d7f4-4543-94bf-c150dfb69109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c12c8f37-a9da-4761-b4d4-ea5c63efa94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94aaeb-69aa-4025-ab39-81a5488a9f4f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b14318f-92d9-47ef-bf5a-1cd489fc0adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65fd35f-eb98-4a73-a1d9-a1e18f31f07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4f2f52-25b2-475d-b0ea-49529a86945a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "431917d2-9ea0-4a8d-91fe-7387ff4fdbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a826a5-5d6f-4d65-96b3-98174816ca0f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ef28bb-69e9-465c-b8f4-2950ceea661c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036416db-4316-4e13-b442-fe8806a59a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5635b7-bbee-41fc-8cbf-6d4d8967475c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1abda6ec-8a28-4ce9-bd33-5f3efbdfe81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b40ef3-29d4-4a9e-9711-a467ac3e178c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea66c3e0-4b35-4843-8d4d-a221164a4347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf031a1-d89e-4ad5-812d-0cdecbff0f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe984b3-e287-42b6-b093-bd75da4c41f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "124b325a-1f37-456a-b7df-ea85fe002932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdda0ac-0cc6-4829-b53a-f158f0d2da83",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e6f600-f285-4e8c-82d5-12a1258e8c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d8ac9f-09eb-4ce4-94d4-7212f0b3477d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adb9be9-a4e4-4583-88ec-b88aa5ccdf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1768c32a-41f4-4093-a09d-59e7f658a038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb1f07-8b58-4f74-a1a7-7ba303519079",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ab7f32-2ca9-426a-8c82-637ee222a447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6911f25b-ddaa-4648-bf6d-9edae22486de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635d5894-a1ee-425b-a6e4-b0eead9771c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58e62554-4fd2-4810-94e7-0cea1ae12bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00c76f2-6af4-4199-b09d-a5d9407c4222",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca21108a-2e4e-46df-9df7-70c848ac8528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78872bd-416b-491c-b75d-700de316589e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfe9286-1394-4b7b-b2e8-1caf71cf06a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f69b63fa-1aec-49ae-b9d0-87ebba09428e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38688bf-dc3b-43b6-9af9-844fb2372961",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d97dd6-662c-4f34-bad3-a44e70b898ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ba8f1f-2517-484f-b522-9f211a731da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117f5567-baf0-459d-8d13-e17872f9d634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5bf4ca-0183-4977-b1ef-0faf36d618be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dc3947-cc38-46d1-98ca-d4834d8c8f45",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f72dab-84f3-49c6-ba7e-6a447176e17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a5aeaf-7e8b-4763-96ae-3522f1dcf771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f143cb-dd04-4ae6-9e36-e425a8c890a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7abfe74-f743-4f8f-a070-30f2e7fd3b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be0bc62-fe91-4260-aa75-6f8cc8361502",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d8589-9c7d-4a5c-b74f-c0c6902416b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a249c8e-fa5d-43fc-aa0b-ed619d53a03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf27093f-eccc-47cc-b62d-54e9ce811b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98549192-121d-4469-9875-1cfe4777e239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53674d8-8575-4831-a771-532234cabe51",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358f96a6-4158-4e52-9a66-9424a136a7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6b00e1-6908-40a1-8d1b-e061022f8a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441e958a-bccb-471b-a4f8-a05dfb46b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b71895d-2636-461f-831c-3d185454cf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279edd57-453d-49c9-805a-317a2c05ded3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a42266-3d62-41db-b241-5013b5dddb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d7e529-24b0-4c9f-9e6c-0843f5a36940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5332bea-813a-4313-9757-8bf0f1adc9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e17e50bc-7bf5-488a-96cd-b0a4d4cd0cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3966c4f8-da17-405f-99d4-8eb30befabfc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b415ac-5559-461f-805d-7e1c9d6ccc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b1dc27-bbf7-4e2d-9319-41e133773aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a85702f-a08c-4216-abd6-5abefc29c05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e2a236-8ac0-4fb1-b877-e97eca5b232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e11c6c8-7ccd-43f9-92a7-7aab61396744",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f6d754-1b67-4d94-a5ca-6f542d9a4d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3e52a8-6330-46e6-b1cc-4cca59870cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6504316f-5dee-4b5b-a8bd-bd1ea910c77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "093e5356-1ff8-4201-acb8-d0524accd1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed066736-76c0-472e-87da-86466ce30216",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66c14f1-76fc-4bb1-bc48-5806dc0cf26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590167d2-99f0-4522-a41a-4f2d6d6d41bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b95c4de-6826-4488-8381-2399aeb0ac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a041d5c-a956-4d3a-bbc9-c1d84a2c858d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030da8ed-3224-4795-b8d0-a20f0a34a403",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5f7d07-c776-4c59-b8e7-2e8a7cd28347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a1bd4b-a588-45d6-839b-92554ba4304a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7005e4-cbfe-417a-a208-8ffe8ce723ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6cce96-a3c3-4c0a-882e-365458750c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a28c39-a3ae-4683-99f0-5c6b4450429c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32439e1f-93a4-41cd-ae0c-e04f4481005c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147f271d-1dde-408f-9865-fde5d728c9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ea4aba-f04e-4e54-b389-999005096cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "297d0232-93a3-4812-a57b-2dce4beb6121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a54b254-ab70-4efb-b2e5-1a5fb3b2b4bc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b27358e-3cb8-4d24-93b2-a2727f6dc08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d39c9f-1dbb-4e4f-8a54-3404bc8a73e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8be5031-0b12-489e-a315-6d147fc2f840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a68b3-5e0b-4ce4-a3ef-90fc26af7b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed96e823-8570-45b3-8984-6f99da3b48ec",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170d24d7-14dc-4bce-9cc9-7fd9b6efe7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bae8cd9-af76-40b7-a3e9-4c7cff47acb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be3bf8c-e842-4fe7-8a09-f1e6ad44c42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce642fe-9af4-457e-803a-9127fcf3dc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed96b44-becc-4ea9-bb6c-fd847373e4f2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65749c8-e8d0-4033-9f29-f4f5dd208c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585af8ec-4de4-412f-9fcf-6dd9ee70e814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34985457-0105-4962-912a-dbb8909cb9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ff80a5-efbd-455d-9b6d-99616bd5ad50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a0756c-28ef-4081-8541-7e0bf58da450",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fca431-e4b6-4fbe-850f-a347ce10b7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630f9e02-13f2-4e4f-a3f0-c832e188c0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fd53bc-20b4-4b27-96d7-d4d06ebbbddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c5ea28-1f50-4a95-b72c-58544757f0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e1046-0b67-4bb6-944c-e357be23286b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ca1324-33d5-49a0-88eb-35d82d810039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9174cbbe-0cc7-48db-88f1-44221489ae37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa2210-1041-4c32-a1e1-be90d9a44946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "103f7750-4647-4d27-b243-d1e187a453b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8d972c-82cf-4b21-a520-d2e146b2e7d6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a522a3a-2e89-44bb-841b-478a612613d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8b32592-77de-4547-b6e9-0f1cb4144a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87a10e8-6c83-4c92-ae08-49cb9b3aa242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f22f4b3f-135b-4911-8385-782e638e387f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28f3ec0-551f-47a7-ba5f-500e5bc09c55",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9555b123-e2df-4fe8-bdbf-dfd0cd6784d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03405ca-90b8-41b4-931f-a26e11490c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7addfd-1428-4571-95ff-ef76d56946ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "265e9bd8-a299-4edf-9f61-2da61a100290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11b3a09-6c4d-4b90-89c8-3a1e09edff83",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d45fb8-6c8c-45c0-b97d-99af68ce4f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98048dd6-a40c-4c8a-bd21-c5475b015658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b771dd-5746-44a2-9838-fc8b2d0fe3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0231df87-dd37-4370-b52c-77846b6eea30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6cecc8-1079-4094-bcbd-3799cf625b92",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f9296d-5790-4728-988d-f389cc84ec56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774f4f65-810a-4a2c-9936-a64176c8141b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78938d5-c177-43ea-aa9f-f3ec03218c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e4167b-5398-4c94-83f2-1d84d10b2357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35280f5-e300-4c2c-acef-623b3bb20a9a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7265d3-60bf-4d60-810a-fd2dbfe0c844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29156e5c-c737-47c8-a416-fa52d4f12aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c473fa37-25fc-47dc-9e37-03e8af15b0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4be571-5c22-423b-a149-d2491535919f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab4623e-211d-41de-9a8b-ecf129407e87",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2885f17a-d6cb-4930-b60f-b8b6f76d214f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63911fb2-6cb0-4f91-87de-15bda25d953a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4c553d-0e4d-462f-9b7f-71407a206e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "83f1b44e-888f-4313-94ee-8b9af816ada1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f54f024-37da-402c-a5e8-f7647580d119",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb2142d-92d7-4444-b62a-932d56519c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1acba604-cf55-47b1-aadf-b21dcc4f8fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a793a19-096e-4eac-a553-9afb7bc8a6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2c7779-8a30-4d26-91fe-a6dbcbd09f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785602e2-a602-49a5-9760-dc2aeb1e9fc5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2507e02-af76-43d4-9125-7331587f42a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fbd980-cd70-4316-813b-eed299242e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e0e26a-ece4-46ea-9ba3-0ae3bc07d917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6d518c-8a87-4f41-997c-16e3c8862aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7685dd-b00d-44b7-813f-a2130e82a931",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a766df-696e-4f9e-bd4c-ba5233dcfa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4a4ccc-1c6e-4846-9706-91ede526b4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72fee90-3c2a-4c9d-8844-bceb1719aab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8698318d-8c1f-4d28-85ab-c2d855d7d5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89555ecc-f267-49b7-943f-6afa397af87d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d05546-db5b-4702-89fc-c91e05d188e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95e2b25-0715-4eb6-9075-c25167cb6444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b16ce58-13cf-4fd9-b7b2-c2d0e853fddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9f0819-0358-4ad3-80a8-8161836ade0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e33f94-cb10-48bf-b3bd-fb3f33551de6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3354153f-56e9-43a3-9bd3-bda8d684f330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71248b4-0618-4cbe-a2df-e289e1dfd069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae99f33-c91c-4487-951a-d14e296eb3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c018ce-bffa-4433-a75d-96fb5f45b9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dc87a4-a21c-457e-9281-4562de9dc0dc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f65e50-ea3b-4f61-93f9-976ff79e71a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc9d994-0693-4293-94db-4decfeb89e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248f9a6a-4b64-4079-b7db-5bb7cf480d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1ea63e-ec64-41e9-817c-f1e4fc48219f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a326c9-7882-442d-a8de-9d2a740be76f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5785d815-0364-4238-8301-47574924768a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bec283d-475a-4391-a439-c4bdf32c7108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d08d59-fa4c-4779-8b1c-c0f5cf659f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1b0cc4-02e1-473e-bee7-c71da278b9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eca2158-1325-4651-98e4-a09252c240ed",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2363ad77-61bd-42ae-9f71-bb77d54d57bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6ba062-8e56-4247-91c8-4082e87c3f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826567ad-462b-4a81-aefe-5bc48a1fa858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4005a86-6bd7-46b1-ad4d-95f163573d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c94100f-0275-41df-9f88-0a3e1bff364c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be817ef2-ac68-4eb2-bbde-5c281199f774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0709fda-3661-4328-bed2-57538c429f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5495cf-a8a4-4bbe-b918-d9456099ce96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd230964-e002-4c65-8f84-ecafc60608e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19aa274a-fb6d-4ae6-9220-72dc85e27888",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc0b41c-b8c5-4a7b-bd3f-52284d4b7511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775a2326-610b-45fd-9173-84ebd3759ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eb82bb-0f0a-489f-9e9b-f92a09e0c327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d78b50-c0b2-403e-892e-bb4a9ca57c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08da7b5b-014c-4b1c-b6f5-4680257a6550",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3b43f8-e8e2-4ecf-8cae-848377269399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807e4e1e-69c8-495d-a97b-3937f049134a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a19ad1-f22a-4b93-87ab-ac618ff199bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7c8d1c-3c35-4335-b20e-2daa1d046c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcd7e72-ccc1-4f00-a87d-7672d8e3589a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b1e1bf-2207-4168-ac31-977e24afee50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fd2454-a162-4b78-8cbe-130e8067d9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c1f4e-31c0-40bc-a84a-63559373a2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc452c57-1bb8-4852-8e1e-81eb15307deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8897c430-0c5d-4efd-957a-3eb4dae33bbb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab34650-1da9-4788-8f24-ff7d8908206c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac48599-7e31-4c3e-8c7b-c1fcf158defd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3045186e-5568-4526-b027-79a78043b049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c424f0a-6fdd-4f49-a269-f8a3af31c616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498395da-d7b8-4aaf-b39b-6f7e5a06365e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee95650-d0d5-4aaf-a946-393059250ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0279b0c1-83ea-4d82-97b9-2078a93688db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71718640-e50a-4aba-ae52-e1a076d3ccfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "934b9f44-e8c9-4c3a-9315-21ee09152a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc13775-9d4d-43db-98eb-52cc5dc91ee5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1449644-1602-4b5d-845f-cd65cb72da7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2948963-4ccb-40be-8a55-7972c19e7e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1782df8f-2679-430a-a751-8088af2e94c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2fe878d-f792-4114-a1ba-65b524c60267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1793caec-806e-4b97-823a-50e2901aac5b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411c0bfc-4cb8-487f-bd6f-be000a2607c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734580aa-18d6-46af-989a-ab059f299ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9d12c9-a12a-437c-b4b4-e841fe8c8b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "60df51c1-e8b0-4a7d-890b-415c244be420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3633cd2-9602-4c80-8c93-79ab0dcbdca7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e60c3ca-825d-4a84-983e-fc308a6eaefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41f4c2d-d6d9-4b04-9ef0-b7e85fb58fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f04969d-c232-4605-af2c-a257abe65870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be7b8606-fb57-4a8c-b3ba-3dfc1e936c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bd6bf3-0d66-4545-979a-b56da91b070f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eebe2a9-a403-44a8-91bb-a1ca034cbd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bd3e01-1e5d-41c6-b5ff-35c725d5b67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b44bc96-5547-4307-a8e8-31e86d61bd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "376a1d60-e1db-4e3a-8e70-a036706997cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403dc9fd-7a4b-4228-ab50-d20c7941af24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d6cfa-ac89-4be4-9e46-02f0526db896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aaf6cde-7cd2-4b12-a019-4d2cb82d2d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3215b863-00a7-407f-943e-dbc1d467216f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "08639ec3-de9f-43f6-aa64-396fd19d0c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0210e4-24bb-4c12-bd86-bb11de073fc1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d72b40-4e6a-4590-959d-2c0b982e23a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf98dad-2ed2-4df1-8e48-f76f0d9b9b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e8f80b-a39a-4965-b1e0-8544ab085323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "090f1051-9c37-4002-a308-d7bfd27866be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47035c9-6d15-431b-90ed-e4d67a04a97c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286be7e1-bed5-49be-9c3a-0f376ca5a0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0080507-bacd-4abe-8800-f7bbe7bba633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cb94c9-500f-4fa1-86f2-c19ae6081457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "66e6357a-be3a-42c8-83d6-0ca62e02c335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41135ac3-b5ae-4fde-abc9-c6bd1633072f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b306199-0246-4272-89b7-6807aeb3d65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c85512-ae5a-44f7-89df-5cc042905ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9404b58a-a0f3-44be-9940-e382411eeffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1daf3d08-2313-492d-b54d-fc96860bd675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca78ee6-8710-4e03-a4dd-4c2618e5d036",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fe58f9-813a-4b09-aa38-b3053780fa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfd8ee7-8996-487f-a46d-e2fe2b34d4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77230e8a-329b-4428-981a-3927f601b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34b8a7a6-852f-4eb2-b09e-acac4557c31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec394f3c-c492-4127-bc99-3d971c650ff5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d148c062-e39b-492d-a2f3-2b52aa712da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82974758-8e9d-49bf-aa25-7ff3704a4a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db8f573-a3bb-4247-bd0b-6e3c0ec40c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c3c4ac-5b41-4cca-ab1f-c36c67eca6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcf22b7-19a3-4036-98c5-6d95c215df58",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14af411-ee7f-4fd3-b681-b84b12990596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90de6ad2-44b8-4684-b799-12affe56862c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fc998d-43b6-4094-a627-5fbbe741daf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e76a38-469c-4875-8330-d93c8ed72c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db87c75-1aaf-4149-a7d2-238a021c9af2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0060df8f-1b76-4053-b401-0512c9ecbecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce0d55f-3112-4838-bfc6-b1163d2ff70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28a2f1e-5707-4907-a737-d31fa1bc8cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54122ce0-315c-4b27-b9fa-c2c73e727603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9b7cf7-53b8-4af7-a34b-6281f3269b6e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85826a7a-57f8-47a6-a1c7-9760f28b4bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adae94f8-80db-4594-b5e0-4d33cce99bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61adf981-fe35-4a46-a478-1a1cfd720808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb22e00-cb61-4a18-ba4a-28476c097d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0290e28-c60f-4f02-b6a2-d8433906b373",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31deae36-411f-4a3b-a7ee-4e1fe6ebe239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6820da-600a-4afd-a853-2ac4bc231b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d013623c-dda2-4656-84f6-74e6b7849abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edf9dffc-e92e-4b97-b778-02bed2b45992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3e5454-30b9-40e0-a73b-d1a281de6718",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda156a1-9ddf-409c-a508-15b196be5ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c618118-5540-4d32-86c7-c287fad745ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b54505-cad9-4f4e-92a5-b523b38a6e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f00bf80f-f165-4a61-8797-c60b0a180da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02243409-b28a-4e7a-aeed-55e34dfc26d1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5a9138-47e0-4114-b3e8-18e5b0a86963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e936007-1b95-4f0b-af3c-3c96230185f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57420f99-045f-4175-bb40-bafbe5dec17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1612d09-2522-487e-924e-b7394e1b10d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d50fbde-81d7-4ba1-a879-05a45df002d0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cff28f-07c6-4a52-ab25-e4448726e692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e986ccd5-43ea-476e-b44e-9d0fe0439e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8250aa60-c6b6-478e-bdec-8a33a2ef104e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f6bf9a-0d32-42da-ada3-acecbdd30ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919fc3d2-4cfb-426d-94ea-43ad1bf0dd3d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85a6467-6695-427a-8e4d-d19ff65e1a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18c3bf3-388c-4f8a-a59f-f5d2a40211a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc93cd44-cc3c-4745-b0ac-ace01b7dfabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74322d88-e26a-4397-8a8f-3b2cf1a189f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c75055-58cd-4258-8058-7cdd3ea1e359",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06af331f-c798-4b81-91f0-a894437d6068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85ed5a0-5958-4c69-aaeb-b65b405b6a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560c1314-5ce1-46b1-a151-0b6c86a19a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbcd9db-0ba5-49c6-b47f-905de3e14517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340b19e5-6ddf-4bab-a5ea-97ed31df2ce7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f547d7b-d54a-4ea9-af0c-ff98348e5622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460f2c2d-cb13-42fb-aea4-20486df0f7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00437a9d-ba53-448c-8dda-4b1460703923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "156419b7-208f-49f6-8695-87c9191c62c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5368c4c-36f1-47e0-bef6-759653264a3b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6932ba2f-d59c-4a0d-a0bb-8f255c061ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43822d2b-31e1-4b4f-896d-817db3dfafa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5602df-437d-4feb-8cfa-ec37d819eef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef51ee7-4246-45a9-bea9-a42d7722485a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342fe345-266c-4bf5-abc8-30e853163920",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea552c-05d4-4a80-b6d3-48da69346437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5c7b0a-263a-4a7e-bfd7-355d2d76086a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4627cfd-a772-4100-97e6-8d72cfe46f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f58f8c-3366-4c43-8038-17471e7f2b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03992dca-9bfa-48f9-8a8b-e7753c5b947b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2c7808-6cf0-42b6-be17-2befd92d442b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6effda2b-41dd-47f6-922e-f2a463fffa7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210c84d9-b8f3-4772-884b-fbad5d6dbbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93e737f5-8540-4dd5-9af0-951888dd80e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420826ce-009f-4408-8df7-8b06c00a2a0f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5623306-f923-4ef6-a494-d5adccd47992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c235e736-ea66-486e-8782-2d5943af485c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381c2790-4705-443e-a95b-bd750a785795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c03bc96f-0fcd-462f-9e8b-ef219ccaf0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943fad57-38ba-4b3c-a859-926f0637884b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55936b95-97ec-42cf-a621-099bf6cb27bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9691c4a3-445c-4e45-b495-82e5b4a60720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e18fd0-b240-4766-a3c0-174172576d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf1964c-2b89-460d-8496-295e0d5ffc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49b0628-c123-46a0-ae4e-7d4d66479ef5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c3e3ae-a641-4442-9dcd-fab0720b99ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9cb9e8-608d-4f2c-886c-caf8f6a4f3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72d1b3c-37fc-42bb-ade2-89f85d461c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a00c967-f563-41bf-9464-e858a08ded3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641a2cdd-7a19-4380-bc55-2703d22c3b59",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83215b3d-80c8-4659-9c45-c8f975d7c9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778a89f9-d56c-4961-a282-8230174ef682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcf103d-16d7-43d5-8830-006ae92c0148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1f993d-ecbe-49a3-b371-c6e8a208d965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d281c78a-ae24-485a-8e64-d12422847eff",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b75d4a-4239-45ee-8a86-789b8021f5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7951ce4b-19d1-4b18-934c-830513213439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d7da03-8535-4dd1-ba05-ee19543e6f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e26916b5-a705-4b09-99b6-966096bf613c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1206b68b-969d-498c-be72-09cd7eae891f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dd853d-0827-44f3-807e-f0245e1269cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad83b28b-b1aa-4cab-bdf6-7eecffaff70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce9bb59-c9cc-4111-b9f3-ae5a4d14d980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef4d431-7d4e-4896-a88c-7ef99545dc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e2c938-5361-4e72-a9ea-f4991c70dd93",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc3aada-28eb-4e6a-ac9b-5849552e0620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffd5da5-09f7-40d3-9fa8-9602f13f8253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a2f962-4d90-4ed1-a68d-a41e65ab9fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc89336-dabe-4dc4-aa6d-7691fae70044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b85c3c7-0cda-42ca-9504-293ad2aa5a59",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340a6f4d-0cc7-443b-bda8-62ded010784b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd06f32c-5e30-46d1-81c2-a44c6758b6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30a24e5-45a6-4f89-aacf-8cbb7faa6a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6326e166-6c08-4c41-a36a-aaa7262293d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01a79f8-8fef-4be2-87b7-c25b1a97ae06",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae882e3d-b99a-43dd-8f0e-5404a9b66b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca962b5a-ed93-4a7f-a48e-63a548d595cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5396f7-6db5-4a51-ae57-b7ca9b7eb61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eaceaac-3b62-48ed-aadd-0e139fb2e1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8340d81c-2887-4a2f-aad3-d5463861dfe1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b655aa-2915-4ef7-b125-35c0b875ae14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8272bdd-ff69-445d-9781-995259f91a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62fdd79-e7bf-4d65-a7a7-789fc697acb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "37e8fc88-4fd1-43d2-9f7a-9641979a7dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e5f8bb-4c5b-4837-af7b-27d3447941cf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4681eed-3d17-49ab-b9d3-35ac7f6d4e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0ebe55-cc7b-4099-9267-8aea65456e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449d0b0f-cc5a-4588-b50d-44417595f4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7425623-dfe5-424c-ae48-8328e96c1477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76da8b63-0155-4381-a21b-7233d26b0d89",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf30156e-135f-46e1-8f2b-a3f342f63f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b526391a-4f04-4bd5-a6e7-8d6f209fdef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a413f8a2-2d5c-4a63-a030-e15d390e9cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "769d45d4-336d-429f-a497-5e919e60bb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019c062e-55a5-41aa-b7be-0430b88bc9db",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8e5a5f-5aab-4cb7-b562-063bfb207c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbdfb33-1606-458d-9870-bde9ca697600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38a8d02-4d8b-41fb-84fb-dfc330cc5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "28926257-a7a7-4e42-b2e4-462d94602d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89bbc77-6dd7-406a-831c-3abfeb159beb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9509f7dd-f295-48f3-9867-84b63c130fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5009e2bf-35be-4daf-b784-64747998bc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ce9b80-b6fa-4d73-a6af-0913e1820645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "583e2294-9594-47ef-accf-4ee9a69af2d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32d9d380-244c-4364-b650-bc06627b31be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19800f03-80b6-4b1e-a23a-824c19b8a294",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc09e25-55b5-4a36-81f0-04f52c111d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4978d37-e1f7-4a7f-b88d-c8957ebd81ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee721f1-5273-44f9-b927-ac190cd42bc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6cab9e2-0f5e-4209-b235-cbd407a019ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f523d29-4934-4a2b-b769-c7a49d235f34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3060b5ed-9fe7-407c-a157-872e3312002a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a175a14a-44b8-4b3d-9015-7550c7c24200",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "235d7f84-ddaf-4e61-95df-9fbb690a64b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "645fb91d-8920-4b50-bbef-b6aa4db4fb3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4bef5c6d-0fbe-473f-856d-1abb856cc24b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "45d62bcc-48b8-4a8f-b541-c9485f8a57c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5fcf1578-21fc-47d8-8b00-3b5ff7078421"
                }
              }
            ]
          },
          {
            "id": "138cdb0c-acdc-4c73-b1df-9111051a63ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1bad1b9a-465d-46c1-8401-6cc5f346b803",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6929121f-d863-489f-84e1-084b3ce97508",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6777cc4e-9cec-4af8-a133-f2768af91596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f41be9bb-51b3-4670-9926-04613113bdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9bade9-72c4-414b-a038-373e079f7be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff615a85-6868-4d9f-b626-c584ecfca99a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0b6c9528-91f0-48f0-bdc3-bfab96523eeb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1742068b-1242-4659-9591-5f0214c16455",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "597888b1-90b4-46f6-bd97-14e41bdd14d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8957eed3-ff99-4d2a-82e6-7219d814113a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "165ab317-77df-4dca-9a1c-b7fa1e0f961a"
                    }
                  }
                ]
              },
              {
                "id": "26295da5-372a-43b8-abbe-a34f707b56d2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac31e3ab-2376-488b-a879-953bb6fd296a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fcf99ef-4158-403f-a481-cf327690c626"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06c8fb89-15c0-4fc9-839c-7b495c225178",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55efbd8b-07e7-41c3-bdcb-02f57d6313bf"
                    }
                  }
                ]
              },
              {
                "id": "10aa4bb9-4407-4657-b757-e7c135228f17",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc20eb0b-0a1a-484b-b6d4-7349056450ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e2f4936-d863-45b5-ab8f-6f383bb4c589"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5dcad01-b3a4-4cc6-8230-754112dce53d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7591e351-9822-4895-8ce4-01a76bb43d1b"
                    }
                  }
                ]
              },
              {
                "id": "132e046b-311e-4e60-8739-25f0466240a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "572e7a4c-95f8-414a-b7dd-568bd86c4780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5936cc18-6fd3-4b36-828b-cc302f6e5304"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28f56757-5e02-40bc-8480-0869731ad527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "eb760cef-0b52-4b5b-b932-f0de3ac5462b"
                    }
                  }
                ]
              },
              {
                "id": "c42206d1-43ef-4e33-88e3-8c8027e9f093",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbca0005-96e0-4dd6-8e54-07f31fff4f36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72b3ba8b-6a98-40a5-9da8-3cfa60f336d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7021e763-5327-4335-8eab-184b8522c5df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d05c1853-64dc-4db8-9031-6e6b22ff8747"
                    }
                  }
                ]
              },
              {
                "id": "f4d3e995-8261-4c65-8e3c-05b528ff4f52",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75085d3f-8344-43e4-b29b-39482d8f2c26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68eefec6-31ef-4ace-86fd-8e13772605b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5504ab0d-4a2c-4bcf-a271-4e65b10497c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40c0b130-1485-43f8-ab49-a6b1e7bac0dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44511a82-2e12-464d-961a-7bc221ac72f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f1acafb-692d-4a94-9a3d-32138ce68d7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85958aee-6221-4412-96f5-7520d1b9a6aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58729d72-4442-4319-8ac3-8ac44c61b7ba"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fafe88bc-1daf-4ec8-ab88-517e6d06e4f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1c1e1e89-5bb6-4d53-80af-cb6a8bcfd8da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc482b26-93fe-4cf6-a0f7-0961522c8abf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc3a0840-0ffd-47c9-8954-5787ff952d3b"
            }
          }
        ]
      },
      {
        "id": "9def49bc-225d-4dd4-a65b-29078e36f59e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ae7dd420-2904-47df-b570-55317f45d628",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74c5284c-3579-4756-a622-e3676435336d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f82d3b4-34d1-45f5-8b62-36ae9497f59c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6431fb09-f86f-414e-ba5e-972b54d863e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995133b8-b96d-4bcc-828b-7adf44e00bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2fb87e-3936-4634-921b-b3c50eaf37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ea3c1b-06bb-4919-b074-ee2b409bf7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f250b852-17f7-4f9c-a0cf-bddb9ae8ec6b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1dd26e-a2eb-4f13-8731-f3f25d5a2072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e47ed69-cf78-40b2-b97e-8cb0a8a6d23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c56f763-e078-497c-ab88-45904037eee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "342dcd8c-a55a-4c8f-b6c0-bca610691904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2670287b-9774-4bff-9c1d-bcccd02f14b3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4659d9-fd2f-44f3-a56b-286c148dcf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8b8ed0-8180-460b-98ef-2ccd2530861f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec5e90a-9e08-4f9b-8632-446ebf1f51b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fecb090c-b5f3-4941-8db2-3d775d71ff02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b87d31-6d06-4fe7-a52d-83794fc10ecd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3fdc68-316e-49c2-9c5c-996137805277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2087a2-65c1-4be0-bbf6-b8beb2043710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81bead9-c077-40b7-80b6-d5861f289eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f6e7e0-caf4-460e-91a5-e5f0b45e47c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aeea03c-c288-4b44-bc7f-c5858594eb1a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b43e760-e77a-4f9c-a2fd-f9d14277aa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b961dc1-8f9c-4c62-98b8-1067427adfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814047db-c4b7-4450-ab88-f2216f4228d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0487458f-c369-4ddb-bc82-f392f781e304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fbe40a-6c7f-4b17-b95a-c82d39a4cb29",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a9fe67-3e2d-4324-9886-1079b244b491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663cd81c-bed4-4e79-a71f-88de994ff594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8044df2d-efa8-463c-959e-3c8c985a7b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b21ce4d6-79ba-4e48-8022-fd29d975453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113a380e-6e70-4887-8254-81d382b1fccc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29f2dfc-eeea-48ea-aafa-b6d7b73e141e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a7fdcf-c97c-49d3-9000-d01dbd9e4b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa46ebc-11da-4b06-9222-d7bf36d2268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2bf21a-77f2-4606-8a80-73ef26ced813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c32cd71-92d2-4144-a46d-dfa65aad8c3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a87d38d-1701-476b-89b8-a1b41d51d8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926acc39-fa26-468b-b3d7-9295ae60efb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2ba49a-0a25-418c-81f4-21bcb2cea798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1713b1fe-2d37-4cee-b4d1-fdfe7c8694cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3204bfe-84cf-4355-bcfc-880486779da0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27c70ce-3f69-4388-85da-fbc1a92f9ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98a0c1c-5061-460e-8922-df7f0d2be54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162b1465-da56-4cfb-8692-f0149b1a39c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3abee2b-61e1-4e53-94a5-416898a3b0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c99c106-e690-4ef5-bd73-51ed4a138a35",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef04181b-df77-465a-9c97-b84861906d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bc8e32-0d7a-4a52-9906-d5c3009901d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe5277c-b542-4d29-a857-58f912ad312c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa213656-fe69-4c88-9a24-e2bff664264d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1084279-cf43-4546-9060-15a00942fa53",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4450b446-6859-49a3-9257-246099ae60e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86efc49-52df-4d34-9249-b23e10692d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7bded4-28d8-4139-bf31-888846101f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3b5527db-d57b-4238-88e8-1605afe5998a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c030f388-8ef4-455b-ae4e-070eb2ec6e31",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6b18f2-f082-4634-80ca-73426a55a506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cea748-1e78-408a-8da8-2ce3b7aa5dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbcf01c-8a90-40c1-9cd5-df286382ecd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08b9ea51-26e7-4835-8c05-24b6677705e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e59c7e-87ad-4e60-9df6-787161f1c2d0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dc8177-faea-4cdd-a441-3bf18a1b678f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba0de47-2021-45cb-98de-cdf31f93c1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c81ec9c-3c69-4d3c-813b-aeb9c6208566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b07822-ae49-4174-8bbd-e414a41a8a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a01c5f-8229-45a2-8712-db912e0a8ece",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7f0562-0de6-49b5-b5f7-7f33223d96b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2dbeaa-a353-4789-bd61-cf0f39eebb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c343ac0a-eeba-4b38-858e-ab5428612ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4f724f-bd2b-44b9-bd55-7ea890c5113b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b646995-d7b9-4b5e-a617-4395d2f29ffe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06f5bbf-9ab6-4023-9e98-6a76e38a404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b7d0e8-72ab-4c99-a440-040d3feb4244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc9fc3b-e5af-411a-add8-f7d5144db7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "215541e2-175e-4cf9-a43e-70d220a624be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ba90e7-d6f7-4330-9b9b-7bc1b966e43c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bafa6fc-c1ed-450c-9bc6-8e22b980383a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1ad615-9a36-41f1-8754-e08f22f4d036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e66db4a-99a0-45ca-ac1d-dd24c8914951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfd8f61-1814-46a9-beab-ef9e15b70185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41b47b8-b516-4a65-9faf-e82dbfae2a80",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891195b7-81b3-4915-918c-a413a1254145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f960bee7-f036-48cb-a2ea-2943dce6edad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a8acb4-132c-427c-8dd2-54e8cc656718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9526d6de-5544-4799-be3e-d77da9a97d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c9f872-35ec-4868-a33e-39b64b431d26",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914ad00b-ec35-4f07-9a90-b8dcf33eb9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490084da-7a91-4e70-8288-911d6b0358b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cb3987-9b6a-436c-bba6-87c7e9cb535c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8786066-7434-48b7-9403-806e548b4a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd08632-1726-44a5-9bd0-acb4966b518a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c041189-f3c1-4bbe-9491-7f3f559fddba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0152894-b012-4cae-acfc-be43c9e591fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd4d35b-b4fc-4230-86b1-2e0f9f0a2d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1824d82-91ef-4d08-9c34-f9ded7e190e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d373c70e-4959-4b8f-a24d-4dacb045a28e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36c202f-09c5-4a33-a30c-6428e28f1307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee66102a-9011-46ac-9233-2a944e85a660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defefa26-f3e6-441a-9249-e26752d4dbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a0c7dc-06be-4a44-8455-b9f968acf7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f53eae-12bc-43db-abd7-b44ee7a98318",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62088c03-b4f0-4767-b012-328d0326808c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776e9ef1-25ce-4a18-b13b-875b740b7fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ff1e60-8b43-473d-a344-cc98e62c2337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6399b112-7d8a-4a47-b613-7860d153ffcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7f8a8f-74d8-4f8b-8d77-48d4d9c4ae28",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c675db6-d0ff-404d-bd08-e45728be53a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0c42ca-c003-464a-adf8-d2f94e7b499e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19478725-5437-423f-9b69-aef81c2fafd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8862af-d5a4-4108-a2b3-6a51fb264be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5a90c9-5867-471a-8fde-a099624bb7b1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aff1e19-4316-4111-98e9-22b49869f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed322f54-b5b8-49fc-9e89-d4157d22c51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d6ede2-a3cc-4022-a895-684eba6d3e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dafba85-8c16-435b-aca0-8b320e5388e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25c0ff8-8e45-4bd8-b181-0d67f4d11886",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b26ce8d-c6bb-4223-86d1-7b7b36997e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9f5170-5522-4b2e-83c7-44b8fa5df4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4324e58c-5967-4b4e-a2e3-8fc03394ea1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f347a84a-0a4f-43b4-a3f6-f29927d6c23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c56fc7-020c-4342-876a-47a2251d6740",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d5812c-b0fb-44d2-b790-c2022730bbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf39119-6f4f-48ac-8484-eb51ca7615be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068b4e63-afec-4fcc-9c71-176ac3b8b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac103bd3-b5d4-416c-9827-69cf90032ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e722ee-cd89-4ffb-9189-c528ad53a402",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26887ab-cf97-483d-bfe9-dcef96bf8b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a706b04-599c-409d-9998-18ea2ce96bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9d88c4-65bc-4dcd-9c7e-ddf22a45c07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "806cba29-e3d1-45b9-929c-146b1113b852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe91d8e-9e4a-4fa8-8dab-724656bd97cc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257f6014-53dd-4502-bfd6-0371f61ca388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddffcb69-648d-4f33-a9dc-fc6bc6bb76fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44a4a7a-9e9d-4711-9818-0196474de282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76464168-54d2-4337-8952-82e044073f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe1a0bd-4650-4aa0-9343-71838e3293d1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0c6bda-2a77-4d40-b6b9-7e8dd5e41eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48fdbd2-c3eb-4d89-885c-674538db18b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9fce10-e22b-4563-a344-fa4148a4d779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e48457-caa5-48df-8103-b40a7e9dfbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d74759b-05a0-44c7-843c-1274d39e473f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23749b84-6a4d-4673-8b20-8b18814a2af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a772cb0d-76cf-4660-983d-8787923239d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c1ee02-2e3b-4a63-ae21-69250025a79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0514abc0-a9a2-4a3d-9444-64b1d47b3cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f87c50c-90a1-4a98-a490-3d52cb0091ca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6749315f-c395-4bd6-bafb-5d14520c114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754e1cbd-50b2-4b84-bf73-586cc06d177e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386c245b-2873-4292-ad29-47075733d1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4791da25-977d-4ee6-9809-c23214419fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52eec48-7b51-4ce9-a6f1-3aba3068ec05",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08c2aed-4873-4a54-b094-29eae09b1503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da3b6de-692c-4c73-8b21-086879945913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0b1101-c622-481f-8a07-639bbf2de2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22f321ee-12b5-47e8-9022-80a55a8fc1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8a2b62-4a99-4099-912d-a98b8c062711",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66a2f9a-c7cf-46ff-b1e7-1e46921a6730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0a809b-dd0c-467c-b58b-51ea07545f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29adc64-c0f1-4ca1-b966-c768e734dac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8351cf4-bd98-4f3b-808f-33c26285ee5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf028f1-0b6d-49dd-bc51-77185c214e4e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd01287-f688-4442-aa15-08798883e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3833087a-b076-4048-8f52-cf48749672ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe8c4b7-0cd3-4b44-b41a-702ac63ee7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ecee14-9132-43b7-ab92-4d42fc8c135a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a307a53-db2a-4fd5-86d0-2a1614c7495a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50367ab-b334-4653-bdf9-c7336ae6894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52def86a-abd3-4646-b0df-c19228fe5a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cb4bcc-733a-43c0-bb2f-7dbe3632492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02923434-28e4-45cb-a6a8-b7e0cc52056b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f842d181-28a7-4387-8e8e-3967e41fc25b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6223d491-fb27-41e6-b880-815a5064ebe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f054cfb8-44b7-42f8-877e-6c08eb165f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3c4d5f-e4e1-4998-b733-2e7f1b695fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f57413-cd56-4c0e-be75-d5a404797607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220bdc04-701f-4d7c-befd-97d6f9dca256",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752b3613-4f38-45c8-8c20-25f4e60d4d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43df046-ee1f-4fdc-98ee-3e707f37f984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb12186-3c29-4c6e-a12e-5ab184c4d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a722c3a2-5149-4587-8390-b86e1dd3a27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b2ee14-d37b-423e-a329-b154387dab85",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d803e1cf-92d5-4ca7-a95e-bbec5df30d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67852b6-fa0d-42d9-85aa-bdce0e14a5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974a2981-03cf-4d0b-995c-98caa906eec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61bf8880-d8e5-4b14-aafa-611c02796249"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3fd301a6-6b60-4340-8cc2-bd374b48b9e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47cc6c5f-3929-4eb3-a7b6-e7007f3a94f6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7ec930-97d8-463f-86bc-3d7b3be88cab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9a5b9e-9261-4550-ad45-b630c8c3ff88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511f7ca7-fb62-482f-a8ad-37f00c30e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1901ea4-9499-40fe-9e4e-fa8add581e7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68881473-8d03-4387-9ee6-c3b051f9f98d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dba53a8c-0c5c-4223-acaf-e94cc3ebe2cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf855e55-98bb-4124-ad4b-61e1b083ed49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28638062-ee35-4e38-97f3-89f041d38b0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7470967e-ec13-4fa7-9797-29d9342aaa18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "57e5460c-12f9-4375-9344-1aad275264f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1825a1af-fc69-418c-be0c-a45357ec0bbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6efa6da6-e74c-441f-8190-3cb544b04ca1"
            }
          }
        ]
      },
      {
        "id": "a475beba-3114-4d9d-9346-d808f2b6ff44",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb37d906-036f-47b4-b0df-a90f7cf0d7bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6894c7d-0316-4ee6-98c3-99886651d580",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a9a0236-80e3-4176-9e41-18714c0e50be",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46ba93f-68ea-429b-90e8-0f8c462ce8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3497edaf-ca44-433e-b4b7-b822fa45aee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7289e6-385e-450e-ad67-a67402081ec8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d26efec-e00b-4cac-8dc3-d4115e203f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8896446e-0162-4fb4-9232-4f2075ab6db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965ec718-6b5b-4886-b88f-5a13dc6b9997",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e2ca0c-4c35-4ee2-8ab4-fd594e71672d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6006aea6-826c-45a0-880c-1af3edd0907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7d95d8-c99e-48b0-92ed-f215e13f654c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856d1b2f-a169-4bcf-8f3c-62208b2d8e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7ef70f-d7cc-4d50-80b0-5ef6d363ce3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15408b4-299c-4c83-b43d-fdc0a35b593b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2821c786-8d6b-4a90-9b46-c452b246d344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed0f1f1-c258-458e-a6e3-db873b05e4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c4a2e9-8571-464a-b562-62c70b5fc8d7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb009c79-e3ca-436d-9f6f-4b428c2bee80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b973dd9b-a030-432d-abf0-b96e92b46297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e752df95-4d43-48f6-93e1-8f169526a732",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6323b73f-0b63-4e59-998c-2714f56cde74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e05d2-8d2d-49db-aebb-c252d86d49eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fffac8e-496d-476b-ae6f-3b80e3f45b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074d9b07-ca3e-4c00-881f-f7aa876ba73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb883d96-49c5-4861-a8ad-34d41805ec02",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10bb8e3-75ee-48d2-be58-f5632b3e3aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc2aa71-9a36-450a-bf7e-f2d0da7ec7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cf6805-8ab0-41ad-a152-460becbb32d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01e4d96-c833-43c8-aebb-8d7178083acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6ab1e0-e394-47ba-ae43-1309e7efcd54",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd51d458-b678-476e-a00b-c9b958280606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b909888b-862e-4c41-bedb-f3df501512fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654b56e5-1e95-4644-999a-803e9ca28fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e39124f-dc90-4364-8b40-c1871c63322a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bec887-a4f2-4ee7-a304-a8553f14df95",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca02ec4f-8f1a-4c74-8d80-29c2fba62e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0cb6094-12b0-485e-9c9d-a784b7b926a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7462f1e9-37a6-495f-ad39-9b6fa6aa394d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b94e04-16a0-4f21-896a-9fff4595e031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32caadaa-6489-41fb-82ee-44176cf38b99",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0044d7fa-51c8-45de-8fe8-0d124450d4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bb9c4a-e086-4142-b5e0-5a8fdcc5916a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded84793-187c-4f71-826e-d46d47e56299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a11683-4b93-46fd-8362-1f360c7b51c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4e8cec-642f-4be2-acc6-d3280ab04459",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d3900e-e69f-46d0-bcba-31f997e6f101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fe9e24-11a0-467f-9643-13da21b5d724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4ac7ec-ee3f-45bc-8330-e3acbd2c51c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05c6fd2-9c4b-4f1b-ad88-5e7e952ba4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891431e1-ae25-4046-a83c-543863c12179",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be393d07-b5e4-412f-9704-62c67477ae4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65264360-7544-4a44-bda5-2f738f927665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01abf3ad-a513-45e1-8793-3e711935c1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bdacf7-0692-4ba8-b928-81fbc96554ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f31f7c-f0ed-40ae-bdec-848ccdf5c719",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ea44d6-eb6b-4c6f-b7e6-9a36ceba7a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c3953c1-22cc-4847-b8ef-8d963f82580f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcb1462-9b06-42fa-a523-f0fdef166bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740f2e78-64a6-42de-b9ef-0d3ef75aaa59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3472c8-0fc7-4f8e-a4af-cdfe186caad0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfdaebc-a6e7-49bc-a1e2-f53d37ddc749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "245c57f7-1876-434e-a8d8-fde992e07d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623b824e-bfe6-4edf-b83c-1ebad7a41ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49db7343-4bc4-4ad4-a535-c2d7fa6bac61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99c8f2c-f1a9-4837-aa60-05c40a08ea74",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba42270-88c8-4fda-bbec-0405d90ee58b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac469c1-7849-4c67-ae14-424eb140efc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c90c746-9ba4-49b2-8a6f-9c21ddebda5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3098eeb4-2432-44ad-8ff3-2b2f441d4b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eda829-41f7-44a7-bca4-0702f1d4e2eb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2be27e-4450-4c57-9f9d-279042bcb9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db0a4e7-c9f4-4d1e-ba15-dfa5869af4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c80899-2514-43ed-b5ff-fbad07fe8dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb76ee04-9714-4b21-81e2-68058d2e6771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a10458-c24d-4885-8376-7b77ad4bb495",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985ba9a9-1b0d-43db-bacb-c699336364eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a921a767-7f9d-4f38-97b6-efeb272353b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df4ce21-25ab-4c8e-80a1-5802503462db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d54fd6f-8f00-47f0-8946-8318d7eceb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fc6be8-0904-4bd6-9bb4-f6c2d999022f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27637553-24f9-4b8b-b45a-441b4f55ef3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02316f9c-e1ec-4129-9d1d-b4d449b83cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b051124b-4979-4772-8c67-38183788f104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa18bf95-09fb-446c-8bef-6a53a2317ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4049e553-1075-404f-b947-8fcf8af083b2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925e1958-5df2-4607-92a9-a3704f925ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98392658-921d-42e9-9791-8af093f55013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4744755-d4df-45d9-badb-44de2d5cea58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f104c82-5b01-49b5-9f71-04683cd1e221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237171e0-9a82-4101-8e9a-ba43ab7249e3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615e3ca5-0c5d-4585-a09e-0db0c776b658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf8fd4e-0c41-4e24-aacc-0816fd430f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecf4cb5-c20f-43af-a3c0-261c4de2f403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a180595d-36f7-422d-9cd0-c3231aaf6b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7df56fa-4f2a-4b2a-a67f-f2f3d74bea63",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7764873c-6649-47ca-8394-4ab3c305d5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4b75e9-91f9-479b-8890-604f8d15e1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ee383e-e869-4002-b3e8-84a0ab7e8e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cbac85-9459-4dde-ba04-b9d93daa9fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dc9293-30e0-4adf-ae7d-f79f0a943621",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbabfba3-63c7-46c7-96c4-91cc2e887b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cbfb06-456f-4e3d-bcba-0fa629f21b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4446aad2-67cf-4186-b372-12ff5749f4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830164da-0ae1-4c9b-a031-3327eda05d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf1ffdb-4955-4a8f-9d1f-e3bd0f11f37a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e540bc9d-63d1-4aa7-b930-7535974778c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ccf95a6-5d39-4115-804c-fd2204a4b15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd20b3d3-4bb7-4f7d-9cb2-3d064b653f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f538ec4f-1f79-481b-af68-8061a2ad0074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b800d471-8b2a-4d8f-889d-b818daf43a6f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddc7161-d360-4230-8dde-ddca9de77d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "417dc859-e014-48c1-b597-ebd24bc57e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dae12e-7146-4ea4-a452-bab7350e776b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c96b961-1119-4f65-8021-2c51e7f77f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507c7471-d413-416e-b746-7a412fabfea0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0d4863-7e5f-43ec-8092-d8b2d8cb7916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d11176a-c9de-4c6b-9598-0e25387e40e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98af606-c090-4256-9f31-1d08416a9786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a247a82-806b-4cbf-9bf0-6e5ac2167ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2be9902-112b-45e8-8751-b83784ac4631",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d18217b-1709-4488-a37f-d46eb8a59da1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55dbb794-43ba-471a-aa73-dee82135dc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee44339-2bf9-4bb0-9dee-6133b95b0996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db73bb3b-5fe8-4dad-bfc2-c6bf6c7ac7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bb8d49-d49e-4f86-87ac-0983dfb0c5e5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb78852a-b60f-4636-81d3-1be04d3bb509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c69f3f0-52d5-43bb-92a5-775b48e338ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe44d59-aa5f-44de-9b44-7d990d5f3f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac099e6-2507-45a3-9930-4672c752eb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bafea5-c70a-4889-8d57-2618c3f44e9e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96408164-463a-4f0a-957c-03e8f058755f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6f2de3-004c-4f71-930b-78c57ec80f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a64590-1b22-410e-b032-0b8310fea34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27ff72e-6842-4a27-980f-ad8145005752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1aeea3-8d4a-4047-b50c-e0935bfe6e3b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb4a4ac-b852-4333-a2cc-0f72ac86631f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f23bc774-72fc-489a-89be-5f71f1e846e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399adbc0-34df-4150-b383-f59ffb3c60ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46725756-e7ef-4c82-bef0-44c43b7b05fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addcac74-662b-4cce-bb6a-0981ca2ccb7f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea3007d-df6e-4618-a259-761a12b098ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92072ce2-db4e-4957-90a0-1d5e3a5c0941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c425d3-2b3c-4863-9db9-1bc667a1b96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3c6a4f-29c7-4931-af38-8564fa2dd662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12c1ab5-ac18-427f-b46e-d60b03d24e07",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b71098-d963-425d-806a-15fe06f8b652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e47a0a-41ea-4f78-a720-43a6955ad8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7c2fa4-c9f3-4e46-bbc9-0117705d0476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff5341d-8190-460a-aea5-c45a1b094d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39ab972-429b-4b3e-8cc3-1a03427b65a7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59e89ef-aab0-43dd-b1f3-0e7a1a7ec41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f48615a-e156-4d61-b985-29c471953b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ced226f-36f9-4262-92ec-4742a3e39601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339b2a96-355b-43b5-8df7-45670a86c905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33d1c07-7d10-48d3-8dc9-8941050faad4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc777d2e-a9c8-479f-8f84-8bf6e7d77d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf026f8f-8608-422a-8db2-6ab45b9f71f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc2220a-8afd-4fef-8d96-72aafe625372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2bd7c4d-6cd9-4dbb-9fa4-a42d41ed4b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f88e8f-f57f-47b1-a9d9-5096756018ea",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7450826-11bd-4ca0-9ac9-edbd8c4a9252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d654d41c-66a8-425b-848d-1ec1381bc9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f66ca0-3eaa-4021-b2d7-199438ddd0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fd908f-6ee0-4fc4-8352-51d92a8d1529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0272cd89-62be-4ee5-8e2a-9996b0da7075",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8a0cf5-0e2d-4db6-917b-9a1a0f98fc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94af8ce9-ab03-4247-be87-eddf1e370910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6db1748-2af9-499d-a834-c3078d737a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67f7221-ba6b-47fd-8639-fc702c20d044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ef0450-2e90-4792-9e6c-5a3b9209bcb6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef6d2d9-57c2-4c87-beae-a25b7bcae4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a822902-4193-4ea7-a7e9-28a59615245a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d6742-7065-4ca2-ab6c-9ec62278bce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f077cdbf-1b37-42cc-ae97-567f89e7abb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171c2cde-edeb-4488-ad84-cee2d8a2f9ca",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107f98ba-7651-4e04-ac1d-633fa42427b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bead04-1566-4f5a-a0b3-457750fdd13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dd9d2c-c951-44b2-8eef-197c8eb937dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049f0ceb-68a2-45ba-adc1-bbfd5a88b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a91eeca-2274-4509-a2e9-95b143906526",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cb2590-eb0b-4d21-9680-74d1d1cd61af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab31e36-4096-4ceb-9dd9-a66368bfd841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f8e14b-ea32-4dc2-8e81-de04e87c5c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4c7323-dced-48ba-a19a-20da2912f1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783c1d91-9360-4fe3-a06b-537fbdb0b623",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c707fd-2cfa-44ba-b224-ff1373f2837e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9176eca3-93d9-440b-846c-a0c56a0540cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77c4fdd-9ee6-4630-bdde-dc537b1f4004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95e913d-5f98-447d-96da-b43d98da7ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70bc3df-5470-46fd-a8c9-ae5477de4829",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5262c3-8e3d-4ffd-ba87-c4a9b41f01f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ed0cb8-4223-4427-8ad0-ddace10e7a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e790df-4219-4d29-850d-338a93ba70a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b2e220-d5c0-48fe-8792-aae15e07b1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87add21-284c-4e04-8b08-d9e895131c09",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aaf267-4018-42ee-9112-77f76ee7f803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24848fc3-af89-48bf-8645-6775d2df2521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ecb697-0a1f-4941-b57f-472d23e0a081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319801d6-63a2-43ad-9dd6-adc599412f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f213f2a3-5296-4493-9f1d-e1d4d4b84849",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c2749-f903-40c4-af39-628b5f6dde40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0047c31-68a4-4eed-bcda-9536c626c631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39c5c1d-7dbf-4e57-8f60-35e5fed41dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e51018-5bc3-4cdc-b3d1-6cccec76647b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc305a38-dca1-453f-8083-9cb7ae7cb92c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3d5b56-0fdf-4e50-a1b5-0f4b285b4f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efeb66da-13f9-4fc5-a487-1d81d8d5c8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f562bd03-522e-4865-b629-327df25899b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595f200d-067d-491d-acfd-a170683a74a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb188e66-4d99-411e-9c29-da7eaa2724e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fcac50-415b-4fa1-b482-62cea9315ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73e0de7-9d75-4dab-8df0-093df5803a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4a6527-9e08-45a6-807f-95dd3dd203c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c700b56a-a610-4cc7-a95c-293c752f7fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ec180c-eb9d-42eb-b1df-6211094009c8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a532fa5-e765-42d4-84a4-eb416710f70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfe274b-0595-4a3e-ac70-0cca511f5a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1fedb1-cd98-44e7-b33a-89dd38847524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a7f735-b9c1-4719-b9fe-3c78cc11e0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026927a9-be01-4078-a591-46e0c1a2f7d4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0feb61-40b4-4379-860e-fde0d1e17505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9973c6-179f-4b8b-9b7a-e47c033da97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e2ba62-f2d2-4a11-a07b-5b868a9b2c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939ef61a-8bb2-4c14-92a4-0575e491b768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c62a872-e2b9-4a1a-9802-c806bffdbb81",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aea6ca4-2ed5-4d98-b51e-972fe87f7bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0be2e0-d0b8-4117-8596-0d25b0a922da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781cbde6-41e2-4fa0-a5b9-7b4f418e3a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921ae4c2-6ace-48dd-8423-d9ded1df5489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b08580-189d-4a52-ae88-72fa12f6ded9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff10d7c-7b92-42c6-94b3-d3a78fc3da8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7f4063-2593-4796-9447-c5b51023c107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a017a037-477e-42c2-a177-e3f886007d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50570f7b-70dd-4657-bb70-16a762037e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8120c78e-d3b7-40af-b444-be46c08965f6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba21037-0b35-4b02-a145-7bbedadd36da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6775a034-9d0c-4733-8f2f-d60a7fb2167f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9778e803-1a18-4be1-a998-c300ae3ec2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00072773-636d-4097-8654-6cdf8beac556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15faf69d-7681-434c-a037-3194e33076d5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0046be40-3fa1-434f-a0d8-4f6dd7e1d289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf1d39b-d87d-4ed8-b5da-062771d44827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03291b96-a4bb-4dac-9e15-1ee24898ca43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18583014-e7c3-4aec-93d0-ed778d94e489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af89c22-4223-409a-85b8-f4b008cfaa15",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a71abc1-d4d2-4abc-883c-5c24babb0441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e04906d-f7f7-4e48-a5de-fc11610f0cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60143e2-d4c9-4dc6-ab75-15c606d1fb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e859d7-cfdf-41dc-acc6-73dcd627a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93403f38-48f9-42e3-895a-7544f3fa59a3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f753128-4ebc-4914-8b60-87efa1440000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7fda66-3116-46d7-99b2-ee0dc7616614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309b5f16-065c-4050-9bd4-388a9ea0e35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b3aac0-a7c9-409c-bbf8-96f585d5036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08fe670-7971-4af9-9d4d-ade5afce3ebd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51ebbfe-2987-468c-9066-19efcdaa6537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1678512e-aacd-441e-8d14-9afbcb5545df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44dbc78-a4a7-4d35-9a91-84c2d819343e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f40144-262b-4874-b070-833291201972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af12d57-c0fc-46f2-ba73-e3ca0f56b718",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc8867f-002f-4c1e-9dd5-85e60eb12f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c03cf84-909a-438e-87b8-a4a474ea6b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd79a84-5f62-4788-87cd-c519878a642f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83daef5f-726c-4867-89d8-9ec23ccf0ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69137bf-7f69-4a32-b4e8-31107779f6f5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa02285-a1a2-4800-9c35-ab950340c09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca71d7ab-28ad-427f-9f93-070717f716f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84de5b5-73d8-4908-9e3b-24c173e1d0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24668b6c-0521-4e75-991f-73a69ea8e735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36094145-b9ca-4641-a5bc-72f4714814af",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366838f3-58d7-4244-a75c-1db7febec9c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b75b21e-760c-464b-89e6-045526c8cbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196c6777-1b64-4835-b060-662293fda89f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe70169-995f-45fe-aeb1-dfcc378d42af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11de9ddd-f0bd-491c-b645-8040f85f6a2c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e49666-83fe-4d90-8d96-d3c8612173be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf5d763-fb86-4d47-8318-e996053c3868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14f6228-cf08-4c58-af73-7e48e6415d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba6b78f-3a9d-4495-aab7-2e608f08daed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7e37eb-1e85-463d-812b-3c65ee9b94c7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98561273-42ce-4cfd-bb42-36178d70cdac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e29c88-4d8e-4734-8e88-d9da8d0df0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3356a14-82b7-474f-ac8f-7a10c537ec5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83ee0fa-827d-4095-b9db-bcd17f318a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49386d75-5205-441f-a99e-d5fc47de6a0e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf91c44-ad19-47ec-b997-f71ebcce6d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fa231a-bb4d-4948-bc69-bf675da74696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb610a04-43b4-4940-a90d-7d9c4e4243c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc37542b-6344-41d4-b5ed-f4a9cbf7c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40cd8c5-c483-4dca-a488-d8a5e9ca35ea",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4223fef-202a-47dd-82a1-7ac8b7246cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4dc4109-cf39-4175-aba3-3ade590feba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c1ebab-0fec-4f2d-aa0b-af26e124ab2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8df8714-bd79-445c-9e3e-29a98aee7c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab42d44c-d05a-449f-b922-16ecbff808c5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ff6f9a-0166-4b5a-aab6-e5e088fd0171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2b97dc-4094-4a92-94cc-19500ab0aadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd18f48-2de7-4f9f-9267-9135880a7371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5469fc0-16e6-4370-bd24-1170f94dd523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41419f7d-af87-4478-a6ed-edaf805171d5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e0ec3-39bc-4793-8dcd-b1192985b7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf944bee-0875-4322-a268-7b3625247635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a856daa1-df7d-4060-9c3c-adaf5ae1f750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c46c13-797e-4a21-a947-82dc6b703220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122c9346-c5f2-425a-97fd-0b85b9c42294",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2947197c-13ce-4d72-b7f3-93f85953c023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd6ea403-42d5-4784-930d-f1d7ae780bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508f7c95-1fd9-4906-8b1b-0dd72aac7716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0a294c-37d4-488d-9c8b-18cef1c3c3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b25e65-9434-4e88-b188-c803f741da79",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e573430d-c8da-4f7e-be86-aab2cd52e04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867eff90-99a0-4f63-a8eb-0975170c8139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42c67cc-de70-47f4-bcb8-151e857a4871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2431ab5-bf9e-41be-9ae6-f0709e56cd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f076a4a-dc99-41ee-9f10-812f231c7c3a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77768dad-8269-44ef-a32b-7312cec40f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c4599b-e043-4e67-8b98-32a7254c9f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be901d7a-369c-4f6d-8e57-037df8b2f649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6faf25e1-7aca-4a74-b026-470c2a238dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2b27d9-4f60-45de-a481-6e248a159cce",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a8821f-329b-40bc-831e-7b4ea693640f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8b3017-c399-4253-a51b-94a9b361d0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cf094e-5f7a-4777-955a-77edba283174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5706d990-e264-45a4-bafb-f55244da9613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2ae998-7dbc-408e-8da9-aa3db27b2288",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e03291b-e2b0-4571-b7a7-e6767d316043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed9567b-6d63-4368-b0f6-fd2828b87d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40d3304-47f9-42a4-b108-9ef7b8286ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9398fb43-af84-4f6a-a6f8-d66bfa8b9a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce72739-5438-4342-8cb3-7d3eceb4a54e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d70a33-74d7-4947-a821-a1f643ae50f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1942155-1530-418d-bcb6-6ebf826c34fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6716a6-1905-4721-a53f-8e183892ef7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26281912-7367-4cba-8a5f-eb73b5790210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79110c5f-e665-4ce6-befa-51d5dbad270f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65485182-83c2-40da-a593-0bd8c236635f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbfadc7c-d3f9-4eda-bf01-8124c4908f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d63417-ed6c-4773-85c4-5f2ad7ab7e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9e778b-634b-4827-81c8-a3848f777218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff72d604-1a25-4d82-8e5e-02c977655cce",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce8fc17-3cad-4a47-ac08-45007bc1b4fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a843c290-9562-40e4-ac26-4e22dc3c34ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6a5bc0-6646-4941-944d-87456305a4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7fe646-95ac-4b93-856b-b581e8d5c114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df7bbd-232e-4e5c-a241-cedcea2c7b81",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe27c47-d1a9-4c88-b21b-29c23dd94f15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78d23e4-54b7-426f-9ec4-b2cf56704c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432d1e7c-f45b-4802-8e87-a04782e08ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4319684b-1519-4474-8176-c72f6fc9f44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d050817-f5d6-4ca2-9070-b5db347ca58b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ac09aa-bb5f-4b27-96a3-bc65fc4bff2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce79d34-657b-4a6a-98b9-3f412f78146f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3069c7c3-2dc6-45e6-ac1c-c9fe5e902ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43830f9-989e-4385-8de5-5c226eb48566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b968304-6cb6-4de6-9d88-0a3661e05e3d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c78dc85-89eb-45ba-99be-bfdeeaeb1aab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded5a654-ee07-4b8f-a5cf-bca0bc06da64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032df919-92f4-4b9c-9b71-29ded6d23c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd86b981-9be8-4f6e-8053-e4fef4c12c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d76efe-0fd1-4dce-8f79-ddcd40354ee4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e7e23d-1108-4059-b20d-353a8530da59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "552f8175-a8ab-42db-8e89-f4767d51f4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea95e60-e6cd-4761-b26c-78c4cb682b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afc2984-e143-4751-b4ae-3ff524b75028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7332d366-3be1-4620-a60e-6ec08a64341b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e074ca9-07e7-4d19-8527-1a2eae21486a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c79fe0-1305-4c36-bb22-a93f2d4aab94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74252c2-2dc6-433e-877a-472e26b40baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a188b345-3f74-4cf2-8a55-fe9bfd1776b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0134b215-45b9-45f7-a722-718a6b7e4b54",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cee4ac2-e15f-4c01-8057-43dd021d91f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed3f098-5248-4a33-b3cd-cb2273784aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d3efe9-123b-4332-a30d-d333d6c9a1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c32956-52ed-40f0-af3f-77c796dd7508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2fce72-97d0-47ff-916d-df40898d3d61",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af457f8b-de05-447f-aacc-a1d4f1e10066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "476e7a88-e9e7-4682-ab80-07f74c3627d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5f5e1e-efd6-46fe-85f2-410bed3a6f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978f19fa-bdb6-46df-af54-88b6f3c06ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26712b9f-1f42-4537-8f46-78f448c77b49",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e467d5-d09a-4cab-8f13-a6c8cbe0ce70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b64f1163-9146-4eb3-bea5-a213b8cab1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027fb74d-f5ae-466e-b91c-767d6583d27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac969d65-481c-4835-be2f-6b12f85340a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d842400-693f-4963-b6a6-7c412777a1c1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e9d4cc-223c-485b-ba86-27c221e56df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a5adf10-a084-4596-83c4-d40d659432b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4a3b67-132c-4958-a222-8c47239f9341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536a539a-56eb-44a4-a20c-36305a6dabb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f9a503-fe7d-4c6a-b607-b3156f64ca86",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366d6b0b-597a-403c-96f3-312327205ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a215e9-8827-437f-8a0b-eae39419f7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a0f690-2c5f-4140-a314-a97aab307123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91db4246-c83a-47de-b1bb-ec706b2b2482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0855dffa-6f13-406a-b42b-7ff090ab9160",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e274a89b-d165-4424-8e7f-e2914955aef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b3cc20-d29d-417f-a0bc-ddec4a615e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffd2599-1bdb-4b89-a9d0-b1c73d6f1e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c6accf-f017-4ab1-8367-cce557c14735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6d1457-d28a-4d2e-8ac0-1de4ee950fcc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a35287-1d21-4c89-b307-7a5cc83d8795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05d393db-0c45-42c2-817b-9d6a1d645b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1ef175-7f87-465b-81c9-811ac657af56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa3fc03-e6c7-4561-9593-c412ff42f4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f348a1-12ea-46c8-a1b7-534d1d1825b9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a53631-57b2-427d-a0ec-1e354af6e22d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0026eba-15ab-4106-b96e-76a6dc5050c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ed4d22-35ef-4ece-a95e-89079d45e604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1371fa5f-d6eb-49fe-80f7-8a7d8e167031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7691543-44ce-4917-b133-d0ee39426d0c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369bdc4b-b102-45b4-8ebe-f813b7723be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c118f9-248d-430d-b8d5-46c7dabd9112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394ae317-4a23-4501-8c90-f4b86780afbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b27855a-f0c3-4977-b2d6-265ff1809359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f07fa15-97e6-4d94-ab93-4a7656a047c7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e96186-b813-41cf-bfc3-4550fb000e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73dcd229-01d6-4c16-83b6-5b1fd401d4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f931328-26df-47ff-9173-574b80eab783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700f5ddd-5776-4429-8473-f348030439d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8fc4f8-d868-4a79-af49-7205f87eeba9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a2f4cc-61c4-4333-8adb-b0bb95d70674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75796f72-203d-48fe-b867-616e9329b542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97e5582-c7c0-40f3-9708-7133dc5a1077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa55ab3a-aab5-4950-a8b3-20e056be38d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0ed8b6-0b72-442b-ad7e-862384c2fc13",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4875711c-881c-4a20-96ae-346940afa85e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38703fce-4523-4ea2-8b3b-f545fdeed42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b736b3a-e417-4e4b-9f2f-bbd882ea4e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4789fd0-23dd-4d39-b3ab-fe99a23f5adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1f63a5-92b9-42cf-90cb-d12437e9a92f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eff3c27-5591-4581-bada-40098429ee43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "585e1443-5a29-4385-a469-a4bf7728f39a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b801257-556e-41db-80db-ba5ef170e326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30106770-3a1a-46a6-8926-de7f004abfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fde6cb-6724-4db8-8a06-bb99e478c066",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d2b3c6-2ef5-4b4f-ae12-dca7e594772a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b00c62-c9cf-4b2c-967b-7dd1ffb28592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38629f3f-f390-495a-bcdd-c1615ae3572b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72789cc0-6aa7-4200-b7d9-e86b669002eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd4e50c-ee4a-4840-8b4f-7465bc68b43d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06631a75-a4c6-4cfa-acf7-b8a9987a720e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6aed257-4abc-4a82-8800-c812490b2167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702a01c3-059e-4e70-914d-48ce5389ae55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675d4044-215f-4b77-bfeb-a922367467bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8015b435-fb55-48ea-9c7b-81bb4a51a201",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500d6f3a-edc0-48e9-8167-2adc2f3ce4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4362b2d4-bc3a-4419-9d53-d0b974f84eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ec546b-d0fe-486f-8d6b-a3c21015fc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2bdb0a-ee61-450e-bb90-bf18a4794dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771cce23-6449-4f09-b2a4-d61eec40a0ab",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7810c06c-849d-4749-8d2c-388cbddb4e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d83b03e-4eb2-4dd3-a255-21121e4e16d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ed42f3-1d28-4afd-bf45-b7400fe317e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "addce5fb-5174-4621-833b-c274b34b9af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aad0a2c-4a21-46ab-9235-b965537e93a9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64482256-19b8-45b5-b27a-31d6ef4de265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a766a694-8858-428e-9df8-274744a8223f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c15729-d7d8-48bd-acf6-10a1dd6a6fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c125f27f-f8d1-47af-b2e7-52250997fd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c105b4-8a4e-4909-bb84-aee74eb81275",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aee03c-31c0-431c-95da-d103a1fcf02a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0723064c-bf72-4cfe-9edf-f11f2fbbbc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4e661f-faf6-4153-ad3a-abebccb4ddea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7957eb2-a9d5-4924-993c-e893165ba94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd176fca-560e-450b-9029-11ca758af138",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3edac7-63ac-40e3-992e-5391068a506f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "195f2b08-cc91-4526-8b4e-521911894968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b159927-32c8-4345-8bec-5f08ac7e57bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba2ff6b-c68b-426b-abaa-4516de993857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83636d3-dd03-4b10-b81b-8e9f32101c77",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6e2000-ff9a-44a4-9bd0-6a4287ab85c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "325a7c70-032f-41fc-bac4-5ca121b059b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46659e9d-42ee-4a84-9c4d-bdfa2a5f1aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d105f4b1-8d28-4e48-9394-bcb3be4dc6b5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7c81f0d-c557-4f2e-8fde-180748c81f02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7044c1ca-4d2d-40e5-b09c-214491df532a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f1d7482-75af-44c4-b599-a59410d64227",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df869921-b314-492d-ba34-d26baa8585e0"
                    }
                  }
                ]
              },
              {
                "id": "db2f8f75-e1ce-4aab-974b-df69150eedd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b26989f3-32a4-4137-aae8-07e027697a97",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc27658-60e8-4163-becd-7b9a1a98447b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0f22c066-6b7f-4180-9fcf-514ec17ba8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00625216-d3b8-4d4f-a3ae-fa1b872be1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93bf6c78-5f66-49af-aab1-662a57c4aecd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb0bcf9a-70fd-4feb-8912-a81f94adada4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b58e96cb-276e-4205-812d-2f842405dc1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acde5d3c-205f-455d-bc2a-20cc682f014a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5ae8315-840d-45ff-8baf-29cc784659d4"
                    }
                  }
                ]
              },
              {
                "id": "b311f1fa-7fb4-421a-90c9-0ba3100fba34",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c3cdfdcf-7c96-4417-841c-130190bc47ee",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f638d8-0ca8-4c70-83dc-fdaae449c41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6746c260-0f06-4b23-a5fd-8981bc5147e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a819cd3-098c-4fa8-95b2-8bf035091a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad815c71-8969-4418-9b2b-f7906cddf287"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f8b872c8-7cd9-4958-b093-aba1fc31c594",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc81b3fb-eb3d-4743-9fea-0290e8bf5d8c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c539a59-f7a8-4ec8-9db8-c38fc1bf35fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a8f297b7-aaf6-4ce6-8cdb-8e3dd9f37c3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf378f3e-7343-4b63-9299-5fabbbb004a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f6cfea7-f331-4b0f-ace5-ebd1bf87b074"
                    }
                  }
                ]
              },
              {
                "id": "1506d97f-881d-48ac-a7f9-0ca5735c7b51",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d69676c-2ae6-4666-bf86-ae033981808b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7c36f522-d0a0-4a22-b7cd-ae863dffb5ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2552541-fddb-442a-a1a0-2ca8c4e26b3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea48e1e6-c0e4-466b-8a5c-ac56ba9d35dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0c48a47-a436-4570-8f3f-5b4fa0d9b5bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2de41bee-686e-42eb-bc13-2f898306f778"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7890e18a-6eff-424f-9885-7193dfa44022",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0af85f90-d63a-4427-be97-906662099283"
            }
          }
        ]
      },
      {
        "id": "05ce3458-7fad-4bdc-afca-0438696a409c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cd62f4a6-8069-4c6e-8b31-f570fb3adcec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65d23d51-406c-4ccc-bed0-34c37ed1ab34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "286c49bf-a651-4cd5-a67f-8a4cc9fbf77a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450c97bc-0ad2-4448-b06d-c2706f1dd50e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e85a181-6220-4ab4-80d2-ddf5c4dc62a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f324c7-d526-468a-ab73-539c7d4e63d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2bb0832-fc1b-4075-b679-de3a08ad7cd1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f4eee49-e57c-438d-93d6-f4e706ce4512",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7557b91f-fa07-4ff5-8bf6-57aa6d900ea3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10b22cf5-36f8-46c9-93d0-ee3b0b10e1be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b2d2b4b-a549-45ce-ad04-3501e46df03f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94d6c94a-ea51-4766-b070-8c81c06ba0a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "58ddb6f3-7583-4193-b067-639e57e80129"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b618e16f-63ae-439a-921e-da1b4b1c3aa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70fcb5e8-afb3-40b8-b046-e041f2829abc"
            }
          }
        ]
      },
      {
        "id": "30f54515-bb5a-4f18-b297-a50d04ac9ed7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1257dfb0-2469-41a5-affe-689a3b9d8d77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd91fc87-d650-4379-bd5e-6f34f197fe53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8607b6a8-8958-48d9-872e-01fde10929db",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e18c70-80ef-4e12-9d8e-3f3e549be596",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85c283d0-74b6-44bf-9c67-b4786a586528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b42e73b-26e7-411e-990a-12167cd91fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60506c09-a9a8-40fd-b51f-986af1f7815a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8d10cc3-8d30-439b-91e5-c09dca114c1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39dce5c4-8810-4a28-af4c-326f4ddc8dc4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18d1cf9d-b473-44d0-aa1d-89b672b0c656",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8e0ad9e-62fe-44b8-a921-5c2ac05e7ce3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97e0a628-da14-4a97-8013-aeb959be0638",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74b4879c-651f-48d7-acc9-90f01d6fd31a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95d325da-c2b6-4cce-b72a-fec4ab28ed71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5adc4299-88d3-466b-a72e-2259ba43a3ab"
            }
          }
        ]
      },
      {
        "id": "7d2dec8c-323a-4118-a5c5-4eabd74cd54e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2f4d719c-a3a9-4a96-923e-819ef4c279ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8cac7b76-6e46-4264-bdbd-0545a8b93c2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c27c594c-9c3c-4d26-bf7c-f72e09cd1013",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659b48bb-60a0-43b0-a088-c8ab1f1589f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a34ed42a-bdcc-429b-a5ec-0953253e721b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22303383-6803-4d87-a304-e073582bca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d59fd4fd-0c5d-4410-abfe-ba19b44f27c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36e96fd8-4758-42e8-824b-a8e9b0655584",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb304665-055d-48ce-b4ec-f64f2cfc0f6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "769a9900-38ca-4073-bff1-c5e130032482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b61e282-af47-4bba-832b-35d8a2599b6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80a9fbfe-9622-47bd-9816-019ab376db2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "796aa67d-11c8-4620-bc88-396802d44638"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e34984b7-013a-4477-b775-8744374d7bcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67cefc01-498e-4b4e-a701-5921115f1260"
            }
          }
        ]
      },
      {
        "id": "9b14e552-eaac-425b-8c41-55047f74935d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eac2eeed-ca25-437a-8a48-10f2eb7bfa3a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aac3fdfa-a264-4459-91c7-f58c9bd4734f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "06dd0478-3c71-433b-9292-1ccfc0bddaef",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db7ad002-037d-4df4-be0f-05904b4a9e7f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7e84f01-cd73-4acb-880f-4bf3b93741e4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.24603174603172,
      "responseMin": 21,
      "responseMax": 995,
      "responseSd": 97.00398343219365,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715474383988,
      "completed": 1715474418881
    },
    "executions": [
      {
        "id": "71d2243e-1fa9-4559-b92f-6ec5fe17d021",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "58da7669-a11e-4f77-8a82-b4bfa085e9e0",
          "httpRequestId": "af21e54f-8d8e-4d1e-9222-fce4727b67f1"
        },
        "item": {
          "id": "71d2243e-1fa9-4559-b92f-6ec5fe17d021",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0f77261b-05f3-431c-8aab-3a0a2a0125e9",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "3d908cc7-2326-487a-838f-603ebedac7bb",
        "cursor": {
          "ref": "256075d8-7ea2-4b83-97c7-f52130bc2c29",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d7f9129c-5066-485f-b4b5-b19843acc52b"
        },
        "item": {
          "id": "3d908cc7-2326-487a-838f-603ebedac7bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9da2c4ae-21f3-49ef-bb7a-f65df4844014",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "59656e95-3b10-4886-8950-1c7424cc25de",
        "cursor": {
          "ref": "8e86f7bd-c988-4296-8c10-afd9f4ae645a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c7f0591f-a6bd-4803-b706-46cf26dce70a"
        },
        "item": {
          "id": "59656e95-3b10-4886-8950-1c7424cc25de",
          "name": "did_json"
        },
        "response": {
          "id": "e530fedf-61c8-4f5f-9e91-628fa4b536d7",
          "status": "OK",
          "code": 200,
          "responseTime": 995,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2965ae8f-035d-444f-9516-7d1f0f80df73",
        "cursor": {
          "ref": "6efac1a6-4657-476f-91df-dbb3a47bb742",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d25007a-d7b4-45fe-b1ff-00d7a692108d"
        },
        "item": {
          "id": "2965ae8f-035d-444f-9516-7d1f0f80df73",
          "name": "did:invalid"
        },
        "response": {
          "id": "d424fa17-21e1-4bb6-a8d5-3ac0cc8d4098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2965ae8f-035d-444f-9516-7d1f0f80df73",
        "cursor": {
          "ref": "6efac1a6-4657-476f-91df-dbb3a47bb742",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d25007a-d7b4-45fe-b1ff-00d7a692108d"
        },
        "item": {
          "id": "2965ae8f-035d-444f-9516-7d1f0f80df73",
          "name": "did:invalid"
        },
        "response": {
          "id": "d424fa17-21e1-4bb6-a8d5-3ac0cc8d4098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f7bd98-b763-4110-90b6-37b080b3ec1f",
        "cursor": {
          "ref": "a35b14b6-0a2e-40b5-b8ba-b3c0d0e61fde",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a6b6078e-7eda-4d42-9f86-7e523108bb25"
        },
        "item": {
          "id": "22f7bd98-b763-4110-90b6-37b080b3ec1f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0a69a5c6-0a93-4916-85cd-ba47208f6f2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 339,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca685e79-b117-4b89-a2b1-8173dbb1dbca",
        "cursor": {
          "ref": "1e03231c-19c8-4a05-9612-b0597f89fcd4",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aa9969d8-ce9e-4bc9-bd2e-af88ca1ae637"
        },
        "item": {
          "id": "ca685e79-b117-4b89-a2b1-8173dbb1dbca",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a0c2420e-e4ab-42c9-82e7-3e34c78d80ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05278db3-7f1a-4ee9-9a1d-f396eecf0eeb",
        "cursor": {
          "ref": "02f80bbf-7f4d-494c-87ed-ae74267d2900",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "862ae760-4c6b-4c02-8333-cce5f2643dc2"
        },
        "item": {
          "id": "05278db3-7f1a-4ee9-9a1d-f396eecf0eeb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "421e0029-e3d0-4a9e-a04c-0583209355fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca7ab2b-b7fb-4625-849b-4d4d0efc9fa1",
        "cursor": {
          "ref": "ceaf4ea6-9ada-4e9e-ab62-83b41cbd89a5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "93ddc323-c779-4c12-9266-8bc6d326e038"
        },
        "item": {
          "id": "0ca7ab2b-b7fb-4625-849b-4d4d0efc9fa1",
          "name": "identifiers"
        },
        "response": {
          "id": "b5e8bb83-2762-4015-a73b-6cfd5b80a52c",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af85ce9e-5544-4355-8d54-a9d57c92ac75",
        "cursor": {
          "ref": "2885920d-b3b8-48da-9cdd-8b22c33b8063",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "110754a4-3862-4120-bf11-908119f4f1d0"
        },
        "item": {
          "id": "af85ce9e-5544-4355-8d54-a9d57c92ac75",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "069be195-0f14-4fa0-8da0-6a76e2a1dd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca24fc26-4a27-4646-8e9e-7fa6edaefb49",
        "cursor": {
          "ref": "8de73e23-26a1-4556-bc0d-5b0c3e48612b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "96dece38-40e2-4179-97b3-07dabff1b94a"
        },
        "item": {
          "id": "ca24fc26-4a27-4646-8e9e-7fa6edaefb49",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e3ff1526-8868-4ccf-9e66-b653775479da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c24906-55df-489d-ba79-ec704a86b492",
        "cursor": {
          "ref": "76b6deb0-95a6-40fe-906b-34c25e143935",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54daad1e-d46f-462d-b477-de482227d4bc"
        },
        "item": {
          "id": "34c24906-55df-489d-ba79-ec704a86b492",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "715c0312-f0f6-4a07-9f8d-7d26f94c4539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67e1772-0101-4637-aeac-669db6692407",
        "cursor": {
          "ref": "b7dc90ba-032a-44ac-be6c-eb3fc74e137e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "87227d8a-3538-4439-992b-4e95ba57054f"
        },
        "item": {
          "id": "b67e1772-0101-4637-aeac-669db6692407",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f4e73d45-cfb3-4261-8fcc-523d8a582091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e05b39-8153-49c0-80ad-f6915b3b2241",
        "cursor": {
          "ref": "8dd46058-2bd7-4baf-ab3e-7e655ac55aaf",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4615ec0b-5080-4fbd-ac75-b73fc700e12b"
        },
        "item": {
          "id": "62e05b39-8153-49c0-80ad-f6915b3b2241",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7c232e20-eec1-4a8b-83db-3694ed9235f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ef4fdd-4f6f-4fa7-b552-6a50b8f3a247",
        "cursor": {
          "ref": "5737845a-a189-4e15-befa-432242771180",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4035380f-a282-479c-b44f-f3dec30c29e9"
        },
        "item": {
          "id": "b7ef4fdd-4f6f-4fa7-b552-6a50b8f3a247",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "299dab17-9737-4f53-b924-4f4cbf787d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213e71a5-5b34-4471-a255-5a64217ce679",
        "cursor": {
          "ref": "f16e2ea9-f964-41c8-acc4-2d964de76521",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0ee6ee96-49ab-4345-8797-cd26f2769c4a"
        },
        "item": {
          "id": "213e71a5-5b34-4471-a255-5a64217ce679",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eb892b94-6de4-4a87-9c32-cab0075b0d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721d1fe6-ecb7-4456-8a1b-6ce18afe3bee",
        "cursor": {
          "ref": "3f0cf0b4-87b8-461a-b0ac-5a035b127a45",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5b7c6a1f-38e7-49f4-8156-f504d5654781"
        },
        "item": {
          "id": "721d1fe6-ecb7-4456-8a1b-6ce18afe3bee",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f4d89e34-702c-441e-af11-a6114c2f9db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64bc54a-f579-4f53-9e11-2d777fe54415",
        "cursor": {
          "ref": "5ff72c22-b0a1-493d-bc57-0e3167a4fece",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "663c95d5-2a9c-4828-927d-dc39f6b15669"
        },
        "item": {
          "id": "a64bc54a-f579-4f53-9e11-2d777fe54415",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f2966e56-cc87-4bc3-b617-66608e269567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc973de-be4f-40a9-88bc-b6dfcb3cf9df",
        "cursor": {
          "ref": "3edcd0b1-fbe2-42d2-9ad4-cfcdb164eee8",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "45c1ef89-958a-431b-92b2-65f0c11b4487"
        },
        "item": {
          "id": "efc973de-be4f-40a9-88bc-b6dfcb3cf9df",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b94042df-91ac-4b1b-82c1-ff5bab08fd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3216306b-34ec-4456-ba53-96778e26cdc6",
        "cursor": {
          "ref": "b3ec6962-d488-43b5-80e6-93f377e4cb61",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d02bfd3c-7e19-44eb-9bae-d762644be165"
        },
        "item": {
          "id": "3216306b-34ec-4456-ba53-96778e26cdc6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d101272b-0c35-4bba-96ab-6cf900a799d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cafb49-28c3-4d88-9c36-57c49a91225b",
        "cursor": {
          "ref": "0b36918c-c8c0-4970-a513-e62c9093dcff",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "59d67f3d-69bb-460f-9c9f-683f96515014"
        },
        "item": {
          "id": "06cafb49-28c3-4d88-9c36-57c49a91225b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "accaa24a-0ae3-4061-8b9b-070a67841697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043427b0-bb4e-4a34-99db-11990f79ef39",
        "cursor": {
          "ref": "e4f29f0e-acb1-4f3a-af07-e888a88f3ea3",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e2357bd-8419-40d7-83d9-c45278ce4659"
        },
        "item": {
          "id": "043427b0-bb4e-4a34-99db-11990f79ef39",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d1696639-0ef9-4e11-9caf-ad93fac989bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462d6b6c-8e1c-4721-bb56-c762b366d86a",
        "cursor": {
          "ref": "1ba1b1f2-e6b4-4dd2-833d-7679b52b4e5e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "961d5c04-8f86-4153-95cb-44b5cc4afe77"
        },
        "item": {
          "id": "462d6b6c-8e1c-4721-bb56-c762b366d86a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "efddb0f1-9c11-47ad-ac82-79777b514487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94aaeb-69aa-4025-ab39-81a5488a9f4f",
        "cursor": {
          "ref": "c370bb57-f6e9-4415-a1da-d5913a7e29bb",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99001020-47b2-4dc8-b046-37e7f5c2cbfd"
        },
        "item": {
          "id": "5e94aaeb-69aa-4025-ab39-81a5488a9f4f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "deade0d7-c605-43d0-b0ef-0a6ec224138b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a826a5-5d6f-4d65-96b3-98174816ca0f",
        "cursor": {
          "ref": "6f6585be-e4ad-4ae6-a14b-cee1c9dc8396",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0c9fb4b1-b28b-41f4-ad21-d4026f175e37"
        },
        "item": {
          "id": "08a826a5-5d6f-4d65-96b3-98174816ca0f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "15ab8619-bcd7-41c3-b189-d534e5fed990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b40ef3-29d4-4a9e-9711-a467ac3e178c",
        "cursor": {
          "ref": "6014f906-9334-4a03-b91d-f1b19e59846a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a6c7452-a16c-4a70-b2ee-0b2f8cab9512"
        },
        "item": {
          "id": "32b40ef3-29d4-4a9e-9711-a467ac3e178c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "061080f1-f54c-48b1-9198-29b8f07b6b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdda0ac-0cc6-4829-b53a-f158f0d2da83",
        "cursor": {
          "ref": "01f67ad0-61e7-498f-a9d0-d58a26941d2b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "504882f6-f7a2-4906-87df-7f10c84a57cd"
        },
        "item": {
          "id": "1fdda0ac-0cc6-4829-b53a-f158f0d2da83",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7fecbebd-8b8a-41f2-ab68-b24023a87155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb1f07-8b58-4f74-a1a7-7ba303519079",
        "cursor": {
          "ref": "b51e97ce-e6cc-4ebc-9281-abfe512dcd6d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "604dd7a1-51f9-40e9-8bf6-a96ee8b72f77"
        },
        "item": {
          "id": "aeeb1f07-8b58-4f74-a1a7-7ba303519079",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e9c7d325-2473-446b-bd7b-bac583a59495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00c76f2-6af4-4199-b09d-a5d9407c4222",
        "cursor": {
          "ref": "b5e357e6-e7f1-445f-afd1-a0aeb308f1a9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "713bb0a4-05d7-451c-b08f-62b2f98c8dac"
        },
        "item": {
          "id": "b00c76f2-6af4-4199-b09d-a5d9407c4222",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "66a29952-e145-4c7b-aba7-8aabef3a7e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38688bf-dc3b-43b6-9af9-844fb2372961",
        "cursor": {
          "ref": "f48b6b9c-6a2b-4de9-8d1b-133ef4bebd5f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57bf8dc2-3900-4142-9a45-b9407392450f"
        },
        "item": {
          "id": "b38688bf-dc3b-43b6-9af9-844fb2372961",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9ab037da-3824-4b59-a399-da81b76b59ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dc3947-cc38-46d1-98ca-d4834d8c8f45",
        "cursor": {
          "ref": "f4d172c3-18be-4b12-ae29-8789d80b4b05",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b679fa57-751d-46bb-a78b-21b2826a8a84"
        },
        "item": {
          "id": "83dc3947-cc38-46d1-98ca-d4834d8c8f45",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c0ba25ee-18e6-411a-b506-1b351d0f14c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be0bc62-fe91-4260-aa75-6f8cc8361502",
        "cursor": {
          "ref": "40fd12b6-8b88-41a9-abf9-59a89c873334",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "890dc92f-fec5-4e15-98b0-72b8e93453ff"
        },
        "item": {
          "id": "4be0bc62-fe91-4260-aa75-6f8cc8361502",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cd1db461-6c4e-4d99-8324-aa660cafb049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53674d8-8575-4831-a771-532234cabe51",
        "cursor": {
          "ref": "38d3f209-0c49-459d-a3df-a5a5b05afc51",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc3dff9a-1e26-4bf3-8fd5-775e53683d74"
        },
        "item": {
          "id": "b53674d8-8575-4831-a771-532234cabe51",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9aabeafb-3f35-48aa-b429-c12d54e1d543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279edd57-453d-49c9-805a-317a2c05ded3",
        "cursor": {
          "ref": "1162b432-b655-497f-ad06-0ce2110c2cf6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f05f330d-94b5-46e7-b101-a5dbe7552222"
        },
        "item": {
          "id": "279edd57-453d-49c9-805a-317a2c05ded3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3ba0a04d-e104-412f-9559-02ada88fbbf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3966c4f8-da17-405f-99d4-8eb30befabfc",
        "cursor": {
          "ref": "f9fe2050-339a-46db-b84c-e4ab015e7334",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bd9722e5-4f62-4513-8a83-6bc83599c587"
        },
        "item": {
          "id": "3966c4f8-da17-405f-99d4-8eb30befabfc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "73736338-9a6a-44f5-9762-42a05c9cf94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e11c6c8-7ccd-43f9-92a7-7aab61396744",
        "cursor": {
          "ref": "cebd21fc-a3c0-4379-95d5-ac431cfa3906",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc04228f-9d8a-4c6f-a73b-f81cecc21815"
        },
        "item": {
          "id": "3e11c6c8-7ccd-43f9-92a7-7aab61396744",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1f5a30a6-c5ce-4a4e-b556-e752ac78fb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed066736-76c0-472e-87da-86466ce30216",
        "cursor": {
          "ref": "07fd14e0-2e15-448c-b31d-8bb76dafb3f4",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1e9542bd-c415-4975-8fc3-26bc1a392344"
        },
        "item": {
          "id": "ed066736-76c0-472e-87da-86466ce30216",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f7d17b4c-8ac0-4a83-80fc-f4643464968f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030da8ed-3224-4795-b8d0-a20f0a34a403",
        "cursor": {
          "ref": "dee7517d-187f-479c-951a-6a8b6d6785d6",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a7185f13-aedc-4bd9-baf7-58a8fade7dc6"
        },
        "item": {
          "id": "030da8ed-3224-4795-b8d0-a20f0a34a403",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8de148a8-76f6-4cc6-95cd-3c80d3252542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a28c39-a3ae-4683-99f0-5c6b4450429c",
        "cursor": {
          "ref": "3e791b65-1094-4ccc-8d3a-43e866d4730a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e3a99452-81d6-4ac1-a8be-ea401b39a0ca"
        },
        "item": {
          "id": "70a28c39-a3ae-4683-99f0-5c6b4450429c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c0f43ea0-4bd8-46fb-b065-a2d49283c8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a54b254-ab70-4efb-b2e5-1a5fb3b2b4bc",
        "cursor": {
          "ref": "bca839ed-e839-49e2-a547-d89b624d58a6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7975e852-25f1-46d8-8c55-69536752409e"
        },
        "item": {
          "id": "0a54b254-ab70-4efb-b2e5-1a5fb3b2b4bc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "94c8c809-c09a-4aa6-a983-fd223606ee1c",
          "status": "Created",
          "code": 201,
          "responseTime": 655,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ed96e823-8570-45b3-8984-6f99da3b48ec",
        "cursor": {
          "ref": "bb23112a-ecb8-44ec-901a-c96578c4c826",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5c2289b1-7ad4-47df-99d2-7b37fe7f7200"
        },
        "item": {
          "id": "ed96e823-8570-45b3-8984-6f99da3b48ec",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2cf28ac7-5e78-4570-bd57-ff9d6b9e7129",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7ed96b44-becc-4ea9-bb6c-fd847373e4f2",
        "cursor": {
          "ref": "fdc96b67-a170-40a2-b35b-aa44ee8a4026",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1857b5a-5ab7-4596-b1b1-529b651c8fb5"
        },
        "item": {
          "id": "7ed96b44-becc-4ea9-bb6c-fd847373e4f2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4390ccd2-a9a6-41ac-b013-6dde90c1f73c",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "47a0756c-28ef-4081-8541-7e0bf58da450",
        "cursor": {
          "ref": "adb1e74c-b311-4a89-88e7-c7616ab758b9",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7d9847e1-15ee-48ef-9a31-99df61cece75"
        },
        "item": {
          "id": "47a0756c-28ef-4081-8541-7e0bf58da450",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "77bde59a-8b1c-44be-9f34-c97c92fa268a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4e1046-0b67-4bb6-944c-e357be23286b",
        "cursor": {
          "ref": "9c50e5d3-754c-485d-aeec-aa87b144212b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7e006334-f5f7-4d22-8de9-8f99698b33c2"
        },
        "item": {
          "id": "cc4e1046-0b67-4bb6-944c-e357be23286b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b738671e-89fb-439a-be85-ef216df11e49",
          "status": "Created",
          "code": 201,
          "responseTime": 409,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bc8d972c-82cf-4b21-a520-d2e146b2e7d6",
        "cursor": {
          "ref": "51e8dfae-e95a-451e-bd7c-f813d9357234",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "51e968ae-98e4-43f2-a685-317339869de7"
        },
        "item": {
          "id": "bc8d972c-82cf-4b21-a520-d2e146b2e7d6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "88ebfe48-a1ee-4ef3-8606-e59c129b5ef7",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e28f3ec0-551f-47a7-ba5f-500e5bc09c55",
        "cursor": {
          "ref": "992f7324-a62d-4cfd-87be-30191b5c6a91",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8ef91086-a8f8-41fc-8b89-c057c3921dc9"
        },
        "item": {
          "id": "e28f3ec0-551f-47a7-ba5f-500e5bc09c55",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aab66851-b848-4df4-9e87-3ed68922cd08",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c11b3a09-6c4d-4b90-89c8-3a1e09edff83",
        "cursor": {
          "ref": "eeb016dc-fe7f-4f5a-950c-ddf639c425a1",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2bcb0e90-27e9-4676-87dc-0d7653454155"
        },
        "item": {
          "id": "c11b3a09-6c4d-4b90-89c8-3a1e09edff83",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "913b7d2f-9080-4504-a72d-ec94863f945b",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "bb6cecc8-1079-4094-bcbd-3799cf625b92",
        "cursor": {
          "ref": "d3ac97a8-71a4-4752-9449-118ddf802065",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c5d162fe-138a-4b82-b8e6-fec6787b62b2"
        },
        "item": {
          "id": "bb6cecc8-1079-4094-bcbd-3799cf625b92",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a98f3e4c-d60a-4c7d-a5e8-33e42dbdab7a",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f35280f5-e300-4c2c-acef-623b3bb20a9a",
        "cursor": {
          "ref": "625f2e6f-d8b7-4fe1-96ff-76397f21bd90",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfa5dd5c-bfca-4451-87c3-eed9c44e2649"
        },
        "item": {
          "id": "f35280f5-e300-4c2c-acef-623b3bb20a9a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ab08d1d0-7aaa-41c5-8d88-463f5ea6500e",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "dab4623e-211d-41de-9a8b-ecf129407e87",
        "cursor": {
          "ref": "e666b1c9-0235-4ff8-baf6-95f628e45d60",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "26a8eef4-d24e-4304-a9d2-9de525df59bc"
        },
        "item": {
          "id": "dab4623e-211d-41de-9a8b-ecf129407e87",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "58514b82-222f-4176-8c99-9a5d1768a9e6",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3f54f024-37da-402c-a5e8-f7647580d119",
        "cursor": {
          "ref": "c89a1749-d05b-4292-9af6-4e5a7db64e15",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b1cb6c41-6f63-447a-82ed-1cb631aa8ebd"
        },
        "item": {
          "id": "3f54f024-37da-402c-a5e8-f7647580d119",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6a259da6-6b2c-43fa-bfee-86b87da4454e",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "785602e2-a602-49a5-9760-dc2aeb1e9fc5",
        "cursor": {
          "ref": "70bc2e57-bc08-4bdd-821a-ac8059b74bb1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b2df48ae-4ff4-4c05-82c6-c3fc6cb95c75"
        },
        "item": {
          "id": "785602e2-a602-49a5-9760-dc2aeb1e9fc5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "10c3824e-65f3-4f9c-a802-993ec66e6598",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dd7685dd-b00d-44b7-813f-a2130e82a931",
        "cursor": {
          "ref": "cb3d11c2-8a90-43ac-968c-18e71ba3d619",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bd397d5c-0026-4c45-ae39-b60c10f459e3"
        },
        "item": {
          "id": "dd7685dd-b00d-44b7-813f-a2130e82a931",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "529d15dc-2654-4264-a1e5-84897d3ed326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89555ecc-f267-49b7-943f-6afa397af87d",
        "cursor": {
          "ref": "9750d3ef-df9d-4c34-a34f-8dbd2747acf3",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "657a5a0e-1d91-4abc-bcd9-40c5741d1c70"
        },
        "item": {
          "id": "89555ecc-f267-49b7-943f-6afa397af87d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ab3afa92-8c90-4584-8428-97b799729ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e33f94-cb10-48bf-b3bd-fb3f33551de6",
        "cursor": {
          "ref": "e9a4b142-5303-434c-ada5-517af22fa58f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5fe96b18-5d79-4b94-b35a-cb6ac1b88619"
        },
        "item": {
          "id": "96e33f94-cb10-48bf-b3bd-fb3f33551de6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c9e8cdaa-86ff-4381-95a1-e9517ebd3e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dc87a4-a21c-457e-9281-4562de9dc0dc",
        "cursor": {
          "ref": "b7dff78a-61a2-43e7-a47d-65df81243cef",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6152a26e-1b1d-4da4-b862-3ff511b07dcb"
        },
        "item": {
          "id": "07dc87a4-a21c-457e-9281-4562de9dc0dc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c71907a9-6948-43b6-8f33-ae7d07364f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a326c9-7882-442d-a8de-9d2a740be76f",
        "cursor": {
          "ref": "1933423d-ddc9-403c-a400-5596b5467bd7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1d101be2-9d96-4375-abdf-dcff5646f487"
        },
        "item": {
          "id": "58a326c9-7882-442d-a8de-9d2a740be76f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "61e7ff45-2905-4285-9e77-af0b0bf97066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eca2158-1325-4651-98e4-a09252c240ed",
        "cursor": {
          "ref": "b853bdcc-f2e7-469f-b9a9-63f7798840e1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fae7291c-729b-4263-9525-ce65de05e255"
        },
        "item": {
          "id": "4eca2158-1325-4651-98e4-a09252c240ed",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "52f46039-1ed3-4ec4-a896-da93841f53dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c94100f-0275-41df-9f88-0a3e1bff364c",
        "cursor": {
          "ref": "1e2303ef-2b16-4f0d-a79b-1f023c4c1dbc",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9ca2b5c9-8254-4abe-b017-c87cc9defb7a"
        },
        "item": {
          "id": "2c94100f-0275-41df-9f88-0a3e1bff364c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "405c5425-e830-4606-b75b-c94dcc18fb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19aa274a-fb6d-4ae6-9220-72dc85e27888",
        "cursor": {
          "ref": "dbcb41dd-ce32-45c7-89a0-486c4d0ea411",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bf179cef-1dc8-4cf3-913e-314801a5287e"
        },
        "item": {
          "id": "19aa274a-fb6d-4ae6-9220-72dc85e27888",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fa2a372d-07c7-4fe6-9d78-6fa498dfe092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08da7b5b-014c-4b1c-b6f5-4680257a6550",
        "cursor": {
          "ref": "71994409-052b-4139-a00a-05d578e90d56",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6f1d581a-e7ef-4645-9656-bea8c453b7ba"
        },
        "item": {
          "id": "08da7b5b-014c-4b1c-b6f5-4680257a6550",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "12788b0a-d3cf-4c3a-8294-9c36a56da076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcd7e72-ccc1-4f00-a87d-7672d8e3589a",
        "cursor": {
          "ref": "a88b4ac9-01c7-49a6-ae0c-39b522ba20f1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0a45c379-3a25-4b75-962e-a81aedeb6492"
        },
        "item": {
          "id": "0dcd7e72-ccc1-4f00-a87d-7672d8e3589a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "49cf66f6-8e0a-4875-bcdd-10a91a1eda88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8897c430-0c5d-4efd-957a-3eb4dae33bbb",
        "cursor": {
          "ref": "e8b559de-d3bf-485c-9a5c-78e0a4a97af5",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2e82d344-00a2-4ef0-81a4-16e0eaf7346b"
        },
        "item": {
          "id": "8897c430-0c5d-4efd-957a-3eb4dae33bbb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a774a011-8616-4581-a223-3e42503c9ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498395da-d7b8-4aaf-b39b-6f7e5a06365e",
        "cursor": {
          "ref": "1e09ffa5-51b0-4324-a5f8-a201cdad86ff",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fbde5b36-b6b5-432c-9a9e-87c1ba07b1e6"
        },
        "item": {
          "id": "498395da-d7b8-4aaf-b39b-6f7e5a06365e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "92141090-74d4-4c55-9ab5-feca88a65474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc13775-9d4d-43db-98eb-52cc5dc91ee5",
        "cursor": {
          "ref": "b5b2fd1c-4e70-47a1-a731-e20f8bd11703",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "945e7d0d-bc4f-4735-ae40-55ba79515123"
        },
        "item": {
          "id": "cfc13775-9d4d-43db-98eb-52cc5dc91ee5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cc61f1bf-b1aa-4a80-9932-9f3d0a59dd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1793caec-806e-4b97-823a-50e2901aac5b",
        "cursor": {
          "ref": "5ab847a7-65f3-430b-86ea-a05c61c02a4c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8ffecf25-f1c2-493f-913a-860e300d79d2"
        },
        "item": {
          "id": "1793caec-806e-4b97-823a-50e2901aac5b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "57fad306-7634-48f6-bd9e-c62c806e89f7",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c3633cd2-9602-4c80-8c93-79ab0dcbdca7",
        "cursor": {
          "ref": "7e6c8d8a-2026-4789-bc85-fa17b1d6bffb",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6ad5b1ed-ad19-4f5e-b304-be7aa5d0dc06"
        },
        "item": {
          "id": "c3633cd2-9602-4c80-8c93-79ab0dcbdca7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bc822c42-f05f-4a9f-9305-dc17f09b0d19",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "95bd6bf3-0d66-4545-979a-b56da91b070f",
        "cursor": {
          "ref": "5fbdad03-5a9c-4df5-b6c9-9563d994466f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "447ef9f1-444b-4c2e-ac7b-77d869704f17"
        },
        "item": {
          "id": "95bd6bf3-0d66-4545-979a-b56da91b070f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a8d3e86d-ba9f-4e24-a8ba-ab500ab6380a",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "403dc9fd-7a4b-4228-ab50-d20c7941af24",
        "cursor": {
          "ref": "e2e1a9f6-8017-4cb5-b62c-47b8b6cfcdcb",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a44f6659-ba69-40e0-b838-c76dee4b9d82"
        },
        "item": {
          "id": "403dc9fd-7a4b-4228-ab50-d20c7941af24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "15274bca-9297-4e27-8bbc-de9ab2967a73",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5b0210e4-24bb-4c12-bd86-bb11de073fc1",
        "cursor": {
          "ref": "1b9a9729-98b1-46c4-addd-741d35770170",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f2a38639-1ac9-4ff9-9b1c-ef31af45a62f"
        },
        "item": {
          "id": "5b0210e4-24bb-4c12-bd86-bb11de073fc1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8aa79740-2e40-47cc-9e61-b20fed8a3e6a",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a47035c9-6d15-431b-90ed-e4d67a04a97c",
        "cursor": {
          "ref": "beff4f74-a972-4e9c-8e1d-51a9919c3bc1",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ecd0f19d-377d-4f66-b868-89512d2528d4"
        },
        "item": {
          "id": "a47035c9-6d15-431b-90ed-e4d67a04a97c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c1ee4d57-7d23-49e5-902a-b34b5bd7dc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41135ac3-b5ae-4fde-abc9-c6bd1633072f",
        "cursor": {
          "ref": "721c4b73-badb-4f43-ae18-fb2fad86a607",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3da7f585-4018-4b48-bf6a-ff147f58ab0f"
        },
        "item": {
          "id": "41135ac3-b5ae-4fde-abc9-c6bd1633072f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "081878a0-9405-4a74-bca9-66730daf23d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca78ee6-8710-4e03-a4dd-4c2618e5d036",
        "cursor": {
          "ref": "82bceca0-9295-4f32-b4f5-70d16a151897",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8f50c903-eedc-49b3-b044-885a29fa2bbd"
        },
        "item": {
          "id": "6ca78ee6-8710-4e03-a4dd-4c2618e5d036",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ecc40c9d-1ed9-45d2-bceb-6cc9275efcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec394f3c-c492-4127-bc99-3d971c650ff5",
        "cursor": {
          "ref": "77531560-234a-4c82-bfcf-f686df4c90e2",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3d4f0348-5e3d-4662-bb51-e8aa388e5782"
        },
        "item": {
          "id": "ec394f3c-c492-4127-bc99-3d971c650ff5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fe13bffe-1600-4f94-bade-05d4c2da3111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcf22b7-19a3-4036-98c5-6d95c215df58",
        "cursor": {
          "ref": "83b05421-aeb2-45ec-b30c-925c7451ea97",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b5f2c54a-cdcb-4d29-9879-4ab126f2bc3f"
        },
        "item": {
          "id": "5bcf22b7-19a3-4036-98c5-6d95c215df58",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9eda97d6-c128-40f6-b84c-188dfee6a6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db87c75-1aaf-4149-a7d2-238a021c9af2",
        "cursor": {
          "ref": "040a0ed6-f45b-4efa-ad7f-ea01efe975db",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "963d6ce9-4a3d-40cf-9d07-851a1ee38e05"
        },
        "item": {
          "id": "1db87c75-1aaf-4149-a7d2-238a021c9af2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "969db0a4-e24e-4dc2-8ce9-2b7ae1a54922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9b7cf7-53b8-4af7-a34b-6281f3269b6e",
        "cursor": {
          "ref": "68de08a2-4d11-4ba7-99af-19e71cceda40",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ac233ff-3041-4d20-a86a-a5a9d277e7f5"
        },
        "item": {
          "id": "1c9b7cf7-53b8-4af7-a34b-6281f3269b6e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "494552eb-a692-4468-9792-0d29a1ffd71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0290e28-c60f-4f02-b6a2-d8433906b373",
        "cursor": {
          "ref": "a792a6b5-f253-4693-bd0b-94e56e0b5d23",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "137f0f82-eac7-43c0-9c02-37a4d83aaf2a"
        },
        "item": {
          "id": "a0290e28-c60f-4f02-b6a2-d8433906b373",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "53686e08-5105-42cf-a5aa-a39e69870cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3e5454-30b9-40e0-a73b-d1a281de6718",
        "cursor": {
          "ref": "6ebdd022-c6dc-4ab1-8afd-51f2ed139978",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3e56c5d5-1493-4310-b4c2-43c5d4fc1bbd"
        },
        "item": {
          "id": "ed3e5454-30b9-40e0-a73b-d1a281de6718",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e21430f-037c-4234-afa8-add64bbbe33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02243409-b28a-4e7a-aeed-55e34dfc26d1",
        "cursor": {
          "ref": "65f2d0ca-a781-486a-b79f-fccdd405058e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76681065-e883-486e-a9d3-67b900185bcc"
        },
        "item": {
          "id": "02243409-b28a-4e7a-aeed-55e34dfc26d1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a5858ab5-e026-4144-9fb9-6bb97295b6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d50fbde-81d7-4ba1-a879-05a45df002d0",
        "cursor": {
          "ref": "a388abd2-7dfc-435d-97e8-b0d128726ded",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d1e256e9-cc38-4f8a-af94-924c1a23bbe0"
        },
        "item": {
          "id": "6d50fbde-81d7-4ba1-a879-05a45df002d0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "72637efd-3617-4c15-83e9-0a58ac5c4d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919fc3d2-4cfb-426d-94ea-43ad1bf0dd3d",
        "cursor": {
          "ref": "48a1bab8-4c43-4560-804f-16435d019f07",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7270e43a-8047-4e7f-904d-1e77b8575982"
        },
        "item": {
          "id": "919fc3d2-4cfb-426d-94ea-43ad1bf0dd3d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7fb361de-a394-40f5-95c6-061c347277ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c75055-58cd-4258-8058-7cdd3ea1e359",
        "cursor": {
          "ref": "7fb1139c-3207-4867-8a79-2ea786c72bab",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "48cbd754-7749-46b6-9f2b-45758bedd0e2"
        },
        "item": {
          "id": "85c75055-58cd-4258-8058-7cdd3ea1e359",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c8100f54-0446-4ae7-bb85-ab0971e4adc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340b19e5-6ddf-4bab-a5ea-97ed31df2ce7",
        "cursor": {
          "ref": "90c94080-7a0a-44cf-9fd5-635bf7d7eca3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9723b474-68ae-4e7c-a507-7ec456fc4f66"
        },
        "item": {
          "id": "340b19e5-6ddf-4bab-a5ea-97ed31df2ce7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c92bc104-2dd8-49b1-8cc3-2c864cd14ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5368c4c-36f1-47e0-bef6-759653264a3b",
        "cursor": {
          "ref": "8fd33f31-9173-4f49-b4ee-ad6c78af75cd",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1acd10e3-ea4d-4b53-89a7-c01e102ad45d"
        },
        "item": {
          "id": "d5368c4c-36f1-47e0-bef6-759653264a3b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "37feea37-fd25-4040-bad3-aa633c80e685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342fe345-266c-4bf5-abc8-30e853163920",
        "cursor": {
          "ref": "985fd69f-39eb-4270-9ec8-57bf9b31a86e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4355cb3f-7ef6-4a9a-84a6-4c2b7326af0d"
        },
        "item": {
          "id": "342fe345-266c-4bf5-abc8-30e853163920",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bf2d178b-7c70-4a6e-a456-0031c4aa3080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03992dca-9bfa-48f9-8a8b-e7753c5b947b",
        "cursor": {
          "ref": "52c224de-eeee-4039-8377-e845cc97adc8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "aa9ed4cd-2beb-4e50-9b35-e427dff147a5"
        },
        "item": {
          "id": "03992dca-9bfa-48f9-8a8b-e7753c5b947b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0779f137-8fde-4437-93e4-9b7d0bfe2ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420826ce-009f-4408-8df7-8b06c00a2a0f",
        "cursor": {
          "ref": "4fff071a-f756-47c2-8429-cd758e8d5b41",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a416273d-0cc5-4d56-9cf8-7cc64e7a311b"
        },
        "item": {
          "id": "420826ce-009f-4408-8df7-8b06c00a2a0f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f13b52de-e3ff-42a9-8a89-f53dd9c2ce42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943fad57-38ba-4b3c-a859-926f0637884b",
        "cursor": {
          "ref": "63ccc635-574b-4126-a8d9-9572f68c0b84",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c461ae55-eaf0-4c1c-9a52-cc8c49185034"
        },
        "item": {
          "id": "943fad57-38ba-4b3c-a859-926f0637884b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d2aae325-28d7-4f20-90e5-f8e863951020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49b0628-c123-46a0-ae4e-7d4d66479ef5",
        "cursor": {
          "ref": "58abbb5d-315d-4b99-b864-c1b77a8d3ed4",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eaab985d-f4c2-422f-9964-1f9eee963901"
        },
        "item": {
          "id": "c49b0628-c123-46a0-ae4e-7d4d66479ef5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6533d8e8-a8d2-494d-804f-ef1d190848cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641a2cdd-7a19-4380-bc55-2703d22c3b59",
        "cursor": {
          "ref": "4de083a7-aa50-42b2-bc31-90fb000c0cbb",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "761bee50-4b73-4b32-b949-8905325e66f6"
        },
        "item": {
          "id": "641a2cdd-7a19-4380-bc55-2703d22c3b59",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e8bea5e2-2eae-4c7d-b548-5f1f230aa313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d281c78a-ae24-485a-8e64-d12422847eff",
        "cursor": {
          "ref": "219d983e-fb9a-4857-9791-b3a0f84d7ec0",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9c6b9de9-31b3-40fb-8ddc-820a7aaaf039"
        },
        "item": {
          "id": "d281c78a-ae24-485a-8e64-d12422847eff",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5d7302c4-d6db-4af9-a37e-86b0f0d2ada4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1206b68b-969d-498c-be72-09cd7eae891f",
        "cursor": {
          "ref": "b305ee0a-e429-400d-b49d-a7ed19262aa4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4426cce-30c8-4a90-ad9f-0cb577fabd98"
        },
        "item": {
          "id": "1206b68b-969d-498c-be72-09cd7eae891f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5e80e9e4-4f79-4bc5-9e7c-aa9b17afbbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e2c938-5361-4e72-a9ea-f4991c70dd93",
        "cursor": {
          "ref": "d85ee45e-79bd-4a5b-b33b-f067ab9f7b5e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "83736b91-a69d-4dd5-8a8d-25c020979912"
        },
        "item": {
          "id": "19e2c938-5361-4e72-a9ea-f4991c70dd93",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "09143756-3ec7-4461-915a-ed26642f648f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b85c3c7-0cda-42ca-9504-293ad2aa5a59",
        "cursor": {
          "ref": "4a1688ac-18ad-4d9d-8ae2-1faf3eb016d0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d4116dc1-3be6-47d7-9f3f-62575f4930eb"
        },
        "item": {
          "id": "3b85c3c7-0cda-42ca-9504-293ad2aa5a59",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "59e40d3f-8938-4fa0-ac93-80fca5e097d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01a79f8-8fef-4be2-87b7-c25b1a97ae06",
        "cursor": {
          "ref": "dbbb0606-97fa-4379-b79e-72e2c28af2f0",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fc0ca3ee-639c-4306-9694-3e1dcb4464f4"
        },
        "item": {
          "id": "b01a79f8-8fef-4be2-87b7-c25b1a97ae06",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2db9b77d-f771-46c7-9c77-f3582da945a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8340d81c-2887-4a2f-aad3-d5463861dfe1",
        "cursor": {
          "ref": "fdd3ddd9-65f9-4246-8459-018c983fe6ef",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5da9ec57-ac21-4d12-8351-0545cd620127"
        },
        "item": {
          "id": "8340d81c-2887-4a2f-aad3-d5463861dfe1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b9ab4a5d-c217-4cfe-919e-41f89848fc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e5f8bb-4c5b-4837-af7b-27d3447941cf",
        "cursor": {
          "ref": "54bcf250-8270-4285-aad1-c762373b6400",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "023b4acb-de47-4833-bb45-95e28c2ce890"
        },
        "item": {
          "id": "73e5f8bb-4c5b-4837-af7b-27d3447941cf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "88dec89a-96ed-431b-9d56-5d7d7fd2eed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76da8b63-0155-4381-a21b-7233d26b0d89",
        "cursor": {
          "ref": "934bea96-9d45-4f55-b24f-8cc5ef541ec5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c9dff2d2-3711-44f9-aa78-a8cc860a4774"
        },
        "item": {
          "id": "76da8b63-0155-4381-a21b-7233d26b0d89",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7206be6a-c8ca-4455-975b-7e83f18071ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019c062e-55a5-41aa-b7be-0430b88bc9db",
        "cursor": {
          "ref": "65f6c5a0-2323-4873-959c-fa5bccef0c88",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "aee75fc3-59bd-47ae-b732-fbf3452d1e33"
        },
        "item": {
          "id": "019c062e-55a5-41aa-b7be-0430b88bc9db",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73a85f6c-e15a-4986-bbc4-c771796d2411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89bbc77-6dd7-406a-831c-3abfeb159beb",
        "cursor": {
          "ref": "d93b56f1-392c-4dff-8aaf-ea24e7f9151b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7c7ad43b-367e-467b-b263-1bcf0c45af60"
        },
        "item": {
          "id": "e89bbc77-6dd7-406a-831c-3abfeb159beb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bb2d9f81-6ff1-4c61-a41a-fca57b030e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19800f03-80b6-4b1e-a23a-824c19b8a294",
        "cursor": {
          "ref": "c131c8ab-b1e7-463a-b2a3-8e083658d73e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8c07319c-1ae1-4d68-af8c-81fea18121af"
        },
        "item": {
          "id": "19800f03-80b6-4b1e-a23a-824c19b8a294",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7cb76cb7-114d-49b8-ad62-c23c0c44bf32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6929121f-d863-489f-84e1-084b3ce97508",
        "cursor": {
          "ref": "7cf4d283-4450-4d87-919a-43ac7cd667eb",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7f293b84-1b6b-4822-8552-4b42ea892375"
        },
        "item": {
          "id": "6929121f-d863-489f-84e1-084b3ce97508",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c2ade1f8-e1e4-4048-83c4-7c691fa9f0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0b6c9528-91f0-48f0-bdc3-bfab96523eeb",
        "cursor": {
          "ref": "2a3f0d3b-c580-4e3f-a46f-16b3971d60d6",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "99821ee7-5e15-4b17-9b61-0aeae5dbae66"
        },
        "item": {
          "id": "0b6c9528-91f0-48f0-bdc3-bfab96523eeb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2fecab47-5c86-4ff0-bf22-cc932aaf8744",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "26295da5-372a-43b8-abbe-a34f707b56d2",
        "cursor": {
          "ref": "ef4a82c0-7dd5-4e20-9b55-661b29e4ca46",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1b840454-1dff-463a-bf59-8464291c0f5d"
        },
        "item": {
          "id": "26295da5-372a-43b8-abbe-a34f707b56d2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e867b4f7-2b18-4acb-8c00-268be0dcde6e",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "10aa4bb9-4407-4657-b757-e7c135228f17",
        "cursor": {
          "ref": "0ed8f73a-aba0-4118-9c76-f4a7beac94a9",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d1048a6-456e-44d7-9793-35aa92701420"
        },
        "item": {
          "id": "10aa4bb9-4407-4657-b757-e7c135228f17",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c5031a17-7700-4b89-83d4-a52a47c1679f",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "132e046b-311e-4e60-8739-25f0466240a4",
        "cursor": {
          "ref": "1facb249-d7d8-4816-a422-67be91239a33",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd59947a-321c-47c0-b26f-3d351680c842"
        },
        "item": {
          "id": "132e046b-311e-4e60-8739-25f0466240a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "492179fc-8b6a-42ec-a773-df74cce4642d",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42206d1-43ef-4e33-88e3-8c8027e9f093",
        "cursor": {
          "ref": "8587ef81-e1bd-40a7-94f4-9de9aaf13103",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "00b126c5-23b5-4941-ab74-6ab49ee9c15f"
        },
        "item": {
          "id": "c42206d1-43ef-4e33-88e3-8c8027e9f093",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8b0929fc-b94a-4bac-b630-c8bf822bc3d3",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-12T00:40:02.685Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-12T00:40:02.685Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f4d3e995-8261-4c65-8e3c-05b528ff4f52",
        "cursor": {
          "ref": "65085880-93d9-4961-82b0-0b09266b7594",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1ef1c040-468c-4112-99f7-acd60b3ec43f"
        },
        "item": {
          "id": "f4d3e995-8261-4c65-8e3c-05b528ff4f52",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "09c29093-b37d-4126-8670-a73a38173bc9",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f82d3b4-34d1-45f5-8b62-36ae9497f59c",
        "cursor": {
          "ref": "d00ac4b7-54b1-4bde-a2de-17c253c60042",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e1509419-c5aa-45dc-9178-7671e0ea766a"
        },
        "item": {
          "id": "0f82d3b4-34d1-45f5-8b62-36ae9497f59c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec59c664-b77f-4c90-a389-c2737b892963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f250b852-17f7-4f9c-a0cf-bddb9ae8ec6b",
        "cursor": {
          "ref": "57a1d2c8-a190-40cd-bb0c-471764422c3a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "891fff56-90b3-414e-a3e8-813141ee0463"
        },
        "item": {
          "id": "f250b852-17f7-4f9c-a0cf-bddb9ae8ec6b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5834972f-855e-4835-b700-6949c62687b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2670287b-9774-4bff-9c1d-bcccd02f14b3",
        "cursor": {
          "ref": "99258774-0768-4a0c-8ca2-6846ebaff1d9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "28d0cd7a-1954-48c4-aecd-76623bd4d08b"
        },
        "item": {
          "id": "2670287b-9774-4bff-9c1d-bcccd02f14b3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "06345a88-b298-4040-b82c-105e7580612f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b87d31-6d06-4fe7-a52d-83794fc10ecd",
        "cursor": {
          "ref": "5805b020-e8af-46cc-850e-daa46e4e9168",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9c73ce4-0b82-4eda-90ab-6f05eb128a81"
        },
        "item": {
          "id": "b1b87d31-6d06-4fe7-a52d-83794fc10ecd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fd1a0a81-d47c-41d1-9ee3-a8ae882dc0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aeea03c-c288-4b44-bc7f-c5858594eb1a",
        "cursor": {
          "ref": "c41fb900-2e92-40a9-91c3-4d3b7966969d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4b4bdcfe-5a34-45bc-a653-195ad326cf93"
        },
        "item": {
          "id": "5aeea03c-c288-4b44-bc7f-c5858594eb1a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0ab47b7a-886f-49df-9d2d-4b6bc237e042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fbe40a-6c7f-4b17-b95a-c82d39a4cb29",
        "cursor": {
          "ref": "7fdd990b-cae8-4308-b1a4-6f9514bdf738",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8c6a6770-526b-42ee-80a6-4b06edd4814c"
        },
        "item": {
          "id": "d2fbe40a-6c7f-4b17-b95a-c82d39a4cb29",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "44b6de98-92e3-49c2-9e66-1a17ca1596af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113a380e-6e70-4887-8254-81d382b1fccc",
        "cursor": {
          "ref": "21aac564-9d5c-4c0f-b4ab-c6d8fd7adec7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fb738aa8-dcb8-46ad-8704-b572ba4eed4d"
        },
        "item": {
          "id": "113a380e-6e70-4887-8254-81d382b1fccc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "34a565cf-23d7-49d0-badc-b222819a074f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c32cd71-92d2-4144-a46d-dfa65aad8c3a",
        "cursor": {
          "ref": "8422e984-91ba-4249-af32-83d1a71c8cc4",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5b72a185-b434-4305-8718-15030932d360"
        },
        "item": {
          "id": "8c32cd71-92d2-4144-a46d-dfa65aad8c3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eeea3b5c-30b2-44c3-a782-15763bc0aa67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3204bfe-84cf-4355-bcfc-880486779da0",
        "cursor": {
          "ref": "04a5677a-cef7-402d-a347-0c71c2bb23b1",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e1ae169b-b607-4bb6-8ffd-91395b0b8197"
        },
        "item": {
          "id": "b3204bfe-84cf-4355-bcfc-880486779da0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3ac46a9e-ba99-4a6c-8b71-2eec303ef2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c99c106-e690-4ef5-bd73-51ed4a138a35",
        "cursor": {
          "ref": "b1f4fbe2-bc91-4a8a-9e62-4e053c064d45",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4cfa67e4-e4fd-4b84-b05f-a4d1b069001e"
        },
        "item": {
          "id": "9c99c106-e690-4ef5-bd73-51ed4a138a35",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "31325550-18ce-4a53-b29c-c71fc56b1e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1084279-cf43-4546-9060-15a00942fa53",
        "cursor": {
          "ref": "ee18ff72-4813-4058-840b-ab3c37a14e17",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9aad3674-2485-4924-a5af-2b268bf42058"
        },
        "item": {
          "id": "f1084279-cf43-4546-9060-15a00942fa53",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "04e0616a-79fd-4d20-8688-1a7e0c8f075d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c030f388-8ef4-455b-ae4e-070eb2ec6e31",
        "cursor": {
          "ref": "fe1a5607-f73b-4a6b-88dd-7f374425e8c5",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "32c2b100-f102-4164-8426-c1c1da4b95a2"
        },
        "item": {
          "id": "c030f388-8ef4-455b-ae4e-070eb2ec6e31",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92400b56-e8cf-440f-914d-66567fab8b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e59c7e-87ad-4e60-9df6-787161f1c2d0",
        "cursor": {
          "ref": "d5c266a6-f6f1-4058-b147-0b5d2b770ebd",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "756822c7-466e-44ba-812b-655e66411606"
        },
        "item": {
          "id": "09e59c7e-87ad-4e60-9df6-787161f1c2d0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7eeb7098-26b7-4899-b2b0-90ed8cb9e008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a01c5f-8229-45a2-8712-db912e0a8ece",
        "cursor": {
          "ref": "8566efc7-e05a-4d44-a217-bc41c9feaf02",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ac479a5a-fae7-4983-85f2-64a49a2c7af2"
        },
        "item": {
          "id": "b6a01c5f-8229-45a2-8712-db912e0a8ece",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ac1ba2a7-45d5-4114-9827-17f6261826f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3b646995-d7b9-4b5e-a617-4395d2f29ffe",
        "cursor": {
          "ref": "0cd21c72-52d9-4342-966d-1b0fa6967423",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dd1d51da-03eb-4819-ba5b-01437e06b355"
        },
        "item": {
          "id": "3b646995-d7b9-4b5e-a617-4395d2f29ffe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "79494d9c-e256-47be-b5ae-b7cd822155e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ba90e7-d6f7-4330-9b9b-7bc1b966e43c",
        "cursor": {
          "ref": "ec84669f-b009-4b25-a635-5d42974e7508",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b95d8ad5-a053-4d33-a408-5aa23bf21313"
        },
        "item": {
          "id": "f4ba90e7-d6f7-4330-9b9b-7bc1b966e43c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6518785c-f21d-42c7-98b9-e32bdf7e47ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41b47b8-b516-4a65-9faf-e82dbfae2a80",
        "cursor": {
          "ref": "460b710d-c880-4857-a062-e74e5075be81",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e731f33f-abd5-48e5-85d0-51114459e433"
        },
        "item": {
          "id": "b41b47b8-b516-4a65-9faf-e82dbfae2a80",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "501f8350-60a0-431c-a78d-633dd28c36fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c9f872-35ec-4868-a33e-39b64b431d26",
        "cursor": {
          "ref": "1c14532b-8b12-4809-bad9-22ad79349480",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bd26fcf2-9724-4018-95ec-ff94ff52f3af"
        },
        "item": {
          "id": "88c9f872-35ec-4868-a33e-39b64b431d26",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3e4781e3-b702-4bcd-ae6e-91fb7983297a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd08632-1726-44a5-9bd0-acb4966b518a",
        "cursor": {
          "ref": "7bde371b-c9fd-47d0-a007-1dc04187a340",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "528c884a-b623-45ae-bb0c-f0af9a7f5c3e"
        },
        "item": {
          "id": "4cd08632-1726-44a5-9bd0-acb4966b518a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d0d005b-6a99-4391-8378-d8af2b9626b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d373c70e-4959-4b8f-a24d-4dacb045a28e",
        "cursor": {
          "ref": "76cc6535-3248-460e-926b-ebb4ae6a6e65",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eb444511-dba9-412b-85fd-b3f648a16922"
        },
        "item": {
          "id": "d373c70e-4959-4b8f-a24d-4dacb045a28e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c2e7415f-de28-4321-bcd0-26a6f04dd170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f53eae-12bc-43db-abd7-b44ee7a98318",
        "cursor": {
          "ref": "60132e73-9021-4d81-b800-900bcdada5ff",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9cc61a46-2b1a-49da-bfca-3cf20409dd57"
        },
        "item": {
          "id": "44f53eae-12bc-43db-abd7-b44ee7a98318",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d9b78bbb-896b-4435-9a7c-2aa5bdea765a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7f8a8f-74d8-4f8b-8d77-48d4d9c4ae28",
        "cursor": {
          "ref": "b77c2c5c-9cae-41cf-ad04-8e4d4ace62b1",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b7532683-2d15-41ff-b8a5-60ba4efa18a8"
        },
        "item": {
          "id": "7d7f8a8f-74d8-4f8b-8d77-48d4d9c4ae28",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af649d3f-a255-403f-be60-61120903c1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5a90c9-5867-471a-8fde-a099624bb7b1",
        "cursor": {
          "ref": "f1c23af7-8dff-4285-9281-918e29958fcb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5094de22-c210-444a-9caa-bd17964f7250"
        },
        "item": {
          "id": "6e5a90c9-5867-471a-8fde-a099624bb7b1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "421d7e61-c97e-4952-9942-e3b58777e3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25c0ff8-8e45-4bd8-b181-0d67f4d11886",
        "cursor": {
          "ref": "1ec98d34-14ee-45c4-bb1a-571f2888064e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "afa6c648-5bbe-473a-8251-2e0a513f5a8b"
        },
        "item": {
          "id": "d25c0ff8-8e45-4bd8-b181-0d67f4d11886",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f8e32c31-f8dd-4960-807c-f3bdeb1402fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c56fc7-020c-4342-876a-47a2251d6740",
        "cursor": {
          "ref": "1e9dbe43-63ef-445b-85db-7126b3bf6224",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "22dd064b-27d1-42c5-bdd5-4ab49e42da7e"
        },
        "item": {
          "id": "f9c56fc7-020c-4342-876a-47a2251d6740",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c0913a04-7c41-402c-87db-64b91ebe624b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e722ee-cd89-4ffb-9189-c528ad53a402",
        "cursor": {
          "ref": "86de27d3-a265-4df0-96f4-84353f51639f",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1b6a08d5-747f-46be-88d5-8c64e381b17b"
        },
        "item": {
          "id": "c1e722ee-cd89-4ffb-9189-c528ad53a402",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1f3e242b-4b57-4058-8902-0dbf706add22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe91d8e-9e4a-4fa8-8dab-724656bd97cc",
        "cursor": {
          "ref": "1f302d6b-fc26-4313-b0f0-bd630d741c5f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fba12853-e2f6-4b95-a6fc-0b63a9835fcd"
        },
        "item": {
          "id": "dbe91d8e-9e4a-4fa8-8dab-724656bd97cc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7150813f-ef90-4436-a7cf-2d2161ac3e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe1a0bd-4650-4aa0-9343-71838e3293d1",
        "cursor": {
          "ref": "2d1c3f4a-7025-43fa-9a65-1f6a975f2fe3",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "269cdd4d-a9b0-4854-a140-c2853471569c"
        },
        "item": {
          "id": "abe1a0bd-4650-4aa0-9343-71838e3293d1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "222bce58-a5d3-4436-8a26-4ae9542d5daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d74759b-05a0-44c7-843c-1274d39e473f",
        "cursor": {
          "ref": "a6393dc2-dc8b-4d04-b82b-8af6518e315e",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1747f68d-c77e-40ea-bac9-887396b1f39e"
        },
        "item": {
          "id": "6d74759b-05a0-44c7-843c-1274d39e473f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bc0006b3-5b6c-4691-9d30-f6dad44d2a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f87c50c-90a1-4a98-a490-3d52cb0091ca",
        "cursor": {
          "ref": "7e6fd610-f040-4b2b-b0ba-f5707c15e582",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e9f35acb-a708-48e7-976c-4fd904351b44"
        },
        "item": {
          "id": "3f87c50c-90a1-4a98-a490-3d52cb0091ca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "06107eed-993b-4833-9591-c0bb674504c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52eec48-7b51-4ce9-a6f1-3aba3068ec05",
        "cursor": {
          "ref": "451b78e1-d384-4c9c-a350-6d4d25623b18",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "afabdfa2-fefa-4269-9a12-154c369669ce"
        },
        "item": {
          "id": "b52eec48-7b51-4ce9-a6f1-3aba3068ec05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b85dccce-7539-4fd5-b2a6-8f5988d6ad04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8a2b62-4a99-4099-912d-a98b8c062711",
        "cursor": {
          "ref": "9c4ab339-d7a3-400f-8188-452232e2adf9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6767687b-f521-4bfb-a4d9-1dba9306c4c7"
        },
        "item": {
          "id": "ef8a2b62-4a99-4099-912d-a98b8c062711",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "912c6168-be74-4926-b00c-fbde3e55c5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf028f1-0b6d-49dd-bc51-77185c214e4e",
        "cursor": {
          "ref": "bf83bc69-b792-4dd4-87e9-d13d4e131a5c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ecca296e-5a49-4f61-83c5-326b92c1ca66"
        },
        "item": {
          "id": "caf028f1-0b6d-49dd-bc51-77185c214e4e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "15c3c223-d86f-4029-8484-17ec53d8339c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a307a53-db2a-4fd5-86d0-2a1614c7495a",
        "cursor": {
          "ref": "c0a7d7d0-7709-48d6-8f11-a8c320ad39ce",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7bddfcd8-3089-4855-96f5-f7fb90749ec6"
        },
        "item": {
          "id": "4a307a53-db2a-4fd5-86d0-2a1614c7495a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d6c5ba79-c0f3-4da4-bc5b-09aba9cdf622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f842d181-28a7-4387-8e8e-3967e41fc25b",
        "cursor": {
          "ref": "1f7cd91a-64e3-4ee8-96f8-a9c07b071f7c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "53f22104-eb84-4be1-84dd-70f2163ad6ce"
        },
        "item": {
          "id": "f842d181-28a7-4387-8e8e-3967e41fc25b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1b34fbc6-ade5-448f-937d-95a60e5a36cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220bdc04-701f-4d7c-befd-97d6f9dca256",
        "cursor": {
          "ref": "bbd73aac-7594-486c-9657-6ee82d6a83d6",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a559223-65ce-4203-a454-0c936f8d755c"
        },
        "item": {
          "id": "220bdc04-701f-4d7c-befd-97d6f9dca256",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6ec79f8f-1c2c-4478-9761-e1c49ace8239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b2ee14-d37b-423e-a329-b154387dab85",
        "cursor": {
          "ref": "09982fca-c3fe-47d3-adab-24dafce6aac8",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bdc661b4-d9a0-46b1-b4b3-1c1dba64cd2a"
        },
        "item": {
          "id": "85b2ee14-d37b-423e-a329-b154387dab85",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4cba314b-1f50-4829-a5ba-fb553a79ae5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cc6c5f-3929-4eb3-a7b6-e7007f3a94f6",
        "cursor": {
          "ref": "811b417a-e119-41fe-bb99-6d0ec21f2591",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6181278d-1e25-40cd-8ff4-438f05bbae5f"
        },
        "item": {
          "id": "47cc6c5f-3929-4eb3-a7b6-e7007f3a94f6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d0522933-a059-450c-926b-3ba7abc3f0b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9a0236-80e3-4176-9e41-18714c0e50be",
        "cursor": {
          "ref": "8d1c0cd7-98d4-4359-9023-56748fd4f79f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4e66c7b9-5a83-44f7-8167-e7bd253d8f86"
        },
        "item": {
          "id": "3a9a0236-80e3-4176-9e41-18714c0e50be",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f58ac63-72d2-4aac-9ba9-41956f5271a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7289e6-385e-450e-ad67-a67402081ec8",
        "cursor": {
          "ref": "a3d71947-e775-46c7-92a1-cd1c3d74d1c4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "58b60a7a-6593-42d2-83bb-d31f9efce38c"
        },
        "item": {
          "id": "fe7289e6-385e-450e-ad67-a67402081ec8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "11c59828-90a7-4c31-a44e-501e1011d758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965ec718-6b5b-4886-b88f-5a13dc6b9997",
        "cursor": {
          "ref": "20e07bff-70ee-468b-a778-3012f5c8663b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8c81e485-6b23-425f-b1db-e7a9e23a2d06"
        },
        "item": {
          "id": "965ec718-6b5b-4886-b88f-5a13dc6b9997",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f728dea0-d49e-4aa6-bd3f-d04ba446187f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7d95d8-c99e-48b0-92ed-f215e13f654c",
        "cursor": {
          "ref": "1e084d3e-bd86-443f-be16-46767ef8fee8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0c3337f9-9eef-44fe-89ba-31ba2e71ae5d"
        },
        "item": {
          "id": "fe7d95d8-c99e-48b0-92ed-f215e13f654c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7abd224d-2b0a-41c6-aafb-9bd784d2ddac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15408b4-299c-4c83-b43d-fdc0a35b593b",
        "cursor": {
          "ref": "3e03077c-28cd-4bdd-9b93-8c5689f54b40",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8d6c3281-8f57-4c39-8083-b119c87d17a7"
        },
        "item": {
          "id": "c15408b4-299c-4c83-b43d-fdc0a35b593b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "859dd814-2d35-434e-93d6-b8fa0e985c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c4a2e9-8571-464a-b562-62c70b5fc8d7",
        "cursor": {
          "ref": "35ea4ef3-a4cc-40de-8aac-341289499949",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ddad234a-d018-445e-91eb-e51306c51f2e"
        },
        "item": {
          "id": "c2c4a2e9-8571-464a-b562-62c70b5fc8d7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c403d25c-59b3-4312-8a45-f804229b7d61",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e752df95-4d43-48f6-93e1-8f169526a732",
        "cursor": {
          "ref": "ddb7c756-4d3d-41cc-8bee-2a213ca37845",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "27f93ce8-b8fc-41d0-a253-e3544158ed11"
        },
        "item": {
          "id": "e752df95-4d43-48f6-93e1-8f169526a732",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4e95ea34-e924-4b59-96fc-ef9d497db50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb883d96-49c5-4861-a8ad-34d41805ec02",
        "cursor": {
          "ref": "8a40c032-51df-4f2f-840a-e976506bf64a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "687fb289-9e86-45b3-908a-cc025654d96e"
        },
        "item": {
          "id": "cb883d96-49c5-4861-a8ad-34d41805ec02",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "de585bcb-a32c-43f7-be48-2e86d084d5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6ab1e0-e394-47ba-ae43-1309e7efcd54",
        "cursor": {
          "ref": "776954a7-33f3-4b5f-8811-dd56f1057222",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5b569421-1edc-4036-89b5-7cd839fc754c"
        },
        "item": {
          "id": "8c6ab1e0-e394-47ba-ae43-1309e7efcd54",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3b24acae-c668-4bfd-a221-5bd2bb077262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bec887-a4f2-4ee7-a304-a8553f14df95",
        "cursor": {
          "ref": "808c9a80-36b7-4b34-b7ca-5ff75586a91e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "df9e49f3-586a-4d8e-91ae-e5e189aaa77b"
        },
        "item": {
          "id": "f1bec887-a4f2-4ee7-a304-a8553f14df95",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9f7aeef4-3bad-472c-a0c8-6a3203c5e0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32caadaa-6489-41fb-82ee-44176cf38b99",
        "cursor": {
          "ref": "4d689952-9d29-4092-9293-cda4ac21948c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8fd54ccb-37ca-4568-b499-75699c46dfb8"
        },
        "item": {
          "id": "32caadaa-6489-41fb-82ee-44176cf38b99",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "077a85ff-413c-4049-928e-354423dfad50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4e8cec-642f-4be2-acc6-d3280ab04459",
        "cursor": {
          "ref": "981fe02e-5d7a-4284-b104-af23ae14ecce",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b29b7efb-d5bb-414d-a598-039329fbc602"
        },
        "item": {
          "id": "0e4e8cec-642f-4be2-acc6-d3280ab04459",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "636a4aa5-1a30-4879-a860-1b91de266e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891431e1-ae25-4046-a83c-543863c12179",
        "cursor": {
          "ref": "80f92d95-b187-436e-8303-4d41c3f09ada",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "81a03492-22b3-404c-b5c1-98c80e97be94"
        },
        "item": {
          "id": "891431e1-ae25-4046-a83c-543863c12179",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "494b4c17-64f4-4c42-b8fc-aa6b20891854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f31f7c-f0ed-40ae-bdec-848ccdf5c719",
        "cursor": {
          "ref": "5fae064c-1adc-4ace-8944-88bedc910b1d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "12d6f79f-632f-4d49-86ad-14f62d67410d"
        },
        "item": {
          "id": "69f31f7c-f0ed-40ae-bdec-848ccdf5c719",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8228a66d-14c3-4106-a6ad-d8c58f88ad4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3472c8-0fc7-4f8e-a4af-cdfe186caad0",
        "cursor": {
          "ref": "4962a46a-1373-4a74-b94a-ace02bb061c6",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8777cae-7e98-44d0-b760-389dfd296114"
        },
        "item": {
          "id": "3f3472c8-0fc7-4f8e-a4af-cdfe186caad0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "145737c6-c363-4e07-9bca-6d208435e49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99c8f2c-f1a9-4837-aa60-05c40a08ea74",
        "cursor": {
          "ref": "4a7cdd11-f331-48e4-b668-d91dd6257298",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7da4c2ed-0fcc-4ea6-8718-eb2c4a682354"
        },
        "item": {
          "id": "e99c8f2c-f1a9-4837-aa60-05c40a08ea74",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b78364f7-8342-4eda-87f6-32ba06e3814b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eda829-41f7-44a7-bca4-0702f1d4e2eb",
        "cursor": {
          "ref": "181128a1-c896-4c23-ad3d-777126c73858",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7adce6f7-d1e7-44bf-ba34-ce0d507cbb02"
        },
        "item": {
          "id": "58eda829-41f7-44a7-bca4-0702f1d4e2eb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c7159bb3-0f4a-45a8-9d71-d9eb67d6d821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a10458-c24d-4885-8376-7b77ad4bb495",
        "cursor": {
          "ref": "6e6634a5-bbb0-4280-941a-77682d4e2fc4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "89755217-cb94-4e6b-a7fa-48b843d7b821"
        },
        "item": {
          "id": "98a10458-c24d-4885-8376-7b77ad4bb495",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "20a778f3-5667-4462-be8a-7ceb10995e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fc6be8-0904-4bd6-9bb4-f6c2d999022f",
        "cursor": {
          "ref": "111d913b-b255-429b-b680-74d01690a8fb",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d9c8e872-ee16-48be-9d5e-770d1c040a64"
        },
        "item": {
          "id": "a8fc6be8-0904-4bd6-9bb4-f6c2d999022f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c3befff4-1609-4c89-b526-0484943828e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4049e553-1075-404f-b947-8fcf8af083b2",
        "cursor": {
          "ref": "df8e8b9b-33c1-4b46-b6a7-22e950b068fc",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cecc4739-8107-49ed-8ea7-a552274a61b4"
        },
        "item": {
          "id": "4049e553-1075-404f-b947-8fcf8af083b2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1c0fb9c9-9877-4fc7-8618-79675dd4eec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237171e0-9a82-4101-8e9a-ba43ab7249e3",
        "cursor": {
          "ref": "cb0dd8d4-83b0-4de4-8bcd-900cff149e02",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ce19e6cf-52c3-4542-8633-7f08459d0aae"
        },
        "item": {
          "id": "237171e0-9a82-4101-8e9a-ba43ab7249e3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "900702c3-1bf8-467d-8f5a-f27e9176f3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7df56fa-4f2a-4b2a-a67f-f2f3d74bea63",
        "cursor": {
          "ref": "9c9c22fc-4861-4a8d-83ff-50fcfac01636",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ef9b92ca-cc01-4963-b84e-7459d135fbc0"
        },
        "item": {
          "id": "a7df56fa-4f2a-4b2a-a67f-f2f3d74bea63",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "75f65823-03d6-4578-8806-37efa9c1c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc9293-30e0-4adf-ae7d-f79f0a943621",
        "cursor": {
          "ref": "dc8cb188-3aec-437a-86e7-af39ffb41a76",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ff948279-3712-41f2-bc1c-ee227823fdad"
        },
        "item": {
          "id": "57dc9293-30e0-4adf-ae7d-f79f0a943621",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "760a9c3c-c555-405d-8264-69cddc444467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf1ffdb-4955-4a8f-9d1f-e3bd0f11f37a",
        "cursor": {
          "ref": "dbdb28a0-f68e-4e17-abd5-815366b3f267",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3abfb033-4ee6-4f10-8810-43407224e6c2"
        },
        "item": {
          "id": "8cf1ffdb-4955-4a8f-9d1f-e3bd0f11f37a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "752edea1-c9fb-4a5d-8b08-6ea038799dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b800d471-8b2a-4d8f-889d-b818daf43a6f",
        "cursor": {
          "ref": "4e1212fd-acf0-4b72-98e7-004925b903d4",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1a53120f-6647-4029-9658-68abb49e59f1"
        },
        "item": {
          "id": "b800d471-8b2a-4d8f-889d-b818daf43a6f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2b6d4a2a-3d92-4f65-973b-3c8cb90017ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507c7471-d413-416e-b746-7a412fabfea0",
        "cursor": {
          "ref": "068c8506-58ef-485a-9d9b-4bf659a508c3",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4ab6c71c-db85-4c05-90fc-fff216b0245b"
        },
        "item": {
          "id": "507c7471-d413-416e-b746-7a412fabfea0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "049bcec4-b82e-48a9-9d8c-5212331b2e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2be9902-112b-45e8-8751-b83784ac4631",
        "cursor": {
          "ref": "fb336396-bd88-4066-b5a5-197157e19a24",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5acf55d1-d146-47cd-88ce-ae6068b64564"
        },
        "item": {
          "id": "f2be9902-112b-45e8-8751-b83784ac4631",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a0ecba3e-0dcf-48dc-85b0-7b99d26a8b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bb8d49-d49e-4f86-87ac-0983dfb0c5e5",
        "cursor": {
          "ref": "60eace2a-515a-424e-8daa-12b278fc44fd",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "20f6e83f-c2e3-4577-8f89-071c0fa1702a"
        },
        "item": {
          "id": "e1bb8d49-d49e-4f86-87ac-0983dfb0c5e5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0f3bcc2e-2b16-49c0-8361-8c78516a6837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bafea5-c70a-4889-8d57-2618c3f44e9e",
        "cursor": {
          "ref": "439e680c-4a84-4397-8bad-1adb283fb159",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2c707376-55ae-4e1f-824e-961eeb633679"
        },
        "item": {
          "id": "87bafea5-c70a-4889-8d57-2618c3f44e9e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bc5cde5f-d66b-4da2-9f5f-63c2339fc4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1aeea3-8d4a-4047-b50c-e0935bfe6e3b",
        "cursor": {
          "ref": "f6d3b3ad-3e5e-445a-8812-36763bf54fa6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "10e94ca2-c6ca-49ff-bc50-8d413a509cfc"
        },
        "item": {
          "id": "1a1aeea3-8d4a-4047-b50c-e0935bfe6e3b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1e1b6ddd-1d75-4320-b2c8-1347ffc4d44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addcac74-662b-4cce-bb6a-0981ca2ccb7f",
        "cursor": {
          "ref": "b9658327-d968-4c01-939c-d12f40cf385f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "54f80b8d-c565-4531-b5e5-be45bc961f03"
        },
        "item": {
          "id": "addcac74-662b-4cce-bb6a-0981ca2ccb7f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ed7e7948-0045-4c08-b8e8-424d69529129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12c1ab5-ac18-427f-b46e-d60b03d24e07",
        "cursor": {
          "ref": "a0b52512-3659-4817-bd04-8efca9c8a94e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d3c3b14a-e610-4412-9d2d-1fd283452fe4"
        },
        "item": {
          "id": "a12c1ab5-ac18-427f-b46e-d60b03d24e07",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5786146c-9264-445d-9ebb-09e4e5b86274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39ab972-429b-4b3e-8cc3-1a03427b65a7",
        "cursor": {
          "ref": "982e5826-a465-4fec-9526-fb7962b30e72",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3b3a98a-2f3c-4b4f-9691-95f814d9c83e"
        },
        "item": {
          "id": "a39ab972-429b-4b3e-8cc3-1a03427b65a7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b8ae4552-2a7f-4a98-b9da-17072f80066c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33d1c07-7d10-48d3-8dc9-8941050faad4",
        "cursor": {
          "ref": "79b5007c-9666-425b-8aad-b2fc2956867b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5926de36-9d99-448e-9801-e7953f757fcb"
        },
        "item": {
          "id": "d33d1c07-7d10-48d3-8dc9-8941050faad4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d17d8ddf-d7bb-48c1-8300-ed1bc7752fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f88e8f-f57f-47b1-a9d9-5096756018ea",
        "cursor": {
          "ref": "4a5046cc-b06d-45b3-9736-d7ec35873d5f",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2f399bc8-5138-4f5e-9e8f-091de30a6306"
        },
        "item": {
          "id": "c4f88e8f-f57f-47b1-a9d9-5096756018ea",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6f018851-0fc6-4539-905b-6db960e78962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0272cd89-62be-4ee5-8e2a-9996b0da7075",
        "cursor": {
          "ref": "c9e06f31-e746-4fb2-a51a-38d441a9bafc",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3314143c-2462-4f09-9654-64ef08b79253"
        },
        "item": {
          "id": "0272cd89-62be-4ee5-8e2a-9996b0da7075",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "aa0e7d36-d351-4ce4-aa9c-032da6be25c0",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c9ef0450-2e90-4792-9e6c-5a3b9209bcb6",
        "cursor": {
          "ref": "747f7a8b-2259-4840-99f7-726bb0b28c06",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b2c8e099-8890-4113-8656-9bdeaa8bdcbe"
        },
        "item": {
          "id": "c9ef0450-2e90-4792-9e6c-5a3b9209bcb6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7ed3e8bd-0985-4441-a925-78679443a604",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "171c2cde-edeb-4488-ad84-cee2d8a2f9ca",
        "cursor": {
          "ref": "53e1c23a-6042-488d-a63a-28d7ae668d7d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5daca00d-88b8-4dd4-9b2a-003581dc9275"
        },
        "item": {
          "id": "171c2cde-edeb-4488-ad84-cee2d8a2f9ca",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8ef1fae9-b952-4a14-96a4-412ac9f7c903",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0a91eeca-2274-4509-a2e9-95b143906526",
        "cursor": {
          "ref": "4c4cf46d-00ae-4d6d-acb3-4462aba5d679",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dbc41ee0-ea42-4846-b1a5-4d8bd4f31f91"
        },
        "item": {
          "id": "0a91eeca-2274-4509-a2e9-95b143906526",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "097ec51c-dccf-4dc0-84d0-2fe530778f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783c1d91-9360-4fe3-a06b-537fbdb0b623",
        "cursor": {
          "ref": "f5a62b3a-6c32-4ad3-9798-324aca9be339",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "db05efc1-7c99-43b7-835b-100e37381515"
        },
        "item": {
          "id": "783c1d91-9360-4fe3-a06b-537fbdb0b623",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ddf54483-627e-4f48-a084-d5aa5a02a3b7",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d70bc3df-5470-46fd-a8c9-ae5477de4829",
        "cursor": {
          "ref": "8a5166ee-9132-441f-a057-24260301a73f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "082f1e14-fd90-444b-ae41-74af4991edc0"
        },
        "item": {
          "id": "d70bc3df-5470-46fd-a8c9-ae5477de4829",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "def93e1e-76dd-4c46-929f-879ef8ad02f0",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a87add21-284c-4e04-8b08-d9e895131c09",
        "cursor": {
          "ref": "1e5b3bd7-cd32-4b27-8fd6-83264f165a80",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3cce05e6-2477-47d8-b811-cd37cb353062"
        },
        "item": {
          "id": "a87add21-284c-4e04-8b08-d9e895131c09",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fd01b5f0-8ddf-45ce-a13c-0a4cf06e0232",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f213f2a3-5296-4493-9f1d-e1d4d4b84849",
        "cursor": {
          "ref": "deb7532c-cd16-4253-a569-d02e07825615",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9743be97-aae3-494f-af19-86cfdbe22f34"
        },
        "item": {
          "id": "f213f2a3-5296-4493-9f1d-e1d4d4b84849",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d51df6d4-ca46-4c50-bf97-8f96f113cfa4",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "dc305a38-dca1-453f-8083-9cb7ae7cb92c",
        "cursor": {
          "ref": "53456bf8-c6fd-4c83-b089-b5e5884c725b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "65628532-5633-44aa-81ce-677cc52cb66f"
        },
        "item": {
          "id": "dc305a38-dca1-453f-8083-9cb7ae7cb92c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1685b63b-950d-4d30-a2e6-eb9e8a527146",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "bb188e66-4d99-411e-9c29-da7eaa2724e3",
        "cursor": {
          "ref": "919f6dea-fb77-4268-bba6-6d9b146badb7",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d809fc5a-85c2-46ee-83a5-3d3d2ab94831"
        },
        "item": {
          "id": "bb188e66-4d99-411e-9c29-da7eaa2724e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e45453e5-ea06-4bc1-9c94-1ee71c672831",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "82ec180c-eb9d-42eb-b1df-6211094009c8",
        "cursor": {
          "ref": "d668ef5b-9bc5-4088-985d-61ca594a7493",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "110a0cca-a24d-44b3-b26f-d7ab25c97ca2"
        },
        "item": {
          "id": "82ec180c-eb9d-42eb-b1df-6211094009c8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e4a99527-29c6-4b21-8918-1f357bd15aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026927a9-be01-4078-a591-46e0c1a2f7d4",
        "cursor": {
          "ref": "bda4f9f8-9d48-47b5-8e55-99ad893dcdb2",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e4be7f3f-0996-463f-a9fa-a5c7fbc23eee"
        },
        "item": {
          "id": "026927a9-be01-4078-a591-46e0c1a2f7d4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "65f1a0a9-3673-4e45-bdf2-5ab9ab71ae83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c62a872-e2b9-4a1a-9802-c806bffdbb81",
        "cursor": {
          "ref": "74d27d39-0ff7-42b8-8911-c97e1d8a7209",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ff331265-989b-45f3-9730-d258b9bb6de8"
        },
        "item": {
          "id": "4c62a872-e2b9-4a1a-9802-c806bffdbb81",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6c2c0b60-9de3-4c9e-bcd6-e5ca6eea4526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b08580-189d-4a52-ae88-72fa12f6ded9",
        "cursor": {
          "ref": "b2fa1e16-7e4b-438d-b81e-1bb2f1e28848",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1bf7c021-2b94-4247-b287-0088a20b7c42"
        },
        "item": {
          "id": "31b08580-189d-4a52-ae88-72fa12f6ded9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9f26f029-4095-4cec-9294-13e195e37c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8120c78e-d3b7-40af-b444-be46c08965f6",
        "cursor": {
          "ref": "d1b80e75-5df4-4f67-bae1-4d330a8a5577",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7f7bb6e2-8f57-49c4-ae4a-08dfe53c23cd"
        },
        "item": {
          "id": "8120c78e-d3b7-40af-b444-be46c08965f6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e1fc581e-bf1f-4b6a-be8e-c4b6af297892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15faf69d-7681-434c-a037-3194e33076d5",
        "cursor": {
          "ref": "5718128f-e45f-4622-849f-e095073bbb50",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0ddfece-b9a1-423c-801e-cd6eb13dfe2d"
        },
        "item": {
          "id": "15faf69d-7681-434c-a037-3194e33076d5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ab083ff1-896a-46be-80b1-2b516e258fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af89c22-4223-409a-85b8-f4b008cfaa15",
        "cursor": {
          "ref": "1d8ffe1d-4b88-4731-a349-a219212a3790",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ee2fab68-7218-4075-8bea-d84837688e00"
        },
        "item": {
          "id": "0af89c22-4223-409a-85b8-f4b008cfaa15",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "478317f6-b7e2-4a96-bdeb-14aa3b46e4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93403f38-48f9-42e3-895a-7544f3fa59a3",
        "cursor": {
          "ref": "40050b94-b593-4d6c-9b00-668c898995dd",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "873a0b09-be35-42a3-ac94-f23c95ec3584"
        },
        "item": {
          "id": "93403f38-48f9-42e3-895a-7544f3fa59a3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8cc2a0a0-4aa5-4ccb-9e89-2766ff80d85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08fe670-7971-4af9-9d4d-ade5afce3ebd",
        "cursor": {
          "ref": "5afa5345-ea76-4ca6-806d-3c99a85efd1a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "55856837-3198-429e-8a0f-e749bd3f93ce"
        },
        "item": {
          "id": "d08fe670-7971-4af9-9d4d-ade5afce3ebd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "74a0fcbb-dc01-4ec4-ab56-d4153d4e020d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af12d57-c0fc-46f2-ba73-e3ca0f56b718",
        "cursor": {
          "ref": "70155e53-43af-42da-879c-6d19e9268ab1",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "129cf661-cb10-4e1b-bbdc-6d77f5045273"
        },
        "item": {
          "id": "4af12d57-c0fc-46f2-ba73-e3ca0f56b718",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c2e076db-180b-40fd-989f-bc0af8e40a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69137bf-7f69-4a32-b4e8-31107779f6f5",
        "cursor": {
          "ref": "37ed04b9-a970-4f0e-9ee7-da84f9d83b9f",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "55665ab2-70b2-4cd8-819b-f85b81f46f64"
        },
        "item": {
          "id": "c69137bf-7f69-4a32-b4e8-31107779f6f5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4582688b-4ef7-45c1-86cd-d1ed01708591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36094145-b9ca-4641-a5bc-72f4714814af",
        "cursor": {
          "ref": "04f8d674-4c5c-4149-a5d2-bfe320ba0b7c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d23599f4-0504-4625-880f-c6f20794fb06"
        },
        "item": {
          "id": "36094145-b9ca-4641-a5bc-72f4714814af",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9dfe9a45-4586-4fb8-8a29-a3b6e21cd179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11de9ddd-f0bd-491c-b645-8040f85f6a2c",
        "cursor": {
          "ref": "fe0c7af4-0fc0-4eea-b961-62fcc54156dc",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7fbb0fe5-220b-4998-aa6d-dc020cb6fdc8"
        },
        "item": {
          "id": "11de9ddd-f0bd-491c-b645-8040f85f6a2c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "516b2891-a0dd-4a1d-bb54-aedae18da72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7e37eb-1e85-463d-812b-3c65ee9b94c7",
        "cursor": {
          "ref": "f2748193-e959-4f1d-aec3-86b83b2a2166",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8a66b927-7f0a-46c2-8bcd-95bd5241556c"
        },
        "item": {
          "id": "fb7e37eb-1e85-463d-812b-3c65ee9b94c7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "59678a77-5198-4c6f-b63d-8fb2201fb9e4",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "49386d75-5205-441f-a99e-d5fc47de6a0e",
        "cursor": {
          "ref": "5879ce0c-0254-46f0-b0d7-c6ef64fe509c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2cac2832-fcb8-48b5-925c-fd3d189d0b8b"
        },
        "item": {
          "id": "49386d75-5205-441f-a99e-d5fc47de6a0e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "667f9350-4df4-447b-89f5-26e917eba1c6",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e40cd8c5-c483-4dca-a488-d8a5e9ca35ea",
        "cursor": {
          "ref": "4d286401-9c5c-4b7a-ad1e-c78765c04acd",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6d160fde-27cc-4cc7-8fa4-dcd48435f31e"
        },
        "item": {
          "id": "e40cd8c5-c483-4dca-a488-d8a5e9ca35ea",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "340feac4-8a84-4f1e-ba12-f85759cb73b5",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ab42d44c-d05a-449f-b922-16ecbff808c5",
        "cursor": {
          "ref": "ab98c8cb-d80a-45f6-bde2-629818fe7c46",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "65d1f568-236e-4552-905c-b3933b2e2102"
        },
        "item": {
          "id": "ab42d44c-d05a-449f-b922-16ecbff808c5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "65814145-66c2-45a8-8938-3a9f2873847a",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "41419f7d-af87-4478-a6ed-edaf805171d5",
        "cursor": {
          "ref": "f1cd8832-5dce-4e64-969b-d8aadc2f99ab",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62c7ce34-a416-4b63-860e-c3fbfd8513d6"
        },
        "item": {
          "id": "41419f7d-af87-4478-a6ed-edaf805171d5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c524a6db-42b3-463d-bbc6-0c997e6ba519",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "122c9346-c5f2-425a-97fd-0b85b9c42294",
        "cursor": {
          "ref": "8980e614-30c7-46cd-aba9-e2ba5e7ee611",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "536f5f41-46a8-4ef8-a007-9b390d2cbe0c"
        },
        "item": {
          "id": "122c9346-c5f2-425a-97fd-0b85b9c42294",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3c0ad3f3-f381-47c0-902b-a01f7823a25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b25e65-9434-4e88-b188-c803f741da79",
        "cursor": {
          "ref": "238247f0-da56-42ad-a411-d24a6e3513ec",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b8814ff4-d1c6-4472-8690-1cd721f5f264"
        },
        "item": {
          "id": "d0b25e65-9434-4e88-b188-c803f741da79",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "21a59ee7-d371-4e48-aa5c-e0a71a76981b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f076a4a-dc99-41ee-9f10-812f231c7c3a",
        "cursor": {
          "ref": "db786a6f-9b56-47c6-9734-d25002af338c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5e72714f-219a-4b71-96b6-eae736a46be1"
        },
        "item": {
          "id": "8f076a4a-dc99-41ee-9f10-812f231c7c3a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "73c4d19f-1b16-417f-aa9d-bc7d69daaad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2b27d9-4f60-45de-a481-6e248a159cce",
        "cursor": {
          "ref": "2bf88035-1a71-468e-99ee-8261804748e4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ccaf861e-1137-476c-919a-cc806fc947c7"
        },
        "item": {
          "id": "eb2b27d9-4f60-45de-a481-6e248a159cce",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5f0a34f5-4d6c-4a2d-bd0c-acbeeb387877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2ae998-7dbc-408e-8da9-aa3db27b2288",
        "cursor": {
          "ref": "395c483e-9b40-4646-b87d-3ad8fa62aaf2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a6aa8b8a-a0a1-4d4a-96fa-9b80ff8de3df"
        },
        "item": {
          "id": "fe2ae998-7dbc-408e-8da9-aa3db27b2288",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5d07d83a-b19f-48a1-a523-2980bb4abd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce72739-5438-4342-8cb3-7d3eceb4a54e",
        "cursor": {
          "ref": "5a0e93c5-8b1f-444a-8713-c54b02af7ad0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e6b26da1-5cc9-4080-a4f3-fec7ef293f63"
        },
        "item": {
          "id": "2ce72739-5438-4342-8cb3-7d3eceb4a54e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6928846c-c878-4944-afb4-d2561d9079a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79110c5f-e665-4ce6-befa-51d5dbad270f",
        "cursor": {
          "ref": "4f643489-f016-479e-99a7-39a1c67af6f1",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4ed10ffb-c0d7-4403-a0df-ca1b52717e22"
        },
        "item": {
          "id": "79110c5f-e665-4ce6-befa-51d5dbad270f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9d357820-d39c-4445-8064-2f1958d5265a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff72d604-1a25-4d82-8e5e-02c977655cce",
        "cursor": {
          "ref": "b981f637-07d0-4aad-a6c3-94e2c765f3f0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "84dabf1a-0f51-4a97-ac69-69e784b98d05"
        },
        "item": {
          "id": "ff72d604-1a25-4d82-8e5e-02c977655cce",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "debb55eb-fc8c-4848-b59f-35f75940299c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df7bbd-232e-4e5c-a241-cedcea2c7b81",
        "cursor": {
          "ref": "589f3353-eed0-4103-8665-19efc874d5dc",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "94f40cf7-91cc-4d21-8245-1a840271e078"
        },
        "item": {
          "id": "d7df7bbd-232e-4e5c-a241-cedcea2c7b81",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "db451198-e8d6-4ccf-915d-f4f28af3d8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d050817-f5d6-4ca2-9070-b5db347ca58b",
        "cursor": {
          "ref": "1d1d8962-6f84-4cbe-8fbc-d617af76f60c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "858ab9b3-b0eb-4cb8-8260-b617a644910f"
        },
        "item": {
          "id": "9d050817-f5d6-4ca2-9070-b5db347ca58b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "809fc2aa-218c-4a32-8d6b-abf2afa6572b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b968304-6cb6-4de6-9d88-0a3661e05e3d",
        "cursor": {
          "ref": "d707bbe9-7a75-4846-bf65-6a638586dff7",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a5b1357c-4335-4ea1-8c1d-2c578de8e737"
        },
        "item": {
          "id": "8b968304-6cb6-4de6-9d88-0a3661e05e3d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a175f93f-c37e-44be-a63b-f300863c3285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d76efe-0fd1-4dce-8f79-ddcd40354ee4",
        "cursor": {
          "ref": "0b337714-50f5-45b8-9568-0e039c94b82b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d7d363f6-46de-4dfc-b0bb-ce9d5f7c10f6"
        },
        "item": {
          "id": "89d76efe-0fd1-4dce-8f79-ddcd40354ee4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3d26fb98-e6f9-41b1-8033-7de5f88c9b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7332d366-3be1-4620-a60e-6ec08a64341b",
        "cursor": {
          "ref": "05f8f87b-6053-4a42-85cb-504411d786e2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "17a155c8-f90a-4ed4-abac-b9beb86ba25a"
        },
        "item": {
          "id": "7332d366-3be1-4620-a60e-6ec08a64341b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "64a9ec2f-4609-413c-b909-7e613affe7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0134b215-45b9-45f7-a722-718a6b7e4b54",
        "cursor": {
          "ref": "77d00fcb-ce2b-415f-95ae-94070f643c87",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f590a7e3-cf40-4d62-b684-cc32d24a52b9"
        },
        "item": {
          "id": "0134b215-45b9-45f7-a722-718a6b7e4b54",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "70e4fce3-b918-4697-8cdc-5854dc628816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2fce72-97d0-47ff-916d-df40898d3d61",
        "cursor": {
          "ref": "e4bbd6f3-084c-46c5-8d50-a0e178d574cc",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c1b9a038-b04b-4ff0-8da8-f3e7145c11dc"
        },
        "item": {
          "id": "db2fce72-97d0-47ff-916d-df40898d3d61",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "92357daf-5706-47da-a6cc-5bed80ec0978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26712b9f-1f42-4537-8f46-78f448c77b49",
        "cursor": {
          "ref": "37b3c033-290d-4daf-86d7-441ccbcab4b5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3f8a096c-e327-49e3-8291-4074872a35dd"
        },
        "item": {
          "id": "26712b9f-1f42-4537-8f46-78f448c77b49",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "082e15ae-a8b6-44aa-9621-59617253bc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d842400-693f-4963-b6a6-7c412777a1c1",
        "cursor": {
          "ref": "64565741-4dda-4605-9031-28ee8e67d687",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7ee3cc26-8a72-4852-bde1-1d2254cbb1ff"
        },
        "item": {
          "id": "7d842400-693f-4963-b6a6-7c412777a1c1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e3b22e18-b20a-4812-a9b7-57120cbb6be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f9a503-fe7d-4c6a-b607-b3156f64ca86",
        "cursor": {
          "ref": "04729303-c089-4dfa-9713-0dda3a25b87a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43a5927f-3fab-45ff-bcd6-76119ce9891a"
        },
        "item": {
          "id": "83f9a503-fe7d-4c6a-b607-b3156f64ca86",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "15933898-036d-4232-a25f-6cee56f50bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0855dffa-6f13-406a-b42b-7ff090ab9160",
        "cursor": {
          "ref": "8122ce3b-8ec5-4441-930d-d0e7ba16125d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "17850458-ba6b-4604-a447-905870de774b"
        },
        "item": {
          "id": "0855dffa-6f13-406a-b42b-7ff090ab9160",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a00dfb2f-92b0-4a85-a9b8-593169278e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6d1457-d28a-4d2e-8ac0-1de4ee950fcc",
        "cursor": {
          "ref": "c1e1e362-899f-4155-ad38-ec8ddb321849",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7cd6efce-ce6b-47c2-a3ed-f66e8dfc8c9f"
        },
        "item": {
          "id": "7e6d1457-d28a-4d2e-8ac0-1de4ee950fcc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3320a32f-2d3f-459c-be25-29f6caf98973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f348a1-12ea-46c8-a1b7-534d1d1825b9",
        "cursor": {
          "ref": "d7bbb6be-2856-4331-b8d1-9c7bb84efb4d",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c4148fa9-123d-48a6-92d5-655c70af794e"
        },
        "item": {
          "id": "d7f348a1-12ea-46c8-a1b7-534d1d1825b9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "26d8f866-e3c8-4766-abe6-2867e143b21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7691543-44ce-4917-b133-d0ee39426d0c",
        "cursor": {
          "ref": "a0181710-9039-430e-9295-56f7194bb4a3",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72b5ac07-2008-4fe9-aa31-ecee3525494b"
        },
        "item": {
          "id": "c7691543-44ce-4917-b133-d0ee39426d0c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd3e390f-ad35-4545-8c43-5f2ccae47143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f07fa15-97e6-4d94-ab93-4a7656a047c7",
        "cursor": {
          "ref": "666fcc3b-735f-4240-959c-0344d264d5a5",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1069a860-f6a0-4ba0-9f5b-caaca170a020"
        },
        "item": {
          "id": "9f07fa15-97e6-4d94-ab93-4a7656a047c7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bb63d03b-6b6a-4326-96eb-5345bef4553f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8fc4f8-d868-4a79-af49-7205f87eeba9",
        "cursor": {
          "ref": "8ea2a482-0ba9-4e18-b627-cf0ceb111883",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "db93412d-d573-4820-ac32-ac30339baa4b"
        },
        "item": {
          "id": "6f8fc4f8-d868-4a79-af49-7205f87eeba9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7f2311c9-1e7a-4ab0-8f34-842dc638cdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0ed8b6-0b72-442b-ad7e-862384c2fc13",
        "cursor": {
          "ref": "e722c90f-3c76-4134-bc4e-6ce2cb26b963",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f9f33868-67f0-4622-b186-58217c146a5f"
        },
        "item": {
          "id": "ed0ed8b6-0b72-442b-ad7e-862384c2fc13",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a3723323-8749-47e8-8714-d6fb3c1f8af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1f63a5-92b9-42cf-90cb-d12437e9a92f",
        "cursor": {
          "ref": "21a5f8a1-e7aa-439a-a468-4f1f6e62e5a9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "91a7bdb0-5520-449d-ae74-d302f155adbe"
        },
        "item": {
          "id": "4c1f63a5-92b9-42cf-90cb-d12437e9a92f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b66574af-ef89-4cd3-9f47-3ad40588bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fde6cb-6724-4db8-8a06-bb99e478c066",
        "cursor": {
          "ref": "4f60185e-2e8f-46c1-af23-48fb97985234",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9232671f-d674-432b-8ff1-f55b1502421d"
        },
        "item": {
          "id": "f2fde6cb-6724-4db8-8a06-bb99e478c066",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2873850e-e36c-4e24-a16c-8e46c97e8886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd4e50c-ee4a-4840-8b4f-7465bc68b43d",
        "cursor": {
          "ref": "bd00fa6d-a8f7-4cfa-be88-476a68a00108",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c76843ac-6463-4bed-b2b5-04211002f043"
        },
        "item": {
          "id": "6bd4e50c-ee4a-4840-8b4f-7465bc68b43d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f1d5c647-5bd1-4b73-bd85-0b55437f76f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8015b435-fb55-48ea-9c7b-81bb4a51a201",
        "cursor": {
          "ref": "0f85dea6-5841-4c3c-86e6-6606f0a2857c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b311651a-2373-43e0-89bc-42151d9e332e"
        },
        "item": {
          "id": "8015b435-fb55-48ea-9c7b-81bb4a51a201",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "63be2e6e-f0b3-4da0-b627-4b399ec35ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771cce23-6449-4f09-b2a4-d61eec40a0ab",
        "cursor": {
          "ref": "7b8f6ad9-7f4f-4c9e-8ae3-7c4e28a885a3",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8bc03d82-8c7d-480e-b9c7-68d562c7d705"
        },
        "item": {
          "id": "771cce23-6449-4f09-b2a4-d61eec40a0ab",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8b1ad7b6-7512-4c91-a9dd-ccdd83387a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aad0a2c-4a21-46ab-9235-b965537e93a9",
        "cursor": {
          "ref": "ff96970e-1a1d-4962-a83a-e7273c99e7b5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0eb86958-cb3e-4c4a-b6d1-713467e49b93"
        },
        "item": {
          "id": "6aad0a2c-4a21-46ab-9235-b965537e93a9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0ecf68a4-c92c-4200-bfb6-924e9a22f85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c105b4-8a4e-4909-bb84-aee74eb81275",
        "cursor": {
          "ref": "584b7f16-3ffa-4480-811f-55596b21f976",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c05d862b-7d72-454a-bf98-f2cfc9559b8e"
        },
        "item": {
          "id": "37c105b4-8a4e-4909-bb84-aee74eb81275",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "758e3fe5-dcce-4dd7-bc70-70491d23dd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd176fca-560e-450b-9029-11ca758af138",
        "cursor": {
          "ref": "a00f2a2b-3ba4-43b7-896f-f51dbff26b5c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ece8e732-54aa-4173-90d1-2aad627e1d7c"
        },
        "item": {
          "id": "bd176fca-560e-450b-9029-11ca758af138",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d2315b91-6e5c-44f1-83bc-00c83e7d71ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83636d3-dd03-4b10-b81b-8e9f32101c77",
        "cursor": {
          "ref": "cb0f1d44-f0da-491c-9924-d8749e0ff977",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fc82d9b1-7023-480e-8b11-c8af623d3223"
        },
        "item": {
          "id": "d83636d3-dd03-4b10-b81b-8e9f32101c77",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e43f96ba-7c10-4c78-af3a-7f16c6af9ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26989f3-32a4-4137-aae8-07e027697a97",
        "cursor": {
          "ref": "d9b60482-09b9-466f-9562-69a97d2e6266",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f380866a-6f57-4d2e-a9ec-83dfbe957b7c"
        },
        "item": {
          "id": "b26989f3-32a4-4137-aae8-07e027697a97",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "704a0f40-aed3-4b3d-9dcf-18cdabe03e27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cdfdcf-7c96-4417-841c-130190bc47ee",
        "cursor": {
          "ref": "4a93af3a-5607-401d-9cea-6e579d9dcf91",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ecc6d97b-9b2c-4273-a8ab-44a106265ac3"
        },
        "item": {
          "id": "c3cdfdcf-7c96-4417-841c-130190bc47ee",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "be62ada6-8c48-455f-8c4f-1f36af2e6658",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "fc81b3fb-eb3d-4743-9fea-0290e8bf5d8c",
        "cursor": {
          "ref": "44cd4991-6b9b-4779-adc0-4e42092ac860",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ba9e4b5c-1361-4c4f-94e2-33c77cc80696"
        },
        "item": {
          "id": "fc81b3fb-eb3d-4743-9fea-0290e8bf5d8c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f9d0b41e-7e53-4617-bbde-ee49bae0befe",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1506d97f-881d-48ac-a7f9-0ca5735c7b51",
        "cursor": {
          "ref": "6f1019a5-0817-418f-8913-bc11b47fae8b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "58b58c8c-af73-4861-a538-1020a708ac9f"
        },
        "item": {
          "id": "1506d97f-881d-48ac-a7f9-0ca5735c7b51",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c2fdad96-0904-40c1-a093-63d4bbf00f8d",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "286c49bf-a651-4cd5-a67f-8a4cc9fbf77a",
        "cursor": {
          "ref": "0b9b3b84-0c61-4bd4-938e-2d49dff9aa30",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f33ab5a8-6fba-49a3-80d4-4c5458f11429"
        },
        "item": {
          "id": "286c49bf-a651-4cd5-a67f-8a4cc9fbf77a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "33a813bb-f121-4a1b-b664-66328958661c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286c49bf-a651-4cd5-a67f-8a4cc9fbf77a",
        "cursor": {
          "ref": "0b9b3b84-0c61-4bd4-938e-2d49dff9aa30",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f33ab5a8-6fba-49a3-80d4-4c5458f11429"
        },
        "item": {
          "id": "286c49bf-a651-4cd5-a67f-8a4cc9fbf77a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "33a813bb-f121-4a1b-b664-66328958661c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8607b6a8-8958-48d9-872e-01fde10929db",
        "cursor": {
          "ref": "c3e3a06e-06f6-45c6-8e76-21b79e7b757f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c4ab6d2-f77e-4e20-aba9-e73c0081b0d4"
        },
        "item": {
          "id": "8607b6a8-8958-48d9-872e-01fde10929db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b5136868-ccae-49ea-979b-5597eb5b8f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27c594c-9c3c-4d26-bf7c-f72e09cd1013",
        "cursor": {
          "ref": "8a6f7312-3672-419f-b62b-2546b936d79d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "050edbe1-e93c-4350-a5df-50e103987294"
        },
        "item": {
          "id": "c27c594c-9c3c-4d26-bf7c-f72e09cd1013",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "43b81ec3-b42b-4990-a035-b93234112a67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}