{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e8464ea8-d21e-4170-8525-84caae8229a7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0ed6b227-976e-4a9b-adea-073c0ffff3c6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2415f4a7-3e42-40f5-bfb5-af63ee73446a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b58b08a-e97e-4d80-9d7b-4caf2a364129"
                }
              }
            ]
          },
          {
            "id": "aa01923b-6f85-4e12-bbbf-3fad76767e2b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b07e9b42-64bb-4e07-a538-fdb86c4752d7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "97ee2f7f-8c57-4c9a-b457-4833cc169c6e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db9af664-e071-409e-a6a3-8c8af050c4d4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e81559ac-d7f3-416f-aec9-7cbadddb0c86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f185a622-9cba-44eb-b64d-a744299a3565",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c76d869-eb70-4b62-9901-04d2ddf99453",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c329699c-7ac7-43a3-b48c-9e96a4158f26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f83eeae8-d8fd-4188-a703-566880e655a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bb618ac-27fb-4257-9ce1-05e43416d478"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca5084cd-b142-407c-bc4c-11ec3f6a11b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a86e34d7-3ac1-4d2e-a258-6ca9fab0986b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f6d8eea-411c-4099-98b3-f341c5ba7e6e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "874a5abd-e87e-46c6-997a-6bd9bf14e259"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a015665c-e631-4aa1-b29f-e6aa7987765a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fefc903-130b-4970-bc8f-aecc5fb213bf"
            }
          }
        ]
      },
      {
        "id": "376ae9c3-63d6-4a54-b1d2-2588cc7646f1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a7ef5c55-2dc8-4139-996e-3bed584b96eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96e6dab9-294e-4df6-b8b7-9abe8194f716",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "706bbda3-0438-4863-abfd-5c947caf9ba4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf92668-cb9c-4024-abea-d5fe0495593d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a914055-c32f-4628-9951-bc14ce5bc948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8749e5b5-8a39-4b84-902f-87358cb0f815",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcebd5a-eaaa-44d8-a469-0afe79036616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "833992ce-a68d-49fa-b985-98a53ffd1d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636cfd04-a65d-40ef-b5aa-62eb47bc87e5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c17269c-a9c0-4eb2-a16d-bf28a506b644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0c92854-03f6-4b8c-8e52-2528a8f2fbd7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bfa72c8b-351f-4452-b8fe-4707583ae42e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e9ec620-0235-4d59-a8b0-0ba70d242487",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905bec14-c298-4cb9-88e3-ad9e756fe828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28344e5f-057f-47c4-ac39-d5ed441fca02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa6dfdc-249a-4da9-bf8b-53051aa92889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111bd56d-76ba-480a-b16a-28d1d77c0636"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba61aa4b-20d7-4e19-ba83-7fd4c8058ada",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e542b6b0-5b04-41ab-b4dc-7490e64305d6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4530e4e2-3e7f-4641-aab3-b64ea847490f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "80eaf407-cd86-4f29-b141-d7bd38114f64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ad8b3b2-2b51-4af7-9ccb-188d1783695f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "93b82a83-b110-4056-a320-c615f6d444f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9258acd-3840-4556-ae53-72aca14f6ec4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddc87dfb-d19a-4d67-82b3-880b1dd91990"
            }
          }
        ]
      },
      {
        "id": "a9a369cd-dab8-4d5c-b254-0d5e901e3d37",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fd4476f5-3483-40da-858c-8f968dd8d994",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38465c23-e223-4e0d-8649-35bd8880414f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "07fb5d46-7eaa-4467-80f2-9424e02f1d8c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c144530e-fc29-4cee-9088-32ca91e7ae44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a274c0a-7cc0-4078-a775-c6fbc889c396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac36f0a-7b11-47b0-b5fb-926a8a82cbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d005d1b-a42c-417e-b619-b3b182b24c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4997f22e-1678-42f4-8cbe-7b5affd87004",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65da5a3d-42d4-43d5-97a2-59153c209881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bd5cf1-5337-42cb-a30e-c859fe56e1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baed0165-1838-4d6d-b636-504a94a7cd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a83628b1-f1a9-4e76-91ea-e99994b7d3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea0f3f4-7cb1-4b11-8072-66813bfe4a47",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628fbe40-dbea-4980-9a76-a7d914921c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93581d89-1e14-4de9-ac89-adfcace4c028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16389c4b-2277-4cbb-9b48-c25d00a732c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35f2b246-6506-46f2-8caa-0ee18e95dfbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debee1e3-0b80-4534-a616-3743db8f55d4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d04d689-7476-40ba-9c65-52f39db7e358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e846555-f506-4c32-8ea4-d62c33b4c3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e961250-2fc7-4046-b84d-985121e3b82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a2bffc-1907-47ff-8061-b1c7fe60d39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cffd62-7fb2-4583-8695-2dbb168e42aa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3d37f8-a878-43bd-8c46-0bca93e7b43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f745b6-48f5-422d-95f5-08c8898f298e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462824c3-703f-4f2c-bb49-f1b11fd2af9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eea1b8e-80be-4a17-8c01-e1e911966308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a3c6d4-246e-4141-a143-cac773418d54",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2edb73-5154-4ac4-8ccb-dca88c81bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88bfebcf-4a7f-4021-88dd-28574779d952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4973bfc-d0a0-43c2-b194-546877b983db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e05e30f0-76ac-4e4c-8102-57770be735e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b27507f-c5ad-48a1-aa2c-e8c89be56196",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3249145-2458-4478-8f43-3c0012a835fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d993e0-c7c4-4796-90c8-9b8ca556fd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a5a941-05e0-4da5-9e89-cbcc32038189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ff0388b-4fc6-4de8-990e-868bda38601d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333f850c-66c1-4a36-ac67-1a03a0a429e1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f50347-a95f-4c8c-a51a-a84834f559c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa74b3bb-8d21-43d1-9696-de709735f641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6618e8-f2d4-4ab9-9531-b3ef5dcadadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99d9babf-8e33-4d65-95b5-4aafb91dd95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8197f68a-1dc2-4bce-90d4-7376ecb29354",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0248700b-5b47-463a-bb1a-639a7c973344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57959a7-f089-42ce-a975-44e1b7e2a498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bae108-0d25-4737-a636-84df9384a56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5865dd99-9530-4b8f-b0cf-b38d15e183a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d98c1d-4bc4-41ad-8d4e-fc0691e9ef32",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11199f0-5e0a-477b-a5d5-3b2cf4796640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59192b90-7712-443a-9910-defebe4556f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb191500-57f6-4156-83e9-452bd0646e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "370bd717-c1bb-4476-ae68-2882db74f134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fca1b0-bfb0-46d9-a7a3-4d30d220491d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dd6ff6-e89e-41fb-8efa-7ef8fbe5fe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7bee36-e13f-48cf-a20d-35ff0d8f6026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b00e573-93b3-47fa-b07d-f59b1e1ef7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17929bb9-6ea0-468b-b740-b7535e1112f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fac663-f36c-425a-86b5-e6cb8946ab51",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b21133-480c-4757-a833-1e43089e6f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1562a0fb-4290-465d-ac90-5209a706525e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b31ebb6-10df-4e77-ba0c-94ad15209b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc074c5c-b8fe-466f-ab25-9f14b987618f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ca87b5-13cf-4c51-be75-cc852e79d27e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf72c9c-df2d-4757-9b28-ccf9f860d4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1635f235-2c74-44e9-b646-8b92d7b65ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1e069c-1d35-486e-ae3a-48a17521dbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f681d0d-8d61-48e7-93f7-29ea3e2c988b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdd846f-0fb6-4a5d-9418-f22289cb844e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dc1b57-9c31-460f-bee8-465d1cb601df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ec12e9-9a68-46e9-afd7-46d65d3601d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bfb292-d0dc-4ba4-b5c6-d49c28d32b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9208a2f9-1c11-4969-88ca-62f0318b13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2e85bd-ce9c-4bea-b858-12e9c69edfc5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee9b5c3-4f3e-4906-a432-f8d13132e1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27e084b-8bc7-46a5-a048-871c3925a642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b3be89-a905-49d6-8c3c-0d9285bc0f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca982a00-2d26-4ff3-806f-33268aa75ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c9a812-af2d-4332-8541-20d5c1995fd7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75319c55-7d65-4426-8be2-5542cd09465b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefb3b58-6939-4507-b20b-b6599f59d23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14159e0a-e89c-4c73-89a0-9037019e44e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8344e28-5dbb-4a7b-8345-c345180760f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6bb2a-a64b-476d-9eb1-59ddbe993507",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7785b2a4-0cd2-4e33-9842-38425b50afe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc67337-c4c1-46d9-b59c-98fcc6b87037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3826a930-f90f-4d6a-8619-990b0ed319b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b68c71f-b2e2-4553-be3c-168a353a5a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5773ee9c-6164-415f-8438-c96f48e557ec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2f88ba-ff93-41ec-9e70-7a479500e46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e40458-93ea-43a7-9b74-9f2671b563e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d3529f-b690-4980-a52d-6b72968a2850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0693439-cf4c-4e14-918d-52805932eac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6f4aab-46ee-4716-8a03-c98937ed3380",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a194b3-6257-486b-ac0d-9dae35db336b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee3cdb8-adf2-4b86-9209-aa98c82fc9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2dd62e-d3d7-4d8d-8e70-a1fc34402e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "945865a1-430e-4a74-8867-7958be19b51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2439e68-f184-4d8b-84a1-8bd50a58a8b3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e2413b-18a6-485d-8085-d54fc34e6301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0b64a1-dc81-4e18-90fb-6dd175f83eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22771d0c-0ae0-4fd6-a3ba-a40702b1bda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d58cc3-906c-4a19-8595-11b6a43d92ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27266432-b618-42bd-aa60-9bb36f8c2183",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50e3936-99fc-468e-9708-3415c6a0c6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4401ed30-fece-42ef-8c69-0b0a10605f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c67748-d9b8-4f50-ac93-74c839c7fb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da44d3e-c91f-4b63-9227-a120687f6600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7801afbc-d905-4f6a-8c94-3589ba14e9de",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d00685e-5469-402a-b7b5-72f3a2039b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2766ee-7d9c-4582-8733-706391e51001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a990b80-09f7-4017-82cf-d9e17fd67c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "465c18d6-e60b-430c-94ab-78ec7d90ca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165f3419-67b5-4bce-ae72-0ec03973a674",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65329997-1b7c-4e8c-bbe2-8c98aec20474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c743f4e4-68ce-4106-a287-61bf55e9f305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bb7501-76fd-4268-aa6b-5bf131d108a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79387978-18b1-4fd9-b659-737fc969074f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5303daa-b412-47c2-911c-898ba0bd3d89",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac14bf7d-a60b-4f25-a575-e98626f6b5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf97b1d-019b-4e28-89d7-fd958183264e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4542ce95-6c65-40ab-95f6-742316b41408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c896334-3b30-4091-8b2c-32384f2ee815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b213a26-d60e-4652-b0e9-59aa488d684c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2148363d-6e07-4a85-b3e5-998d12a67424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be4ff44-1c79-40d6-98f9-a7bfe777b652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbabacd-692c-4992-8552-df100e4e483c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63335244-7838-4481-9367-bfb774593ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8a7c45-7596-44e2-a61c-cef2d2729113",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4768b804-6a94-4a4a-b50b-6338fa3ed563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d388a0-65a2-418c-b17c-87fb76ea7acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48d20da-9c7c-4f96-b9e5-bc0dfd2fe4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ec3a5f-b5b1-4ebf-9051-1a72754c5c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d575e082-bc12-484b-973c-bcbbd75d3f82",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d76dee6-b34a-4b0b-abeb-c2ee98f1c5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4512e42-d08c-4c31-9841-0f84ee6cf5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ec9e92-e91c-4e17-b7ee-0a6947f41dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb79cba4-a08b-4d02-acf2-a506bec307ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a784a058-64e6-41f4-8997-1dc7e807ea59",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d0e2c0-c057-4b62-9195-842e365c19f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc32694-0007-4c6e-8f93-2c6a4c3e744f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0417606a-4a84-414a-aa72-dd3c5bcbd15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc84e96e-8573-4547-8948-6dc97d3acef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9612ad-9e89-472b-8d9b-eb72d35a53bf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db73befa-bb58-4c5e-a68a-af0957686e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a8cbd1-9067-4a6a-9f7e-91995d3159dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec5c400-4fef-49a7-bb1c-64678abbe657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e67b309-cccb-4a02-9a84-025e874eb58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a48ad0-0734-4037-b6ce-f58dbde25628",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee31722-0024-4a21-9b12-53d1779a9550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06297eca-898e-4fe7-a264-629bab5ef218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fdf900-5bde-421c-af69-b758fae9d1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e3a979-939a-4592-8839-c3f51f72f5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23a8f5b-efe9-4590-b2e2-23285baa61f8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf043740-0363-47f7-8c32-0ab126bde024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732dad5b-43ea-4abd-b426-cdac02b2f2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c486ee9a-0ec1-4dde-b3af-9455c4d6d15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "699143a9-4305-44fc-8124-31bd12ea4593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8235df8-a4d8-4f28-91cf-d88e2682439e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0952d585-b636-4acb-984d-cbb560bf9b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e84515a-fc78-4146-95ac-d0f06f6bb315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0e4bf9-5069-4b77-9ea7-163e3d8c8f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05be88a-2108-422c-820d-7d44321a67a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287eaebe-9e95-40ac-ab8c-69287a9ef3da",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cd82d-96c8-4e88-839a-fa4a8b3bb406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6486f22-946c-4acd-9fd6-238507594c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f486380b-aaf7-4cbb-be7c-ee79a0c47409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b03f1f-db05-4a98-a47e-be760e6c3da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceb9a13-8cf4-441b-b375-1959f01099e1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dc0626-5861-4bf4-9139-b5821eb6ae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9146005-a669-4df2-ad64-10b0f8ba023e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607d95ba-fe94-47d4-8330-d0dbe1b2fa4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f10b3365-2877-4c9a-a207-214e4c111627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb091f50-a125-47c6-8667-e10783d947ac",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfc3b70-4ed5-4b1e-af5c-5f7c93314051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2305c404-9ffe-4192-ac93-9c1baa704491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16df96b1-68aa-4c4c-8971-b6d2d992a55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bcef1faa-9e91-4cfa-889c-4ad6829376ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32bb154-9230-44c9-b7d6-06b1a4cbd4c2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7021b8a8-2944-4b35-9593-51ba1eff1060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2810e4e-d9ce-4dc4-b979-0e28af3a1383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89a70a2-abee-4e26-b861-f6f6723b7aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "287acfd3-b762-4d00-bd70-1eb4005c7080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff39326c-a584-48a1-9d50-4bcf6bb9507f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac85a22-a570-4bc8-bf0c-e904e9e83042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52b9c5c-884d-4165-be42-6b3503b95388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2364792-c16e-4c50-b16b-34be7aa42405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92a7b504-caf4-4a0b-9bb6-a64ae4ebb906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ada73da-78cb-438a-aa21-0cf9c00e3de5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b1f2e9-eebb-40e7-9c08-e8044f5f6a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d46cde6-f5d1-4865-9bc3-d5b79b1124cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4037dbf-bff1-4cc6-bf9d-a49f6dc58339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "18f64014-77f6-4f2d-9b4a-0263fbdde8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b775c7-a5ce-4c47-b960-daee7883ec70",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7092d9e4-c26e-4cd1-94c5-01d62ac119f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd826bb-ddda-4ef9-bd2b-297ae5218d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e909c0-2a59-4a1f-9f77-273c780417ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1663e90d-dcaa-4da3-9a7d-e45369e2cb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66681de-29ec-4e7c-b121-92d6fb06af7a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66671f9-9a8f-451b-b9fa-659f788308c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044b4a89-c88e-4a19-95ff-e37e838045ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5553d50-4141-4807-bbe4-94ca9d1ff62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c94ce980-0c48-4e9a-b41f-720d54049013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c49832f-63a6-4d69-8aab-70aa87772f6a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcc1a7b-2eef-45ea-b48d-c50f0a4ba95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaf7d0c-2cf3-4c50-856d-5cc338013b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0c2d2a-7b5c-4aa9-8633-f5efbe511b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a41bd5fe-6bdf-41fb-be3b-46c377e96b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc7ba57-559a-4664-afdd-a3516dad7bab",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e91505-c758-4962-9e2b-afbb20f6477a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b35b6cb-de44-496c-8288-5e2528d9d58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a1f26e-ff79-4fad-baca-e61ec00f74de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6d660d7f-12a9-4340-a9e8-cf05355b87d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869144e3-601c-458c-9aac-f9577bb8dfaa",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88994bf0-2b60-409b-816b-a4d660207da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09c5d7a-0c7a-458c-a38e-0f5ddde7320a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5bc5b8-14c9-47e1-8400-22be3fef5d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd7bed6-6937-4437-8a76-0f3313c372f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877328b8-3169-4bbe-a34f-79946c2945e3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77857b51-8a42-41ae-af67-1b5406a4c8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c23894b-65f1-486d-ac5e-10cd794062dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a591a823-7669-49f9-a39d-1261e0a7234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "191e8ad8-3da7-4ce8-a67b-695228a72658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a17b41-2872-4f35-817f-5d17ad06ce17",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f98ad55-6007-469f-b886-c74ff5f453b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a831dc-3704-477f-b173-b51d6a15facf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4e9f51-f5f6-4ee1-bd76-c8d9518a8783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d105cd0-ca84-4293-948b-ef220a3e0f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373112c9-5186-47a7-9051-25e0acadda91",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d15ce9-b596-4d75-9c02-5379053394bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042543ef-bf02-4efc-94bc-2178961f382f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33998ea-bcdf-4ee9-9bc0-417e6ea2062e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7509556d-1f25-474c-a217-e8ebd23191f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb828fa-01c8-426a-a9dc-71a3490ef30e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b44a03-f038-4225-9b28-90f7eff672db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fedb82-7089-4455-96c6-f3d1203eb0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6623009d-4002-4578-8a07-f1da5a75b2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90525a9a-ad17-4c5b-9454-9595f5d2b932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc37de30-f973-4c97-9ffd-d429829b068c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf8835d-50b4-4368-ad69-9fa47f3621e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a30a750-deaf-4d0a-bb54-28ca91a01e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa7065a-38ef-471b-916a-c3b8d952cdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d70f947f-f509-4f27-937d-3f63dcfe76c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80873b89-119b-47fb-97e5-edbc6a0f4651",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20298df-502b-476b-8522-52336d491d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988bab33-61d9-49dd-a984-54e48acb5a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913caf60-ea39-4587-8b5d-3e3a68dc1781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d66a5a-f31f-47b9-85b5-a234b3ec0417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32b4153-34fb-49d6-8606-5fad89630da3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e237c098-6550-4262-ba85-3e8acfd5a784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e7f398-1011-4197-8af8-36f04221fb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f396648-25aa-4013-8a04-c05a151aad83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22d4b7b0-74c0-414c-9be4-25e81d9823c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc725a2-16ae-4456-8343-250d1614e886",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab59cd81-62b1-4682-9eb9-29174cc3f93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dc67e6-2b79-4eb8-a8af-5eabf8d33fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8456ec42-6e3e-4bc3-bbf6-9f1fdd792137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "25d3d726-93da-44e3-98d4-9b48dca7fdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9607334d-0c4c-42d7-8251-68495723c738",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aff613-d76e-4037-b78b-74629e7ed115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc7a34d-3778-4c44-8d0e-d5d32baeaed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfb45c8-0862-4dc6-a589-9efb69d536d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec3401a-fc33-42b0-beaf-db5ca8dfad86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a8a1b9-b8cd-44ca-baf4-9a5c09deb5df",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757f3b91-d18f-4522-9fb8-2360217878e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8861c4d6-bd81-4b9d-a782-84c2d66db003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2802a4e3-fd7c-4fa6-b7cc-88d4f70df192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "380117ff-b870-42fe-beb1-be347e82707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085857e1-0fe4-4bb6-a500-c53619fa499b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878ef4f7-7dc8-4cd6-967d-f89dad1cd926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a584233-d331-423a-8831-1f4f25ed6f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6873529-9c1c-4bac-a369-3b1731f2bd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6bab64-796d-4952-a966-8386b3e0d934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891b0873-5f30-477f-a096-c05d9780f372",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c10448-9a65-435d-9955-1f7aabb6850f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409b54d7-2420-4618-8894-f44ae7f12e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de29d92f-c10b-4ce5-8b43-1cfbeee139cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5f1631-9ce4-4778-b57d-4b326d984876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8634e147-7390-40f2-85c5-e37a71155cd5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87c85f5-2558-40ac-bdc7-d036b218db87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c081a325-4034-4d45-98bd-50ea3e2cb0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff34224a-7d7e-4954-aad6-1ba11713584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "81601829-6ed4-4b88-93f6-eb2693bb6b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870c03bc-cc2a-4e99-9594-99327bae1449",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc61f131-e667-4568-9bd0-2d2ae535c18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e07acd9-6594-4838-86f6-cb38910a1e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fb3af6-6212-4baf-b352-c991055e4f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac625af5-34c8-41e3-bcd7-8e974a7d8fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308f8e2d-068f-494f-8979-d35c87197c9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ae54bd-7c57-4780-8028-d42763763ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e3acb6-7ace-47e7-8d91-e9e8771dc8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f172e0a-7de1-4b63-85af-3ee497e6a382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e071a6f2-76e7-4256-bed0-f4a6f935b8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdf4c91-f86d-402f-b5cd-3c29e5558611",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53d7e47-be9e-40eb-9b91-fa239bd6c906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6883d497-eabf-42c4-95a8-4e4da830c984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcafc63-1d88-450e-98d2-a0b766d577c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fefcd868-e80b-482a-adbc-24bf24da8e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0674c4a4-e52f-4f7d-95f4-8ef629d01e77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dae104-3d08-453d-8e71-57fef68f2a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02379388-3452-4cad-9a7c-bf9a3c56b73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f71b43-a20f-4206-b8f0-87ae4ee1e8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c188ffa-67d2-4b28-a522-41d0c38a3d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84230090-c7f8-44dd-9238-c95036415fda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f080d40-f8d1-404a-8e06-2c24795398ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f316273-0153-49b9-9902-8688659d5028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ebd8cd-5a48-4092-b111-7a012bc68050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbc8c90-1f8f-4382-85af-58fe3400bd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e453f1-cac1-47f0-a142-ba0f56fe0141",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2a2468-fe29-4e09-8572-1ae74f6ad542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e30ed0b-01c7-42f5-88d3-a16194b4d6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ebce34-c227-4131-8a16-740d3776ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "665ff5f1-f46c-4160-af7a-88eb09843f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35716495-6f3e-4fcf-9f94-3c68c8641be3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe6bdee-1d2a-4ab7-b1b2-32a249750fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd8c900-a22e-4bf1-8dbb-14386c072f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6ce817-aab7-4926-8b8f-c402dea22726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fdacee-3bd4-471a-9ae2-5acc62d53f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720658cc-3f70-4e5b-bf8a-2e9856ae751a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976df4b4-c608-4986-8666-30a2789cd429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a49f4f-bb2a-4ecc-a2e5-30fe4f407f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc3424f-0e85-41c7-8c17-9a4904aa93e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d47a44c-71a8-4e9e-9268-a0f9c1f95a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d14729-d388-4eff-9ffb-354c2326ae80",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cc91bb-3c2f-4f08-99ab-7329445e443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9c6ab2-b3ad-4991-9e29-3a30c16129c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb889704-2acd-4419-a654-69662bd736b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2193c6-8978-457a-9f83-610172b9e169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a9fe18-2005-46f2-acb1-efb821df5a1a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fb4250-621b-464e-872a-d27e8ab61ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78331a61-c58a-4314-87b9-5a285e158ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4428f682-00cc-45f9-8a0d-ef032919e2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b68e1356-dc38-4343-982c-0a68e1d04883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6ac5a0-3b8a-4e7d-be46-52a407a6f2e9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16acddf2-f113-4851-91bc-f970a18ff360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b160b7a8-8d44-4147-abfc-a97885af4cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0b1171-182f-4405-b61b-65a6afb67804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d71ead0-364a-48c1-be37-95c614e6cc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03976cde-c07f-4cc9-b3a9-03569c67acc4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca65ee61-5aea-4f21-b09f-c104f999152c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4add26-a5c1-4a62-aa9d-0c399f5bd588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e12167c-aea0-4a0c-993b-f5e6025f0045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90faa1e-d421-4528-b8df-2a12aaad073a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c126627e-7c07-4ada-8385-964bc0b66388",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1a9a9c-75f3-47bf-b4d2-a601446bd801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f523d4be-9be1-4173-a7db-b476a66037c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d574ef-2cfc-450d-8023-98db1fe308c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c14ff9-8251-4a81-b8d3-962097c825f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d683da-c0b4-47d5-bed6-a3801f2daac8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0673a624-0fa8-4bc3-a6a4-2d3def724f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4eeb05-363a-4bd2-b20c-cda83fa42ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2650d2df-bfa7-4295-92c8-416bf05019b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1becba-7c9b-457f-8d71-f2470c60b263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa23f9b8-0fda-4428-ac50-751eac096983",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb297a8a-8ead-40d9-9ddd-30aa88fd7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7366727-a232-4044-b49d-419c69a0db89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd40340-b888-4112-8c7c-ee7e95278bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3bb790d-eba4-4af0-9c8d-2fa35b3ac856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8415c4-b0e8-403d-91c5-85215515f4e5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14381be2-eadf-4ad6-a88c-6cef4867fcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a04e49e-fb40-4875-b079-7c026eec98d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f74382-ed88-44da-ba37-8dfcf4e38c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef8eb0a-3528-40ee-bacd-0c747c00016a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e819cb-5fd2-4b45-ae20-8a5f06d39f42",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639708d5-463a-472a-9ab4-77471f44ede4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0512795e-ae1c-42c0-baaa-237763d77b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a056b4-358a-477e-a939-db69e841d749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2737bd-2e0e-4696-8700-7bf02d2336d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090bc023-c51c-428d-8104-26a8ab5953d6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368513c8-0c04-4e4f-ab4c-f1d1830c5cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b8c0a7-5d48-4be9-9747-72f9b287db28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b0fec4-cd35-4a87-aad8-8f69b6c6eae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe95b2be-f105-4184-968c-331a14c280f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196086ff-95a3-40ec-b986-a0382de31901",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11447c6-f098-4f7b-abb9-e3cc618a709f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdac5cf-c73e-45f3-a87b-49a8a6673d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fda39b6-6831-4bf6-97b1-1ecd095731b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "584af486-7a9f-4f97-9cab-f5ad14ddc5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f962f59-1bad-4346-8ad6-c39c86947b36",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc894ff2-663f-4cb7-aaa4-b81adf1dcec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80497693-fa09-4230-a125-50a078bf461a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3d85ce-9b8c-489f-b275-4387d447c143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae6ce3b-c709-4d75-ada4-ae4f842234b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f798863c-6400-4eb8-b56d-6a67fac3b580",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5da7dbe-54e8-4fa8-ae10-f4c6da035b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905976da-087f-49e7-9e3b-713a372e84ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff2cdfd-b8dd-449d-ab64-c128ecf66ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c58c11-7d83-4763-8882-8df5321a9413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687c7157-21ee-4322-8328-902c9148e002",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6648d994-7afb-4ea3-998e-695fd9bb224c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26926ea-b2ae-4d1c-a1a8-15986f84b71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23996694-95b9-4f82-bdbc-9cca60eaf1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4bdb5a-1ad0-4492-855c-6bc2e8d3a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03473ffb-b8b7-40a2-a6b5-aff1415075a8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2016c658-9185-4477-a640-8297c517475b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20ec174-153b-4d8a-8698-a49d45e273c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0515630-070f-487d-8a52-15e191631c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b5dda8-bad0-4fd8-ae39-ed61ae74813a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8709840-aa26-48bc-8e1a-01639ead292a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69acc75b-908a-418f-addd-a917244881ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375afd07-bfd0-42e8-9e4b-67cb9a89e80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed999a70-464d-4821-bf6b-f70e5aebefe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fda8c22-6da4-4ca9-a881-d65eafc94924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbe9b98-eb75-4c2d-b0c4-47120609cffa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c467879-51de-4399-bc5e-4b284b8e68ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf796c68-2b5e-4897-9efc-6c84ddc006ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d729edd-17b2-4d26-92c6-9918f9850c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4691500-012f-41ea-8cc9-9921dfb35772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328e02a5-a526-4b2f-b04d-d16673a02e5d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846cce56-d1e8-4d56-ba91-5571a8c551a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6fce8a-98c6-4bad-96a3-a5e7a24c84ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93941946-4b94-4e11-aff1-0c56c31c9cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a82cbd-280a-4855-951f-af8305ac19b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828da6f6-7132-4476-9304-87202a0b6ce7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c14b59-f689-4566-830c-4dd088a28cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e0b29f-2fde-48d6-976a-c0634a4bd482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0223a862-6919-44b4-b551-36bd305750ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bff6e4-db9c-4097-b7eb-ab1a8315fe5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9eb463-1b39-495d-9fd8-467343dee877",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740ba8d3-34f7-46e0-b967-4dc614276770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ce3d6c-1b7f-4e81-bb81-620f8f159dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fdc492-b5d0-4fe4-9548-56bfc76bd0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c0096c-df5c-4f2e-b330-bbd3676141ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb34a1e-3839-4210-b45e-146bcf5b8ad3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b4f4ec-a958-4334-9eab-b7f39779884c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318e4a31-5366-4b7f-a5c5-785db30d9f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa4034-b3cd-40e4-89cc-5d6c5e8e4de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f87b035-f18f-47f4-be0a-faddbbfd6465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed79972-ed99-4c8e-ad50-aa552403f5a5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e21538-6b25-4a51-b9f4-5054488f444c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341dc1d8-5637-4297-a3ad-b3badb71a47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd82485-c2dc-4c0a-b01a-c9cef724cc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8364a6f-9cfd-4c8f-92e1-f04b4a809ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee7700c-3352-4e5d-803c-af300529c370",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5712bc3-32b6-491b-9ad6-fced352c8b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9132c537-ef84-4c38-9e17-4249ef5653c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad9738f-60fa-464b-86b4-93dff920242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e64c79cb-0732-4f9e-9d45-88f47a651d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc09500-ecab-4ef7-b068-afed8a62bc85",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b475c9fb-9743-4153-ae82-7bd483d2982a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d68a540-d3b0-418b-b4fe-c99c4c71c8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db1676b-0494-43d4-80ad-20011e5e2713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de38477f-f218-4957-bb1b-ae28ec790c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11470436-f89b-451b-9113-44e7be714a80",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96d9029-a219-4783-944d-7653e8f3878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592581c7-fcf4-41c6-8830-de7927f85fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa723cfa-9f92-4f47-ba58-59a1214df68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64ef784e-eeda-4219-9643-e65e777ca7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8029e7d0-27e4-4765-9db1-4057a4f54550",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8a19f2-881e-4201-8a04-606baceff681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ce93e9-2c91-467c-9f63-b242aad6ad34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576c9847-000b-4b1d-8d72-4c497691f3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c69d568-86f5-4cc0-9377-a29276d51561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ecc5ee-fcc0-444d-ad0c-6583d3580409",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d2eb95-f659-4475-a888-700eefc6b3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6aa03b-21c5-4976-ae6a-1c7ca27cce2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c455e33-747a-40c4-929d-a027ae6945d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c540fe9-0bc3-4e8a-9001-8bd1f6b0e7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d83005-85e1-489a-ac7f-cbd7a8ea0d5d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a864de-c717-42ec-815e-dca6689ff958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1bd70ba8-a7c5-481f-a66e-7dd3169699fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2884c3-7698-4816-ac73-dddf9c17efee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad8386a-ba41-4f34-b4b5-2f569b40fdb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "008837d8-0261-489f-8acb-5b257742be9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "966a6f2a-bff2-4a8c-b4be-87fbd1b6c64b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83351976-26bb-49d8-909f-5a12d2b88adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e65e570e-90a9-4d7f-b6b5-b150333ed209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a0cc9-d119-4c5a-9fdd-b75cc62323b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "693e0907-141e-4808-bef9-8935eb84915c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f32552a-b42f-4c89-bf49-e6f39f47fe27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f98cdf1-2a4d-4927-92f8-f7dfbef8357e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58382127-b5a5-47f2-897b-51d95662b029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e90f688-6579-4cb4-a5eb-19e81a13f94f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f060b97d-6bb4-4036-acd7-1ff38459a2f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fd6171b-90c4-4468-9e54-44b36bb67747"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bea4ebd-408a-4054-9e48-648cf670fdb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d90bafce-b9d1-407a-80b9-8132d01db7cc"
                }
              }
            ]
          },
          {
            "id": "d122f3a1-43fc-4e46-833e-efb8ed13d451",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d54047a-fb59-4067-b901-18a7ea6475c5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0696024-d65e-48b4-9079-32da29b01407",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11583c81-cfb0-4633-91ef-f24a45b11687"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34f612bb-e172-4447-94cb-e46b12fb9c83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "523a0a4c-daee-4c84-81be-0adb71124b76"
                    }
                  }
                ]
              },
              {
                "id": "bef8050d-02e6-4edc-88e5-398ce61b073f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "853f081e-359f-49ad-b2a5-50b94ff47f20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54700ed9-727e-4321-b528-7b5fd83b3cd7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0013a83c-3027-41cd-ae77-ddbb51aa3ed2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71c23e41-bfe8-41a4-b4fc-f95c2d829065"
                    }
                  }
                ]
              },
              {
                "id": "85313a64-3bf6-46eb-8c00-da9f5b1c5b25",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d0ce3b3-9cbe-4532-b4bd-4bf97fbc288a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c601820-5f2d-4acd-a70a-5c1f65e5a16c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9aeb634-2d97-41f8-b0eb-f256ad68c2f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03195000-fa8d-42f6-898d-9ba12402a935"
                    }
                  }
                ]
              },
              {
                "id": "7f3abf9b-cb79-4bfb-878b-b0fad0b695ff",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f385e0ee-67ff-4f1d-b003-9ea79fa35e81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e44fada5-2a37-44e6-af98-05b30224b7fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdca30d7-6aa0-47d8-be7a-7d18df4af91a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aa6dda7c-8f7e-4804-b1cd-0e286c2539c2"
                    }
                  }
                ]
              },
              {
                "id": "660d3200-daa9-476f-a2be-5595e52dcb94",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93ec63f3-af52-4b26-b760-824edc9ea285",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "024c1a50-74fb-40fc-9c20-553b733439ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a806de9b-21ac-408b-b9fd-b63a38031e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c6491c50-1c26-4fa1-8e6e-266a4e28fa50"
                    }
                  }
                ]
              },
              {
                "id": "9630e38c-8630-40ab-a2bb-e46f4b66c350",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33f6d425-bf9d-4260-a7c2-95c7eff07404",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad2757f4-69e6-486e-8333-d04620e1a7ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10231d3a-c900-4726-98e2-59a55c98d5e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87167bb8-eb27-4680-9b67-3696f3ebc370"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ce80adf-e9cb-4c36-9355-0abf8a4a2577",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10dc63e1-696b-47fe-b002-48467a1d2619"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfebd599-c514-46c7-9b52-4ef8c40dce98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06a63c2b-2de7-4925-86f5-63ac68101847"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b190d87-e778-40cf-b73f-1c596fc3b9f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "32e0b18d-d0ca-42d3-ae0d-2d790a4e77f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4573813e-70c0-4090-bad5-c87010b2fbf6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4fcc6bd-cff0-499c-9fae-26b71f7bfb13"
            }
          }
        ]
      },
      {
        "id": "f12dead0-2bdf-458b-9c83-c9a4d75f8587",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "41188fcf-b4e0-4a50-bb4c-d4c498b842a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83ebeeca-1d92-44e4-b279-d8e89f1c034f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f90a78af-68a8-421d-a7ed-73cccea490be",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145a4065-ad55-4211-b963-246e4c436e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17b1134-09e1-4f98-98a3-ce386319186e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079ad129-30f4-40cf-bab5-c7735e8e36aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fd2c8b-acca-44e7-92d2-facc4e8aa684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5367f1b8-80a3-428a-820a-2532a36f4d08",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977cf492-c30b-4842-8971-96336e790975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41a6947-fa5d-4b6f-9096-2b8b1289efe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a825bdaa-a5af-444f-aa7e-a2ef06f22c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18021ae7-ae2b-46fc-96c2-845252cd07a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569608d8-9b50-4325-bfe6-6fa22d62e896",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288de52b-061e-4f91-abd9-126daf551d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5994127-d8ec-4788-8f94-47dec18f6587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01426602-d24c-4fab-9eeb-e7dc55aa115c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf48462-6cc2-44fe-9902-5fb06329d668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c1632f-9f8c-4a4b-90b5-1124a537db22",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61010718-79ca-40b4-b78b-afbac111939b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd910ae-1490-4ce5-b188-adf05cc97812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba55eb12-c7b0-476d-9870-0ff3407f8485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90cb5748-2fd6-4b39-9f07-b4205b6948da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257b22e1-3bdb-4204-bfb1-1c770a102ede",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af654b-fab5-4eb1-838c-8146ae926e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab5d5ca-3580-40cd-b725-3495f8b4a853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f9dd0-f250-4c5e-aa8f-d2fe78110b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e071dd1f-1416-423c-af0c-36d0905c808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ab12a6-6d8a-47b6-bc07-3465e93da438",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4c7bf5-0c86-457b-8abe-844cc65dc85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4d69de-54d8-4f7d-9152-d54fe29a580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4563a6af-bfc8-408a-aee6-1dd98e7efb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40816652-dd3e-4759-9fa0-c0f3bf085730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561fccdc-168a-4fd3-b136-13d0e24e044e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e449cfb-baff-4760-bc95-1dcdf2e45268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db828c69-5b95-4f58-a6e4-cd9709e61b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73087630-1f42-434a-9ebb-7807df9202df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5624e560-8234-4476-b3e8-35cfd2208c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9579552e-e588-40b9-92fb-41a9274f6311",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d904c188-396f-48f1-89dc-fc247b2ceecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4f7cda-81ad-4ce6-9f57-f0b93ae5030a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d2aa66-28bc-49d3-ab8e-496340edf88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3e65cc-3037-4232-ba20-8d8fd650767e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a0c249-7bea-4868-891e-e9ddc99dc550",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3650c1-93ce-4d46-ad69-4d11f4b8cd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7050001-c141-4c2d-a09a-c8b8faae40e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef235697-b04a-4c25-ba19-0cf7e859b355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc574ed6-d189-4276-8a25-95216f55f208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0793da6f-b431-4580-a930-bb836a9d0d65",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcd45f8-2d3d-44b9-9e96-e2ca6ef4dd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d792d1ee-a21d-498b-acab-19531296f125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97220e29-b561-4f1c-962c-e795d9e61133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7baf4e6-e728-4087-b662-20e16fb692da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffbb8f5-703d-4ae6-8730-cd11a5d34e87",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a7bad6-189f-4f75-8761-5911dd8dbf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c035ad5-c0f4-45ca-b5c0-ab86a6e52b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0884e12e-70a2-4cb0-81b9-5be8d3bacfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fa86337c-5e2e-4978-8c21-3910faccbfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3260f375-378d-46e7-95a2-864dbbc325c7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065dbfa1-9593-4726-a1d8-959dc01fd1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5ec92b-8b93-4090-b815-71067bafcdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c655c392-b2f4-4f7d-a3b6-8b5549fa0ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee42f58-5f05-42f6-a992-3ba0c9d1cd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0757e60-8a24-4408-80db-f1703979b5f5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fc8b1c-2f64-4de4-b8ec-a93f8753f867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c3b55e-bd9b-4190-b173-83c1d064534b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115d49ee-aa0a-403a-87b9-f255201cb2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90492d58-6e9d-4138-9e31-87c85cec8c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa048d2-eb26-4c1e-b86a-8c5809b1e35f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5473f5dd-0ac4-4887-a282-1f593c3aac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a4dbb4-b048-4ab9-8874-c114e151a5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616df864-da78-4367-b347-5c98e71b38df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8270dfa-7a20-4d95-a4bb-92a6f9d44b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c74a82-30ae-4ccd-83f6-10eaa7bcb1e7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07783122-c6f0-494b-9d96-9350f3ba9a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f77453-b946-4171-b9f4-674d713bf922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bd29d0-1e35-44fc-acb6-ba84f596762a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "05e1a232-6f56-41f7-bb2a-607483b5c725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0caf146-c488-4992-96e4-ae1347381051",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03931712-7804-4583-adde-76b77fc2cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad416698-db0d-4143-9c13-907208308b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b20e8c-9370-4790-982b-f315b5a272d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "32cfb43c-866f-44c4-a087-80b9489174f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bf263f-56bc-430d-a586-35a7119cec04",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67c6870-1de6-4d44-9a77-9f4a067a83af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382940bf-ff94-453e-93e6-2d69a1e9fc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafdb283-e9aa-4d57-91a5-1254ecef0dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b547949-34ea-40e5-b2a3-ac14181fd220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec407b63-8e08-4df6-9368-3e44bd7b6b76",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712bff37-519e-437f-b86a-3e0e274549e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b70d7da-03c3-488c-afe6-11cb3c59ea85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5143f9-0b93-4b9f-abb4-9bfea8594177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8634541b-ce77-41aa-a2a0-6bc4a03ac706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03696c55-17d9-46d4-ba36-5820ad93e49c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5af82a-632b-4b0a-88a8-02e63b5a39c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52987246-b1d1-440b-965c-cd191e0266a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80e4e97-9dcb-4cd7-be1c-7a13b3aa3ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6821275f-0c12-453f-8351-21e638346bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe576a5-4e4c-47c6-818e-870b3ffedcf1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efbb2cb-7a73-4fb9-8ba9-b323988a1556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d830e52f-eac8-4887-8dab-19de3e842862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38ea8ae-7562-4f50-974e-3944eca33315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21075c72-53a0-46ff-8d31-46f070902f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd92cfff-1cb6-49d8-9bcb-ddc7dc22867c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a25df5c-30fe-4061-bfa7-281794d0c0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feef2de2-75ff-497f-8d89-8baa33badb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46980b73-b48e-40f7-97a7-1ff5fd00225d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa12081-3b9e-4d78-99ed-4416d0230afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804a92ba-b71b-42b5-8c0c-ecf218880fa2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf8dcc3-094e-48c6-b6bf-43436b9c5894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099c61a5-4229-4168-a1ec-34325889a6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d081bbd-3dc9-41e8-a928-dd327e6653c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53f6460f-c708-4b2c-9151-4c26cb0efc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c916b49-6fa8-4e43-ad51-c4106b5da4a6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034be51c-8d9c-4633-8916-56acf63a411c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b03c017-944b-4a16-a560-f9d9a8d0389d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4796dc3d-0735-4768-9bba-449c9e980039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d69b5d59-a201-463e-a3fe-5ceca44bc931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f9a231-0b94-47a2-8a88-35235b030b3e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0cfb78-9e51-4abb-bc1b-197a477fb1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efd862f-07ec-41b5-8b01-06fe66ef54c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1056bd-f2be-46a1-8d98-8e3b40928dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd721b1-5b34-4232-86b9-d264d69e0d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5a4f91-8e27-464d-8310-e9a29eae5e56",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613dcbe3-3b37-4f6e-83c7-11c9a17403cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be83e55e-f208-44dd-aadf-827d33154868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe13e176-74e7-460f-8c25-53e0a88162e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62bdf6fb-2dfa-4e41-8fd0-4ab55f7bac65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c554e35-7902-42bc-9fcf-19cc75903402",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639d164a-2974-4c3e-8716-b93b5fef8e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102df906-1f46-4f53-b86f-9265b84c80e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f83affb-d0ff-480d-8310-1b85f87d2ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de7a5d2-7120-40ce-a215-cd0b7b193a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49a16ff-eec7-4fe3-bcc3-7cd0db575d7a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f35c47-69bd-47b1-b733-d5df2b639935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76068de8-c808-41a3-ba6e-6707edc11a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4387c7c4-af39-46b7-9bcc-27f7b99b5282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7378a55a-7e07-453a-a0f7-dfe1c8db0888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e30cc5-dc21-4fac-a694-7da7eea5f3aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d018b6-f58b-4fa9-85f6-0c3fcde0c3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0266e6-174f-4c3b-8f4d-d4a72bb9a842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b76aa0-4742-476c-991f-63bc36db02a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ebc8498-de93-4623-8c8d-ad7ca8b44a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53d5634-23b8-45a1-b6fe-927756575ce7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0982143a-f3f5-4b48-a4ac-01e645faaa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82fd815-c782-49ba-94d6-ae6ffb0d7f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df959c83-9f20-4b88-9197-3dda873d9909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3665df-a52d-4877-862e-e7b908cde301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b55d00-55f9-4b7a-a32c-40e7a01be50f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e53325-f4df-414d-9907-e614f1cec1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0577ef15-e3db-4fe6-8068-7b781b528451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4e4162-c871-4866-9ba4-e546432fafba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba9c531-34ee-4f25-bc9a-d4e00f442dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fa355b-2c68-4178-b50d-45cdb2ad460a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13a6493-3814-4635-8bd3-f7a601860d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657d5776-0fa0-4b68-bff8-6790ee2528d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baa41bd-98fd-48bd-b84a-93a13bbba4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34e49fdb-ff69-4ef9-8f32-4e1c08987008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402cfee-8804-4fb9-a40f-e74c41c65d72",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9b12b7-b0f5-4d28-a5e2-f6f40ac1eca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d2b166-3d16-4f17-acff-6ef6370c23b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45958d45-25cf-4f90-b310-b64a38441159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc89e9c-c755-45ca-b474-bc64a2b2ab7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4cb5f4fb-10db-49ed-9ad4-d6357667fa6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1dd6327-0a59-4323-ac13-1848cec7b5ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca39e74-f1a9-4d69-aebd-03f00e8f284f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "48dc186d-3af6-4578-bdf1-0bc8c327889a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e224df49-be81-4f42-879d-f8e4b8ce78d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68f50e05-44e9-4452-8c5d-872865a9f930"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b37318f1-8bb5-481e-aa6c-3ecbc995b496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ad003b5-b1f4-4d25-847d-bab386dfca60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bfa0032-2b5b-48a9-b088-b99df6aecf23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "967a4ccb-0c77-44be-9a7d-c9f42e4389d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a842b507-7f2f-4816-b563-9308626a4d3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "48ceddb0-b80d-4ee3-ab89-6f30fbd10184"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88e9b503-02a0-4bc0-9746-bb00440f8ca7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50133ee7-3118-47ce-b8ba-6cb3006e4fd1"
            }
          }
        ]
      },
      {
        "id": "b8e77658-e5ad-4a71-b4ea-efd3259ede90",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "64a3568e-4adb-46e8-8056-15f391b09da6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc482978-579d-4ce4-8d7e-0e1eec929b44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "387bbc8a-1e51-4c72-b3b8-54fffdc5342e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975748bc-5a94-48b9-886b-1b0f1a72f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b22dd8e-0e44-4019-b85e-edcf56a2b218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac49e8a7-9810-4779-9928-7e3bd3b87778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8698d7-3307-40f8-83f5-673dc513d282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d037e6-7611-4c45-8f29-35174d0d32c3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79a90b9-64cc-461d-846b-c32c79de2290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e6b118-dbae-4ad2-a2b9-62de25437a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d05459-457e-4a60-a6c0-68af3f487283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94800727-2508-4e17-8b31-7c737df019de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a6f77a-2f5e-41c3-960a-3c56a27832f3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885fec9b-6fe6-450a-b309-f46afd94f92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4102ca44-c1bf-4bcf-8e26-b0d4599c70d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a15d4be-dd27-48ed-989f-9f277ef70500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ea688a-e678-47a8-aac1-21a888eb2c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae8b376-6785-41fd-9ed6-8d5202c16eab",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82be256-9bb8-46af-a027-59423e007e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579c515c-dca5-4d02-8283-e25c86c74d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74164b2-a864-49b7-b075-00909eb1f9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebfd160-cc06-48b1-b851-6a2629cfa239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790e68bf-5653-45a7-8936-3f2a6eac9d31",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f6557e-6848-466c-80a5-bdffcabb3f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a1cab2-147e-4385-b114-98568140db1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff6a0b5-9436-43b2-aaea-3417bde4295f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62d336d8-b7ae-4913-a726-32c602a31728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65402475-938d-4d0b-95b5-0b093d8024ae",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e2953e-0026-4913-8307-10b77902d189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dece33-2fa3-4b93-9208-44e514b17808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f361a2-b14c-43ed-bbcf-6ed2262a43eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "051608e8-e91f-4ed8-acbb-bdf1f3884aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7748a63f-1de7-4424-8d47-34a900336d07",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c34ba95-af2e-4b38-b762-d8f7b8817fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfb7a9e-8d1c-4c61-a0a1-b5a9d49571fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58191350-ac2d-4f46-94a5-3b94408a009e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "73fcebf2-3cd6-4f66-a7e6-173677a0a9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a977e40c-2545-4f49-9149-3cee64363d5f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96b8d6f-21a4-4d33-85cb-1abccca2f6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c250c45-3ebc-45b7-b9b5-129bd41c21a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc0d41f-2b3f-4aa5-a0fa-ca731629549c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "675fc890-f41a-4d07-8082-e97dc204900e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771fb1af-22ab-49e2-a48e-dde78026689e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb763fca-60e8-4749-a606-2ba5f47b5065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0f16a9-70ca-407e-aabe-b197b6f74680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d91d02-ab1b-4130-b4a4-b8d7e5b226af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d1f2de-2956-499d-b0df-d52fc764d1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6639fe59-6ce9-4553-b6ea-bfecb23c558c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860e70a4-911e-4f9f-94dd-e9a8abb6e641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90e758c-e658-44a1-aaf5-fbdeae0d79ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35408480-423f-4f6a-99c0-e58eb864daf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e6688c-3d4f-428c-b868-5e4eda928b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab23263a-227c-46c7-aea2-c6db78c83682",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731e6f2f-0c96-4006-8fb3-441d0ec72a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a4a470-940c-4056-8602-713fccd81a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b356e41b-a815-4151-bebd-ee870c745fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "59d71d05-8236-42ee-b7f7-cdd37699f1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efe7b0d-535d-482b-a666-87d6d965d340",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb74a907-7aba-45c5-895a-ada575902619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79f49e8-3545-4ff1-887e-6fd3c6668002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4617b2-2dc5-495a-8b70-6a0d27516ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d98d0e73-e52f-4c98-bba7-0992bbb6eb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fd184e-20dc-4942-b8b3-e2e6d2a0128a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf9d61a-5cbf-44cb-95b9-b309e7403693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946668c5-c61e-4189-bf19-6b924a89cdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ab33b6-44d6-4fed-9da9-8b75e8cf130c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc0fc61-12d6-445a-9dad-40e4d5162c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfe6a9a-2e8e-489a-9410-d36a1f307e98",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060adc80-e73d-46cd-bb0f-ca984b7e1a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ada391-56fc-433f-b9d5-cf2d1adb72f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf22310-a958-4438-b94c-353b5bb6f96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "990e3fda-f794-4b98-9d32-937f0371b30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d680ca-d2ae-43f2-88bb-3091a1bc8315",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d4213d-22d3-4043-a6a8-6315b6649293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824a431c-e147-4250-aa49-f59e3a7facd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adebfb38-008b-4937-ad02-a80022c00d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d70e4c3-2975-4a03-99a9-0767842f71ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf7b441-1278-4ec4-bedc-e2db4994c05d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4e4acf-5f59-464c-9935-f553371d9952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbd37d4-24b9-4b2f-b199-f60dc60ad972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124045ac-9c4f-4b75-bb02-49d5822e80c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff12e0c1-1181-4edb-82e0-a09432f50032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947374a7-6d6c-44e6-9c97-3fc8c843ffc8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041de1d3-bf6b-41a1-abfc-4c291f236f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e465d41b-7216-4a10-8e30-2d4181ea4fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df32e611-e045-4858-b8f2-538e28fc1d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd8057f-bafa-4a88-99a5-5cacb071cdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647b4cf2-d2f1-4b45-beb6-79b9f8e1170f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7305037-70d0-4f8a-9c66-313bda85e800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddf38e4-4972-4b1f-aa8e-e4dc10f58cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af7a649-b7e8-4fbd-a7b4-39766b1cd5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fadfd1c5-0ab5-4348-843f-55cceef710ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a35cfb-4a5b-440c-ab81-0aaedcdda6d8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a30177-cad1-49af-874b-9b5383056b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394ff265-b795-4f71-b2af-86d7f0d9d56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f3523e-3093-4541-9eef-c231065e0868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f00586b-a241-472e-9d8f-167007939bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f535bd1d-f078-4f5b-bf3c-b1a582678373",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30995ff7-8cab-4e82-af2e-9514252d6f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4368fb53-17b0-4aa3-bf55-82592bb826bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aafdba1-7dbf-4942-b3ee-f72d8b71f6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da3d792-86a2-4851-81bc-886ca4c05723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849c6ffd-3118-45a4-87fb-d59c99c762d6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dab8534-c984-4dfb-beda-8a9685d91068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7968f4e5-f8c7-424b-948a-7ca48a9eb895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a29a94-bf0d-4bbc-82d6-3b6182ed196a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a3bbfe-5729-4ad3-8fc5-aafcd7ebac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1513093-d0d3-447f-9dad-43b9fe6ef92c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392e0eac-6ba1-440c-8f0d-5d0f56ff3ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24f9ee9-bfa2-4579-a7b9-f634b4ed900f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35073477-c738-4f0c-8b68-a81bd0b4fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "789d73f1-978d-425c-a662-82d8596bf11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48de2b3-28e4-4507-8ce7-14c15db44224",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c182672f-0050-4a5a-b64a-9d253a05af24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de59ff85-2f24-4d2b-b791-fed843acec6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3176bd3c-3bb5-49ac-80bd-b7d6ddd7e444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc31ab4a-c110-4e40-af92-e2a7c7ef4ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b171754f-c561-4806-b394-9f35363f3c71",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacf6b5a-4e1b-4347-95b3-7a5e5d7b9d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9570b1b-4ceb-4bb4-a4c3-130a3f41fe70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e6dc6f-04d8-49be-ab6d-e8b70438e83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee86d6d-9aa6-4e4e-b0fb-a72506382bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e0c011-9651-4607-8b53-31d197ad3dd3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797bf467-369c-4621-829b-3053b3e38e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddf55dd-7e48-4c64-b5a5-236cb436134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fd11a3-37de-45dd-94ac-a6d4f8c859a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b314c3-071a-44a9-af82-ee4668503cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5860e293-13a0-4a38-8c6c-8ad6f1f4fbe1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc1aa75-5b33-4b4d-a3b8-18d0cabb5ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e89bc07-5c8b-475c-bfe6-3720b8cb0271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc79e5db-de16-4e2e-8f83-51ec56d54bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3715cc2c-b138-4e66-bd79-e2fc72663094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724a58cb-e8eb-4a4b-a790-eac6f898b9d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e9b5d-641d-411b-9d6e-6164d6d42719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaba1d58-b1cc-4f60-9e15-b8c8db24ce0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52110124-0a2a-40ee-892c-9d1881487d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4747c1-b225-4fd5-8e80-550590fb62f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a31d764-19a4-4d2d-a897-72c4e81ca303",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd25498e-9090-48fe-a985-c91ed20da91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31514273-b089-4ecb-8e50-46b4f1648841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4827f89-4b2c-471a-b6ec-76464a84ddc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "215562a3-cccd-4206-8cfd-aa505ae07505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3c7172-c1d4-441e-94a0-b53af2823f2e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13604e88-8237-492d-89cd-d49a7d880177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35facc73-0c09-4a82-aef4-31e93fa80423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e66ac14-284a-4ce2-a74a-49c9c03dea5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4eb4b49-7920-4bfd-b948-7c435c0d0d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07805ff4-3e77-4235-b1bb-8244500a7961",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eef0d08-aced-4763-a128-c9968cdece76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951d0a18-c878-4311-9869-650742d42637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ab0774-de8a-4c58-8bdf-3bcf9845795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02e2010-3822-4354-a3d5-bcc56c0cb610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328c8366-c7ec-4257-ad66-c229f68c066a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1252109-ad24-47ac-baba-3b394624970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e10d7d-f0ff-409a-aa16-a98bb5af7a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e04fd90-0f9e-4d57-9158-c6082070ec22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64352341-1041-4c5b-be03-d2af6b0dd4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9c0aa4-dff2-4331-b555-fe2d5fbd280e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cda308c-9c91-4934-b6cc-a66d49ca4c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df88126b-1f48-44b0-b2bc-60a76745ec42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf4434d-de27-4395-b057-9a9c1be5d7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7752c359-522e-406f-ae67-40d7ab60d5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1c7f88-7225-477b-81ca-80251235e1cb",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0825c416-1cbe-43ad-84e4-34ba59613a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee86d5f4-faa3-48f4-a6c8-adb9d9c1f39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62f3911-65c3-48df-9775-d19b9c1b8a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a6fa3b-18b4-4fbc-ad8d-2f45a1e52408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283ccb19-8bf8-4ead-9154-66e5950fef40",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54aad0c1-1285-47e1-91f5-11da1dcd19a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4f4ba3-6243-4d47-86d0-ed7666ebc0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad619a7a-0fb8-4c7e-b54b-8f4f4d45dd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "524bec1a-4ae6-4e61-9151-fdec33421e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb8f135-a7f7-4b01-b9af-53dbed62539c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b75766e-14d8-4790-970b-906ec50f116c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2855f5bc-dbd1-4fa6-816a-cd7aec00d5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8003ea-13d5-41d5-9bb2-0add0f794dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8e3d4f-e54f-45af-ad9d-eb237a253330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9111fd93-26e8-47ac-ac3e-ee09265fa4af",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab4cb3d-b96a-40bc-9d59-7aa3e06af061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19deffd-e2d3-4660-9b31-288d6c5386e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9b2163-29b7-4b15-a199-5e2df55b4b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c05527-288a-4996-99a2-ac16c38605d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468b3e4b-04dd-4907-9bc6-f4d7b6a4445a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ac72fb-3e79-4e89-a249-19f497f968b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76999cad-2fa1-4a2b-b976-12e93f317558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa55e80d-20ed-4ee3-9224-d126a5ba9f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a01d6c7-32b2-49ce-93b6-679fd212fe67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b7f8b76-50c8-4743-95b4-05bd6d3a6493",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c8adee0-95c8-46ed-befb-a7b8ba98369c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c819b20-3f82-4b7c-9e35-1b5ed9ba5cc6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d016be40-8516-4282-bcea-a6f110d7f379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9267a3-0326-497b-a27e-e0d39b61da31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0174eaeb-a699-4c69-b30c-27249ce955aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d83745d5-6e73-49ef-bff4-0a3a465df6d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9018b36-ef9e-450e-80b3-b3a1002e5449"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6262c16b-4b19-4f6b-95ff-a49012de4afb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3226ee06-3d7e-4a89-aa69-5ddd8e38dee4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77a59712-f8ff-46e7-8ef8-682b2d5edf25",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8082344e-542b-4742-9cc0-2fb2f19323ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f69be44-8985-4af1-b9ed-19ebea1edf81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68b538b2-ab08-4494-8652-6d16edbb4486"
            }
          }
        ]
      },
      {
        "id": "7dc6b752-0559-41f9-a643-05977aa436b1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b8110da7-24ea-4f9a-bbef-caf27c3f91ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47aebfc0-9d2b-43bd-82a5-18a3186a7308",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a22b9ea-217a-4255-ae1c-34bb6a898653",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29491ef-e6aa-4f41-b56c-67b27470178a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1cec66-bb0d-4f5f-aa87-c5e882398d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e83f716-19f6-45bd-a19f-53a7281235ca",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267e342e-523c-41a8-90bb-47de4d32d773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30306afe-2441-445b-b056-cff901a7f814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fb3457-be40-444a-a0f9-6b29121352b9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda5dc4a-1e94-48cd-98cc-f3260a1b88a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9178a73-ba4a-49ba-9f83-6a6eea894f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828ed301-ab52-4f76-89f5-cc796f8c9659",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6f1d0f-a0ff-4f82-85bf-0f329f2d398b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9128ed99-3889-4b11-8ea6-72eb69934f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df69f877-a9e8-458a-aaec-820342d963b0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd11191-3a9d-4d3c-aa73-38c4be2a49e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af42395a-f3f1-4ff2-90a9-c137bd4a964a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6660099d-16aa-4bae-8790-756d33916b63",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51fd3a7-765f-4d46-8004-42828037ef2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfed8f2-0a91-4ab1-ac70-8289ebeededc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac986c5-0585-4f11-a0f9-17969c748fbe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6c4748-7b43-488d-b545-cd88ae5e58b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a147fffb-ea0f-40aa-8462-c9f70e1a9b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435ac222-8905-4a23-a2a7-8a07181cceea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b332a2-93ba-4e1d-a7a5-6eca722b26c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfb44ab-50c1-4ee4-aa18-85f31b1f5bf1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e60ba15-5668-42c2-8a5b-2a48c157c712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ec1f27-c390-4bd4-a799-1a3a58239c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3b2a9-1f6e-47a6-a273-810d05db38f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27541b15-ab42-44e1-a702-0f9a3c011dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcf1ae4-0b98-4235-89a0-70279e07e93b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f835c89b-d4fb-4b66-8d9d-78ebe62a284b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8926fd7f-76f6-4176-8942-c4188a000251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f903f2f-605d-423f-a18d-801da9fcdb03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2859bdb-ef0a-4bb7-a2bb-81e0968caefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1da928-8372-4e13-aaac-80078c967468",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbd93ab-6255-4df9-b753-fd3361c1a66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5af894a-a7a4-451f-8b04-9c7fb9ac6951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca25770-a0a4-4e9e-855a-bb8cb7431fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786addc5-9aee-4ec1-9822-037d6a79ad3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f531b872-c1d3-4d4d-8392-5c74aa20526b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64347fc1-e737-483f-975f-3dfa2b830e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af096dfe-af62-4638-9c25-d0cb8d3153bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3e9ca5-b19d-4c72-b2ac-588a6a1c33d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ae8603-0dd2-450b-9456-d17f70a68287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90a0174-b9ec-4e61-8caa-62b33af2f63a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c303b6d1-b5e7-4d7d-af05-715011300a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f3d21b-c1b6-4d85-9800-754a6bf68e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915f5a6-8df0-48c3-bc01-eb72e6ee745f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363c1fbf-7930-4f44-8a7e-661c9a4f5da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e503e7f-9764-4a75-b56d-1f1585a5b796",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da901cf3-64d5-4905-a0a2-ef8703635564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c07ad97f-901b-45e4-9eb7-0dbb83134f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e1ecc5-4d1e-4293-94b8-4ff60c85413a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ebdc8e-3bb7-4569-ab46-de444725e798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0160e962-8100-4b17-977b-64bec5ad029c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79995732-6a11-41bc-aae7-d0aa571b75c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d614e08-8be0-49ba-834e-3d4dcc7e171a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30269e67-9e6a-4e4a-8a2d-46e29cfbc18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c54630-1bca-4b4f-b048-233e99887bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d528ad8-9243-4af8-a4e9-24ce983109e2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9a7a6e-b474-4644-b0af-4a220921b733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f9fc01d-79a4-4d77-a8a5-c21f20367f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef95dbf-a855-4d2a-b6b6-94e0e1767bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d30a80-1d6b-4bb3-8e49-3b2cfe7915b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676a1a02-3dd4-428d-b4ad-2008d0a05161",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e328c804-a4a3-4b01-b211-40dae88870dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc7aee1-771f-4808-a22f-8cd8a5113de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64792cfb-2feb-41ff-915c-a24c0e5045c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260c477d-3f25-4e2b-8d80-5e13a2cd85b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7764b5-2072-4f2d-9d5e-ae6e54ece596",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb07408-597c-4909-be90-602b5e3d51ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad37948-c1b9-4fa8-8c58-8d2a9ad29e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0037896-e2bb-4ab7-b540-dec05032dc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d387d6c-54c6-4352-abd7-9300e2bbdba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd0ca96-6af3-461c-8987-7c78ac896a34",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7252a9-baf0-441a-8bfa-160cb151170b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4723483e-46b9-4e8d-b74a-d15df249dc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7050f5c5-1fa3-4400-95a5-0d9880e4ac0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59745a6b-07c3-4715-b3c3-c3b74f066996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeec6e4a-260f-4663-a02b-9ce73b41a42e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab826f73-7ebf-4848-b5aa-fc5c94b3f78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e8d5ab-9522-429d-827c-19070619ebb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9de447-ed32-4c4b-a9f7-d1482aee618a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66fba55-3236-49de-a843-54122a756f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f6763b-61dc-4b43-9789-e627dd74ddc5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787c4638-25e5-4e33-84f9-6dc30aca3edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6841ca81-775c-4409-a66b-1de8cf4ad3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbb10d5-7f04-4de6-bf88-89503d13046b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d23a779-8198-452d-a96f-85ef77ff4619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38813ef-89a7-4301-9c79-d9f258fc85d7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f2efd-3c14-4cb1-a3bd-308d04ca902e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39059a1-0fd6-461c-ae23-68ed4cd8ee02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5c63ad-b96f-49c4-97c8-f13aa20b966e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f471e5-431e-4f87-9330-fa100c5a8584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4aeef8-42d6-4a07-8722-e6b0dd5da65b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568b113b-a49b-46d7-88a2-5788faee41f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1497eb-acc5-4460-9962-d01e9aae8fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19353327-4991-47be-8125-74b8cc43fcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad4e756-aed5-47c4-ac77-59c76d5873cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd0fbd2-0ed9-49ea-8f9e-7bff64643451",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f58da-6204-4ee1-86da-a37dbad064db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb52127-014a-4d40-af64-722ea426f200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c20853-854b-45a6-81b5-e1bc7cec7169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c597c2dd-3cce-4eb1-ac1e-e5ffcc327cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb7f8b1-5350-4934-bc59-6fce981da34c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a94c4b-2091-46b9-9e0b-e8ba2460a9d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "740686e5-49a6-4e1d-93ba-39c819e84a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59399a8e-42f7-4d64-841a-74c966849fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1428a5-943b-4bd0-96c3-676a98594aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e9b288-0789-46cf-932e-62550ff599ee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4085c782-babe-46b2-b18e-7dcdb69f99e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b763215b-4202-42ef-bf46-b3581441cb98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f0e779-e7bd-42ae-954d-241c802ff92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0f5b5b-cee7-40fd-8056-461c12934181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c36743a-7b39-4ff7-a814-de7b2b784aa1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b80178-fd74-43ed-88e3-730110f5dc67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "188b514a-4901-4f6e-9ecb-f653f02137dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2873c864-b1b1-452f-89d6-52950fa4293f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e616dd-2c71-499f-b457-49afcb65beec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f9d80a-58ec-4fa0-a436-02717b4f89c9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4827d3f5-751b-403a-9a4c-394ca0768ea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e93db3f5-7db2-48ed-94f3-1b6bd4acc80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66faa2f-8b1e-4d3c-afeb-fd7ca7de2a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcb7531-38b0-41ce-824d-6ce4b3c54067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00cdf98-1647-4ddb-8843-8716ec634c14",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee462a0-de84-4819-9310-e4b30d12b701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fcad90-86a5-4e8c-864b-ce40d6cc0ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5398fa85-26dc-4ef8-ae33-1ceaa5e6a772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21da66f8-7b71-463f-9f94-78f5bbd8bce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a4e915-4252-4b7c-8c19-ab3b365ab6e9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185d3b53-a0e4-4aa2-a372-200a5cad2d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91e020f1-fa58-46ff-b3f2-de3ab0c49e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d197345-76d3-4ad8-b0c2-bf6d1a74350a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88556455-c037-49d0-a54b-cd5be6e98d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f706c3-e693-4e9a-878f-b622c6eea5f5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aace04e0-6da5-476c-b1eb-23ff9318fe0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce3becae-05d3-4743-a9e4-13a2e698b264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d47075f-7364-4216-b62a-ffddc50baefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a693ea4-694f-42d8-95b9-d9e2350d601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d3bc2a-c67f-4c64-a814-c07a95cf5832",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600ba310-6faa-41b3-becb-a082dbe94755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eef0df7-2759-412c-b1dd-f4442e733034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed91993-c16b-4f68-afcd-d278e8297685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b617f08-d5a2-42a4-b00a-835bd97771cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b645ce3-9ff9-422a-b83f-899e069511f1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ede6bc3-cab0-46a2-b4fd-09e00b93cf9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6340ecaa-5a75-4bab-b831-351e1b9c7d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaed2ab-4e1e-47ee-98a0-961a1237786d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82660c8e-fbb0-499b-ac82-5f517c06f57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c33745-8ea9-4194-a1a9-9702ab067a15",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3fcd7d-0dc4-4d12-8497-0cb1641517a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a77c71-cd87-4af5-9a97-7e436ac67274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f076409c-651c-4923-806c-fc9520f4fd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b190f6c-f38a-480f-bf0e-9d727d73c847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ac3ff8-9a88-401d-b553-16a10bb0d078",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3518e0d-84d1-4557-ba64-75b0c71b7246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06a0a34-535a-4726-9ff6-82e15bfc03ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57f6920-242c-412f-840c-71cb109ec352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d904486-e83f-4b0e-9c2c-3a9ba05a19c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610a61c5-4a8e-4436-905e-ee1bd2b9c1e6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34db933-adf9-4d01-a77b-f2707d2040ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b017e484-dbf5-4b39-83d4-329958eb28bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b621ede5-ab8c-414f-bd71-a3ea876b1143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879452f9-e2b9-4d4b-879d-5e29d1fe4fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f0349e-0f21-4f14-8d4d-e59274c513cf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a9dfbf-96e7-4959-967b-cdadcd23e75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23064cef-61d5-4cff-bcf8-56446d0d7599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee2b5b9-3e52-41fa-a2d2-c1c74b7f3e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb42d214-49d2-4e62-b9ec-563ec8a06084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0db2f2-7fb4-4ae0-81da-1ec8a5a80dce",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1a2132-161c-4217-8e15-1d7de4a49dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e47700-bf5e-4f6e-a5e0-d1ade4ca3508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fea2ced-0d76-4bc1-ae64-98b9c88e3cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b643218-e6e6-4a6a-9374-d0857d1692a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d2b033-1294-4106-97d6-eabdbf577a9f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e37e6c6-b879-45e3-af94-bb6ff94de5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4d5368-aa94-4a33-8b0e-5d5d6b06c249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4cf8a6-1ff1-4a64-9485-0ccd10adffe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c134fa4a-81b7-47cb-b449-bc13ab755353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d46ed5-9a0d-4786-94d2-048607d6f90a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220a8f2b-cee7-46db-8776-8f01de2bf5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1df2f3-fba4-4eea-9640-c9d6174f717b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65697a0-9c89-4af7-8a2a-01f218935143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0079c8ec-42d8-4836-b2f2-be34a0e8cb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a60d3db-6d3f-4475-8c9c-f816c021a85e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928ab3e1-6d3b-463a-98a2-296cb9a9d115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97303ac9-8616-4881-a1e3-29a7cba551b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8085c1d7-e26a-4d9e-ae07-8b63840d65f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc3fd4a-eddf-415f-9c72-31e8bf09b9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1840784-f447-4136-b062-7a86b6940695",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aa64b9-3502-4c4b-a7c5-e0e894786859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de26144-a933-452c-96f1-ea50bfdcad5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfcff32-939e-4711-a299-0abd801d6feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2637c365-8d34-4865-b91f-2869d5965d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d42711-1fa8-450a-93f1-2ddd8406ca52",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02e4320-5247-48a5-b1da-4baff1ec240a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbe91d5-8e69-404e-8836-0f25b671761e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c148020a-378a-4912-bcbc-27cabe36c6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829658ae-a528-43d7-af6f-df237d750469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6777f769-7bd2-4875-a081-bb65801c0ef2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d37d98-011e-4efd-9c7d-020f9dd7672f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58430ae3-c518-4832-b8f8-3332e69c2d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d5c6f7-d6eb-4ff1-a590-f61f65467b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc462cca-503c-417e-9964-529892e4132a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2264f655-6b77-4f47-9526-1539e51ff491",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adcc56d-9807-4024-9646-d241ebefed1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c294a3e-f999-460e-bd24-d3e1bc4b4efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bbe3a5-76c5-4cd1-adf4-8d152c62234b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c322fbf-2303-42a0-8c4e-b5615f8f0ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdf63ce-f25b-4406-872f-d657098b5bf3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554b14c0-1de3-48d2-b357-f5c2470f07ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7b05e4-4911-4e64-882f-d131652c1e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba3ec29-8eb4-4f40-b611-06978582c5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67765411-266c-46dc-87f2-4b17b3035025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9712dcb-0c30-4ade-a17c-94efd1cf29b3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cf5997-1afd-4385-9caf-7b4940b139f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625554e6-9681-454b-97ba-0ba92dd79e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5f3f05-d892-4327-bba6-8e7a3901fa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470bb5ff-0563-479f-9e3b-d5cdee9dd2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869a402a-3fcf-4275-b572-8362380f23a7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfb8856-7c30-4b81-9aea-57edde4bb95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e34288-69eb-44a1-99e4-62356321dfd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b30435-62df-42a0-b54b-7b1d0a62e751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84fbbaf-37fc-4a07-8039-f1675dc78124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934533aa-dddb-4d63-accf-947912dd3742",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f76cbc-b11c-457a-acd3-780fdfac22ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0c850e-0645-4e44-82ef-b2a1c780e591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39e4d71-9e7a-4d02-8a3e-4a5c9316a92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e844dc9-f422-49de-8199-4dd7d86d7109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aecd22-c2a2-4118-905b-e56c8c3bf44d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bd7f2c-cf6b-44ed-a3a9-e469bba867b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841cbae7-f808-4944-afb2-f26adc391a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886e0f21-07a9-41ae-a0c4-f8b64d9f7332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58cd511-b11b-435c-bcfe-01aa10405732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f9540c-7b18-4e75-b1fe-8aca6f802e12",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58991d7a-d251-4047-93c0-0b170ca97b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae07f1c-913d-444a-8152-57b4c793206c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4dbd34-f51d-4d20-9034-35a7819e3c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaea092-f29c-427c-86c4-ba88fefcb880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c266d360-897d-4073-9746-3232d9334d53",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9f4f23-7867-4ce8-9f1d-0caa9f090cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e285b6-6844-4496-a3d5-172060db4c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b207622-fe83-49ba-9a3d-46f8b79e6772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc0e2fd-2c8e-47ba-96f0-f62fbde2011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4076e9f2-087d-4f79-9001-ef2e5dafac15",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e9c7fa-64ad-4b2a-bd78-8dfcc377d646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f349fe-4d69-478a-80b3-d1b085e7db9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1a76e9-3dae-4946-bba7-e671d465045d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7649f08a-44c6-447a-8b51-67cbfd7ae57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5fd311-551c-448d-b721-f97459b7ca80",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183e32e3-775b-4904-bffa-398ce7f2ca9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a6ff77-1c4b-4c51-b101-31cb7ac27e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b955c8-ec41-463d-b52f-5444374a01d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ad9f68-0f19-4c93-b934-f18dac7f4bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675e0a52-b86f-4b47-8bdb-10db69d9db14",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fc9022-fb3b-4a31-be42-2f9bdf35bbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6003b0d-19ae-4e17-b827-07f3c1554f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070c5f04-d321-48e9-9cf0-7b7340fa4efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2542f1cf-147a-47fb-a3d0-63d53d20654e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f929ad-2d22-481f-a8e6-1573c518663a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2344fc-436d-4a81-9dd7-8f1a19d5fb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c834d39-5929-470e-a57a-60413388803c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c1db2-097b-46a2-828d-d8319666f96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0edf75-b138-4713-8488-3d382a2d20db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9149ef54-0e0d-4bba-92d8-46f63b7634a8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c7dd7e-4e07-4190-a367-48fe5b14c5c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea216124-426b-4171-8611-c6dd1b3dcda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cdfde6-6318-4d6c-b45b-78248ec8dc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a169ddb-dfd1-4a11-823d-c2407bddb8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88731fbb-e880-45fa-a3f2-252c607ecd49",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ca482a-94e9-44e7-bb77-01980c55d56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ae550d-b0ab-4c88-9cc9-743403fb7ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4008bd77-566e-4193-b1b3-6bc647234a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac43be07-0add-4d3a-b0e5-78c8abdcb997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a1b9d7-c33c-4a4a-81a2-b85ed79f098a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbb35bc-57cd-4e0d-b6dd-2b63dd095b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac78585-e87b-434c-af06-0e22079bf63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37749231-17fa-49a4-b1ac-24b6e9730fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a494c1fa-a0d9-4e33-ba56-2a0722bf09a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4f2d0f-995b-4c65-bed8-59d6e75beb0d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b54987e-03aa-4d0d-b8f2-c4cd0cea231e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5c6652-5722-4605-a62a-bd621cbb1be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d523d8-0c2a-4ea7-9f89-7acf79f70374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363b1c56-1c53-4f45-b8ff-f11dde2da108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82633044-8d16-45dc-a8f3-466fd68c11db",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0f7f71-1f52-4053-a2c1-eee7db3ba369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecf3106-5356-41e0-817b-7e3f83b882a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b019649b-13fb-4656-b448-db468cfec30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2f607a-c56f-4253-8194-4d6a5f7fcbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba00282-4502-49b6-b05e-2c7bfa78d6e7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f170fb23-71bc-4e8e-beb5-b86ca012712c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691a70c4-beac-4a87-8e34-89311cf79dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddc1e0e-d691-4076-b16b-41dbe5d43154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a49217-584b-4cd8-abe0-6c02766150ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd10ac-03a2-4f89-8f1c-d92c1a4020d0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a5243c-21a1-46f7-84b0-b7fa63d72961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8843cd-4d98-4706-bb4f-9572fb7e0548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61965d56-a9bb-442e-b482-dc3b1db71693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b98a7d-421c-48a0-a85d-21881e82321b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c926785-faf0-4b92-958b-ac36b05c77bb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e5ee71-50b7-4213-9a90-b18f7c3b0332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d683ea2d-427a-426f-9c17-6cd34f11e48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dc5a9f-f917-4738-9d06-cb62974eff97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e5f558-51db-40f8-a4d1-b2923dd45ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9056cfd-a738-411f-af53-ca605d2f1231",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856aad5a-0ef7-48d1-9c4c-425b1fd2051a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb1ffc6e-bf3a-4978-8826-6cece0c8ccf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de823623-1b65-45a6-b956-1a16b04928d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544934d9-df78-4a5d-bbda-864114e30b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3294c3-ab5f-40e6-a0b2-66f796d2ff06",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0774192e-9e40-45ad-9fa1-c016d85b0bca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44eb600b-32e6-42ac-98a9-2a52546875cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961b578c-af2c-4fb0-87df-c259f5608650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ea7f90-1a01-4a01-8765-82265da160e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67e54c2-0d3c-483c-ba91-50e02fec176b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b56f4f-29ef-430e-8999-2ce0bde031fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d5ab279-027c-4b93-a31a-476e6ef93442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dbfcb7-931c-414f-b6d0-3d04965f51ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a144ff-793b-4698-a9d2-9b5b36c7575d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456d40eb-da3d-4f7c-a4c4-509988f71da6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25a4c0b-e1cf-469b-9400-046b68193128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62fa90ca-a6be-4824-92d5-55712d1ab288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6ac8c9-c9d6-41bc-8db2-b869561a1601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add6e22b-c7b3-402e-8bd0-1ecc68d3034a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6629d85-9fd1-4a94-802f-38f4b6f96c65",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21740bed-e374-46cb-b893-0f5e0890cba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35e2894c-fbad-4f8d-ac0f-b01b1c83eac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a85494-45eb-4891-ad6d-4c992a9e8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c776b563-94cd-4fcc-891e-6be9a5bb8091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac3e47a-bf64-4734-ac15-58617c81715f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150cc697-761f-42bd-a80b-651575ab3afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d3d856a-3162-4e6a-acd6-a0a47054ef16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fb4fe5-3532-448e-98a2-fe6cdb5d732e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fbbedb-3a0a-4a7c-8e48-76305a4b85b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09de7685-09f2-40ab-a6ce-e97d3b206b3c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083b604-fa03-4afa-bc69-551ce9a37cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f00107-f014-4432-b57f-1f8e64845f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8108a383-7ed2-466c-9289-bb323a0e06ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f178844e-d640-40f6-82b1-251324daf5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e68fbf8-0397-4139-ab9c-74e59db3851e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3282ce4d-3371-4ecd-91ca-f7da72ef4e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3153a234-1eba-4128-9733-087bd57166fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ef895b-c1ab-45d2-b22b-67589ce6b122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51a9969d-70cd-4926-b4a7-4362334d48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f190650e-ddc4-4c78-8135-7dce7a967881",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637cfcd9-236b-4709-88a5-6231b8333369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c9ed597-e899-4e11-be62-8c08221509fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544e39ab-5fb1-4f72-8344-ac4e866517bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f3171f-eb0b-4853-99c8-3b92022f4a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7489c7c7-2015-48e0-8b61-dd7f87388c94",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0330a567-1dea-45cc-82e5-18bba361c3d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9deead09-0a7d-4cc1-b376-c44c6ad6c08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b3e5e6-8ba4-4e86-941d-846a6239f938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cd84ea-e69c-4e68-aa63-4203dbd9494c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db627b9-94c0-49d5-a906-b32e87983edf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b3a5f5-1c5b-46a6-856a-da0c7fe186c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24296930-1117-46da-ad15-ef867d7a241a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421b6b9c-76b2-45a6-abf0-9e8e84d8c41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60453b5-a3a5-4754-b107-ee68d3b03743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cf2c2f-0964-4538-b351-5c6b5da8c0a2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54673fe1-d21b-4e47-ba87-5caabb902cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf5fa251-6f60-4e01-a45f-4ae45a5fb5e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d301e56e-e5d5-4a9d-84fc-cf8eb1d3e42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fe9f88-da7f-4dc0-9175-006f214640b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d35ac8c-809f-44d8-a595-b2dbf42ccd62",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b98690-39c6-42b8-9ac3-cc40d6bf1cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d06ec6-8d88-4b44-89e1-51794784ed86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f43ab81-de99-4681-b882-ba603205d066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8661826d-62c3-4e5e-be4d-7d3b6a153fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debaf601-939a-4098-b505-d2243a0d59e1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f5ccb4-e20f-4981-ba32-f1e7bc4f25d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed491362-55df-48d9-bcb4-71e4c5638283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9fa36c-cb97-47f1-bcd3-7fdd71eac5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3382c207-5e6e-46ae-ae16-079f62d8827d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571c13d1-dcca-4852-8e7f-a9131e2521fa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70674d33-c654-4dd7-80ef-124f7c6ad1f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53ea2f2-cbb9-4f5e-8ad3-59dd0034bfab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9112a4b-6ca0-412e-a21d-5acd9491b00a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9572af3a-dab3-4887-806f-56d73e1f17cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a43ea7-8d75-4468-bc09-9a50f1ab4719",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70423f31-0ab1-48d9-a4c1-8a178b37edf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b890c5d3-d804-4595-b9fa-2814f1f86b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88614940-4601-48f0-ae6b-ac9884e6b19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9d4cdb-11ac-412c-ae45-29939a864076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b823470-cb06-4873-a792-1dde85752bf7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1041cff-61aa-4d08-88cd-cd0c174c5989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "475f9463-146f-4050-aa0e-021552f9a6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c83e797-63c8-4583-8d03-20101831caad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f566f0-2411-45b0-9162-1705f0b7f9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348242b1-b3aa-42d5-8155-bf0b79ddafcd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d53f2d1-47e9-4490-8fd4-a72c212cef8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5ae8a2e-31dd-4257-bcaf-31a20842f4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcb1082-ef1f-4040-8339-bcc766a53864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe54afe-20ff-4a0a-aa26-deb06d488fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4f719e-2244-4cf4-85c0-3ede358a0872",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36829fb-2171-4ebe-a5ff-18f2af164908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3592893b-6a9a-4b3a-940c-3e18ee33bda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d0ce2d-b84c-4dc5-ad07-db9d138035c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f678a74-efd0-4d6a-b2d6-ba4516e9f579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d009e7e6-9726-4897-a912-41f5e4e4ae13",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132a317e-28a1-49f2-a5b4-338479b0b392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d30a997-5d31-4e16-85be-f2a5d57441e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b93651-13a8-4a89-9cec-1fc3f5904804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449dfc4d-33e8-41e9-8d22-c59667a7d0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e983e28-2b76-4eb1-b363-8a763abfb029",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff44123-0018-4906-9a47-1c07ae373066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd6f276-aef4-4499-9a2b-37908567f0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f63709-dd02-4678-aa1b-b667c95b4629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a1d008-da25-4cfc-8869-8f78451a1261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25200f32-9612-4987-a331-560877e9bdf6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726f9c66-97d1-49ae-8106-fe0f94e13b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dec9258-5d62-4f85-ae2c-1aa7b2995e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3579414-9e4a-4821-aceb-b5fbf4629867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca900482-7146-4ddb-b5c3-60a9cd198f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651f1b0c-d76e-4c89-ac91-5981f4c0ee9b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036a4f03-58c7-4aa7-906c-38681d18f3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b2cec5f-f041-49f2-9804-6862c1edd354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f455fec2-d511-41de-858a-1f6bbf433bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b7736d-11fb-4a55-ab4c-fe30e5f39682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b75f38-4089-4e0d-8832-e477c2b92cb1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f363c2-77bf-4c5e-9431-f7d45ccce97c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "746a5141-8dd4-4199-a410-60d54ac72c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1f073f-5200-47ca-9659-37d10a178c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87c17b0-e7f3-492a-a2f1-bb97860507d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f50eac-89e6-4572-8bd1-885e4efd0b31",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4281bf-9d66-4baa-a11a-a8f1cbf89943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff9d254d-ddb4-482f-91c9-b3de9583c2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0774fb94-3690-4c7a-8e71-eacf4160b3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f3888f-ef57-4a18-94ab-63107a20aecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad182e-122a-4bd5-8bb7-3dbf3af72c61",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a050b3-057b-4d50-bea5-ebdf9654f690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614abecc-e422-4927-a46c-6ccc525ff637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed896d6-cbf8-48e0-9dbb-207c074c2762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39816647-6c73-4881-8fd9-79c8b28a07d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18484543-a07d-4034-8fd6-f92b7910dd5c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cfb9c9-64d8-456c-a42e-0656e104c1b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7e17fe-be8c-455f-9bcb-64f4ca86a097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8a24a1-c226-4f42-98af-4be98ac71b36",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5f5d68-83cb-483f-88c6-6ba254565acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9500d9aa-7bc4-4fb8-9f54-3b5e4ab7e296",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67907091-9f11-4a60-9508-55ae51d1cd2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f558c846-694f-42d5-a182-379f0047ceab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a567d707-f09f-4c9b-bf22-c2d3c737b82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a634928a-244b-4750-be54-3b7845108f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4c970b-4ca1-4f27-8d4d-d6e7cd350e96",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e49e5c-dfbf-4de1-89b4-bfab274d87e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c058ab12-6f2f-4f5f-b9b0-e18e2c43edd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3415de57-7c59-4020-84c6-e5f24861a04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd944a3-f556-4105-9496-c050b06fe45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5c4174-20be-4de4-a959-61c5e78dd781",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8433644-7b85-4995-ba20-5e9b14fc857d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4ab008-9565-4a46-954b-7133c826ea34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a443bfc1-cd4a-4e85-bc72-bb116baf0ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d2e175-9ce3-452c-a5ee-5c47c6df054e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f465f4d-3d98-4116-9f3d-b5b55a5f9037",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e2c1b1-0757-4373-ac30-86f4a3365899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec79afdc-35b6-456e-bbf5-67678d269aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb8ea48-88f0-4dbe-a535-a112726680a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b3a830-d80a-4293-975a-3372e85f04e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f139529-ff00-4062-9534-7c4cc839d015",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f514ea5-c977-4462-a4a9-ec1deb47289a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cceb0202-c07b-4e13-a66b-e38ddcd2bb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c720c9-b986-4ff6-bdc8-37e72b59c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55fc722a-22e3-4edf-90ad-780dba550223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8a0d2c-6986-4bdd-89ee-3bf063883342",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5ea983-e7d3-4613-843a-65c62f06f804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9ec5ee0-a75b-42f2-87e3-ecdd11fa04ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e8c37a-6f5b-4319-8aca-5dc8bbe8bfd5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eef74c7-dc78-4d5b-922e-cc0f4923b86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbf8dcd-b420-4e76-ac48-82a1e1213e4f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57367ce3-8e2b-4fd7-b4bf-2afd0ef90905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b03532-2aed-41bd-be87-abddb422ee22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1257d3-0329-4f60-beca-6e10f0be52a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1518389d-c6a4-4389-8aa7-402bad4e29c3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "307eb3fd-d36a-4c04-9071-52bd185f264d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56dcca9d-2b2d-431b-a123-0464e478a37a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e88d6c-81ce-45f4-a07f-827816c75f9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb8edadb-eaa1-46b9-92a0-c59ad5ba43bc"
                    }
                  }
                ]
              },
              {
                "id": "7ca85d05-7950-4ce8-9a5e-35f75963e291",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ff57437c-6e30-45ca-bcff-8da51162f7d8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d032dd24-418f-4872-99ce-87a8ee729334",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4fb91e83-3a0f-4a2f-b069-d5e8547558b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f304cc4-3ebe-42ae-9ca4-33ea1aaa4412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e7f7344-f6f2-4751-a447-afc7da4b5b52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "641e5ace-3dcf-4c0e-8509-f0e4d4d71b5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8942648-0b62-4aec-8596-e8b7c398f232"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fb78d13-6b93-438c-bf77-4c2aab8f1ac8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edec6a42-78c2-4e30-8c57-beef60d846d1"
                    }
                  }
                ]
              },
              {
                "id": "0c57bc12-95d8-4e5e-9687-c56043af9fd0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "89b7d36f-413c-4267-977d-5d3b0d231b10",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adda17e-ca92-481f-9460-9cdbdaaa123d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "11d98573-9aa3-4904-af23-b2c084f07304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83dc342-bee7-4169-a3b4-d026312fd829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6471af20-6c56-424a-b3fa-363a76c6fdd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eed98d80-bfd2-4241-ad0a-4cc725059a6f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23b8e4a8-2e0a-44b9-bed9-a72c07d04eb3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e7927ff-0d13-48cb-9b65-447b487b51a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3fa43f68-22ed-427a-ad50-f7b2402b2222"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5655da3-03f0-4f5b-b0e5-231223f545a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f58a7c3-6c05-4fe1-bd82-d3190433991b"
                    }
                  }
                ]
              },
              {
                "id": "28fe05ef-213e-4247-9c56-68bd5c3a317d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8d89d30-bbbc-41bf-8d58-9b707bd75617",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "375440df-9711-4d42-a339-2f4be7efd3b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f96456ad-2b1a-40f7-b305-be2aee2898dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc6d3c0a-533d-45c7-a43e-90bd9fe18eb3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "071e40e1-ce06-4f29-958d-02b6d8c4dca6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "49f233e7-6e8a-471c-bf0d-c6f8b5e52be7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b3e3852-3f13-4bbf-8909-cd0ddfc11416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dfff60a-02d2-45fc-8ce2-33ff2d3ce6a7"
            }
          }
        ]
      },
      {
        "id": "ea9a91ae-c8ff-4839-963b-54c758667589",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3e67b8a0-d871-4268-8e74-f93bc75c8eb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2fde7ac-24d3-497a-9329-a8d4bf0723f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2870ac68-6c26-45f2-a995-f42fe0d9ae8e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44383232-2d05-476e-beef-0eeeaa488b7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fff6ac0a-afdc-4725-96ad-f1563f4939fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a9f9f6-8aee-4db8-94d3-c764d9c2384e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6885eeee-c851-41d1-963f-321a49f2b655"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a43288-65eb-4f43-ba00-99297b0c47f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db43ba9d-bd9e-46ab-905b-80a94441fa1e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "369ad316-a85d-45a2-9e8d-3a5557fce51a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fb09664-e229-4ca1-9f60-765fc991d7a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "643d808a-3314-4733-8ec6-f6b01b84c176",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a1dce949-f303-4534-aa7b-6f6638810fa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f296808-f750-4cad-837b-4856304e0678",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e80812c-9fd9-4898-a791-49c2bd522264"
            }
          }
        ]
      },
      {
        "id": "8f300f1e-4889-4e76-8b2a-0a4e9ebda128",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aeff1be0-6bc4-417e-8a66-d0e5f6740259",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95a566e3-348d-4fe8-a335-d11c74b52382",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26ac1cc0-226f-4156-a7e4-1aa14d7270ae",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba07510b-32b8-4ad6-bfb2-bb73fdb94c31",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89fe17ff-9bea-4ccc-a080-2e454fd48ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c57cc3-894e-422a-9f37-ea8d86c09086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a71d08dd-cca2-4f69-84f5-9821273014a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "938b8fc4-d5d0-4d4b-a8d9-6568fed9606a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c26e5c10-70b3-423b-b1c7-62691cc07f82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1e68075-98e0-450c-b45a-cb9676ae1f13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd150081-9b8f-4106-9d9d-043f1944f386"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80f22307-e45d-4593-b278-b1f63704417a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "369a0adb-15c7-4b05-bec9-2b05c143e2b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a6a5331-97a9-4e04-b7cb-fa11f7b4b99d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2664b403-82a7-4992-8e43-f149ca8fd68c"
            }
          }
        ]
      },
      {
        "id": "330d237a-ec2d-4adc-aff8-dfefdc4b1ce0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3d256409-dedc-45aa-aca5-eabed69193ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f26dd02-2614-4eaf-b69a-8b6ef39819d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a85c2768-243a-4eab-a650-19b23eea225c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96320f2e-796f-4974-a32e-aab88e6e6f06",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ce80633-b273-49bd-b3d9-ca06cf5cb2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7296d2ed-736b-4561-97da-b0bfdd3d0e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15d86b5e-5c46-42b9-94b0-513ec0e72feb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77b52c17-3568-4827-a44e-c302b47ed2df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c8f0f7a-8dea-4d53-a499-344b7c219a18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ab88121-0515-41bf-a20d-9eefdc0376bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abd942a6-63c3-4053-aeab-59405ad93d3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6caa27c-118e-42d9-8536-f8d60b763f6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b56a0d31-4d17-4a1b-9891-745d9f5eb7ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9bde5bd-7069-4065-80b1-86f10031779f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7759026-2fa4-4599-967b-fabcb95c4dd9"
            }
          }
        ]
      },
      {
        "id": "799cc3ac-f4fb-4311-ad78-22ae143b882d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d11d9c2-8cb9-4623-a776-347bc5852fd9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54dd37e2-cea3-42d0-a5e0-2e1f9416708a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c759c60-c39c-4450-9af0-c89cff8e024d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5998e1a4-0464-4f97-8951-71c84bbfda75",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56dd13d9-7de1-4284-9c0b-b27488a1cbcd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.31690140845062,
      "responseMin": 15,
      "responseMax": 2263,
      "responseSd": 238.52662088176206,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693009866375,
      "completed": 1693009914805
    },
    "executions": [
      {
        "id": "0ed6b227-976e-4a9b-adea-073c0ffff3c6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "466a3040-f19c-4d49-a35d-4848f572527d",
          "httpRequestId": "421a47e9-0c51-4477-93dc-6b7aa799a80d"
        },
        "item": {
          "id": "0ed6b227-976e-4a9b-adea-073c0ffff3c6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f69a2339-ba44-41ea-ad7a-dfd1e0237959",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "aa01923b-6f85-4e12-bbbf-3fad76767e2b",
        "cursor": {
          "ref": "a2db2436-7ea8-44fa-ab16-f785084118ee",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "347c1f7a-730a-4fb2-8fce-6208db7d967c"
        },
        "item": {
          "id": "aa01923b-6f85-4e12-bbbf-3fad76767e2b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "684b6763-7555-4dde-b5ce-27505de5369c",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "f185a622-9cba-44eb-b64d-a744299a3565",
        "cursor": {
          "ref": "7b145dd1-e38f-4959-8c62-1d7cd1f26c8f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d27354f-20e8-46d6-8b5d-d28157008631"
        },
        "item": {
          "id": "f185a622-9cba-44eb-b64d-a744299a3565",
          "name": "did_json"
        },
        "response": {
          "id": "c00fa456-8044-4933-b948-cbf6c975eb49",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706bbda3-0438-4863-abfd-5c947caf9ba4",
        "cursor": {
          "ref": "0b4d5536-c551-455f-83dc-85a2dbe171eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbbc4af0-5676-4539-a291-4cb78c026dc3"
        },
        "item": {
          "id": "706bbda3-0438-4863-abfd-5c947caf9ba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0bcbcff0-2c52-4aaf-864c-a781bae51acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706bbda3-0438-4863-abfd-5c947caf9ba4",
        "cursor": {
          "ref": "0b4d5536-c551-455f-83dc-85a2dbe171eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbbc4af0-5676-4539-a291-4cb78c026dc3"
        },
        "item": {
          "id": "706bbda3-0438-4863-abfd-5c947caf9ba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0bcbcff0-2c52-4aaf-864c-a781bae51acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8749e5b5-8a39-4b84-902f-87358cb0f815",
        "cursor": {
          "ref": "6b98493b-7f0b-46cf-80ef-43bb68c75abc",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "98e766e7-21ff-4fa7-a7ae-e5ef56e48cf1"
        },
        "item": {
          "id": "8749e5b5-8a39-4b84-902f-87358cb0f815",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eed2e9f4-b533-49c6-9436-aff280c97e39",
          "status": "Not Found",
          "code": 404,
          "responseTime": 122,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636cfd04-a65d-40ef-b5aa-62eb47bc87e5",
        "cursor": {
          "ref": "b82da0e2-370a-43d6-ad7d-41f99248273a",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "311d04df-6671-4d7c-b779-6967095e7f27"
        },
        "item": {
          "id": "636cfd04-a65d-40ef-b5aa-62eb47bc87e5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5dc8f45d-1571-45ab-ad27-aa7f48b3a509",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9ec620-0235-4d59-a8b0-0ba70d242487",
        "cursor": {
          "ref": "eda20c2b-f104-467b-be42-1917de8a2610",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "50b2b9bb-79b2-428f-be02-dcfd209f3958"
        },
        "item": {
          "id": "1e9ec620-0235-4d59-a8b0-0ba70d242487",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4f65a14a-d805-48fa-bff5-b35f03c0eed8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e542b6b0-5b04-41ab-b4dc-7490e64305d6",
        "cursor": {
          "ref": "627d9bcf-b606-44a2-9441-ba77cdda1e34",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "540b1946-9a8a-4d10-a9b2-4f6ae2d18f3a"
        },
        "item": {
          "id": "e542b6b0-5b04-41ab-b4dc-7490e64305d6",
          "name": "identifiers"
        },
        "response": {
          "id": "9d9f452e-033e-46e7-a5a8-476978dc7a19",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fb5d46-7eaa-4467-80f2-9424e02f1d8c",
        "cursor": {
          "ref": "7ee575df-3f78-4a31-9bb4-c0e0326b5bcf",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0e1bd314-bf0c-4ae2-95dc-dc0edd909d1a"
        },
        "item": {
          "id": "07fb5d46-7eaa-4467-80f2-9424e02f1d8c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6dcbe255-1205-4431-a849-2f54375cbc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4997f22e-1678-42f4-8cbe-7b5affd87004",
        "cursor": {
          "ref": "9f431a10-293a-4570-8f07-1e81a2fd6f55",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9bc7f09a-752e-45d3-93d6-4f16b63e2f89"
        },
        "item": {
          "id": "4997f22e-1678-42f4-8cbe-7b5affd87004",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f0f53427-74fa-49c3-a2da-32dd0b6a71ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea0f3f4-7cb1-4b11-8072-66813bfe4a47",
        "cursor": {
          "ref": "405d04e6-c6a0-4184-9949-0cded2a35456",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "321edd7e-33f6-436b-b45f-0604667c4ef9"
        },
        "item": {
          "id": "1ea0f3f4-7cb1-4b11-8072-66813bfe4a47",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ddf9f475-aab3-42fc-9f4b-30bb5cf2b646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debee1e3-0b80-4534-a616-3743db8f55d4",
        "cursor": {
          "ref": "e2ab821f-289a-4f35-8f10-56543df5b7f6",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4160dc2c-1f6a-417d-b4ae-8d93eee9f58c"
        },
        "item": {
          "id": "debee1e3-0b80-4534-a616-3743db8f55d4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d6d556c8-5ac6-4891-8e0d-bdf76c66c2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cffd62-7fb2-4583-8695-2dbb168e42aa",
        "cursor": {
          "ref": "665cd56c-c668-4eca-8366-ab66be0fdae9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "294c0390-5522-470f-902d-16c6e9de7842"
        },
        "item": {
          "id": "52cffd62-7fb2-4583-8695-2dbb168e42aa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "670b6abd-a543-4330-8cae-afcbf7ee3b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a3c6d4-246e-4141-a143-cac773418d54",
        "cursor": {
          "ref": "bb8cc773-9174-477d-9e9e-8c1103fb8436",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fec574b6-b267-4fe6-95c7-ff6474612903"
        },
        "item": {
          "id": "e2a3c6d4-246e-4141-a143-cac773418d54",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dd6581a5-12f5-425e-b1b2-6a8f69a13ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b27507f-c5ad-48a1-aa2c-e8c89be56196",
        "cursor": {
          "ref": "233c1947-4f26-43b1-9b67-bf57a17c0ead",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9100e64a-796b-4b94-b79b-d3674dcd3647"
        },
        "item": {
          "id": "1b27507f-c5ad-48a1-aa2c-e8c89be56196",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c2dfaf6e-afdc-4ab2-9698-08b9146166ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333f850c-66c1-4a36-ac67-1a03a0a429e1",
        "cursor": {
          "ref": "328e6e06-4df5-4032-a557-445e73e3ef29",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5ca773f2-70be-4215-9ad2-50f74cd6d2e3"
        },
        "item": {
          "id": "333f850c-66c1-4a36-ac67-1a03a0a429e1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "78e4f4f9-ea5a-4873-9471-4775500f2c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8197f68a-1dc2-4bce-90d4-7376ecb29354",
        "cursor": {
          "ref": "2d16e8ba-307f-4baf-aee5-112a3db6581d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9528bd53-04c9-46fe-83d8-654c77df9404"
        },
        "item": {
          "id": "8197f68a-1dc2-4bce-90d4-7376ecb29354",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2090dd33-5a99-45f8-84aa-6afde8d56a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d98c1d-4bc4-41ad-8d4e-fc0691e9ef32",
        "cursor": {
          "ref": "1f285d2c-0c63-4839-a223-72e619af9ed7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bf8f2b56-851a-4fef-8058-80e6a0176d55"
        },
        "item": {
          "id": "e2d98c1d-4bc4-41ad-8d4e-fc0691e9ef32",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d98102f4-b82f-43f2-90bf-b5a548066abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fca1b0-bfb0-46d9-a7a3-4d30d220491d",
        "cursor": {
          "ref": "39defd16-1cfd-4289-8999-d2e92b4f5c16",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "768b351a-9bed-4e72-b06a-c94a243a6a4e"
        },
        "item": {
          "id": "42fca1b0-bfb0-46d9-a7a3-4d30d220491d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "54d3b110-8174-4083-97b5-8cf407485933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fac663-f36c-425a-86b5-e6cb8946ab51",
        "cursor": {
          "ref": "290e305a-e82e-44fe-aa05-9a60442bbdcd",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e0c101b5-2b04-4385-95ac-28aa84e835d5"
        },
        "item": {
          "id": "43fac663-f36c-425a-86b5-e6cb8946ab51",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "01941f4f-6091-41ee-bfa8-97b56b4a8a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ca87b5-13cf-4c51-be75-cc852e79d27e",
        "cursor": {
          "ref": "4b04d6e7-9d95-491e-9fcb-d19f8b03bbed",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ba160b15-5da8-4771-a813-68973e1d1c2a"
        },
        "item": {
          "id": "c3ca87b5-13cf-4c51-be75-cc852e79d27e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fbb21fc4-d9cd-4ea3-a468-aa8df472e29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdd846f-0fb6-4a5d-9418-f22289cb844e",
        "cursor": {
          "ref": "9d9882de-2b08-4aa3-a237-21b178127eb8",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "98c02bfb-7cef-4b01-ae93-a91f39885a68"
        },
        "item": {
          "id": "fbdd846f-0fb6-4a5d-9418-f22289cb844e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "372a3cdb-34f3-40c5-9ae6-64494bf7d9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2e85bd-ce9c-4bea-b858-12e9c69edfc5",
        "cursor": {
          "ref": "4899dc8a-e80f-4c28-9bd7-cfaa45ea11a9",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "59bb6167-e3c5-4311-9eaf-fbc6d11d9a8e"
        },
        "item": {
          "id": "3c2e85bd-ce9c-4bea-b858-12e9c69edfc5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "20172837-ec44-42b5-9014-1f8674436003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c9a812-af2d-4332-8541-20d5c1995fd7",
        "cursor": {
          "ref": "de981115-6ea5-4c39-bce0-6a5371b35f88",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9dcd7959-df13-4365-9162-413d3643051c"
        },
        "item": {
          "id": "02c9a812-af2d-4332-8541-20d5c1995fd7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "391fa7b9-b03c-42cf-b321-688775c2ba55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a6bb2a-a64b-476d-9eb1-59ddbe993507",
        "cursor": {
          "ref": "8561b49d-e6e1-4b9c-ab78-2f8cc08bfb1e",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "25584ee0-a691-4320-806a-741bac161bb8"
        },
        "item": {
          "id": "18a6bb2a-a64b-476d-9eb1-59ddbe993507",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fd8840ab-059e-4c90-9b30-bd6fe606cc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5773ee9c-6164-415f-8438-c96f48e557ec",
        "cursor": {
          "ref": "adc590c1-e3df-4635-87b7-971a95617596",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8113d26f-ad9a-48bb-a6c4-b39c95dd0626"
        },
        "item": {
          "id": "5773ee9c-6164-415f-8438-c96f48e557ec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5d322cde-fbe5-4718-950b-22062144ee5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6f4aab-46ee-4716-8a03-c98937ed3380",
        "cursor": {
          "ref": "76b55b10-190a-4bde-8feb-8ad03cc88547",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c13ac33b-81b8-4774-844c-d01f71519e64"
        },
        "item": {
          "id": "4e6f4aab-46ee-4716-8a03-c98937ed3380",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "55bec7f5-68a5-49af-8710-6ccbeb8b0bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2439e68-f184-4d8b-84a1-8bd50a58a8b3",
        "cursor": {
          "ref": "923491b7-a2aa-484e-b7ad-62149432a48b",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e0ec1875-a4ca-47ac-8adb-fa11ee858220"
        },
        "item": {
          "id": "a2439e68-f184-4d8b-84a1-8bd50a58a8b3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "90bc8ab2-fb7d-4481-94db-7a7ffae11c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27266432-b618-42bd-aa60-9bb36f8c2183",
        "cursor": {
          "ref": "b1e15156-fe99-421c-bd05-e5f0944f1e3a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a123a639-5003-4095-a55e-7537b0f623b7"
        },
        "item": {
          "id": "27266432-b618-42bd-aa60-9bb36f8c2183",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5ec484a5-98df-452d-9b90-0a61ac47bc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7801afbc-d905-4f6a-8c94-3589ba14e9de",
        "cursor": {
          "ref": "6667d48c-059e-4650-824e-1e4cc9471346",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1961b564-dfd3-4dee-b175-7aa11e2f0af9"
        },
        "item": {
          "id": "7801afbc-d905-4f6a-8c94-3589ba14e9de",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e413944d-079b-49d3-86f5-128034a1f3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165f3419-67b5-4bce-ae72-0ec03973a674",
        "cursor": {
          "ref": "5f64c139-f8c8-458c-ab9f-49dbc4a8b46c",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "228a41c0-32dc-44f6-9b41-f3a74a83861e"
        },
        "item": {
          "id": "165f3419-67b5-4bce-ae72-0ec03973a674",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8a67f8b2-09fa-4c3a-8b79-b9e7b7a01c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5303daa-b412-47c2-911c-898ba0bd3d89",
        "cursor": {
          "ref": "e36ee48c-7fc4-49a9-877f-f9b21b06e04d",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e5a0eaee-02d1-47dc-b024-a3537b08331c"
        },
        "item": {
          "id": "b5303daa-b412-47c2-911c-898ba0bd3d89",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6fd2aed3-c85a-403a-b72a-4f14d78b78ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b213a26-d60e-4652-b0e9-59aa488d684c",
        "cursor": {
          "ref": "6ef96184-fd23-40db-9dc8-512581e4d54a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "68c6c8b8-ee0c-4a17-a911-df4db8ae5e1e"
        },
        "item": {
          "id": "4b213a26-d60e-4652-b0e9-59aa488d684c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6f0a8027-4cfd-41bd-b49a-a0e41ffffa66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8a7c45-7596-44e2-a61c-cef2d2729113",
        "cursor": {
          "ref": "24dd2dff-f19d-4485-9e06-46157ec1d7d7",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9f1ebff-a2fc-4d12-8081-a8706e9b217d"
        },
        "item": {
          "id": "bb8a7c45-7596-44e2-a61c-cef2d2729113",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "05b8b480-4dd6-4f2f-b2c8-ba665e622572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d575e082-bc12-484b-973c-bcbbd75d3f82",
        "cursor": {
          "ref": "e90e56c7-ee59-45bf-a369-2ba7bafc38df",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35ed5033-e52d-4653-b635-3458aaaaff10"
        },
        "item": {
          "id": "d575e082-bc12-484b-973c-bcbbd75d3f82",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "649847bb-5372-4a67-97d5-ade7faf702af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a784a058-64e6-41f4-8997-1dc7e807ea59",
        "cursor": {
          "ref": "52f53b85-c84d-464d-afea-d2f5bc4ec07c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "07b44dd7-6981-4d03-a893-5fe74a949b91"
        },
        "item": {
          "id": "a784a058-64e6-41f4-8997-1dc7e807ea59",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b2553430-6314-4690-95a2-7d3e65feba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9612ad-9e89-472b-8d9b-eb72d35a53bf",
        "cursor": {
          "ref": "8e672b6e-e437-4ceb-8557-f88b32af8f1b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a4170456-e9f7-496a-ab0b-906d55a81c7f"
        },
        "item": {
          "id": "8e9612ad-9e89-472b-8d9b-eb72d35a53bf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "84b4a64f-b3c0-4be2-8390-3fa3826cff95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a48ad0-0734-4037-b6ce-f58dbde25628",
        "cursor": {
          "ref": "48850094-41e0-4440-8d53-481f4b203339",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "599bdefb-8119-4428-a3a5-e1e31fa06fde"
        },
        "item": {
          "id": "45a48ad0-0734-4037-b6ce-f58dbde25628",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bd6a713b-b41c-48fc-9f3c-9029bb066fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23a8f5b-efe9-4590-b2e2-23285baa61f8",
        "cursor": {
          "ref": "3c0021e1-6a60-41b0-a1bd-1385c881127f",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "377aee50-b70d-46f7-a956-4f4037b9d50b"
        },
        "item": {
          "id": "c23a8f5b-efe9-4590-b2e2-23285baa61f8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "40f14574-8bb8-4d8c-b350-bee82cfbaccc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e8235df8-a4d8-4f28-91cf-d88e2682439e",
        "cursor": {
          "ref": "f7e68445-6cef-4563-9b92-57102fa07e28",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd3c9973-bbd2-4434-9a71-5fe6daa776b1"
        },
        "item": {
          "id": "e8235df8-a4d8-4f28-91cf-d88e2682439e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "72b4d4b1-53c6-4df8-8847-c8459c800c11",
          "status": "Created",
          "code": 201,
          "responseTime": 2263,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "287eaebe-9e95-40ac-ab8c-69287a9ef3da",
        "cursor": {
          "ref": "d8e52803-09a8-4d27-a1cd-eb60e217c84e",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "29b725cf-9907-4fe3-92e2-54beeb1d6213"
        },
        "item": {
          "id": "287eaebe-9e95-40ac-ab8c-69287a9ef3da",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "17ccee32-6f77-446b-b223-b1aace79468b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fceb9a13-8cf4-441b-b375-1959f01099e1",
        "cursor": {
          "ref": "1ac79a74-f8d1-4fc5-a8c8-8d888000b77c",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7b25e1ec-090f-4d37-984b-1c216218fb7e"
        },
        "item": {
          "id": "fceb9a13-8cf4-441b-b375-1959f01099e1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "843abad4-8959-480f-84f9-9ee0b2ce762d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb091f50-a125-47c6-8667-e10783d947ac",
        "cursor": {
          "ref": "683d7e40-6510-4f25-8ccb-0af4794f11c6",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4a44afd2-b169-42a5-97ef-ddc96b40e809"
        },
        "item": {
          "id": "bb091f50-a125-47c6-8667-e10783d947ac",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3eb95d9d-e089-4ac6-86e3-7bd9afb43a53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e32bb154-9230-44c9-b7d6-06b1a4cbd4c2",
        "cursor": {
          "ref": "18f8e398-4d4b-4fbf-a6f5-ffe30a171927",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b8c71ae-b04b-4961-abc4-b18d1f63b555"
        },
        "item": {
          "id": "e32bb154-9230-44c9-b7d6-06b1a4cbd4c2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "be7d8c7c-1940-4c7c-bad0-fdb900f11b00",
          "status": "Created",
          "code": 201,
          "responseTime": 1295,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ff39326c-a584-48a1-9d50-4bcf6bb9507f",
        "cursor": {
          "ref": "d68e78ef-4e62-46bd-b9d9-8c169c9bca5e",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0629146a-c120-4a45-a3ed-549c5b92e8d3"
        },
        "item": {
          "id": "ff39326c-a584-48a1-9d50-4bcf6bb9507f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c16bc47c-dfe2-4b87-a3d9-feafb0bdc913",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8ada73da-78cb-438a-aa21-0cf9c00e3de5",
        "cursor": {
          "ref": "d907b995-122e-4661-824d-d9cd46c781ce",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0afaa8ef-1d9e-4c57-8cf3-cafb1d6de892"
        },
        "item": {
          "id": "8ada73da-78cb-438a-aa21-0cf9c00e3de5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a6bf6760-a395-4241-bb7b-0c29963b0fe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 951,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "08b775c7-a5ce-4c47-b960-daee7883ec70",
        "cursor": {
          "ref": "fdbef799-e8b6-4c5e-9244-a46515723150",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f5057c36-e5e2-4b2f-af67-21934677b786"
        },
        "item": {
          "id": "08b775c7-a5ce-4c47-b960-daee7883ec70",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "79fd4e36-ac59-4ae1-9424-82f03e9e312b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f66681de-29ec-4e7c-b121-92d6fb06af7a",
        "cursor": {
          "ref": "79735c93-5acb-454b-8b99-051a8673aee4",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bda86f01-86d2-46b4-98a9-8d5997bfd275"
        },
        "item": {
          "id": "f66681de-29ec-4e7c-b121-92d6fb06af7a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "480caf82-1934-4218-8a91-c0fbda5e6bc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9c49832f-63a6-4d69-8aab-70aa87772f6a",
        "cursor": {
          "ref": "274e4dfb-972a-4d90-8668-c48654f42031",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2963c328-333c-4de5-b3fb-fe1d8f9b8f10"
        },
        "item": {
          "id": "9c49832f-63a6-4d69-8aab-70aa87772f6a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b43a319b-e5e5-4f9c-895a-370470bf77a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3cc7ba57-559a-4664-afdd-a3516dad7bab",
        "cursor": {
          "ref": "fb17b2ce-fe1c-48e3-935c-93765130a7ee",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a4eef346-8741-4633-8a47-0f90916da7df"
        },
        "item": {
          "id": "3cc7ba57-559a-4664-afdd-a3516dad7bab",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5b1c907c-17f7-4bf0-9fe9-d9b38fa00817",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "869144e3-601c-458c-9aac-f9577bb8dfaa",
        "cursor": {
          "ref": "419031ca-7391-4b1f-96a7-a0e91abb29e3",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1547e2a2-c218-4ca8-a073-f8f8c33c7d71"
        },
        "item": {
          "id": "869144e3-601c-458c-9aac-f9577bb8dfaa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9153ac7a-7511-4524-a5b8-55cde86ad3cb",
          "status": "Created",
          "code": 201,
          "responseTime": 1151,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "877328b8-3169-4bbe-a34f-79946c2945e3",
        "cursor": {
          "ref": "fd2ed979-37ea-4593-acf7-14aa2d7f9749",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3a482b4c-535d-4c2f-9e2c-969e3e55d6a5"
        },
        "item": {
          "id": "877328b8-3169-4bbe-a34f-79946c2945e3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d67ce0af-3831-4656-b01a-eba328ee21f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a17b41-2872-4f35-817f-5d17ad06ce17",
        "cursor": {
          "ref": "3aa866ba-66d0-4a40-bee9-d996c9cfce7d",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4621ee35-3951-407b-b59f-df8a55e346e9"
        },
        "item": {
          "id": "08a17b41-2872-4f35-817f-5d17ad06ce17",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c4fe1d3-ce30-4d23-9d6d-37b7d6c26640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373112c9-5186-47a7-9051-25e0acadda91",
        "cursor": {
          "ref": "22b828cd-8aaf-4b25-9b00-cf91ff7be1ed",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d38d7a2b-e676-42a2-8743-6e99c567e50e"
        },
        "item": {
          "id": "373112c9-5186-47a7-9051-25e0acadda91",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0470f4e7-8295-488b-96e1-1dba51d764e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb828fa-01c8-426a-a9dc-71a3490ef30e",
        "cursor": {
          "ref": "b557e67c-1aed-4078-981d-5844e0d151cf",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "708e5cfb-91b7-4cb9-be50-c596bffb8ffc"
        },
        "item": {
          "id": "6bb828fa-01c8-426a-a9dc-71a3490ef30e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "69ff0f71-6072-41f9-9f93-be5fed8b7a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc37de30-f973-4c97-9ffd-d429829b068c",
        "cursor": {
          "ref": "b893af10-31a1-47fb-b375-027fa0a7e7e2",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3f9541a8-a064-4db8-ba3d-2c58b760b77e"
        },
        "item": {
          "id": "cc37de30-f973-4c97-9ffd-d429829b068c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "210b5755-68e3-4515-8800-6b458312a1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80873b89-119b-47fb-97e5-edbc6a0f4651",
        "cursor": {
          "ref": "ac5f2880-033a-4b55-8405-a5953abf1fa6",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "241d9a86-80cf-43b9-9375-7d2f1a845e68"
        },
        "item": {
          "id": "80873b89-119b-47fb-97e5-edbc6a0f4651",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "974187aa-ff9e-457d-8f68-82a6a66c2eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32b4153-34fb-49d6-8606-5fad89630da3",
        "cursor": {
          "ref": "4c0cc014-e1d5-4f3a-8720-d2981306e18b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "296eaa95-11a6-4a22-8976-7f98191198f7"
        },
        "item": {
          "id": "f32b4153-34fb-49d6-8606-5fad89630da3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "752a80d5-453e-47e0-8bb2-465f2bcc65e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc725a2-16ae-4456-8343-250d1614e886",
        "cursor": {
          "ref": "8f18c57a-1742-4f6a-9a39-510e56349760",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "40dc9710-ab3d-419f-830b-8da9f18c8445"
        },
        "item": {
          "id": "7cc725a2-16ae-4456-8343-250d1614e886",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eff5336a-d7aa-4491-935f-0bc3d3d8b9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9607334d-0c4c-42d7-8251-68495723c738",
        "cursor": {
          "ref": "0e23bacd-6e2d-4d3b-8893-273b32cc8a69",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c282c740-0402-44e9-81da-4bed4031769e"
        },
        "item": {
          "id": "9607334d-0c4c-42d7-8251-68495723c738",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "21e39abe-4ba3-4f40-abdf-51b5e333058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a8a1b9-b8cd-44ca-baf4-9a5c09deb5df",
        "cursor": {
          "ref": "e2dc6df6-a800-467a-a2ab-cdd4b18f4d10",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "62b6de76-280e-4fee-85f3-2a123a437a4e"
        },
        "item": {
          "id": "95a8a1b9-b8cd-44ca-baf4-9a5c09deb5df",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cfb64bae-5b88-4164-a129-d6954afe68d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085857e1-0fe4-4bb6-a500-c53619fa499b",
        "cursor": {
          "ref": "d06077d8-79a8-4a7b-a4a0-d92a2a5a2cf7",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fb859a6e-a574-4a34-be22-992baea30cde"
        },
        "item": {
          "id": "085857e1-0fe4-4bb6-a500-c53619fa499b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a6ba2eb6-d474-43df-a16a-3a0a8e0a6e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891b0873-5f30-477f-a096-c05d9780f372",
        "cursor": {
          "ref": "9da30bad-81ac-48b1-926c-8dbc22242394",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be9f819b-b791-4c1b-ace9-d027aa589cc4"
        },
        "item": {
          "id": "891b0873-5f30-477f-a096-c05d9780f372",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8e9d4d08-a5c4-423d-baa7-f0ff3a3de8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8634e147-7390-40f2-85c5-e37a71155cd5",
        "cursor": {
          "ref": "70891d6b-e5b4-420d-bd09-eaf608938a32",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9baf8c82-705d-49be-bd81-c58090a93967"
        },
        "item": {
          "id": "8634e147-7390-40f2-85c5-e37a71155cd5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "483b8227-fc95-41d8-8404-d38b57e47bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870c03bc-cc2a-4e99-9594-99327bae1449",
        "cursor": {
          "ref": "d6ae877b-974c-4cd0-8b73-e2dcb46d2c23",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4a19907e-522f-463d-9a35-197a38b5cf36"
        },
        "item": {
          "id": "870c03bc-cc2a-4e99-9594-99327bae1449",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "59083657-d74f-4423-a383-639ab9048e20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 804,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "308f8e2d-068f-494f-8979-d35c87197c9e",
        "cursor": {
          "ref": "0d4271c7-cefe-477e-bf85-f8478636e085",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f9b914f5-af1b-4930-ac3c-d36cf7612fb8"
        },
        "item": {
          "id": "308f8e2d-068f-494f-8979-d35c87197c9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3074df05-dc62-44e3-87b7-e10a21f2ab02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 788,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "afdf4c91-f86d-402f-b5cd-3c29e5558611",
        "cursor": {
          "ref": "d2f72264-93f8-4ebe-97b8-4bbce28a268a",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2065d9d3-5099-48a2-bda4-474195f403e3"
        },
        "item": {
          "id": "afdf4c91-f86d-402f-b5cd-3c29e5558611",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b280eb85-8749-43d0-97b1-81a954d0d5ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 207,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0674c4a4-e52f-4f7d-95f4-8ef629d01e77",
        "cursor": {
          "ref": "528eae0d-8db8-4f64-b658-35190d9ccffe",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "936b90ee-383a-45d4-883f-75fd359d6aa8"
        },
        "item": {
          "id": "0674c4a4-e52f-4f7d-95f4-8ef629d01e77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bf0fb4e4-a869-415f-874e-96355a06e27e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 806,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "84230090-c7f8-44dd-9238-c95036415fda",
        "cursor": {
          "ref": "3dd7ffc3-351f-4f74-abdf-4c639a64701e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e3af4f4e-cb43-4101-adf1-3e85ba91feaf"
        },
        "item": {
          "id": "84230090-c7f8-44dd-9238-c95036415fda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e13c615e-7c94-4668-ae00-5838d7d87f14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e9e453f1-cac1-47f0-a142-ba0f56fe0141",
        "cursor": {
          "ref": "965f6ae7-7030-46e4-a85c-b63fd2475b41",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "547eb74f-6413-4730-9ba8-9d0aa8abb9f4"
        },
        "item": {
          "id": "e9e453f1-cac1-47f0-a142-ba0f56fe0141",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f0e598fe-4e1f-47ce-a666-c3ab992381f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35716495-6f3e-4fcf-9f94-3c68c8641be3",
        "cursor": {
          "ref": "da207f9e-a661-4e2c-9f3b-8390961ecab0",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0cb6f47f-7c92-4004-9b51-5f745d594071"
        },
        "item": {
          "id": "35716495-6f3e-4fcf-9f94-3c68c8641be3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7a0ddcf4-13a6-4344-9655-418050814f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720658cc-3f70-4e5b-bf8a-2e9856ae751a",
        "cursor": {
          "ref": "b2d3f560-fbbf-4323-a8e7-1c850e963eef",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1e5ac2ec-97c7-42f8-aa6d-68edff0c6168"
        },
        "item": {
          "id": "720658cc-3f70-4e5b-bf8a-2e9856ae751a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1df98c40-e2a8-448e-970c-24ab0c8c3176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d14729-d388-4eff-9ffb-354c2326ae80",
        "cursor": {
          "ref": "076c9540-53f8-4f37-943b-832de490a6f4",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ac9bc1e4-91ba-4781-96ff-a72265180a26"
        },
        "item": {
          "id": "52d14729-d388-4eff-9ffb-354c2326ae80",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d4441409-c8b6-4139-95ec-4a9b33ad047b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a9fe18-2005-46f2-acb1-efb821df5a1a",
        "cursor": {
          "ref": "49882330-61ba-42da-9d1a-02c5baa847b1",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d5cba2f9-0687-4b22-8516-c3254f232b80"
        },
        "item": {
          "id": "39a9fe18-2005-46f2-acb1-efb821df5a1a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2918e7ec-0c5f-45d3-859f-33a95d81f4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6ac5a0-3b8a-4e7d-be46-52a407a6f2e9",
        "cursor": {
          "ref": "758541d6-8d5a-4d4e-87d2-c7d12b66672e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e587dff6-58ed-440f-bf78-a0bb8e6e3dbb"
        },
        "item": {
          "id": "6b6ac5a0-3b8a-4e7d-be46-52a407a6f2e9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c29a5ddd-a987-45a5-a8b5-9de42dba4745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03976cde-c07f-4cc9-b3a9-03569c67acc4",
        "cursor": {
          "ref": "ac5b8e81-dfdc-4a88-be07-7d63b98a3c96",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "62585a0d-8c5e-4bc3-8721-f5b5337faf1e"
        },
        "item": {
          "id": "03976cde-c07f-4cc9-b3a9-03569c67acc4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "342e8a2c-a5dc-4d5a-ae1d-2aaf2ba91224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c126627e-7c07-4ada-8385-964bc0b66388",
        "cursor": {
          "ref": "9e6e9864-6a51-46f7-8b2d-329cf38e98ca",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "032a2b93-2881-4383-b0ed-a990e0a99478"
        },
        "item": {
          "id": "c126627e-7c07-4ada-8385-964bc0b66388",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d388d5f3-ea87-4af6-9356-0855c40dbd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d683da-c0b4-47d5-bed6-a3801f2daac8",
        "cursor": {
          "ref": "21fcab87-3b0c-46ca-a169-f4c2c9ca2aa8",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "47531285-94d5-4049-87c9-62673914b374"
        },
        "item": {
          "id": "62d683da-c0b4-47d5-bed6-a3801f2daac8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "21d13dca-1ead-4afa-9abb-84489aec7bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa23f9b8-0fda-4428-ac50-751eac096983",
        "cursor": {
          "ref": "58ee7301-7d7e-47bd-b5b3-bd523aa67557",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6763df93-8435-48c0-abb6-ae26be54d125"
        },
        "item": {
          "id": "fa23f9b8-0fda-4428-ac50-751eac096983",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d65e8582-947f-4bed-ac49-46544044a205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8415c4-b0e8-403d-91c5-85215515f4e5",
        "cursor": {
          "ref": "21b8d20d-6651-4fdb-b8a3-03079c10a924",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ae59433b-2f43-4878-ac1b-1c7254afeff7"
        },
        "item": {
          "id": "bc8415c4-b0e8-403d-91c5-85215515f4e5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5464ed39-7d6e-4d7b-b8f0-aab4a6d9d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e819cb-5fd2-4b45-ae20-8a5f06d39f42",
        "cursor": {
          "ref": "064a11e5-1dac-4207-b6bd-09e9574e04d5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9cb645d9-9967-41a9-be1d-44fda8c77a19"
        },
        "item": {
          "id": "97e819cb-5fd2-4b45-ae20-8a5f06d39f42",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "86dacf0d-b178-4a68-8e82-b07c3dd2f2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090bc023-c51c-428d-8104-26a8ab5953d6",
        "cursor": {
          "ref": "9c591adf-d82f-451e-aa41-f9ceb66cf776",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e2a2edf8-5097-4b6a-9c33-0984764cd74a"
        },
        "item": {
          "id": "090bc023-c51c-428d-8104-26a8ab5953d6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca032fd2-f178-4bd0-aebe-6a3b4cf11423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196086ff-95a3-40ec-b986-a0382de31901",
        "cursor": {
          "ref": "020b610d-87fb-475e-8ebb-cbe52c877fb1",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e2319314-55f6-425d-8362-07219a6ff288"
        },
        "item": {
          "id": "196086ff-95a3-40ec-b986-a0382de31901",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "16d5e05e-25c6-4f03-b931-0bda59b836e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f962f59-1bad-4346-8ad6-c39c86947b36",
        "cursor": {
          "ref": "f16e913d-3c4f-43c9-86ed-c2f0ca50c954",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4e76a5c5-35e6-469e-adea-b8e07ec19451"
        },
        "item": {
          "id": "7f962f59-1bad-4346-8ad6-c39c86947b36",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6f59787d-3e84-4c8e-9ea8-7b9bcbaf454d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f798863c-6400-4eb8-b56d-6a67fac3b580",
        "cursor": {
          "ref": "a778519b-4407-4686-bf74-b862910ed670",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1911a219-6927-432b-8fdc-98e8c43d00e7"
        },
        "item": {
          "id": "f798863c-6400-4eb8-b56d-6a67fac3b580",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "61467eea-020c-484a-9b38-965d586c0f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687c7157-21ee-4322-8328-902c9148e002",
        "cursor": {
          "ref": "03852c4c-a4aa-4b57-8809-5f644370be2f",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "15f0b8cf-9053-4d13-8492-6420994f16fa"
        },
        "item": {
          "id": "687c7157-21ee-4322-8328-902c9148e002",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "043397b5-714c-41ef-beb2-79e07727dcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03473ffb-b8b7-40a2-a6b5-aff1415075a8",
        "cursor": {
          "ref": "ce6c63d9-ff26-427f-8c3b-d9c66c15cca0",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6e14385c-1837-4dd0-99e5-9a6ed9505abd"
        },
        "item": {
          "id": "03473ffb-b8b7-40a2-a6b5-aff1415075a8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "34b2eda2-c91c-4647-9165-f8e234eea0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8709840-aa26-48bc-8e1a-01639ead292a",
        "cursor": {
          "ref": "d0d4a2a3-b8cf-4eaa-90f3-aad33f584a29",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "18821b0c-2093-4b61-9871-14cb75e58cf2"
        },
        "item": {
          "id": "d8709840-aa26-48bc-8e1a-01639ead292a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "88c5b050-12c3-4d96-b4da-d988c9d4f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbe9b98-eb75-4c2d-b0c4-47120609cffa",
        "cursor": {
          "ref": "4c1e43ee-e8ec-47ef-aaf9-0688f0a19598",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8a3850f2-2013-4c2e-a120-64ab4cb8aeb0"
        },
        "item": {
          "id": "cfbe9b98-eb75-4c2d-b0c4-47120609cffa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "488bf007-3479-4340-a173-e0c7e8c068bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328e02a5-a526-4b2f-b04d-d16673a02e5d",
        "cursor": {
          "ref": "6fcb3c8a-b512-4ca2-a3cf-680b23504717",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4b4d8cfc-7e87-4c36-838c-82553e4893a0"
        },
        "item": {
          "id": "328e02a5-a526-4b2f-b04d-d16673a02e5d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "74fe9737-c372-406a-8f7c-e44dd0cb3668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828da6f6-7132-4476-9304-87202a0b6ce7",
        "cursor": {
          "ref": "f30710a3-764b-41a8-9168-0a03c4fb79fd",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d02565d8-d2c9-4c9c-890c-5d15be408ed7"
        },
        "item": {
          "id": "828da6f6-7132-4476-9304-87202a0b6ce7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "058560d5-dade-4ee6-887b-421e77d76c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9eb463-1b39-495d-9fd8-467343dee877",
        "cursor": {
          "ref": "a6a12825-9b4a-4385-920d-bcbd21f84144",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "081bdfd8-7d5a-4593-9273-4bf29f6406f8"
        },
        "item": {
          "id": "6a9eb463-1b39-495d-9fd8-467343dee877",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2cbfc699-9e63-4400-a769-79ae50c38f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb34a1e-3839-4210-b45e-146bcf5b8ad3",
        "cursor": {
          "ref": "1ad1bfa9-5275-407a-aae7-97ecd4665949",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a64a2884-e769-4d0b-b7ab-a1381407839b"
        },
        "item": {
          "id": "8cb34a1e-3839-4210-b45e-146bcf5b8ad3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "31a52530-ab62-45f9-b2dc-812983897606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed79972-ed99-4c8e-ad50-aa552403f5a5",
        "cursor": {
          "ref": "9da663c0-dc11-4a68-b4f0-9e59cf345f10",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8b8db783-00a2-4e10-afa0-778862c4e4f5"
        },
        "item": {
          "id": "9ed79972-ed99-4c8e-ad50-aa552403f5a5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "69e22e6a-9df3-4a20-ba08-907c18ca89c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee7700c-3352-4e5d-803c-af300529c370",
        "cursor": {
          "ref": "5d6bd888-68c9-4ecf-bfeb-6ab3ea117d78",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2b6120aa-8d18-4dd7-8566-ebe2e661ebbd"
        },
        "item": {
          "id": "bee7700c-3352-4e5d-803c-af300529c370",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ea517596-ab68-45b2-be78-29b030108df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc09500-ecab-4ef7-b068-afed8a62bc85",
        "cursor": {
          "ref": "96337aea-78d1-44ba-9264-6cd2b0e50820",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b0d60233-6625-4ae9-a04c-28e03ba02c92"
        },
        "item": {
          "id": "cdc09500-ecab-4ef7-b068-afed8a62bc85",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "543f6ae6-8300-4a06-9e30-59f5f1461c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11470436-f89b-451b-9113-44e7be714a80",
        "cursor": {
          "ref": "e503c905-5c77-428a-96c8-9ed33c85e7bf",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "89b0c65b-387c-45a1-b995-f2298613a5ec"
        },
        "item": {
          "id": "11470436-f89b-451b-9113-44e7be714a80",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e477d287-12b2-492f-b1d7-c1165fbec857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8029e7d0-27e4-4765-9db1-4057a4f54550",
        "cursor": {
          "ref": "58aeb8c0-12cd-44b8-986f-49db483e6648",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4c1b3512-8fd6-429a-8b43-3f6e2d5867f2"
        },
        "item": {
          "id": "8029e7d0-27e4-4765-9db1-4057a4f54550",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "30cdcdc4-0a34-4fd9-8c6c-7554475be0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ecc5ee-fcc0-444d-ad0c-6583d3580409",
        "cursor": {
          "ref": "28b801c2-dedb-478c-8572-da8c8642ba2a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "53b7cb49-51b3-46b5-a8d5-878e60aeffc1"
        },
        "item": {
          "id": "c2ecc5ee-fcc0-444d-ad0c-6583d3580409",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "62c709a2-c3b2-43af-a24a-c7f2897f297c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d83005-85e1-489a-ac7f-cbd7a8ea0d5d",
        "cursor": {
          "ref": "5bf0e5cd-f619-4c69-a4e6-cdb83f240eb5",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9585ac1e-d450-4c16-aed3-3437a4b44fd2"
        },
        "item": {
          "id": "e7d83005-85e1-489a-ac7f-cbd7a8ea0d5d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d40a95af-18d2-47fd-8256-0ca341aa3520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966a6f2a-bff2-4a8c-b4be-87fbd1b6c64b",
        "cursor": {
          "ref": "b6ec3ef5-640b-4d15-a952-3b9987299580",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a68bdd81-6166-4f88-9cb5-9207c827b9d7"
        },
        "item": {
          "id": "966a6f2a-bff2-4a8c-b4be-87fbd1b6c64b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0aa3d3a6-2206-4499-82f1-1f7ae9ccc24d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d54047a-fb59-4067-b901-18a7ea6475c5",
        "cursor": {
          "ref": "15b56181-f8e8-4320-82fd-d8e6a6e8dada",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "add29cd6-94d1-4b7a-b576-eb09cc604ed6"
        },
        "item": {
          "id": "3d54047a-fb59-4067-b901-18a7ea6475c5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b5214a6a-d54b-4c23-ab82-f18b49ea2a61",
          "status": "Created",
          "code": 201,
          "responseTime": 1136,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef8050d-02e6-4edc-88e5-398ce61b073f",
        "cursor": {
          "ref": "15f1345c-8353-4a54-84c8-091cdc57c0f2",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d83d6673-7c8e-4478-878c-39bc5d43d6ea"
        },
        "item": {
          "id": "bef8050d-02e6-4edc-88e5-398ce61b073f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9f37baac-8219-4fe8-9f2f-d17dd81ca155",
          "status": "Created",
          "code": 201,
          "responseTime": 1077,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85313a64-3bf6-46eb-8c00-da9f5b1c5b25",
        "cursor": {
          "ref": "4d67c326-19e5-482d-8c0f-b0b9d6725558",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "985cb47e-a913-4972-af33-f89eda39fea3"
        },
        "item": {
          "id": "85313a64-3bf6-46eb-8c00-da9f5b1c5b25",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d1090517-1a97-426d-9483-4cd28e247748",
          "status": "Created",
          "code": 201,
          "responseTime": 1116,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3abf9b-cb79-4bfb-878b-b0fad0b695ff",
        "cursor": {
          "ref": "2b8bc311-de70-4966-96c5-ccfb960790ee",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4172700e-67fe-452a-b938-d02740c7edec"
        },
        "item": {
          "id": "7f3abf9b-cb79-4bfb-878b-b0fad0b695ff",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c1d8f25a-61ce-491b-9867-3b732cb8217d",
          "status": "Created",
          "code": 201,
          "responseTime": 1321,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "660d3200-daa9-476f-a2be-5595e52dcb94",
        "cursor": {
          "ref": "42d1e77b-92c6-464b-86c5-e032f5913e29",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "272fd532-aa1c-409e-a394-9522f87dfe6a"
        },
        "item": {
          "id": "660d3200-daa9-476f-a2be-5595e52dcb94",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "999cf807-45d7-4c4d-bdf9-0b1c086cde00",
          "status": "Created",
          "code": 201,
          "responseTime": 1018,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "9630e38c-8630-40ab-a2bb-e46f4b66c350",
        "cursor": {
          "ref": "97eb2ae9-51fa-4958-833b-26d2cd75dfaf",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7eb1d85d-fd47-4ce4-ac24-ad4ee1b8bf00"
        },
        "item": {
          "id": "9630e38c-8630-40ab-a2bb-e46f4b66c350",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cf275f15-4b68-417c-9f49-95c107a1f23c",
          "status": "Created",
          "code": 201,
          "responseTime": 1072,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90a78af-68a8-421d-a7ed-73cccea490be",
        "cursor": {
          "ref": "5b436cdc-e098-43d2-860a-098247ff7ca0",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bed956f6-dcc3-4662-a758-33353ff6c4b4"
        },
        "item": {
          "id": "f90a78af-68a8-421d-a7ed-73cccea490be",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7649a8a-5db5-4cb3-ad25-e9711bde9e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5367f1b8-80a3-428a-820a-2532a36f4d08",
        "cursor": {
          "ref": "58f69f05-0bdf-4c07-8eea-13ee178850c8",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8e246a8c-dd46-4496-a9f4-86553f0dd62f"
        },
        "item": {
          "id": "5367f1b8-80a3-428a-820a-2532a36f4d08",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "25095a47-3205-4cd0-9432-8ee3c23d6056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569608d8-9b50-4325-bfe6-6fa22d62e896",
        "cursor": {
          "ref": "c132bac1-9581-489c-a826-820a59a72a00",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a53f0885-87e9-428d-b0b8-0554caff6d7b"
        },
        "item": {
          "id": "569608d8-9b50-4325-bfe6-6fa22d62e896",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "11e1fa36-8eb2-4dae-8e42-e781f1b1cb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c1632f-9f8c-4a4b-90b5-1124a537db22",
        "cursor": {
          "ref": "1acb49a2-8cd0-4e28-80d5-5a5daa9e4a37",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "22dceb8b-c64a-4d4b-97ec-7c33ca3d47bf"
        },
        "item": {
          "id": "c5c1632f-9f8c-4a4b-90b5-1124a537db22",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f4edac73-8906-496f-b759-dce12d6b658c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257b22e1-3bdb-4204-bfb1-1c770a102ede",
        "cursor": {
          "ref": "07c5c416-f8b7-47bb-b50a-a57e4d4f7d47",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "de6b9b86-f357-4afc-9faf-7fe0d59c2157"
        },
        "item": {
          "id": "257b22e1-3bdb-4204-bfb1-1c770a102ede",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5e3c6852-5f4f-4764-89c7-11640f044bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ab12a6-6d8a-47b6-bc07-3465e93da438",
        "cursor": {
          "ref": "e493ca20-19fb-49be-b913-d880fb2f9b05",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4234699-b079-481a-b007-0e95faccfa0d"
        },
        "item": {
          "id": "d2ab12a6-6d8a-47b6-bc07-3465e93da438",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b6a25486-d47d-4647-bd4d-870cfc71f9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561fccdc-168a-4fd3-b136-13d0e24e044e",
        "cursor": {
          "ref": "14755de5-6c87-4661-a191-577bb5a34986",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "71af3ee1-6d98-4faa-8cc4-cddb56873133"
        },
        "item": {
          "id": "561fccdc-168a-4fd3-b136-13d0e24e044e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "258f260c-a282-41c9-a484-e715a7d560e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9579552e-e588-40b9-92fb-41a9274f6311",
        "cursor": {
          "ref": "f8615e78-b887-43c9-ba3f-48fb2aea4125",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "328720a2-94b1-43f8-a542-e4295b06edcd"
        },
        "item": {
          "id": "9579552e-e588-40b9-92fb-41a9274f6311",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e24d31f6-b55e-40b2-982d-957c90e3c1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a0c249-7bea-4868-891e-e9ddc99dc550",
        "cursor": {
          "ref": "4b58fffb-998f-48e3-bdde-f19cf3c5ad80",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cb6ebef0-a930-4271-b292-f5654407c7f3"
        },
        "item": {
          "id": "79a0c249-7bea-4868-891e-e9ddc99dc550",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8a218305-3f81-4cc4-8c8c-6914df826d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0793da6f-b431-4580-a930-bb836a9d0d65",
        "cursor": {
          "ref": "a05c49af-4b30-4efa-8c05-4c6678e12525",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "06b23579-6d7b-4814-8bcf-70175ba176d6"
        },
        "item": {
          "id": "0793da6f-b431-4580-a930-bb836a9d0d65",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "36e05799-043f-4cba-a722-159b4c2a5bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffbb8f5-703d-4ae6-8730-cd11a5d34e87",
        "cursor": {
          "ref": "0142eadf-120c-4325-b569-f22df7183ba7",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d52ebe66-4ed0-418b-b648-29c86dd8b43f"
        },
        "item": {
          "id": "dffbb8f5-703d-4ae6-8730-cd11a5d34e87",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9918ee6f-d5a1-4a03-a36c-ab8e802664ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3260f375-378d-46e7-95a2-864dbbc325c7",
        "cursor": {
          "ref": "9d21bdc4-41ec-4b0c-8bd7-41fe8ea8f06c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1a7ecb70-3e3a-45e4-9f03-3600b184d8cc"
        },
        "item": {
          "id": "3260f375-378d-46e7-95a2-864dbbc325c7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dd1a3d23-3a52-4135-bc09-469b2ef80b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0757e60-8a24-4408-80db-f1703979b5f5",
        "cursor": {
          "ref": "a8162dd3-0ea9-4c9f-98fc-26896d61fdc5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d7561f2b-e089-4574-a798-4dfc1ea0a1fa"
        },
        "item": {
          "id": "e0757e60-8a24-4408-80db-f1703979b5f5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9b8d33dc-47b5-4520-8ccd-7dea636e0314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa048d2-eb26-4c1e-b86a-8c5809b1e35f",
        "cursor": {
          "ref": "cf9b6dd7-c85b-4365-8fbf-626a035ca40d",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a1613ab2-86af-4f47-b7cd-bb3e716e8f66"
        },
        "item": {
          "id": "eaa048d2-eb26-4c1e-b86a-8c5809b1e35f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5e618971-a84e-47fd-8935-6652ee0ca62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c74a82-30ae-4ccd-83f6-10eaa7bcb1e7",
        "cursor": {
          "ref": "050c46a4-6f59-4edb-ac46-e56cf154b0ab",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b6e222fa-2db6-4f2e-92aa-15751aa807d7"
        },
        "item": {
          "id": "83c74a82-30ae-4ccd-83f6-10eaa7bcb1e7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fcd741c8-728c-499a-8aa7-bf83039807df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0caf146-c488-4992-96e4-ae1347381051",
        "cursor": {
          "ref": "12fcfc0c-c8dd-4805-869b-ec9405a2f59b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8985e1d4-edfd-448b-b395-6e06dfb739c8"
        },
        "item": {
          "id": "d0caf146-c488-4992-96e4-ae1347381051",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6c421033-9da9-43bd-9c91-b24d8e81e6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bf263f-56bc-430d-a586-35a7119cec04",
        "cursor": {
          "ref": "628730eb-72b9-437b-95ff-47ce1cb8dac8",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f1063cd5-5641-47f6-867d-88111b8295be"
        },
        "item": {
          "id": "65bf263f-56bc-430d-a586-35a7119cec04",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "67827be8-6fb3-44ce-8ae4-c95714e77003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec407b63-8e08-4df6-9368-3e44bd7b6b76",
        "cursor": {
          "ref": "1f82c636-4e8f-4ef2-9484-05bb46b6a02e",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a1fff0cd-757d-4e8e-9958-ba52d8107376"
        },
        "item": {
          "id": "ec407b63-8e08-4df6-9368-3e44bd7b6b76",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "806a7fa7-05af-46de-98a4-a2ed78a081bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03696c55-17d9-46d4-ba36-5820ad93e49c",
        "cursor": {
          "ref": "62784763-ce7e-4be0-925f-477a69c83fbd",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3d18d664-7d3c-4047-aae1-7f9e2afceecc"
        },
        "item": {
          "id": "03696c55-17d9-46d4-ba36-5820ad93e49c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9b95b2ce-00c3-4857-aa06-cefa31ceaaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe576a5-4e4c-47c6-818e-870b3ffedcf1",
        "cursor": {
          "ref": "c86d5850-f384-4fa4-a700-e696fd12182d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "698bad34-7044-4632-b4ca-ff3e309fe3c5"
        },
        "item": {
          "id": "cfe576a5-4e4c-47c6-818e-870b3ffedcf1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "81017e64-f9af-4363-a021-70333f653529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd92cfff-1cb6-49d8-9bcb-ddc7dc22867c",
        "cursor": {
          "ref": "79e1190f-d804-4bc5-96f9-a14718b14eef",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "285afb2c-7b2f-4993-9e74-87d8141c92cd"
        },
        "item": {
          "id": "bd92cfff-1cb6-49d8-9bcb-ddc7dc22867c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d1453992-e300-4aa4-be53-7efe01640b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804a92ba-b71b-42b5-8c0c-ecf218880fa2",
        "cursor": {
          "ref": "fd5d11b9-5377-461f-96d0-402a065bd662",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "716902f6-b6ac-4ee1-bb02-d2c926cf227a"
        },
        "item": {
          "id": "804a92ba-b71b-42b5-8c0c-ecf218880fa2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4c83aead-39a6-4b17-8b99-c9ba3473f926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c916b49-6fa8-4e43-ad51-c4106b5da4a6",
        "cursor": {
          "ref": "73de9719-7200-43c6-a3cb-3d3415f47400",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "656b0b8a-a895-44f1-838d-88385ad48cf5"
        },
        "item": {
          "id": "7c916b49-6fa8-4e43-ad51-c4106b5da4a6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2720bbc5-55c7-4b32-ba50-a431ed6750df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f9a231-0b94-47a2-8a88-35235b030b3e",
        "cursor": {
          "ref": "0da21dc9-32e0-4ab6-adb9-65e4682938a2",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dc55080b-0fd7-4a4f-8cdb-b06a505ad8b9"
        },
        "item": {
          "id": "60f9a231-0b94-47a2-8a88-35235b030b3e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e6437c87-53fe-41bd-a822-bb590a572fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5a4f91-8e27-464d-8310-e9a29eae5e56",
        "cursor": {
          "ref": "82615577-a9ec-4e2d-8e38-7d675a819e35",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "05f2d635-4645-41e8-9eb7-3b5ae59a50d0"
        },
        "item": {
          "id": "7d5a4f91-8e27-464d-8310-e9a29eae5e56",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6a9ce03a-8bb9-44c2-890f-31fdc0121cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c554e35-7902-42bc-9fcf-19cc75903402",
        "cursor": {
          "ref": "1c1aeb32-2885-4fed-bfa0-d47774edf2b9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "54bfa46f-2e02-44d8-9128-15b3a8addc01"
        },
        "item": {
          "id": "6c554e35-7902-42bc-9fcf-19cc75903402",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8095587d-b056-41f7-9ab3-0eaa05504d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49a16ff-eec7-4fe3-bcc3-7cd0db575d7a",
        "cursor": {
          "ref": "441aeb59-bf26-45da-8091-600a7e305bc0",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ff4566af-a43b-43ba-9b36-2885315998ec"
        },
        "item": {
          "id": "d49a16ff-eec7-4fe3-bcc3-7cd0db575d7a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4fc9b180-5b18-4159-86a3-29a8462e506d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e30cc5-dc21-4fac-a694-7da7eea5f3aa",
        "cursor": {
          "ref": "bdc0e589-80ba-4299-9a46-cd1c51896976",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ef977260-4b97-4fbe-8ec3-b05c8e5e420a"
        },
        "item": {
          "id": "82e30cc5-dc21-4fac-a694-7da7eea5f3aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "848a0937-00d7-435a-8bd6-2865f859bc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53d5634-23b8-45a1-b6fe-927756575ce7",
        "cursor": {
          "ref": "db9215ff-8ff2-4e78-8911-b482f2e3546a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d266a9f6-f0b8-4a4d-9def-7d4f7a05ca06"
        },
        "item": {
          "id": "c53d5634-23b8-45a1-b6fe-927756575ce7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b070a962-77e6-442d-8198-ef49873fb466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b55d00-55f9-4b7a-a32c-40e7a01be50f",
        "cursor": {
          "ref": "cddfc3ce-1c5f-4900-ab61-12312ccf260e",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "036fa383-a19a-4a5e-bc5c-686daf37a7b6"
        },
        "item": {
          "id": "d5b55d00-55f9-4b7a-a32c-40e7a01be50f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3bcb7da2-cc4d-417a-b07c-c89bc2f63b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fa355b-2c68-4178-b50d-45cdb2ad460a",
        "cursor": {
          "ref": "93db97d3-b80d-40c2-90d6-589eb0e9cbb4",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b70f2d00-7a8a-4b7d-9ea8-35c7f9ff2249"
        },
        "item": {
          "id": "c2fa355b-2c68-4178-b50d-45cdb2ad460a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab3bc11f-6fbd-4665-9775-5b12cf77b973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402cfee-8804-4fb9-a40f-e74c41c65d72",
        "cursor": {
          "ref": "e8cc9cd0-229e-441a-90e5-6449d7f107ee",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b281be37-0390-4d75-9356-5aec5e79c13f"
        },
        "item": {
          "id": "7402cfee-8804-4fb9-a40f-e74c41c65d72",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "de3ee155-aa77-422c-8ad2-f524220018f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dd6327-0a59-4323-ac13-1848cec7b5ec",
        "cursor": {
          "ref": "8f76e063-84e0-4759-95bf-44bbd7a06bbd",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d31444e9-2a35-42ca-af51-8d69ac3c86b6"
        },
        "item": {
          "id": "a1dd6327-0a59-4323-ac13-1848cec7b5ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56f061f8-5ee7-46c6-b61f-e8d8b7423118",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387bbc8a-1e51-4c72-b3b8-54fffdc5342e",
        "cursor": {
          "ref": "34a94195-e330-47ae-a2fb-63c957e1677d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a5b23841-e652-49f8-b334-0137a8fb0bf4"
        },
        "item": {
          "id": "387bbc8a-1e51-4c72-b3b8-54fffdc5342e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "043c9baf-7888-41f8-9ddf-f7dc5956b09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d037e6-7611-4c45-8f29-35174d0d32c3",
        "cursor": {
          "ref": "dd114b95-970a-437d-b91c-bacb7bc3dd50",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b7c772e3-e94c-4bf9-8750-67f0ea6aac49"
        },
        "item": {
          "id": "79d037e6-7611-4c45-8f29-35174d0d32c3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "de65adc7-7679-41ca-84a0-80ab0523b109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a6f77a-2f5e-41c3-960a-3c56a27832f3",
        "cursor": {
          "ref": "112bfc87-5e76-4a20-b31c-b932f36f41ae",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7421615c-40dd-4b81-9ec2-0c53c3559b87"
        },
        "item": {
          "id": "61a6f77a-2f5e-41c3-960a-3c56a27832f3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ff57f993-968c-416a-b849-f516fdcc0383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae8b376-6785-41fd-9ed6-8d5202c16eab",
        "cursor": {
          "ref": "3f1d0073-7dcf-44ed-9056-095fd380f03c",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4d7d5845-3877-4d3f-a300-b1e2c3f151c8"
        },
        "item": {
          "id": "aae8b376-6785-41fd-9ed6-8d5202c16eab",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "05024201-bddf-4b60-8153-e2d54c562afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790e68bf-5653-45a7-8936-3f2a6eac9d31",
        "cursor": {
          "ref": "bf4fc956-9ed1-4297-90e2-b9a72c17fbb9",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a615024e-3d8e-4e95-822d-cee1c965a0c1"
        },
        "item": {
          "id": "790e68bf-5653-45a7-8936-3f2a6eac9d31",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b36e18c4-1bed-4d45-898e-411e5975abb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65402475-938d-4d0b-95b5-0b093d8024ae",
        "cursor": {
          "ref": "8ca5bbb7-97fd-4c4d-8406-8a5518b54cc3",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3fb9db21-311c-443b-aa82-28ab68dfa644"
        },
        "item": {
          "id": "65402475-938d-4d0b-95b5-0b093d8024ae",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5431186-7b5c-4f89-85dd-5bdf31aabf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7748a63f-1de7-4424-8d47-34a900336d07",
        "cursor": {
          "ref": "dbef8fbf-010f-49b4-8710-13dd92685685",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cfcbdc80-ddd5-415b-9605-3c055f5095cc"
        },
        "item": {
          "id": "7748a63f-1de7-4424-8d47-34a900336d07",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35b13d6c-e6b1-4854-b1db-1ec54a49d833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a977e40c-2545-4f49-9149-3cee64363d5f",
        "cursor": {
          "ref": "485e8def-e14f-4237-b384-dbe785e86beb",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0724a48a-bbdf-4052-8bb2-59262d740cdc"
        },
        "item": {
          "id": "a977e40c-2545-4f49-9149-3cee64363d5f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e391ff7e-0dff-4f2b-816e-3de606034914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771fb1af-22ab-49e2-a48e-dde78026689e",
        "cursor": {
          "ref": "3171e9c5-fac5-4199-9450-083d63322f6c",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "66c736f0-8446-4b2b-98e5-67f87f32bcaf"
        },
        "item": {
          "id": "771fb1af-22ab-49e2-a48e-dde78026689e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dca850d7-24a1-4af7-8db4-d75bdbeca627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6639fe59-6ce9-4553-b6ea-bfecb23c558c",
        "cursor": {
          "ref": "7d934649-0b66-47b3-9ca4-82245eccbdf9",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "64c61f94-d54d-46f9-95cb-7ec782de2185"
        },
        "item": {
          "id": "6639fe59-6ce9-4553-b6ea-bfecb23c558c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9ffe7c51-4221-416e-9549-1d66706f7ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab23263a-227c-46c7-aea2-c6db78c83682",
        "cursor": {
          "ref": "ca205358-ea18-41ca-ae66-c219374e985a",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "810be9c9-d9fe-421a-9194-e51ceba02cdd"
        },
        "item": {
          "id": "ab23263a-227c-46c7-aea2-c6db78c83682",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f981b270-19ff-4b82-8bbf-bbb748299591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efe7b0d-535d-482b-a666-87d6d965d340",
        "cursor": {
          "ref": "3dcb692f-c191-4a1c-99cb-f2354e47fe27",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6109326c-f1c7-4fac-89fb-e4fcb5175307"
        },
        "item": {
          "id": "4efe7b0d-535d-482b-a666-87d6d965d340",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a1c53f9f-4d22-44ad-b0d2-2ad3d1e55f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fd184e-20dc-4942-b8b3-e2e6d2a0128a",
        "cursor": {
          "ref": "582b07ec-cbd4-461f-bc4b-90a062bcc249",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1a86ee0d-fd7f-4e58-9e17-a49e1f230c90"
        },
        "item": {
          "id": "23fd184e-20dc-4942-b8b3-e2e6d2a0128a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "30595e98-925e-44d0-8c4d-7aab49f4a0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfe6a9a-2e8e-489a-9410-d36a1f307e98",
        "cursor": {
          "ref": "f7b19c66-8441-40b7-a57a-876702c60b9c",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7ff88dde-87ed-45b7-ae55-9fc8f33168b3"
        },
        "item": {
          "id": "5cfe6a9a-2e8e-489a-9410-d36a1f307e98",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3ae111fb-eaca-4774-b1e9-9e24c08f7014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d680ca-d2ae-43f2-88bb-3091a1bc8315",
        "cursor": {
          "ref": "0660e823-0d82-456a-bf32-b88247e6d32d",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6cc93f30-4d07-47b2-b723-fd4af5a19a9a"
        },
        "item": {
          "id": "61d680ca-d2ae-43f2-88bb-3091a1bc8315",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3966864e-0946-4e88-a935-910556204d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf7b441-1278-4ec4-bedc-e2db4994c05d",
        "cursor": {
          "ref": "c3b1bc74-3928-4272-a443-354c44b0503e",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7235b15f-b324-4205-a401-d71cc9a66abd"
        },
        "item": {
          "id": "cbf7b441-1278-4ec4-bedc-e2db4994c05d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5d2fcbee-7b01-4e9f-a837-e4e43709b52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947374a7-6d6c-44e6-9c97-3fc8c843ffc8",
        "cursor": {
          "ref": "e580ed24-5e47-4578-aa6e-964ff787c93a",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d2f475c9-ed4e-4946-9fd0-bd589df98d09"
        },
        "item": {
          "id": "947374a7-6d6c-44e6-9c97-3fc8c843ffc8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4ad46a6e-7cbd-48c9-b016-20e6088face8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647b4cf2-d2f1-4b45-beb6-79b9f8e1170f",
        "cursor": {
          "ref": "5a000a23-2826-49f6-8b12-c9993b278b1e",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "befc983a-e529-40c2-8dec-fa9d91d6bf54"
        },
        "item": {
          "id": "647b4cf2-d2f1-4b45-beb6-79b9f8e1170f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "20ef093c-17c3-4c1e-812b-666d68b4cedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a35cfb-4a5b-440c-ab81-0aaedcdda6d8",
        "cursor": {
          "ref": "c45d6c12-6654-48ab-b2d2-a70c1806946c",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "00b41af0-7c88-4f07-94be-262149313980"
        },
        "item": {
          "id": "99a35cfb-4a5b-440c-ab81-0aaedcdda6d8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9f77516a-3f43-40f6-a667-34af2233f24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f535bd1d-f078-4f5b-bf3c-b1a582678373",
        "cursor": {
          "ref": "43894728-298e-4e6a-b18e-600d0483f5aa",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "16b9d402-309d-406b-9ed5-3973dc973ec9"
        },
        "item": {
          "id": "f535bd1d-f078-4f5b-bf3c-b1a582678373",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ac814dd-2d34-484a-a6ca-16a2010c5abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849c6ffd-3118-45a4-87fb-d59c99c762d6",
        "cursor": {
          "ref": "9bf3e4d2-e6b1-4964-bafd-80efb0e811ae",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "00b7a3c1-1c24-400f-88e6-166e23d0399d"
        },
        "item": {
          "id": "849c6ffd-3118-45a4-87fb-d59c99c762d6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3cb13b56-50a7-42b4-8078-77334490b6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1513093-d0d3-447f-9dad-43b9fe6ef92c",
        "cursor": {
          "ref": "7f2d9fce-38f1-415a-a35d-b1a943666d5b",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e745677a-cb25-4e6d-a21a-6ec30e9075ae"
        },
        "item": {
          "id": "f1513093-d0d3-447f-9dad-43b9fe6ef92c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9ef3df76-099b-45d0-be16-5cfac4ebe380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48de2b3-28e4-4507-8ce7-14c15db44224",
        "cursor": {
          "ref": "d9ea86ed-4954-4521-9358-3aed09b19aa2",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d3057c9-e9c5-485b-a45b-802aca9755c8"
        },
        "item": {
          "id": "c48de2b3-28e4-4507-8ce7-14c15db44224",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "00ae73d9-7022-4559-a957-7f5cdfc090a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b171754f-c561-4806-b394-9f35363f3c71",
        "cursor": {
          "ref": "3b8fb9c2-c4a7-4925-999a-c8a1fcbfa637",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4294a1e6-1792-4a3a-9ae5-8fa7837f18db"
        },
        "item": {
          "id": "b171754f-c561-4806-b394-9f35363f3c71",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77e15b31-ed09-4335-b16e-44254937580c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e0c011-9651-4607-8b53-31d197ad3dd3",
        "cursor": {
          "ref": "4031d593-6583-457d-aba6-b316442efc3f",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "01ca7f1d-2c08-43dd-b605-8cbb6740ef32"
        },
        "item": {
          "id": "84e0c011-9651-4607-8b53-31d197ad3dd3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "833786d0-3f68-4345-b3b6-3047bef7c2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5860e293-13a0-4a38-8c6c-8ad6f1f4fbe1",
        "cursor": {
          "ref": "9614421a-5002-4dc6-8bdc-31c6511b6d8e",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76e6256a-37ed-450d-a153-18afbfd04809"
        },
        "item": {
          "id": "5860e293-13a0-4a38-8c6c-8ad6f1f4fbe1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4a13ee4-61fe-4cd4-b04c-9398eb61417c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724a58cb-e8eb-4a4b-a790-eac6f898b9d2",
        "cursor": {
          "ref": "b510e709-70bd-43af-97fd-5bd5aaea56ac",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0edc2d05-516e-4854-9d2c-0d9cde25a04a"
        },
        "item": {
          "id": "724a58cb-e8eb-4a4b-a790-eac6f898b9d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5280db23-96a2-419c-a545-dc804639b222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a31d764-19a4-4d2d-a897-72c4e81ca303",
        "cursor": {
          "ref": "1e0f58cb-cf90-4481-b226-2ac43b71ac81",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7773d56a-e9a1-40b8-af42-c1cbbe1e3d65"
        },
        "item": {
          "id": "1a31d764-19a4-4d2d-a897-72c4e81ca303",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4e2fa2fb-4831-4dcd-b6ad-403cb81491b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3c7172-c1d4-441e-94a0-b53af2823f2e",
        "cursor": {
          "ref": "58ad24c6-b2fa-459b-811f-4d60a6def7c9",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ea8b6168-76fa-4b17-9c9c-1a6b1520224f"
        },
        "item": {
          "id": "df3c7172-c1d4-441e-94a0-b53af2823f2e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "380c0b9b-1895-4710-a2a2-e17e87c4285b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07805ff4-3e77-4235-b1bb-8244500a7961",
        "cursor": {
          "ref": "78f8b334-7f31-40b3-99fd-0f5279094a64",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "13fc61f1-ebce-4f22-b62b-55c24e9e4506"
        },
        "item": {
          "id": "07805ff4-3e77-4235-b1bb-8244500a7961",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d8f453f6-809d-41ea-829c-aba28b0c0e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328c8366-c7ec-4257-ad66-c229f68c066a",
        "cursor": {
          "ref": "e01cc56d-3f56-4825-a169-c9a8ea81e6ec",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2aa79afc-4ff2-47ed-b595-edc73c31e20e"
        },
        "item": {
          "id": "328c8366-c7ec-4257-ad66-c229f68c066a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a65f02f0-3d05-450a-91cb-057d74f7f0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9c0aa4-dff2-4331-b555-fe2d5fbd280e",
        "cursor": {
          "ref": "68778ffa-dc33-48f0-a65e-e175a8188549",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7d998a4-7b92-4f9d-973e-46a95d28892b"
        },
        "item": {
          "id": "fa9c0aa4-dff2-4331-b555-fe2d5fbd280e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f2d7ccde-a91a-425b-8fa5-feda3683f0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1c7f88-7225-477b-81ca-80251235e1cb",
        "cursor": {
          "ref": "84f3a1b9-3dc2-4caf-a508-70d5b7ac3f99",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8a02b62f-f1b8-4aab-bf2d-365d725d1fe0"
        },
        "item": {
          "id": "4e1c7f88-7225-477b-81ca-80251235e1cb",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "88092bb8-dbcc-4c94-81e4-44be75fc0e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283ccb19-8bf8-4ead-9154-66e5950fef40",
        "cursor": {
          "ref": "f3506616-b233-4d30-a90d-475a60cfe04f",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "776a0cc2-2827-4f2a-9186-e6fc350e6553"
        },
        "item": {
          "id": "283ccb19-8bf8-4ead-9154-66e5950fef40",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c0d03639-946a-424a-8bfa-e8d95d12378b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb8f135-a7f7-4b01-b9af-53dbed62539c",
        "cursor": {
          "ref": "b9c85084-ed77-444f-9bfc-cbb6eff54af2",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b9e401c0-f391-4b79-b0f2-f54b3800a49b"
        },
        "item": {
          "id": "beb8f135-a7f7-4b01-b9af-53dbed62539c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f6269187-e7fd-40a6-8e41-c9fad53fe43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9111fd93-26e8-47ac-ac3e-ee09265fa4af",
        "cursor": {
          "ref": "5c37cec0-7ac2-4897-9ae8-89d30fef3d14",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4ea3b28b-f362-42fe-9fc6-11898703a902"
        },
        "item": {
          "id": "9111fd93-26e8-47ac-ac3e-ee09265fa4af",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b3af22cc-1f8f-4757-b2e8-adaaebf4a9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468b3e4b-04dd-4907-9bc6-f4d7b6a4445a",
        "cursor": {
          "ref": "95d21a1a-fe5a-4f21-8465-71b74dff8845",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5d13f06b-618f-44ea-9c28-7d86a5dfedb1"
        },
        "item": {
          "id": "468b3e4b-04dd-4907-9bc6-f4d7b6a4445a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "10a907a6-5612-4986-90ab-3d49e2f538c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8adee0-95c8-46ed-befb-a7b8ba98369c",
        "cursor": {
          "ref": "279a7216-9f06-4e7c-9326-04eaf7917fcb",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8c621a12-c181-4eb8-a50e-764657ac8fd5"
        },
        "item": {
          "id": "9c8adee0-95c8-46ed-befb-a7b8ba98369c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "250dcb31-8322-4994-a101-b1df6e2d5249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a22b9ea-217a-4255-ae1c-34bb6a898653",
        "cursor": {
          "ref": "7baab661-8c63-4c22-ad2f-af72324cf372",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d880ef59-7a96-4245-a4dc-75990ddce474"
        },
        "item": {
          "id": "2a22b9ea-217a-4255-ae1c-34bb6a898653",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "63ce5187-a506-45c8-9aa3-7de8fdc0b0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e83f716-19f6-45bd-a19f-53a7281235ca",
        "cursor": {
          "ref": "a0660951-0546-4d7c-a227-7b89ea9c66c2",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8ebbc9f9-1b98-466a-80b0-96a4804c03e2"
        },
        "item": {
          "id": "9e83f716-19f6-45bd-a19f-53a7281235ca",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b2e4e708-cbff-4011-8054-56dcd0420f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fb3457-be40-444a-a0f9-6b29121352b9",
        "cursor": {
          "ref": "95811e7b-f0a7-4303-8b61-feffe5c5084a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "498f569d-e645-4952-880b-a76d856c8c69"
        },
        "item": {
          "id": "f5fb3457-be40-444a-a0f9-6b29121352b9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3ec6aeb7-b35a-4df7-bfc5-f8965d2615b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828ed301-ab52-4f76-89f5-cc796f8c9659",
        "cursor": {
          "ref": "f87142fa-5efe-40ba-932f-8f10dd2aa73b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a3ee5689-9c32-4194-a8cf-e9eeb17a9933"
        },
        "item": {
          "id": "828ed301-ab52-4f76-89f5-cc796f8c9659",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e69f37f5-71cd-49ee-a8d7-04d9d90697bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df69f877-a9e8-458a-aaec-820342d963b0",
        "cursor": {
          "ref": "e1b6011e-6879-4991-a0b8-6b5bc88404e3",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9eb0d78d-cc64-43a7-bfdd-a18470f1a993"
        },
        "item": {
          "id": "df69f877-a9e8-458a-aaec-820342d963b0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "22a38413-f4d6-47b7-a1ca-ee7fa3cc00d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6660099d-16aa-4bae-8790-756d33916b63",
        "cursor": {
          "ref": "9b390cf8-1bb7-4891-82bf-feccad2b5b52",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8d647156-c7a4-45a5-b9ad-db4ad287ab29"
        },
        "item": {
          "id": "6660099d-16aa-4bae-8790-756d33916b63",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cda76b57-1b47-4413-adca-d62f253ee397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7ac986c5-0585-4f11-a0f9-17969c748fbe",
        "cursor": {
          "ref": "6a7da5fb-5d2f-4b1f-aace-07305ce7228c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c53ecc00-56cf-441b-bd38-7f6486f57eef"
        },
        "item": {
          "id": "7ac986c5-0585-4f11-a0f9-17969c748fbe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "32429399-4c68-4b98-8a49-71aa942d3683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfb44ab-50c1-4ee4-aa18-85f31b1f5bf1",
        "cursor": {
          "ref": "a93ae3da-04e2-47b1-920c-838c768d85d3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1de3eccf-19d4-4f95-ad8a-37a55ef5fdcc"
        },
        "item": {
          "id": "bdfb44ab-50c1-4ee4-aa18-85f31b1f5bf1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0634c856-8b88-4074-9d7a-8cd8e4faa2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcf1ae4-0b98-4235-89a0-70279e07e93b",
        "cursor": {
          "ref": "fa6a3f11-d586-4790-9e07-1a5bd7cb3995",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2155b0ad-3f19-41bd-b3fb-981426d0d2b0"
        },
        "item": {
          "id": "1dcf1ae4-0b98-4235-89a0-70279e07e93b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cfd02884-8b0b-416b-a3ae-32cbe3b05fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1da928-8372-4e13-aaac-80078c967468",
        "cursor": {
          "ref": "02e836ed-1b20-43e7-95ec-07ed6b13b923",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5cca171e-265f-4924-8854-c9be464b83f6"
        },
        "item": {
          "id": "9b1da928-8372-4e13-aaac-80078c967468",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0bea3c74-6001-4379-b7de-b43fc0941007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f531b872-c1d3-4d4d-8392-5c74aa20526b",
        "cursor": {
          "ref": "03739160-de8e-4723-9837-57c6af0f7bcd",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9dd34370-32c5-493d-9386-e1d4d708b714"
        },
        "item": {
          "id": "f531b872-c1d3-4d4d-8392-5c74aa20526b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "53c6d6af-78bd-46a3-8fa0-2aba3be34089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90a0174-b9ec-4e61-8caa-62b33af2f63a",
        "cursor": {
          "ref": "9117d8f2-8022-4831-bcaf-0819fb9275ea",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "91612a3c-fcc9-43c9-afad-244b4465e1bd"
        },
        "item": {
          "id": "a90a0174-b9ec-4e61-8caa-62b33af2f63a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "39dbf1ab-60b9-4d91-aec5-02038511c07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e503e7f-9764-4a75-b56d-1f1585a5b796",
        "cursor": {
          "ref": "fc905a2e-45a7-4190-beed-69aece6483b4",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0f88adae-0717-4c40-9825-73ad2cc8c174"
        },
        "item": {
          "id": "5e503e7f-9764-4a75-b56d-1f1585a5b796",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "48d69547-17af-46b2-8f3a-d9503e71073a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0160e962-8100-4b17-977b-64bec5ad029c",
        "cursor": {
          "ref": "ae05e55f-e210-4346-b378-5e993da8d0c1",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "87eec9ee-c9f4-4e74-af85-9ba6b23052f3"
        },
        "item": {
          "id": "0160e962-8100-4b17-977b-64bec5ad029c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "34176589-a85f-4e13-87e8-9076c919b225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d528ad8-9243-4af8-a4e9-24ce983109e2",
        "cursor": {
          "ref": "bf161bae-501a-450f-a232-909ce7c9c38d",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2bb58fa0-9385-4b14-a17d-0672397b45b0"
        },
        "item": {
          "id": "2d528ad8-9243-4af8-a4e9-24ce983109e2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "55851b73-a669-46d1-9fa3-c2f1fff78337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676a1a02-3dd4-428d-b4ad-2008d0a05161",
        "cursor": {
          "ref": "64781670-d89b-4614-a887-3e80fdc6bd3a",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eb526ea8-2600-432e-bb98-b889c237968b"
        },
        "item": {
          "id": "676a1a02-3dd4-428d-b4ad-2008d0a05161",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc34562e-04e8-418f-84f7-b04137a78f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7764b5-2072-4f2d-9d5e-ae6e54ece596",
        "cursor": {
          "ref": "c3323789-d0d7-42d1-b45c-fe970ed7522e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa8fe213-0e05-42e7-9ac5-ff37e28bffca"
        },
        "item": {
          "id": "0b7764b5-2072-4f2d-9d5e-ae6e54ece596",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e545cc26-f1a3-4d6b-a05b-a1622593f652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd0ca96-6af3-461c-8987-7c78ac896a34",
        "cursor": {
          "ref": "fbc50473-8578-4a1c-b871-1f8b56d868b2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "26ee8a1e-226b-468b-9c01-a41e5f2f3d3d"
        },
        "item": {
          "id": "0dd0ca96-6af3-461c-8987-7c78ac896a34",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38e24b15-8d74-4b0d-96e7-2b93ef834a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeec6e4a-260f-4663-a02b-9ce73b41a42e",
        "cursor": {
          "ref": "58f37ece-22ec-4de2-96bf-b00a5292b6a4",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bc20b3ae-8603-4b90-9f6f-ef230524bcb3"
        },
        "item": {
          "id": "aeec6e4a-260f-4663-a02b-9ce73b41a42e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9f477d6e-3440-4596-8251-f6a8d683e7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f6763b-61dc-4b43-9789-e627dd74ddc5",
        "cursor": {
          "ref": "8a9a5ea5-a280-4a02-bc5e-0512d44f4045",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3e5016a5-4d81-41b8-8021-b5390c876981"
        },
        "item": {
          "id": "d1f6763b-61dc-4b43-9789-e627dd74ddc5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "576a01c9-2fbd-42c7-ab2b-1d8456612dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38813ef-89a7-4301-9c79-d9f258fc85d7",
        "cursor": {
          "ref": "36107cec-c069-4d8e-b310-8771b879accb",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "99ea80d2-4611-447a-b0e2-264b72c73f78"
        },
        "item": {
          "id": "b38813ef-89a7-4301-9c79-d9f258fc85d7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aa4d6b8f-0661-4e71-8c4f-48353765cb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4aeef8-42d6-4a07-8722-e6b0dd5da65b",
        "cursor": {
          "ref": "bdf1f50a-ea07-4569-a175-b1cc2c9182a1",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9b091445-b109-42df-b9ff-80ceebc375ec"
        },
        "item": {
          "id": "ff4aeef8-42d6-4a07-8722-e6b0dd5da65b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "16577247-d306-46f9-a2ec-bfba3ba6f70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd0fbd2-0ed9-49ea-8f9e-7bff64643451",
        "cursor": {
          "ref": "68bccb3a-18cf-4f95-bbfb-f2c3b09402ed",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "05906c85-a8cb-46d3-9d7b-35f0e5f45901"
        },
        "item": {
          "id": "7bd0fbd2-0ed9-49ea-8f9e-7bff64643451",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "af701246-e923-4b48-9da0-6e4d2cb66fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb7f8b1-5350-4934-bc59-6fce981da34c",
        "cursor": {
          "ref": "0f50669e-3d61-4c44-ae97-ad0cf629319f",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3de1d613-f47a-4a36-86bc-b22171ad2cb0"
        },
        "item": {
          "id": "cbb7f8b1-5350-4934-bc59-6fce981da34c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9b84eb22-7cb0-4ddc-bfaa-27a39c75e29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e9b288-0789-46cf-932e-62550ff599ee",
        "cursor": {
          "ref": "0e10dbdc-07ed-438f-8123-a4a257c70c5c",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "03a17afb-6996-4d67-9121-2b0ca92bfa91"
        },
        "item": {
          "id": "c2e9b288-0789-46cf-932e-62550ff599ee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c7d17aeb-4c2f-461b-82bb-72674725af24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c36743a-7b39-4ff7-a814-de7b2b784aa1",
        "cursor": {
          "ref": "315f4408-c17e-432a-ac1f-22af2e9a20b5",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "92a470a0-3152-4eb9-b09e-b8ea941b393f"
        },
        "item": {
          "id": "0c36743a-7b39-4ff7-a814-de7b2b784aa1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4cf0bd1d-7c78-479b-998a-b98c77145585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f9d80a-58ec-4fa0-a436-02717b4f89c9",
        "cursor": {
          "ref": "8e9a510d-5ad3-46b8-b42e-a093279647f9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "936d4944-e0a8-4bc2-95bd-1e122be338fd"
        },
        "item": {
          "id": "22f9d80a-58ec-4fa0-a436-02717b4f89c9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "09cbc2c5-7e37-4671-a179-e7ed7b9d54e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00cdf98-1647-4ddb-8843-8716ec634c14",
        "cursor": {
          "ref": "4554e354-ce4b-49b6-91dd-5a77b7e878d0",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "00128de3-d394-4c7e-a77d-32e631be6cfd"
        },
        "item": {
          "id": "f00cdf98-1647-4ddb-8843-8716ec634c14",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f3abdf6c-b3eb-4eae-b71b-8eeadc37ebd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a4e915-4252-4b7c-8c19-ab3b365ab6e9",
        "cursor": {
          "ref": "12479d69-0aa5-49ba-ae8e-9cdd7bde7633",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "284b5e0a-329e-4483-9543-e2d77ff8c204"
        },
        "item": {
          "id": "12a4e915-4252-4b7c-8c19-ab3b365ab6e9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e4f70d68-af58-4269-92cd-fed055c3ef6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f706c3-e693-4e9a-878f-b622c6eea5f5",
        "cursor": {
          "ref": "d256648a-9ab4-4fe2-b4fe-174562a79b48",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eed85058-7d63-4ee6-b377-9bbb75524c3b"
        },
        "item": {
          "id": "30f706c3-e693-4e9a-878f-b622c6eea5f5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3475263e-ea55-4d37-831b-fa0a9c4e8143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d3bc2a-c67f-4c64-a814-c07a95cf5832",
        "cursor": {
          "ref": "ace382bc-a717-461b-9b4f-d5736afd8d27",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5cafbcad-b29a-4eba-ab19-362bd4565068"
        },
        "item": {
          "id": "e3d3bc2a-c67f-4c64-a814-c07a95cf5832",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "572b6cee-24f5-4b82-b6d6-90f57108e38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b645ce3-9ff9-422a-b83f-899e069511f1",
        "cursor": {
          "ref": "f704e187-27be-4885-9f3d-dc29779eb0a8",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5dfc0790-4394-410d-9215-8818e906aff8"
        },
        "item": {
          "id": "6b645ce3-9ff9-422a-b83f-899e069511f1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "65b7da6e-7234-4e72-aa7b-f7acce04c001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c33745-8ea9-4194-a1a9-9702ab067a15",
        "cursor": {
          "ref": "5174499e-de78-4efb-a8c0-ccac7d9b519f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bfd32601-abb3-40f9-a13a-f41c3f6733a0"
        },
        "item": {
          "id": "36c33745-8ea9-4194-a1a9-9702ab067a15",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f81d5f53-e3db-4981-9395-ae4baf6ac8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ac3ff8-9a88-401d-b553-16a10bb0d078",
        "cursor": {
          "ref": "156f99c6-805a-476e-8c99-fbe531c9c878",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ce720956-afa6-47e9-b59f-67ae6a2a4b48"
        },
        "item": {
          "id": "c4ac3ff8-9a88-401d-b553-16a10bb0d078",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7130ef8e-809d-47da-9409-3c97bade1f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610a61c5-4a8e-4436-905e-ee1bd2b9c1e6",
        "cursor": {
          "ref": "b9fd90a0-48f6-48e7-950c-052cc66ce24c",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "032a7523-2d9c-446b-aed6-913decbbc723"
        },
        "item": {
          "id": "610a61c5-4a8e-4436-905e-ee1bd2b9c1e6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8898b955-66bd-42fc-894c-ed3ef79cadb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f0349e-0f21-4f14-8d4d-e59274c513cf",
        "cursor": {
          "ref": "b9c09b7d-c655-4b8f-99d4-d2954430b5b4",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b3d66262-6d6a-4d64-a70c-eca538a0ecd9"
        },
        "item": {
          "id": "b1f0349e-0f21-4f14-8d4d-e59274c513cf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0a27ecae-7e3c-4a17-8d02-287904fa445e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0db2f2-7fb4-4ae0-81da-1ec8a5a80dce",
        "cursor": {
          "ref": "0a956ac5-1897-4401-ae01-0ced23d3a88c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fd1f9db2-a3ae-4ddf-b071-19406b812f2c"
        },
        "item": {
          "id": "2e0db2f2-7fb4-4ae0-81da-1ec8a5a80dce",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "40a7ce6b-b759-424a-beca-6dd5b3af46a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d2b033-1294-4106-97d6-eabdbf577a9f",
        "cursor": {
          "ref": "5f1709a3-f143-40d0-b58d-69a10a455c28",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6b759da1-e14b-4ec1-b50d-02f5bae60d20"
        },
        "item": {
          "id": "e2d2b033-1294-4106-97d6-eabdbf577a9f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91178153-8188-45c8-b9e2-1efc8727b109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d46ed5-9a0d-4786-94d2-048607d6f90a",
        "cursor": {
          "ref": "1f237879-407b-4160-a059-99082aee48c1",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cc718552-c345-4392-93f2-7bf1323d752e"
        },
        "item": {
          "id": "44d46ed5-9a0d-4786-94d2-048607d6f90a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fef37743-514b-4a90-b41e-9b076683e725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a60d3db-6d3f-4475-8c9c-f816c021a85e",
        "cursor": {
          "ref": "b14d440c-b64b-4be2-b633-d8c1c9415e2d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "50f1207b-a9d2-4004-bbdf-9f3eb1d73ed4"
        },
        "item": {
          "id": "2a60d3db-6d3f-4475-8c9c-f816c021a85e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bf34e725-303e-4b93-8c25-903b4af8dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1840784-f447-4136-b062-7a86b6940695",
        "cursor": {
          "ref": "a2695eba-7bac-4acf-a136-82f67be166eb",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c0e490d9-70b5-47ee-9079-dc75d25e476d"
        },
        "item": {
          "id": "f1840784-f447-4136-b062-7a86b6940695",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5d2e4295-04e3-402d-8540-2209610bea85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d42711-1fa8-450a-93f1-2ddd8406ca52",
        "cursor": {
          "ref": "b335929b-ecd6-4794-9be8-19e565b95d13",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "44f41914-7321-4b52-993c-0f62ab827f8b"
        },
        "item": {
          "id": "32d42711-1fa8-450a-93f1-2ddd8406ca52",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "46ab2481-ec50-4bfd-857c-2f51f6124a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6777f769-7bd2-4875-a081-bb65801c0ef2",
        "cursor": {
          "ref": "eb796b59-6b7d-43c1-b692-e54cb6a27b44",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "67648e27-023c-4209-82cb-473457465efb"
        },
        "item": {
          "id": "6777f769-7bd2-4875-a081-bb65801c0ef2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "60359182-42ce-47af-a928-decfed58cdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2264f655-6b77-4f47-9526-1539e51ff491",
        "cursor": {
          "ref": "1514b35c-cbbb-4a43-bab9-b04e6e8cd3a0",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a6ef3421-5c80-4281-9115-3f2a4bae01c6"
        },
        "item": {
          "id": "2264f655-6b77-4f47-9526-1539e51ff491",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a44fa048-58cc-4cc8-a026-403d77730d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdf63ce-f25b-4406-872f-d657098b5bf3",
        "cursor": {
          "ref": "6db9e8e9-bb10-4ee4-b63b-b3b175325725",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "47c240eb-800c-427f-86b1-11aa1e15dbd6"
        },
        "item": {
          "id": "4fdf63ce-f25b-4406-872f-d657098b5bf3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f12e8549-f86c-4273-b622-2954637b90dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9712dcb-0c30-4ade-a17c-94efd1cf29b3",
        "cursor": {
          "ref": "e71aae39-e7bc-4942-80b0-c9e4aecccc5c",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3114b2c2-4ccf-4285-9fb5-1f3ee53bcbcc"
        },
        "item": {
          "id": "a9712dcb-0c30-4ade-a17c-94efd1cf29b3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1498bbe9-0732-4e6a-841d-a78ee0e05283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869a402a-3fcf-4275-b572-8362380f23a7",
        "cursor": {
          "ref": "6e09c84b-69d4-4625-b8f0-4d9d626f16bb",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a532fdb5-01e2-4590-b796-b587917ecac5"
        },
        "item": {
          "id": "869a402a-3fcf-4275-b572-8362380f23a7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a094ac36-2b95-4ee5-84b6-f63dfcffbc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934533aa-dddb-4d63-accf-947912dd3742",
        "cursor": {
          "ref": "ce3c776d-2e09-4480-b899-27478393b528",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cfe3c24a-f44f-4dbe-961d-f9601b9aa872"
        },
        "item": {
          "id": "934533aa-dddb-4d63-accf-947912dd3742",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "55df0a65-c575-44ff-8cf8-73a35d119171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63aecd22-c2a2-4118-905b-e56c8c3bf44d",
        "cursor": {
          "ref": "a6d80883-21c7-4330-a5b8-f35bedfadffe",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a8f40486-e67e-4006-a41c-ee84c7267cf9"
        },
        "item": {
          "id": "63aecd22-c2a2-4118-905b-e56c8c3bf44d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1c3a1f91-97f2-4567-9233-50ea4d3eafa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f9540c-7b18-4e75-b1fe-8aca6f802e12",
        "cursor": {
          "ref": "4adc9f44-d365-4b1d-a8b4-c5cddbe1fcbb",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d7b0e10e-af25-441f-811d-3de6260b7c51"
        },
        "item": {
          "id": "c6f9540c-7b18-4e75-b1fe-8aca6f802e12",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "18147e78-e3c7-4594-8a6b-7e11ec224ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c266d360-897d-4073-9746-3232d9334d53",
        "cursor": {
          "ref": "591d37de-69b3-448d-b3c6-5033d6fd3da1",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bce4ed30-7cfd-46cb-af6f-663425bd3eed"
        },
        "item": {
          "id": "c266d360-897d-4073-9746-3232d9334d53",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b3ae9e5e-0577-4f85-b474-5769186d77db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4076e9f2-087d-4f79-9001-ef2e5dafac15",
        "cursor": {
          "ref": "ea8e1eb4-46f4-4d95-a4f1-75f71c027b9b",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ad32b9ef-4e4a-418a-b42e-d20510503979"
        },
        "item": {
          "id": "4076e9f2-087d-4f79-9001-ef2e5dafac15",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2484e06c-0b9a-46e1-909f-515fc34a3e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5fd311-551c-448d-b721-f97459b7ca80",
        "cursor": {
          "ref": "1a00e667-2458-4341-bfc4-766d712996d5",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c53abee0-a3b4-48ac-9ff1-c9b81a7341f5"
        },
        "item": {
          "id": "3f5fd311-551c-448d-b721-f97459b7ca80",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9889b381-367d-472e-a1c4-d1bbaf9871d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675e0a52-b86f-4b47-8bdb-10db69d9db14",
        "cursor": {
          "ref": "de3a4ba5-4162-4d7a-a3a1-648c8032576c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "37ddc72f-a7cb-445c-8dc5-0c3d6623a538"
        },
        "item": {
          "id": "675e0a52-b86f-4b47-8bdb-10db69d9db14",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1a944e9d-a6e4-4bfa-b81f-9457adb717c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f929ad-2d22-481f-a8e6-1573c518663a",
        "cursor": {
          "ref": "5c495e27-0403-48cf-b2ed-34143d5fde4c",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "694104e3-bcf4-4e93-925f-42230b933a58"
        },
        "item": {
          "id": "37f929ad-2d22-481f-a8e6-1573c518663a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3b6a01f4-1d03-42d4-bcac-3640bb5ab09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9149ef54-0e0d-4bba-92d8-46f63b7634a8",
        "cursor": {
          "ref": "d81b05cb-8fa3-4123-b099-aa55ed0594af",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "246da281-238d-4643-92be-b609a80e7df0"
        },
        "item": {
          "id": "9149ef54-0e0d-4bba-92d8-46f63b7634a8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "748b5d1e-e2b5-4bed-a059-61497ebd982d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88731fbb-e880-45fa-a3f2-252c607ecd49",
        "cursor": {
          "ref": "36ccd839-02af-4422-b7cb-799411b27cbd",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "219124e6-98b6-4492-9437-b00ae92cc231"
        },
        "item": {
          "id": "88731fbb-e880-45fa-a3f2-252c607ecd49",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "66caf246-78c0-4a33-bc34-4560e8107428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a1b9d7-c33c-4a4a-81a2-b85ed79f098a",
        "cursor": {
          "ref": "4f026348-fa02-4a10-85e2-c5c69bb4033f",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7b69228d-b5d5-422c-ad2d-d9804f554110"
        },
        "item": {
          "id": "c6a1b9d7-c33c-4a4a-81a2-b85ed79f098a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7a9238c5-8806-4f2e-9c2f-75e97eeb0d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4f2d0f-995b-4c65-bed8-59d6e75beb0d",
        "cursor": {
          "ref": "d9751968-7119-4b8e-a690-2859892e66f3",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2a13b59-e944-43cc-bec0-682ee5c88b0d"
        },
        "item": {
          "id": "6d4f2d0f-995b-4c65-bed8-59d6e75beb0d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "395425c9-56fc-4b96-a9f5-3c3e4f01124d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82633044-8d16-45dc-a8f3-466fd68c11db",
        "cursor": {
          "ref": "fc9f2f83-536e-41b3-86a4-305390e7b441",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "07595981-1825-4079-9a73-f80eeb7be498"
        },
        "item": {
          "id": "82633044-8d16-45dc-a8f3-466fd68c11db",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e1bcedac-7b2d-4981-92fe-9530e8105be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba00282-4502-49b6-b05e-2c7bfa78d6e7",
        "cursor": {
          "ref": "355d71a4-a8d2-4d64-acc4-d7c48822982c",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9641ce1-2f63-41fb-8b9e-10604ed257fb"
        },
        "item": {
          "id": "eba00282-4502-49b6-b05e-2c7bfa78d6e7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d94a10b0-b058-405c-bca7-1f7ecc940998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bd10ac-03a2-4f89-8f1c-d92c1a4020d0",
        "cursor": {
          "ref": "e42204bd-719d-4948-b536-231e3c4dafb3",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b3402766-fdc2-4ae7-8748-900b13873085"
        },
        "item": {
          "id": "93bd10ac-03a2-4f89-8f1c-d92c1a4020d0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "165ae266-3d41-438a-af0f-55f4b74b9e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c926785-faf0-4b92-958b-ac36b05c77bb",
        "cursor": {
          "ref": "e0890537-07a9-45ba-9ff5-c7485aa90e52",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e933bb8d-ad5f-43cc-beb8-a8e649cfd485"
        },
        "item": {
          "id": "6c926785-faf0-4b92-958b-ac36b05c77bb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8e3f23e7-ed21-4bef-bc86-cca960984e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9056cfd-a738-411f-af53-ca605d2f1231",
        "cursor": {
          "ref": "09fe2ca3-f8ff-4f82-806f-3b1fe84e5959",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "caf77d18-b52a-4bfd-8b05-f93d53009cc7"
        },
        "item": {
          "id": "b9056cfd-a738-411f-af53-ca605d2f1231",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f4a80236-02ef-4a5c-b1b2-c61e77de8cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3294c3-ab5f-40e6-a0b2-66f796d2ff06",
        "cursor": {
          "ref": "93f180c6-362a-4cee-be02-803b7d05be7f",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "682e3c01-fe15-4069-bad7-829925c088d5"
        },
        "item": {
          "id": "6d3294c3-ab5f-40e6-a0b2-66f796d2ff06",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0543c870-0a6a-4ec7-9ca2-ab2f7c8e9bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67e54c2-0d3c-483c-ba91-50e02fec176b",
        "cursor": {
          "ref": "e5e6199f-4472-40c7-861f-bd59ddff06fe",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "44679482-6fa3-4a55-859c-0ce9cf49bdda"
        },
        "item": {
          "id": "d67e54c2-0d3c-483c-ba91-50e02fec176b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b67f50af-4aad-4e68-87b3-e95d9c6e3e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456d40eb-da3d-4f7c-a4c4-509988f71da6",
        "cursor": {
          "ref": "107bc743-c32a-4d3f-a1b3-0307f305eecd",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "063d79d3-1c45-4274-b464-b7a2397e464e"
        },
        "item": {
          "id": "456d40eb-da3d-4f7c-a4c4-509988f71da6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "388746b7-682f-4635-8b3b-5b1e4929d77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6629d85-9fd1-4a94-802f-38f4b6f96c65",
        "cursor": {
          "ref": "e246ec56-2dfc-48e1-8a05-b2748a047fee",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e1eb0716-2d8f-4ba3-813a-ba871cab6880"
        },
        "item": {
          "id": "e6629d85-9fd1-4a94-802f-38f4b6f96c65",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b3e94b87-863f-402d-bc31-6bd3253e6ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac3e47a-bf64-4734-ac15-58617c81715f",
        "cursor": {
          "ref": "4e9f5e26-0004-453b-ad46-6325fb2fef03",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "87dbebec-7749-48dd-8018-1a1a9507393c"
        },
        "item": {
          "id": "cac3e47a-bf64-4734-ac15-58617c81715f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "352e9d05-a155-4ff3-a6ed-7eaef092d1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09de7685-09f2-40ab-a6ce-e97d3b206b3c",
        "cursor": {
          "ref": "91153270-fab4-47bf-906f-c45784700678",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ec95eeb-e530-4a85-b79a-b11a2465bdf3"
        },
        "item": {
          "id": "09de7685-09f2-40ab-a6ce-e97d3b206b3c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c49b7695-1131-4730-943b-580bc049063d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e68fbf8-0397-4139-ab9c-74e59db3851e",
        "cursor": {
          "ref": "4fc3451e-6365-4a62-9423-b7bb59e353a9",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "00d5aa65-3e84-4049-9561-c45584c8b2bd"
        },
        "item": {
          "id": "1e68fbf8-0397-4139-ab9c-74e59db3851e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6c22d8de-4639-48f8-85dc-fd087625930d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f190650e-ddc4-4c78-8135-7dce7a967881",
        "cursor": {
          "ref": "d5b386d7-f742-4793-b5db-02cc6af7ccc6",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "15c0441b-0dd2-47ce-9d20-f9d0de79a9dd"
        },
        "item": {
          "id": "f190650e-ddc4-4c78-8135-7dce7a967881",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9a1fcf3f-acd1-4ee2-8940-0acb28bd9c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7489c7c7-2015-48e0-8b61-dd7f87388c94",
        "cursor": {
          "ref": "e5358222-2671-4220-b948-deccebd638ce",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "edd14303-cce5-4b85-bddd-d4cdb2958bd9"
        },
        "item": {
          "id": "7489c7c7-2015-48e0-8b61-dd7f87388c94",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bb919bd9-daa9-46cd-bd48-7f72f3547304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db627b9-94c0-49d5-a906-b32e87983edf",
        "cursor": {
          "ref": "7b194f99-26c1-472c-9a8c-b4e7ca41267f",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9587ec56-0a38-4dd0-a753-7946fd000d4c"
        },
        "item": {
          "id": "8db627b9-94c0-49d5-a906-b32e87983edf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c648589a-524c-41ac-aa60-0020d68bf611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cf2c2f-0964-4538-b351-5c6b5da8c0a2",
        "cursor": {
          "ref": "5ba254b5-4bda-40a4-8520-8d77ac417bfc",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "871b1dc0-1afa-48a7-beda-e0e3a16a0930"
        },
        "item": {
          "id": "74cf2c2f-0964-4538-b351-5c6b5da8c0a2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "45cb974d-2001-497d-85b6-955abf6a1530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d35ac8c-809f-44d8-a595-b2dbf42ccd62",
        "cursor": {
          "ref": "50758f2e-9c48-4e73-9ff8-672ac0041f7a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a16e8cf0-65b9-48be-9035-99b36dd84f66"
        },
        "item": {
          "id": "5d35ac8c-809f-44d8-a595-b2dbf42ccd62",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "267005c4-501e-4f61-803d-f3206b8cc737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debaf601-939a-4098-b505-d2243a0d59e1",
        "cursor": {
          "ref": "776d806f-e163-4f8e-90a4-21529357a2cf",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0f913846-1c57-417b-a857-6cfe450dffbe"
        },
        "item": {
          "id": "debaf601-939a-4098-b505-d2243a0d59e1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d96ce405-e616-47e4-9e23-a528299cc7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571c13d1-dcca-4852-8e7f-a9131e2521fa",
        "cursor": {
          "ref": "5c48f331-caab-4244-8918-89ce8de4903c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b8c841f5-0d18-4de2-a6f7-579bfe522e6d"
        },
        "item": {
          "id": "571c13d1-dcca-4852-8e7f-a9131e2521fa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "20c084b6-a1b6-482e-a364-c4b9cdb1a0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a43ea7-8d75-4468-bc09-9a50f1ab4719",
        "cursor": {
          "ref": "4039c109-14bd-441a-b3c2-3c20ee283eff",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bb429149-6b75-4c4f-bb81-f46d764fe15e"
        },
        "item": {
          "id": "d0a43ea7-8d75-4468-bc09-9a50f1ab4719",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "01ed4314-4c23-4a9e-b6bf-077d24d87d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b823470-cb06-4873-a792-1dde85752bf7",
        "cursor": {
          "ref": "b3422cce-de3f-48a5-9649-517038fac3c4",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "fbd2ab23-36f4-4d23-880a-4aaad540c2ee"
        },
        "item": {
          "id": "3b823470-cb06-4873-a792-1dde85752bf7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8a014634-f241-465f-8c08-50377dcffdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348242b1-b3aa-42d5-8155-bf0b79ddafcd",
        "cursor": {
          "ref": "8ae1ea5c-903a-4d25-b9d2-5903cdc4a5d7",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "499a70d4-3296-4503-bd56-c4416d72677a"
        },
        "item": {
          "id": "348242b1-b3aa-42d5-8155-bf0b79ddafcd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b0dcd9af-6527-44b1-a7a4-56e5abbee577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4f719e-2244-4cf4-85c0-3ede358a0872",
        "cursor": {
          "ref": "934e3103-9798-4774-b375-1caa10700b38",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "01fb3a1c-b980-4f17-8a01-955ca0609a09"
        },
        "item": {
          "id": "0b4f719e-2244-4cf4-85c0-3ede358a0872",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5dec2e92-3607-435b-9c73-0280975ec515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d009e7e6-9726-4897-a912-41f5e4e4ae13",
        "cursor": {
          "ref": "d8b58ddd-b453-4d76-a5eb-c6c48daf1ac6",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0a06279d-9cb1-4e47-b07f-b30888d8b348"
        },
        "item": {
          "id": "d009e7e6-9726-4897-a912-41f5e4e4ae13",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6723f9c8-31af-43ee-bc08-df4262e28390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e983e28-2b76-4eb1-b363-8a763abfb029",
        "cursor": {
          "ref": "361090df-1810-4870-9ecc-7668102e7718",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8b8f0001-b936-43bb-9a91-9d697f21958c"
        },
        "item": {
          "id": "8e983e28-2b76-4eb1-b363-8a763abfb029",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "284f76e1-b6dd-4e12-8bba-3e8954e2cceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25200f32-9612-4987-a331-560877e9bdf6",
        "cursor": {
          "ref": "c386edba-a939-432b-a431-4c32f5f261f5",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "82303f35-88a5-43e3-b0a5-96441b33c9d9"
        },
        "item": {
          "id": "25200f32-9612-4987-a331-560877e9bdf6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "29ca286e-023e-45c5-9c46-77dc32b219b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651f1b0c-d76e-4c89-ac91-5981f4c0ee9b",
        "cursor": {
          "ref": "2ec20099-a916-4d9b-8203-4315f4437ef5",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4881dbeb-7d0a-4e96-84e8-1ce8e6dda1ec"
        },
        "item": {
          "id": "651f1b0c-d76e-4c89-ac91-5981f4c0ee9b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8894e61a-c93a-4309-85bd-8db61d4e99ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b75f38-4089-4e0d-8832-e477c2b92cb1",
        "cursor": {
          "ref": "998f9f79-732d-41a0-abbd-a4a5c6e0c062",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a8cf04f5-b39b-4a6a-8609-cff58d2b0d6b"
        },
        "item": {
          "id": "56b75f38-4089-4e0d-8832-e477c2b92cb1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c747d8e4-45c3-4915-8731-07188b92d8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f50eac-89e6-4572-8bd1-885e4efd0b31",
        "cursor": {
          "ref": "e017bfe9-0f1e-4133-b9e5-86ff1095ffc8",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "aaa925aa-ff7f-4fec-a5aa-923ada9b3eee"
        },
        "item": {
          "id": "05f50eac-89e6-4572-8bd1-885e4efd0b31",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a6691840-cc3c-46f2-bb0c-fccc4ff6d4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bad182e-122a-4bd5-8bb7-3dbf3af72c61",
        "cursor": {
          "ref": "159c83a0-4e90-46d8-adec-5455285db1b6",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "46d241a3-60b9-43bb-8770-37955af0e777"
        },
        "item": {
          "id": "3bad182e-122a-4bd5-8bb7-3dbf3af72c61",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "206ccf5b-8b48-4c06-ac35-8623c5e04df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18484543-a07d-4034-8fd6-f92b7910dd5c",
        "cursor": {
          "ref": "66bf9d72-f27a-4028-9f9a-93acf0b00f9e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ec07b5b2-4fd2-4253-b554-4c14e871048a"
        },
        "item": {
          "id": "18484543-a07d-4034-8fd6-f92b7910dd5c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "17fddf3e-3354-42e4-8062-61fb630b2662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9500d9aa-7bc4-4fb8-9f54-3b5e4ab7e296",
        "cursor": {
          "ref": "71bce798-f33a-4ca1-b4a3-98ab8a202013",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "74d12c63-ea1b-42d0-bbc6-3b4cf62db534"
        },
        "item": {
          "id": "9500d9aa-7bc4-4fb8-9f54-3b5e4ab7e296",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4546ef2c-2ce6-44e1-88f5-904e35714501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4c970b-4ca1-4f27-8d4d-d6e7cd350e96",
        "cursor": {
          "ref": "b246a92b-4e9e-48b0-8bba-090bb1df1c11",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "95e9a11c-bcf6-4a4c-9c8c-7f80f019a7d2"
        },
        "item": {
          "id": "bb4c970b-4ca1-4f27-8d4d-d6e7cd350e96",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "473e57cc-ab15-4168-b00f-2ee122244d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5c4174-20be-4de4-a959-61c5e78dd781",
        "cursor": {
          "ref": "99db60dd-5c1e-4be9-a596-4709d5ac9d80",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c2b3f413-7386-4484-a1cf-cbdf6c0a453d"
        },
        "item": {
          "id": "6f5c4174-20be-4de4-a959-61c5e78dd781",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9056026f-9185-4515-9eae-0585a7ed5442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f465f4d-3d98-4116-9f3d-b5b55a5f9037",
        "cursor": {
          "ref": "a92582d5-ab2b-4465-94ce-d85fb8e33c1c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "3096ab19-3e8d-42d8-9413-5dfaae533fca"
        },
        "item": {
          "id": "6f465f4d-3d98-4116-9f3d-b5b55a5f9037",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "19bbf17f-cd43-42ee-8f4d-ea6cfa463088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f139529-ff00-4062-9534-7c4cc839d015",
        "cursor": {
          "ref": "6bb95160-66c1-40a8-9fdd-d09b6b3642b3",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "43e55441-6004-4219-bb96-24348d9eb714"
        },
        "item": {
          "id": "8f139529-ff00-4062-9534-7c4cc839d015",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca1bda39-afd0-409a-ac96-21a43d46bdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8a0d2c-6986-4bdd-89ee-3bf063883342",
        "cursor": {
          "ref": "513aa473-aef1-44b1-8a95-622f2063360f",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "470ab5ea-6aee-445c-abb7-8e285047e3e9"
        },
        "item": {
          "id": "cb8a0d2c-6986-4bdd-89ee-3bf063883342",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5ed73d7d-bff7-43d1-9120-241c89006963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbf8dcd-b420-4e76-ac48-82a1e1213e4f",
        "cursor": {
          "ref": "7da72162-f172-4f69-b0aa-1512a159a274",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "24850daf-b1d3-4f93-a563-d611a588e893"
        },
        "item": {
          "id": "9cbf8dcd-b420-4e76-ac48-82a1e1213e4f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b8c223ca-b596-4878-a86e-cae0e955c79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff57437c-6e30-45ca-bcff-8da51162f7d8",
        "cursor": {
          "ref": "31a9f61a-42d6-40a7-a3ff-f15d70e7e7bd",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "4aa298d8-1717-48b1-95cf-0a6c5563c937"
        },
        "item": {
          "id": "ff57437c-6e30-45ca-bcff-8da51162f7d8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca7f092b-946e-4b17-9976-07958ed8852f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b7d36f-413c-4267-977d-5d3b0d231b10",
        "cursor": {
          "ref": "50431cab-ad78-4d1d-b115-02d4190434a3",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "35ab978f-b6a6-4138-bde8-d5c76d09b734"
        },
        "item": {
          "id": "89b7d36f-413c-4267-977d-5d3b0d231b10",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0d77cd3d-e304-4fd7-9dea-3a7f71524080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "23b8e4a8-2e0a-44b9-bed9-a72c07d04eb3",
        "cursor": {
          "ref": "0bfa6f43-47bd-4a78-af51-fabb0b305c06",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a1d48d32-b103-4b6c-8f18-775f7ec0ef88"
        },
        "item": {
          "id": "23b8e4a8-2e0a-44b9-bed9-a72c07d04eb3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4bd19130-a6d4-43ce-9e8a-e653ac2cc198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "28fe05ef-213e-4247-9c56-68bd5c3a317d",
        "cursor": {
          "ref": "1289a8fb-abef-4864-9136-974d699c0745",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4a6e2c1d-d677-410f-b53f-1245765bce2d"
        },
        "item": {
          "id": "28fe05ef-213e-4247-9c56-68bd5c3a317d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a68fb830-cf40-42ad-a362-58c51c71688f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2870ac68-6c26-45f2-a995-f42fe0d9ae8e",
        "cursor": {
          "ref": "dcddcc31-689b-458f-a02a-850d2959f73c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "401b00d1-cd15-4a27-831d-e96ec8323154"
        },
        "item": {
          "id": "2870ac68-6c26-45f2-a995-f42fe0d9ae8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "81116b3f-7255-4894-a094-0f72cc6dbbb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2870ac68-6c26-45f2-a995-f42fe0d9ae8e",
        "cursor": {
          "ref": "dcddcc31-689b-458f-a02a-850d2959f73c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "401b00d1-cd15-4a27-831d-e96ec8323154"
        },
        "item": {
          "id": "2870ac68-6c26-45f2-a995-f42fe0d9ae8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "81116b3f-7255-4894-a094-0f72cc6dbbb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ac1cc0-226f-4156-a7e4-1aa14d7270ae",
        "cursor": {
          "ref": "aa86d764-48a9-4977-9521-7d07a8c5f57c",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0b22d5c1-d3be-4bef-8cad-d02af16bbac3"
        },
        "item": {
          "id": "26ac1cc0-226f-4156-a7e4-1aa14d7270ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3c963260-33d4-4c56-873e-3f7d878c0932",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85c2768-243a-4eab-a650-19b23eea225c",
        "cursor": {
          "ref": "7fa7fcd9-57d2-4ab0-b4bb-b4c707f7330f",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "774eb2fe-e024-4fd8-ab94-e8ba6bd58e29"
        },
        "item": {
          "id": "a85c2768-243a-4eab-a650-19b23eea225c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9e999c6f-704a-4334-a0fb-9da9485d88e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}