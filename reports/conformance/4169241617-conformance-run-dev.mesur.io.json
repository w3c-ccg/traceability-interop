{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9dd12bb6-0f62-4a60-bcd4-a1395358886a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3fb495ff-7fef-4047-9c1b-33c9fa24d7d9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "829472f3-f34e-4172-b612-fa24a9fc0255",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "87656519-3bd3-41c1-96d0-6bc751a3e336"
                }
              }
            ]
          },
          {
            "id": "4c6d7ce9-aa14-4a54-9977-dc3d438f5d0c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "813a441f-0729-4798-b241-14708aa2b6ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7a56417f-d1ca-43e6-8022-c0d4831b336e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "29380379-e2e3-4260-8995-def26f3c32c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0036fd82-6c48-47f2-ab6c-0cfa130aa9e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "587126ca-15de-4974-8ba5-5cb564823b27",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ba3893b-b1f8-4cf8-95a6-30e9dd567724",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2fe9945-8c08-4c59-b069-8751cc3b0f8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1102363f-fd39-4727-bf8c-d964b7653b96",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55f65e1d-b4c2-4ac5-9ef8-56a5dcac8ed7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "388b4a8f-b422-4d2a-b1e7-d4806b832004",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28eb44ac-b32b-4f76-9c96-dc7db0e30706"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62bcda5f-fd2a-406c-9b12-90339ce9de69",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5276dfe9-7ded-43a6-86e6-48bc51c3a993"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc100769-a9fb-4dd1-9d09-c4b87d75bfc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4ba1199-42b2-4920-80ea-c22cdbda69a6"
            }
          }
        ]
      },
      {
        "id": "cd678268-a976-4c03-a195-ce6ee26efba5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "82486057-d334-4865-b6b6-3120f02fbd2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a25a44f6-f99b-4756-a51b-4b7546b7f812",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e12e17b-9396-410b-96cf-c998f364b736",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8c5b63-dab0-402a-a218-686d199d60b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "801b3274-b768-47dc-866b-408ddef574e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eadb9bc-eb49-471b-9c94-d855e9b078e6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d6f872-b236-4936-8039-ba981549bf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fa17987-e376-4e46-87ca-960096f99e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37212fda-786b-4e32-bd0a-0f7564e30207",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebbc63d-a729-4df1-a1d2-9b74c1e0278e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a046369-cf3d-419c-bae9-eec417ab2220"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "75d5f5de-b07f-4251-a9ab-cf7d8222c1bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d981e44f-3bb6-4706-89ca-b806dd4778c4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6994ba-9680-4c86-a96a-7c2045843a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2126dceb-657e-499e-bcba-aac6b33ab70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57b0ab9-2b94-46a9-96f8-2afd028cbf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee02cc6-49ad-4659-8b8a-097572ee731f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b34975-a404-4779-b924-fcdc902e49b7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856a743c-bef3-40ec-a5fb-d1e664a8adb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d7b7ada-be49-479c-8cfd-c4df4cd15c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3962e5-8271-4ab8-b6d0-30debb72f8ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "75fc937e-5439-40af-8441-974188698986"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68a7d1f8-314c-43ae-af2e-954ecb9b753d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a912f2cc-d27f-4fee-b985-ab802aea9f41",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ca5c6e0-55f5-4693-9295-7bc5d5db51a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5ef5535d-7e38-4b15-ac1a-a8058e10f49c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70e041b0-ba2e-4421-aba8-811fd861626f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "71f0f199-76a6-4820-8cda-95b210215849"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df5dc096-76d8-4ef0-8bc0-496b27da3076",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "738e7bdc-a31e-4367-9eab-869764453a23"
            }
          }
        ]
      },
      {
        "id": "afcc2319-5f51-4321-be6e-a87370e7b880",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a8cd6f50-5afe-44ae-b4ed-faea7fba3318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2c4a802-59aa-4d09-94aa-3f57cd5681d6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a3c2e723-843e-4229-984d-f4c49f72037e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd26124-9fd9-48ed-b44b-4fc2ec4df1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eb236e-513d-46d2-8cd4-5873574597e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ec13fc-222b-4883-a481-285f81619591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d3d2663-1105-4d18-a907-68ef334bcfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47e11e4-94e3-46ad-b452-a9a1d427e9a2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8523f2-67e4-48a1-afcc-e305e9255fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4000727b-a075-422f-804e-fdd6181947a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d224f86-e3d5-4fdc-b937-104c285fe72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa7facdf-70a8-4d04-bcf9-ffd5ec39efae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2925052c-48c0-4f32-aacd-1135e0751bee",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350d9973-cbe8-4f69-92c8-4d68056a0a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a095b8c-386c-49fe-95bd-de5843faefd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77562345-0b01-46de-a778-8d262b2fcc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc13fc8c-269b-4248-807a-2b06372008a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e391fbe-cb02-49b1-9b4c-598a8f41afe9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb61b7cd-729d-4390-a691-8c23d0e973bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b4a7e6-0a53-4c6d-a5ad-3979813f1d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bab9fe0-8e2b-4d21-9a5d-c322ec4cf675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6f3bc15-e6e0-403a-8887-85fdabd85ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95029eb0-a935-4e3c-9e4c-8c2156c4ded2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ebf487-8002-41ee-8997-cd6163d8394d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df74c840-8f95-4cbf-b7d9-00038ec6600e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f6cc21-8b57-4d2e-9aab-23408b2a7c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9231cdbe-60c4-44c8-a2e5-b0129fb659cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187298ef-8cb2-4d00-b05d-0f80d117c6c6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0558a85-2181-4512-a5f1-3e0652c81aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49760c7-43e3-4f53-8373-6606344cc4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b521a4ef-8adf-45f8-b9eb-57ef3f904041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6846ab91-bb23-4441-bf74-6c8bf570e6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12617d17-7b12-4a7b-8d72-e359cab7bfd1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6545f0d7-49ef-4562-a9d4-fc21ee39109e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58abdda-816d-40a5-a9d3-b32a95e91c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcaadb0-de71-4df6-b633-2af9eb75b5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82a18455-6ed0-49e8-893b-57e661742fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5367e2-6cb9-48d6-84b8-bb307174bdca",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd1e620-0f4c-416b-a1dd-7848653a4811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b58d5e-12f9-4b8b-9acd-17fe6460a8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960e7f5e-f44d-474a-bc2a-0018c3136b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95c38370-55b4-4a4e-bab1-eb2262357a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3008ee6e-31b4-493b-9ae5-d696a6a29f5f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7df3599-4202-4a18-8765-15026796eb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15c4f41-0460-4189-a8e7-81b403772329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6d94a4-df7a-41d1-8bf8-c9d7ddc6d6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b07ce142-4284-4e32-9d9e-501b6c5b158e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4030e35b-3793-4dab-8f21-17877225d881",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a2acb1-ded2-4466-ba81-06f647d54544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e67bed2-6252-4e39-9596-c37c8b7cab88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e13905a-3a41-41bd-9034-bec90e62b25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59be2755-be4d-4d23-b16e-15c347660c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c62b41c-a477-4972-a069-18bda64a6ac4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fc2d89-ac79-4b15-922f-ca423545c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9576402-6061-4b85-a8bf-ce5a220485d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275901e4-8ecb-4250-9fa3-c4c5cc774944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06d2e495-766b-474d-9c18-b6595eb510e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a99a0b8-3161-4ee2-b8cc-93b20e3c8ee4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76675cb-e7e8-4e09-a1eb-8298e6c9b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d13a2c-9beb-496e-9007-0d020a39536d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34faf6a4-d1c2-4aaf-935e-88267c64d263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a2bae32-cddb-4f24-b5e3-f759bb09f903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a051a682-ae7e-435f-aa05-95d728fffdc1",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a999330-b656-40d0-8b94-2e42d5a03bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c602c8-8e55-4e5a-8d81-53f2fa3dffe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc75821-3fdf-49d0-bfc2-7c4127b1aafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b36116c-85e8-40ad-a94b-6e88f26a0c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e23860-d2e9-40da-a576-fa681a0d62ba",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dd4f56-b054-4f6d-a870-d430968a1761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e74f6d-4e9d-4c44-9484-1b6b16ce210d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7314dbc0-e421-4205-a146-c3b41cf37f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "810d221e-acbd-45f4-b4a0-86415bde223e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5e1e4e-fb98-4ef0-8817-b150459b446a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6a356c-6778-4b7c-8fe5-aecaf1e43c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92698f7c-bf2e-4fe8-9aae-9b3c92e01766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504f6ee2-f091-4506-b1d2-36395c4fa7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "018c373f-6b1b-4f69-b973-fc38c1afc897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffe647c-98aa-4b8a-8e98-83c543c894bc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7b653a-f40d-496d-b1e4-287d46dcf551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4a9300-57b3-4401-8476-d7ee14698be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfd4f11-8363-42e4-8fc6-914a519f6b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea1c7b8c-0783-4b8c-aad4-70bb29c0a5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab362853-1717-4196-813c-2bfe584026cf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b595338e-27b8-416e-a014-b26b9f2ad411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e93523-1053-4c1f-8668-6c17387f08d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc45e4d-feec-4c71-ae18-8acfdfb232fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c368774-09fc-4141-8fa5-fe2bb7185f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf84822-7dff-4964-9b28-ec1db68de836",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b929f59c-041e-452a-88ec-a87bf13cc44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffe2888-d87e-41b0-b3c7-0939fd8c54e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77f02b8-57d3-4517-9bda-30de4f7b26e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f49f4de-1028-470d-9ba1-58dc041dced8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ffc1e5-75ed-4b2c-bb68-307743426e11",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129478b5-77a5-46f3-b24c-5bfe3298ce25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a71a9da-0cb3-4be4-b5cf-5bb4a0b0c94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317cde87-5ce8-4fc3-be41-b7880f0b98f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "66c397a6-f966-4221-b9d5-a5d9714a223a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed011270-4726-4382-9862-008a7e4bde1b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1994dbc-b32f-4933-b6dd-81b49a4028fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21964c03-c44b-451d-9c42-67a8f6732b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaf086a-f024-4bc6-9442-2308df40fcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb75d97-31c5-4cf8-a0ea-b046d9621663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965c4d3e-6da8-4077-b749-bde1057fb2ce",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81061a9-bd67-434a-baa4-4c36564febc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43593bec-ff0c-4c56-b9fa-ef00dc7e00b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f64fb18-87fd-4734-8da3-3f45b9189990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a49ba5c-f1e4-4328-8186-76955258ea98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07acf68a-a7f4-47ac-aa45-9571245050b2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a201ed3-cd2a-443c-af95-1f6c93636f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9100f57-a892-4d68-906e-bfaee965907c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea99a821-5875-43de-90fa-296a083bfabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ccae29-e517-4188-a81c-10fb8437bbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a89d8d-7ab8-412a-8953-a83297d41332",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba7b935-0cf0-4633-9331-c66aae56a5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ac5c82-2577-45be-9c8a-a4d36a6ad775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f035085-2525-4d89-b1ff-737e69e10588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d57c257c-e24b-4366-b166-1da50981f28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca9e5de-4866-4a90-a96d-46e2461e308e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaa29bd-9c53-40b7-a23f-3ee0c4b1025a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2547e65-3482-4fea-8262-4bac601c4198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63d0f19-a7cd-4434-8963-4ccaaffd71aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db9a3664-31b4-4c16-978f-54202f3c4966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de85953-2772-4bb3-9d61-771f35dc53e4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c719944e-8ba9-4af6-b4ee-0981c97e9d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73386352-5138-428a-a01b-e47f8508ed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d7783c-dfbb-4bfa-a603-c9763a0d5a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e83ddb5-5978-4ffa-9eb3-711d0f17d1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4b75af-ba14-401f-b466-16b9de154bab",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c1c065-5487-41af-9a51-ff506b386f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd3bf39-4642-44f2-98f7-f454af222712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c41d37-ade1-4f6f-96a5-6420892ecc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "102527b6-b594-4a10-8c8f-9426eef2d616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47df9e4-7691-43f4-a014-bbfd4feefd13",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5989dc6b-d73f-47be-adcb-88e8b391b5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39111db3-3ca3-4fac-a41d-debd4427bd59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa4e8a7-c169-4340-b4fb-6644a5d19bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f55330f-8cf0-4226-b0e5-845df60fd5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86dcf63-c7c9-40c9-a277-92d9d7191597",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5828352e-7198-48b3-a3d9-69c06194aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed40b54-1ea1-45c5-bc83-fa20834433b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61173f06-2c90-4180-86d3-a95b3ca0b48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "949ccbe1-e890-4f1f-b219-53c476b60f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62add4d-2eb1-47e8-8fc9-01b031f5c5b9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ec2626-d36b-4492-89f1-3be3406ebf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c39ecdc-45d7-4543-806a-cb1141e67ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5bf176-1e8a-418d-86d3-1bfaf7ebd084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3c937c-de3d-491d-9723-2d63c64fd37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc57828-57da-45f9-a836-8dd61b8ee38f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e49e8b6-d72b-48ec-b537-437daccb5b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73e79d0-3ab3-4087-b719-746ee5f01169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce9ccb1-eb77-45c4-9f8d-e0df11451202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "848546e6-aa23-4a2d-9c9f-835d65c659b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8949a8-8ea7-4c48-b2ce-8641d23c73ac",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bdb7c5-39e1-41f5-8bc8-3ad013f0c73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae227d3d-3dcb-4898-848e-16be8ba36f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41e87ce-ae78-43db-919c-1334e9be0941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "87d862d4-f898-4db0-a3ee-3d26f6952bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032fa927-55f6-404e-a7f0-01ff876cb78f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a0621d-a925-4b3e-8ab1-671cb54a9679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2fe189-c7cc-4b30-a951-6312018e3117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec972101-a5a9-4ee5-ac70-031e5b58ca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "44a519ba-8d1d-429f-8252-90b475baa0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27df5307-d9a3-41fd-b04c-530edb61463f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f528f1-17fa-4daa-9703-33cff7488fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bdf772-1f58-480d-b280-b15b99be81c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8a1516-c323-4566-a606-24ce90cc262e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "425b11d8-adac-4004-bf81-bc086a39b559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b11941-9b9a-4fe4-92f7-2b5660562c60",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445af0a1-fe2f-4c10-9585-ee97ffca251b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433915c7-fb19-4c0f-87cc-e3f479f52912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2889a596-c6e4-4cb6-98b7-a445a305de46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31545852-9c5a-44c6-a17d-f55bbdc4390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c8f5e8-38e5-41ec-9bea-e9255c0565df",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312aa362-20b7-46a5-89f8-07f57b7a0627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a32de62-c56f-4be3-a74e-d219f7172494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87732a50-df6c-4d73-a324-e4da8491ea12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45edc61e-1ea4-40f1-8804-f7c8849c472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3815e90e-449c-4242-a1e2-c115d1659ce3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c042e79-7c65-43f1-b072-d67b89766a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc16f44-e431-4ac0-8015-f6fd3787aa2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7f313-352b-4cd1-836f-9d605416d351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9812d785-5195-49d9-9eae-bfff8e38a5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a59dd78-34f4-4597-b06c-ad9e36dd56f0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5ec353-38da-4ead-acd8-6b7314006af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7efcb73-7b3e-46da-8fee-b9529348e444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dca36dd-a00b-4fd2-b86e-0926a5e71aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7beaf784-78e1-4978-a5f5-77d574129bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac3917f-5893-4be6-96c6-227a0eb523d8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f68313-a0f3-47c0-ac70-10cde8d2a92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04ebadd-21ba-48a5-94e1-e16ec43145e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9b36a5-c28b-44f0-9694-4e4ae94288c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1cb179-cb26-4a90-8e99-f217d1ce654c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bdd631-194d-4583-9bcb-278b50cd0d89",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31e7b45-8009-4daf-8c6a-6703ac3bc158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e22a5a8-91f0-4b9a-886f-08732339b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9ae5ec-4c21-442c-9619-f887ed0453e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7de9fc3-e75a-443a-a95d-6d0bc9c667e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39a7be0-1894-4073-baf8-65648e9edf45",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05a1112-2dc5-4f36-b6e9-5828d50b2c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1345b272-7631-4414-989c-25b1bf916bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4fb856-4417-4618-844c-d92cad3284cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61bfca8c-3d73-4186-ab1c-25799a5eb39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf9ab72-3d79-4fe5-9bc7-231b46889fca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfd6a76-8c55-4649-98d1-074e7feae702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b94b48-5d6f-4514-8f32-07f3a08ff90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28d60c5-35d8-498a-8ac6-a640a948230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7fee30-1391-4835-9eff-78d13bdc0dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6490bd8-d1b6-4fb8-b20b-806bdb5f4617",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f577d-b91c-4b4b-ba36-103c91febda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1efaa399-40fb-4af1-a5d0-a0c5ab28f6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdf706d-0ac3-47c3-aeb3-827cd13ba01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5953e9-b179-408b-bdb7-fbc7574c0b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389100f9-c942-4c6e-babe-259bf6635c6c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ced59b-06da-4a4b-8f5e-d072df068986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b762646d-4a76-4297-b062-35cd3a82913d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50576c7e-c32b-4c2d-bffa-c92cacc3fb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c57ece38-66ce-4da4-b07f-9d9f4e70921c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b73b446-1575-4622-8aac-298cf72648ae",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee05476-f2e5-46ab-aef0-4fe05da17cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb9ac42-07ad-4c2d-a65e-b724a7d24436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7822f6cc-75ec-45b7-bc22-db85d62b6c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd5059a-5954-4a44-a2a5-7e9c21346d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90056bd4-6c79-4df6-a007-8e5662c59063",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79df4caa-072c-4f3b-83fd-c08ecd742c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2682a0dd-3d4e-442f-88ad-28bc96adf6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d21eb5-d28e-4f7f-a119-6253232f8e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa54e54-0fbc-4e90-9443-0c23177dec01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d3d17d-34fa-474f-acbf-03d0fd1927b2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3434810-b291-4688-b528-8e2a1e5a85af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214b1420-e811-4d2f-8bb3-1f9bd7060762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be1d908-01b1-4f56-9449-1461c89eee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "348a6d52-0f3d-495e-b16c-2500558d4c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb37814-4c95-4448-b77e-0a01e4cb4ec7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a00152-aec0-48c7-9705-1eba15010a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585f822f-d0dc-4df6-9d92-2d4cd42362c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000c9ff9-86a1-4e49-b18d-a365b19a945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e061ca-5d94-4dd1-8d9e-f9e7994d81bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86265e06-0e18-41c9-8eaa-21ad170fab7e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98c7dd2-2390-4c66-a684-6fed60324519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e743e2c9-86e5-49bd-a4eb-5ed3dc97cf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6047610b-4a3d-436e-a505-2bf736073736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c63bec-6b07-4483-8813-7d10dfc0dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec032b8-573d-43eb-a08d-0fafc8bb24e5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea63f77e-5a1a-427c-8ae6-665eeaa7445a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3375dbb6-04ad-4a12-b9f9-098b103ef154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a7fcca-3489-461d-ad3e-d38056077c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c27bdec0-04cd-4ac7-ad39-204fc9990c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f175f7dd-b7d1-4dee-a698-850d1291fc58",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715a1bff-a05d-4037-9fb9-35d8dda7eaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1555d332-816e-447e-846e-146f97e234a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbcf51a-cb0d-47d6-82db-592382492e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30395b92-2493-4bc0-9efc-10a25b1e54b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aae31b6-627c-4863-b92e-7faaeb7f7bd8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0271a360-9feb-4824-829c-43aa24709565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ca11a4-5585-408b-b20d-69f0f0a7a5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bc8d59-e388-4dd7-acdd-df2e6cf5cd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e565be9f-924d-4e15-b894-2a8abde28a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ed0eda-362f-47a0-9217-2496131eb3ea",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbcc1db-4657-4858-9d15-9446b16ec735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1fbaf6-e158-49e1-8533-9df9f9f51bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18df57d8-8405-4cd5-afa9-3e34bb3837b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "76d25d80-26aa-4904-baaf-0dcf746c31cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b01fe66-59ee-4b6d-b22a-41fa41c782df",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8548c8a3-ffc7-4260-9c0b-d8b303b75d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cee719c-d7b2-40c3-acb6-1152048535b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ca742f-728f-4a6d-9bd6-dff0e51f69a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fccdd525-e2b8-48ab-8500-9889c3a2828a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c40bc66-6cd2-45f3-afe3-3714de3e5b95",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3440f2bb-dcc4-4e4a-a01e-93f7848ece76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86af51af-f83e-4473-b847-efcdd4bb45e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465e8b93-fc84-47e6-be20-25ed546ed0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9df23e5-92b9-4c06-a719-3ffc445b5bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e126960b-7331-4718-aa67-0e309c90d940",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33170c54-9c67-4e29-9955-d237fd376a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6753f4f4-254b-4fde-9094-5e1870692d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaf6fad-9017-45ef-9b72-a2a4e90860db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88d4c237-05b1-409e-9684-843d54d819f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db7fac9-6934-4571-a497-ba1050574986",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3db3f8-2856-44b2-9852-54fc44846d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70066b97-d7bf-458a-afcd-de3c40f45409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4c8984-e665-4429-b6b5-c99f914ca336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f1fbf4-d39d-41c6-8511-4c987b763926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11f9f7e-3131-4801-b960-d6c126447221",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b488fd33-49d9-428b-a148-278ac4314667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce363eb-353c-4654-b079-febebad4f5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b565cd-be31-4023-b932-97eae5626a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "025665c8-64d7-42b1-af2f-a4ea787c4ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1e546d-a081-48cc-8fb6-1b1180153f3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2dd87e-3bd4-4289-9168-934749ed59c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990e47dc-aa5d-4475-84eb-62eb165d01c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e0864c-eea4-4b81-bc80-8a81cb7e8dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "705d27fb-d9a6-47ac-9d50-a2b06ba211b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7781e7ee-74d9-453f-899b-2b17f9b90106",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9c61e0-3df1-4977-a6cc-ddc3f3e0bfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa25d66-a81d-4ffb-a342-b38313812883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1f693f-f678-4be3-97bd-63b3d8953107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4fba26-9ed9-47fe-8271-dd518083353c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ad6da1-8c74-4560-bc1c-33550139c14a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3538e0-7c5e-4c7c-964b-1ceaed5f104d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442a6900-186a-459a-9acf-e0d775b2f17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca74076a-5410-4be7-a639-99266a8b311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c358dd58-70f9-4be3-8575-e80e472b7435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9093b6-a955-45d5-b4a3-46f3c7aa99ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d63340-f42b-466f-b9b9-3a9d9dbdea70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fac6b5-d5fd-44ee-9a45-375cde49a2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3632e6f1-1369-4bfc-803f-8e8c51bb952a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "234f1a88-9716-4f8d-bdc1-b2c50d681f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f413d8-ef29-4b4e-adfb-52bb9b12736b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b0f36b-b472-45b3-8fbe-34564173d920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e0fba2-4d8a-4500-9894-bcaa4867151d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fdcd8c-e85b-4b3b-b86d-7e1175011501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf702b6f-3296-4e95-bcc2-b113cbb694ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65eb35d-a645-400f-bba7-8e5560ccbb37",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66533abe-599d-46be-af00-1049c74dea5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e090f72-8ddc-4c5e-9820-51c33559da39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff39175-6a44-471c-b93d-80b8bb970afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "48ecb2e9-3541-4c4f-a585-8ea78d3a289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f739cd6-2554-45bd-8ad3-cdd95f546692",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14996ad-7f5b-4f7b-9ed3-0ac67b8a67ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea51ba59-9435-46a0-961d-c9076ffca6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e77bc4d-bb0a-4b7a-a92b-315ece212f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07c607a-5603-40a7-9186-2f6ca9a6ea1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e1eea1-cd90-46b5-9535-847b82954d15",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f87527-bef5-4e67-abe0-51945c7dd4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f651a727-d0f4-4d7b-88d9-00b65b59b8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da245d9e-8ce7-47aa-9da9-2fce23bf89cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d89b597f-5ab5-4038-aff1-10ee77b22d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a02104-2e70-4440-84f4-70faf5b5d56f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1089e0cb-2a21-4533-8cf8-9fabbefd5457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a56421-6bff-404d-8448-5d8a3d7d44a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8003bda3-988e-403e-82ce-a7246560a43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd95a08-09f0-44da-aa27-50c0fe574c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d2d52f-be15-4840-9ac6-1aeb063a05e7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855d95d0-a6e6-4689-9075-b28371b9378b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af2abc7-df8a-4534-be29-273a97ba290e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f7b069-8edf-465e-a6d3-8f56fccd7f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb08ab8-cce9-494b-81ea-e33d7c7397b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff4fd17-8e73-4b26-b6c2-74fd0186feb3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6b77b3-a52e-48e5-9ab4-6428fa62767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b869a7-d5d0-4f3b-9a18-dd0c6039c267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98844f6f-7269-44ec-a907-04ff653c1b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c72cc411-9341-4382-b960-0a76e772edba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e4251e-447d-4303-9503-b0d3fbe8608c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f58d2cc-2da5-42a8-bb16-f97aa45bc0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee947625-184c-4882-b4d9-747b283e42d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a0899b-7677-43b8-9ded-e194eb6e9bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6512587e-3f5a-40db-9080-5e25663a52e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b53f36-4cc3-4561-8604-5da216aaf34c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197d102f-ff19-45ba-ad63-48e04de7ff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae477379-123b-4ed4-82c0-63c27f7b86c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789e1a3a-c69d-4ad4-aab5-b94e39ba5b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff92a2b-9722-4019-9e73-a4be8973b82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0001d223-266f-4684-ad07-679ab010630d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b257a392-cc50-45a2-9955-d6b4c070664f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5f57a6-8ab9-4050-a09b-df8ce6bdc9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206ff4fd-78fe-488d-bd50-fc84a07f2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e3acaa-4bf3-44f4-81cd-6f5ab0b9a43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8678e977-c7a3-40c3-b24a-cde6147908b7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02feb936-d021-4123-8a1b-1e93c1749a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6983f3-ab6c-484d-be66-b45246c28e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567356a0-c989-4912-91f4-80448ee986da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "202add1e-498e-4412-94ae-5cc6efebe2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965804c6-0060-48ed-8397-3fb31db0a1e0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf5d570-a4fe-42eb-a7dc-20f9237198f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0cda9e-8b5e-4003-8622-ed4449d4c3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498bc64e-8a29-4158-baa4-1e37c573d575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad3f665-5297-4c57-98ad-3f95b287d98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222e74fe-39ad-4af3-bded-79c03d60e7bc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b578ba6-0003-4bde-9e94-007f5ee88d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5efff1-99df-47bc-85cc-cfa3ea797617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817ab2ee-cb4c-4e17-bb9a-3020185302d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62c9a329-3bc9-4fe7-a2d1-54f95b99ed87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995774df-8f29-4555-b54c-7ad064048256",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b756d2f-3e6c-4a24-a96b-a9b5c5f5d054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c0e700-0191-4125-afaa-87e00313b48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6085630-55f5-4c4c-83ed-5f38bedfd5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b391e5-73a8-432a-94e2-8b41b45dbf19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fde7d6a-2f09-42fc-9033-9dbfdac9d0e9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae0e464-1558-42d5-a8dd-3776a9f2cac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b546a2de-ac9f-40f9-87a6-e15cca8de1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fb30d5-7f92-4add-b6e6-cf01c2438ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0b4edc-d0dc-40e1-b452-7b56fd95ee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd2c27d-7df6-42f9-9907-bf0a6e91095d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d58240-e914-41ca-9975-9d3d381339de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e655f2-db92-4900-b9cc-4badcdfec9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495a7f9b-f57c-44fc-9a39-2fcb0203123b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7d650e-a41d-4d4e-9d02-834bbd295a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c36740-9ea4-40da-aaa8-c4a7ba2b851d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79154e10-3221-4375-a7c2-bca04c2d677c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c9ca1f-d661-4f1a-8cfb-bd85481731f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6257e46-878b-49e5-93cb-a12055821da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4495a775-d2c9-4d69-87ce-31b31c1e01ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c56985-3974-41e0-9cc1-0c72145bc4e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a211b82-ac65-4118-b936-82682a59f5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8163a0-575b-4246-aff2-dbc9f994d5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99819d91-31d8-4541-b459-25e1be47fc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d87be3c7-ce88-48ef-89dd-64cc2a8061d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e065db9-0c51-4df2-8a3b-b743e9361e81",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e63493-0b9c-4d28-bea2-b313b4d8ff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d1c107-9250-4679-82d0-3aba21552cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d06505-9ff7-425a-9975-78ade0e28c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77ded9db-f896-40ec-a733-c596acc4dd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046fc5cf-0455-46c1-987b-69ba0845863e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5c6458-3302-4805-86b5-043558538542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dde2a76-890c-46c6-8cda-03b739777618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dbc038-6003-4fcd-90cc-a51e3c14dfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e32ff3-39cb-437e-8f66-a6fb637afd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5946ce-0d4f-4de4-bd07-ea8bd03c0cf0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cea6ade-1244-437f-848e-7ea5cba25ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18eaf438-3d1b-4a61-8c7c-0ec39a1cff60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf74e4b-078e-4d75-9f75-645d6705f26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81cfcc08-a595-4ba6-a6a1-a15f0045bb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98331b46-e002-4ca1-bec5-cf7e16978b68",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73af77ed-9753-48b4-b72d-06d578ef5ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7e6b83-fb9d-4d37-9202-aae4a0045670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77919d7b-3813-4ac4-94d1-197cc3e6ea82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0401618d-7833-4b39-bf14-6abd59b3adc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57539a1-b667-4231-96d3-89a6a8fec8a1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e89cce3-ee0b-439a-8d6a-6023b7244d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f5a984-0d58-492d-8407-d41960510fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6325938-9302-4687-8ba1-8452c89ea33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0531d088-a535-45d4-a8c5-018dbb6b682a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02b0528-ea3e-4834-9d89-ffcd767fe2ef",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dc98e1-4850-4233-867b-c391a2932ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9e6df9-0808-4692-bc50-dd10a826765d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60104d3d-8e26-4f0e-8050-08b66d3d6061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e18b3c80-856c-4753-b01a-cf3a3f8765fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e15b6eb-bbc3-4980-b883-cd001d73e6a0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5df448c-115f-4885-914d-e54b951e0949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b220c4-c5c8-474f-9950-d8fb43a5b0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0c5127-3ede-4741-917d-0202446611dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "056e33c3-b56b-4458-8e35-830ebb259226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6d5637-f5c3-495c-bb50-84168d90ae81",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f8e2bb-bd2a-4aee-be3c-f9fae445c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236f04df-bc9b-4614-96a7-5bb5ca3f8f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f772314f-56cc-4e1e-b4b2-58359275d052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "871711be-80ae-409e-b5a3-ae636ee545a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c37879-c7c9-4bcb-a331-c9d34ac38ac8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c54947-b239-411c-a2e3-63b8195ef0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e0d88d-1aa6-43af-922f-c996674963ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486c873e-9af4-4c77-8642-8eb79bfe3f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bf4b03-e240-4763-a411-2d02dd9b70ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7983536-012a-456d-bb89-496719e8c147",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ddcf70-e809-4cba-abed-14716b2772ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a82107-4f32-4370-9461-b118fd2b720c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a7d0c7-fe18-481f-a72f-e4f430287939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d77324-5032-4fcf-b99e-08d2883bae92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864e1a2f-8b25-456f-b728-da0d903cbff5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dda5b0-cbd3-4e9e-a2d7-038295df2581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59468c0e-1aa1-467f-a407-4df423d275d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcf1d9e-dce5-4a63-8ac0-af56f9208bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "51dbf7c6-cb26-430a-a6e0-eff3e8a86f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e25023-fdbd-4614-9519-76dd78e3c9a0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051a3f92-1628-4f24-9dec-62ac82480ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8dc914-4099-49d9-ab28-fc0c695098e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283b4e5d-3c02-44c9-a591-9825cb951da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e68b34c-77d7-4b1b-a9b0-880fa5b00860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2778d391-1363-42c5-9412-51d1dc21e73d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727c7f85-e959-44e5-ba33-7890ac5fc896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b739d15c-b11a-4d48-8c94-bb5f4308ae00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4efcf1-5857-4de8-bbe6-e3445178b4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "036ccbd3-8a37-49b5-8f27-26048df55f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551c9ee8-8533-4b48-9711-2b9ecfc136c9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bf78ac-7dc0-426b-8d9c-15a373e06768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "23152723-c778-425b-9317-c0a9c6745c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178617bf-eec8-4431-94ee-481306d5fbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f38f7b5c-83ba-49ea-b766-d35810f8e10a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c350fb81-a8ad-48b7-84bb-62daaa393d4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fad041c2-e175-46e6-bd1f-3d860ba94fc9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfbf8ea-2b73-4a14-9e82-7705e0003365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10cee7c2-2c88-4c43-a2cd-843880cfffa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc29e757-4122-4dcc-8341-043b52e0ce13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "078e3109-f4d3-4a71-b71e-dd70ba77ee79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e0dd40-a9c0-4ed8-b11d-473ac6151ff1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044e1a0d-f408-49c3-bddb-f286e086cf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7b9114b-e822-484c-80de-f4f836549b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b4d74a-ef91-46b4-981f-66323a37b9c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0946e65a-8247-421b-91d7-709e34f807e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccb6fbee-eba9-4432-9681-63063b08ef55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d0e02b8-9eeb-4423-b939-ad86bc00d64c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9be41b24-4699-40cb-956e-5226b6a2c9ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1ca162e-6b4a-4334-8a0c-ec12094a1f7d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f91fd34-4efa-4001-91e2-ea5f017dab61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4e89085-406e-4181-9aed-6a6cfb626178"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8066c17b-735a-46e1-bdfb-ae54005755f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c58f555-1197-4d3b-b2f8-839e00812848"
                }
              }
            ]
          },
          {
            "id": "b617f15b-a3c6-493e-9c5d-9d2a2fd1b9dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "75571dde-eea0-4c13-87fb-efa50590bb03",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04735974-b57a-4b8b-aa85-cca5ac663004",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72c9bf8f-2846-40f8-acb2-8ecc523107e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6e457cd-cdb8-4c05-a12e-d82bba101db8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a18956f1-f305-4918-ac61-13f0a5ec818d"
                    }
                  }
                ]
              },
              {
                "id": "9cef4fd8-b6a6-4f65-8bbf-ad91df2bf7cf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18a735f5-bb00-4632-b65f-5028477aa949",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e9dc6dc-bfe5-4138-8e49-3a7f0683a2aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71c5dabd-29f8-4351-a16c-9dbe1d333852",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "793360b2-c00e-4227-89e3-47d6306157ff"
                    }
                  }
                ]
              },
              {
                "id": "fcc55e33-2695-4e6f-90c2-921cf4e81ef7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f9406a2-74b6-4311-bd12-8c7b5107b5eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "886f8875-4267-44ff-b52d-a1de5df9a3be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1481ad84-2013-4bbb-8ed0-8d22d260f257",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4ee1dbf5-6074-4b9b-9a16-28db69dca3c8"
                    }
                  }
                ]
              },
              {
                "id": "dda0f64c-65e5-43da-b391-c20a85487e4f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a561f7f-2450-4273-b8ce-53daad1d7eb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c52af5f-9e1f-4cf1-83c7-7cb35daf0bdc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70cbc41e-3486-4d0d-b1a9-fa7b17f16da2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7d3fa8f8-671d-4215-8d35-155908989648"
                    }
                  }
                ]
              },
              {
                "id": "a90dd555-c50c-44fd-8c02-9d45f6b97ac2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9846c10-01cd-4e96-8374-3b32c67988d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea84520c-6436-4dcc-bd8b-e7ab99245ae3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46bdbf4a-bb76-4428-84e6-28174af97b07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da944fb4-e279-406d-8fff-6e34af552930"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e37d8d68-4165-4c99-a8d3-c2c78250f433",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1782fb2-8743-40a5-a64a-99c08502d06e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4128d08c-dde3-48cc-87e0-e6d4e2119262",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b112eb40-31cf-4bb3-9e9a-9f83543ddc2a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b83f697-f47e-4b90-a038-902ce8f1cc9e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f341497e-e072-4b0e-a1d0-a943dfa6d41e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22c355d4-d090-49e7-a78e-5370f8e947af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d516b7b-b642-4fcd-9b6c-d945ce982ffb"
            }
          }
        ]
      },
      {
        "id": "c275fd87-50e1-4477-8a17-e5df942ba08b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "52754372-7643-4a4e-843f-98a46a8fecfc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "736fd7ac-c847-4945-937f-edfa0fa31364",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "386b4296-ad83-4d32-85b1-ed39d703c3b1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b30db1-158b-4020-85ba-d5971cc7b621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d5ddf5-8cfb-49e4-9db4-932197a7af58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae5f69d-0808-4a82-b8d0-d86a2908839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f83e7c-ab13-4148-a84f-ed045ed7d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8c9312-160f-4c29-bf21-1cc1171116c6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6660363b-6f36-427b-bc34-2ff496f5d10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee7042a-4f68-4850-9b2d-778120d9647d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95435866-7954-4556-a248-1232e020edbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e055fdc-c4a0-48e7-9e4c-6d1df210bce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c1621a-1751-4449-9df8-ed92f064d8df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b147bc-9f9a-4e6f-ba3e-7b55d793fc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f730a12d-7935-437d-b83c-88d0bf7ae62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df901bd4-f6b8-47ba-a7f8-ea5091332c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3136a8-5429-4c4d-a9a8-acca1ee7f739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4122b48-98f5-4f38-88fc-68d60e3b4bf8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6889ff0b-d772-4695-bf43-10dc52d2123d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb69766-e484-48f6-9cd6-9a7013f80405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5913b77b-84c6-4533-bf9e-7e65ffc9630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "271ed454-3415-4ac8-bd3b-b63bed460468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf70fb6-b030-4b22-aed1-f4b7b246b6f7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560982a4-220e-46fb-a8c2-9f33d77be588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f709ef-51a4-423e-9000-3b08558b0a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366d0469-80f7-4a90-97a6-ced2d01b1847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18164870-652e-471d-8e2e-5062d7672e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7702ac-e7cc-4b26-8a4f-17ff79351a6a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5f1426-db58-4f2d-98c7-b26c0f792658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "984a54aa-728b-421a-aa37-7034958d0cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b10d7c7-ba0d-4b1b-a6fc-3c43aa66d2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17b05e51-1502-4862-b4fb-5d5775fa365b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6011b3d8-96f5-4cfa-80aa-e6b40ded5a8d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba9d41e-eb9d-4805-8918-5f4056d31041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453fc44f-a92b-475c-852b-b9eb3634f46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4c55bf-a5c6-405e-a405-e07f45747e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7179ac5-871d-4915-a2f7-1fa0975c6787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbeebc9-4123-4fa6-8af2-8053259aeca4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f0dff6-0324-49f8-9c0d-100a3c8fc883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1076c648-7060-4fe9-b933-75db8d5bb7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f975237-164a-4248-99e8-efb7908f3a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d02077-6e7f-4891-a9d7-47bdf1c11f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d092c1-151e-451b-8570-b591e164787c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e253834-0de7-47fe-bdfc-408fdd3f29f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c7a193-6e0a-4723-83ee-54ea09f8a3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d208461-7825-4da8-87c7-9a40d14a46a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7df7982-0ccb-4b5c-8ced-dc7ad091f99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c9bb18-f9dd-493a-8563-e3b3b9b7ef98",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badeaf34-3892-443b-9165-47acb0e45d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2606a829-4f76-4143-9f4a-7596c8f0ccfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8233dfa-d96c-4582-ac74-9f6ae7b84e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f3f898-177c-414c-82a2-923ec2042ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6441df63-64a9-4c98-9ed2-b236d66e8cf2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ceb122-a1df-4c3a-83da-9474c93a1d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df81c25-1714-4109-be68-df3dd9521727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea316fa-2afe-4f9c-a61d-2d6612d4f020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "236d4f6e-8f2d-444a-b0f7-e7aea89cae1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae2ca00-8235-450c-a04b-d33f2b9c727e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1ac50c-555d-406e-ac10-98aac6d693e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e901adb7-89cb-4fd9-a6cf-e469887939ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe32276-d27f-4430-a9f8-c8c159dcd476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8624064e-8680-4006-a576-5526e6e763ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5ec5d2-336f-434d-be91-7fd7d39091be",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3429101b-4ce6-4d6e-af8c-47032ec4c5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d70344-bcb9-4f03-bc4c-00bf3f66c3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ee597b-3165-41cd-9480-fe6c0866fa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1508d21d-7089-4918-851a-ea68c73abbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6168493d-c79c-44dc-b9e2-b6a305454aa9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327989f5-8344-4450-8526-911911ba6919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42107caa-8a2c-4d0b-91a4-2a8b00ce1b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be8bc38-b26d-4256-9b00-595618c2f82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7098c7-d7ec-409a-b623-025be28cccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c8f6ac-4807-468d-b7aa-5b876c8c5c53",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a72741a-4c17-4f6b-bfb8-7bcbe742ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd09a23-3276-4661-ad29-4ea2929030f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc1aa19-8b2f-4b59-92cd-ab20bf507285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a9a1fb-1088-496b-969d-bcb8095f76cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e919d0-a091-4a3d-b70d-edb2829b23e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ed384c-1c78-4df5-920c-8b5715670ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7476e7-24b3-4471-8693-981ad2c58461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61173e47-59d0-40de-bf5b-4a3a0313d9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5650aa8b-ca79-476e-8361-f7e3aefefb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6495776f-1c04-4047-88aa-fdb8909fbd93",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cc3ab6-19ba-49fc-a2f4-e5f3539bc0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820a3702-393d-48a8-a4bf-8bdd612346b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79aeb2b-6f59-41d5-8ced-1a2c1540bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbecb27d-9e11-4250-bd6f-899c1d5b94d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21e045d-0d15-49c7-b5aa-4e80d56383a9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3328c5d-2b1c-450d-9ba8-ccdcb12c4f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a952688-3296-4c62-916a-54f439244dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9ac915-6377-402d-a39e-a5ec4cf2b099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1065da-99f3-4bdb-838d-7a70f716d5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01da8b1e-e321-4299-bd3d-fb1128dbff4c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b22e20c-dd2d-4c98-96bc-eca2e4f69925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07ac1ed-cd9f-4ed8-a1ca-17a26f5e56c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3d4841-f9e6-4e05-8702-89a27600ecf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb360c0-7b28-4c6b-9cc5-4fd0dc98c6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6a1ae0-7476-4afa-95dc-fbff6ec7d965",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f19e00-47f2-4ec2-be0d-b5d8ecbe4854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f4f518-eef8-4384-bdbd-033f63a112b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eaf8e6e-b273-41f8-9b6c-641159ef3a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7bdaf3-06bd-4098-92a6-323259cabf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12ae3b7-9b26-4142-900a-bd5936bb7a9d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24a1cca-712c-40ec-a423-13a6ca220255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2805f24-3c64-4630-89b2-37a16e73043e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf72b8e-4804-43c7-9576-6a13177d13a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e91213db-39e4-417e-a302-1ecd55803e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf40f06-0354-4a9d-9f62-7d0ab165e9c5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41afbe27-1d37-4344-b1e4-77077d387684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc25aba9-5d69-431b-8162-5683299f4501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43307c4b-aac8-4380-8a8d-100647e73e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caf9d873-d675-4222-afc9-af1077ec9e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4da8dc-7b8c-4a1c-af07-3fb249bf2973",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9502f355-60c6-4090-84a8-f775bb7ed450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb90751-a53d-4787-b7ac-da196d338fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d14686-1ce6-4c41-9c87-a4f051999a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc7e24f-5eb2-4c52-a8fd-5e47be1355b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701e8a27-ecbc-4284-a66d-ef22bbf819ec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3a33d1-cc6d-49c9-9361-79efcc5f8950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e21277-cfd0-4e59-abde-f45add9cb9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e2de5-45ec-448c-ae18-f0193ba29a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e3ec0f-0859-44c8-9e1c-384553cff080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60e2ee4-67e7-426c-91fb-1ea6661a5743",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d5ec41-fd61-436e-a53e-5d8ecec23c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a03cbb-f020-49f0-8afb-c12b1a835c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07511af9-af0b-4cfa-8a9f-de8939d7792c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82cac7fb-3716-4734-8070-cf51e196756f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80545fec-883e-4e15-85d6-7accf6f28f54",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df509ccf-144a-4ef5-88b0-c8946eff3621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a82b3e63-c2ad-4f94-a548-89b41a3aa193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd52834-b3e8-4e35-a695-bad8a8b08777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e03768a-28d9-4914-a5ab-9d89c081f17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93684637-1cfd-4a2a-9cd5-b5a42e207cfb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba830ec7-d203-408d-bfd7-5619aec057bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4ca6af-0b8f-4859-877f-7dd739393b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211cc6cf-55dd-4172-99bd-39b38d695941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1218f0d9-0974-46bd-ab36-82ed3f900786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a6f62c-2824-4b2a-b4c9-65bb97a63889",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4d103e-ed9a-4e98-b530-40792144daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfb4235-75a5-4406-8dd1-54f09b41da68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55bf23f-a78e-40d3-afa6-9ba0200d4f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9b72ee-598a-4aae-8351-69e5bacb044c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030db618-9a2d-422d-b4c4-3255f0141757",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e783eb96-56ab-40a6-8496-69a012c024bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47ea64b-d28f-4929-b1b8-56db837b5fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1145f8bc-e858-4c2a-9419-dd2b07ae5a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "986fe9fc-a340-4358-8f32-ecdd99878e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242475b0-bafd-4582-8ad6-a73a47e6321f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59864204-2698-4108-8317-bb5f4bd02b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7037b2fa-26dd-4a08-9d21-058e3b19a012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003e70ca-3e3f-4197-9455-b3d7004a2430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "374c3fa4-f3bf-42b7-9e81-28ffa7e9534e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8bd88f-9e54-437a-b02f-ec212076799e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc3ed24-2ec7-4e75-bf8a-64d365ee2cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9f8780-3c2c-493c-bc12-619178b73ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd0486c-532a-4330-b00d-5c2751ba883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc1b97f-c8cd-4466-9821-822f23b45ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c172390b-4ae8-4931-84e6-d8796b8ba769",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1205308f-a710-424a-8e3c-07a662b48987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adb3123-af5f-439f-afdf-c4a11f4c476e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bff35e-ed74-40f0-a92c-94631068eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6167f7ea-4f22-4026-9e61-0844b9b40021"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d53722f0-54b8-4e11-a8c7-09b18df58f78",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acf320f7-cbe6-4bcc-8661-ae2d1c04addc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c4c9c2-2e3e-4fcd-837f-e36520ec1434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4972d8-c2cb-4da3-b7e8-9d6425de09ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35573911-949c-4cc5-bce7-27cc9e0fe56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2309186c-dc40-4c21-8f83-d361de870e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eecaa5c-2e0e-4dcb-8e55-b127e1022652",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d3417a-7a5e-4325-b579-871afcdfbede",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bb7b9c64-eecc-4971-94e5-19c119179e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3a9b20-d1a6-4d37-959c-53d92ef2c90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd3d5b69-6790-48f4-aa10-1d965777321f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21717cfa-69d7-46e9-9057-00972910e000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "befc4a56-d6e1-4994-b4d3-91a95b1ea896"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b751040a-63a0-404f-9ce4-a2434e8446b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "372fb15e-523b-46e3-af53-0a2d26e2d909"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57b634ea-6b7c-49cc-9784-114c3588d1ae",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "93e2afcc-4d7e-4ecc-8be4-118ed850eb41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76719eb6-df0e-485d-921c-93c80d82714f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4b3b349-5d4f-4309-98b7-3a8d4e0960a2"
            }
          }
        ]
      },
      {
        "id": "48d5f690-e57a-4399-8457-6ed98d81d2ae",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cde01eff-4c27-487a-9456-665143d2ba1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a371fd22-21ad-4ffc-b636-081cfb753d0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4099e2cf-96bf-4270-91bf-97b48143f381",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237b6b9b-1a8e-4101-9eec-e2d9c4c87c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0feba50c-e4b1-4bdf-98f6-634aa6c3324f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d46ed8-13c9-40df-8eaa-8cf14db19dc5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad92cac-1480-44cf-803f-7fe09e07f7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125e3dbb-6e56-4038-a111-fa68ad45ab6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21b5a72-2e6e-4c45-89d7-76cf452c8e96",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dbaff4-1692-4bc1-bee6-3165abd33c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf78c34e-de89-4c39-8368-363cc52095ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac8433e-0655-4b0c-8c9a-85338210a6fd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f39ee8c-a550-4f97-9571-a1d9cf444959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fe3232-a50c-4214-97fc-0ff3f9a6b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee7da50-336f-47c4-a169-06b1bb75c5ae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d760fd7-c666-435d-8c31-469576043a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d94d5d-b455-4666-bd64-629603f5ac2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77663691-509d-4c02-b10b-a13ce0cdc210",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b07f412-ea2a-4311-9942-397316c89a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ac63d1-9648-4d57-8e54-10d92bf5f3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fc852b-e321-453e-9640-f4c54f88890d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2700f63-ce3e-47b9-9ec3-9a21a5975fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7663982-3152-4c5c-8ae6-6c5fc23d7e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c8ccae-9723-4f2f-9e97-71aa0ea26d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db205f5d-c209-47bc-bf41-a0b9ed333f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c1d0ae-79bb-4f05-8b92-d1deaeb1df7c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c2e6f6-7ddb-4baf-a3ae-a6fca64f0b67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e0408e-f868-4b41-9edb-a402b2c330d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3585c681-1cda-4869-8847-9e874947efbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c712ab23-7703-4b78-a7db-c478c5866648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aec2a9c-e5a3-46b7-8435-9c1566546124",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badcc4df-7108-4dbe-8e6c-7f1716128664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb8b41c9-e0b8-484a-b00c-7e4562710b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1e1b14-ee0e-494b-a0b3-b710ac36927f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb423e9-d634-474d-a274-8b6439a6268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30bf5c4-121a-4c5d-a5d4-1a8cca84256f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7df757-6128-4297-aa43-f08890f0de3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79e2967-3443-48da-9bbc-7de3bfb162ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfa4e02-eef5-4682-8f30-4c08a26a139f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa846940-4186-4a69-9004-4049ddacc84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4430c46f-c2bf-4643-8e1d-eb22796d026f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e25cfc0-6d81-4fd7-815f-1e435c1a0f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb2776c-188f-490c-8b7f-df712c224fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d706b13-5148-49ef-8b99-da84287d5806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed654c63-b7f6-4141-a76b-f431131e9e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7ff090-ad5f-4e89-9f87-4d8f215d55da",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a625c37a-9382-46ac-b4cc-59802bb92883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e3aec4-f147-4307-a0e2-91104145cac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac570be2-b7aa-4e07-98da-4e1e43d965aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b43d190-8752-43a0-bb77-0bc4dd221341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19c0814-0cd6-4fba-8ab9-1686f9511ef3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ffd099-4452-4ab7-b061-244804341dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e7a71a9-502b-4ba9-a92a-af230db22608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d884cb78-77e8-4c7d-a299-eefc74e635fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91014cf1-6d3b-466a-afb3-334bf8b81c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b898d7b-6ed9-405d-ae90-d3614b45b74f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4251b7e-9a86-42f9-a0a8-82a1d0262acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b10d2d-7607-4a3e-8e34-846ef9af888b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bfe2f2-329e-4422-a633-2a2149ec6c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb60f45-8a84-455d-98ee-46f7d3db823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aefc5ee-196f-4125-bcfb-e17c2ad28e36",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5763b0d5-4a75-42c6-8a64-18ad9500d992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62de6f13-0f0f-49a3-93b8-fd151eb54d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc17d0e-1d4b-4997-bb20-fc8272a9d8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da87ecd4-d259-44cf-ab30-f98614209bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3504cfc9-083f-4b09-af92-8f3a2272f500",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1370bab-a01c-45c0-91f2-ae42590378e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f09573-a785-432f-9a8f-50832ea78e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f91bbba-9a13-436f-815c-3281fdeab9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecad8034-88e5-4e16-8f82-23a01c121a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8165bd0b-c050-49a1-9a2d-6992f9621bfc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f95cff-604d-452b-b1bf-e677f3f5187a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32826aa2-100a-4866-a488-466e76f40b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ef22f4-d466-4d01-b62a-711bb9e123ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03cbb32d-0e30-4cd3-acdb-64b454eea09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a756bb-e254-487e-ac67-c68860597e50",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d07b09-b3ea-4c79-b1aa-a00109ed0f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e62ea99-8c31-4ed1-92f8-99e3978bab74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d3a7f9-55d9-4487-a9d2-6a9196ca3ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87aebca6-15b4-4748-a525-00cf074b39fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cd0b8e-6dbc-48fc-8cea-17f5b60002b2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df78f8c3-fbc2-4048-a91f-a8f53f1798de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44386c5e-780a-4d4b-9e23-771d3dd6eacd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a76c989-ec07-4aa7-9826-78c6755befd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e177dcd-d808-4779-85f3-b8719d80162e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228aeaa0-a56b-474e-8573-bac5dffd9705",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32082522-2638-48c6-a1f6-200527744fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d91d74f-374f-4ab1-afa5-b1f0014a8024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29880ab7-b9d3-4ae4-8448-7ca0e2a23d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae524a2-a375-40cc-a44c-d7b6a3e1a018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52620942-9443-4bdd-adf2-6aa48e313950",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a15cb2-1c72-43f7-bc7a-586033038684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eaad33f-d33c-4677-bdb9-e66a9b5fd4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7081d56b-b3bf-443d-85c5-145fbc10eadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af83ca78-bfc6-4772-acbd-db89f88bd8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cafc54d-2113-4ef2-ae0f-45cbd044a7f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8bce94-7396-4b67-a3f8-f12609140d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72a26b6-df93-4e3f-82f1-4ed2e0167f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a03218-da39-405f-b001-20b54c78bea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ec2dfb-cdc3-48ef-a65f-4fd75c200f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d467f412-9f60-4bcb-973f-9cba091b37cb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cb8362-cc5c-4a49-b53f-bf108c4438a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7231122e-c2f9-4c5d-90ae-ad810899bc13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c14afd8-a011-430d-80ed-42cf104f9437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfe920a-7ffb-4275-9cfc-5c82427b02d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6416787b-9364-47dd-8e0e-3eb1c66a77cd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80d69e9-dec1-4a2a-826a-ec205379572b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb1880a-ea37-4f40-b951-5827769b9c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce02a05-4631-4b4d-9826-f35043311bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9276e4c-b1ed-4721-89ff-17e6f9863158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf98f9f6-a8d7-4f81-8e0c-607f9b280b96",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf924d99-6267-4f32-8262-b31559e2da1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84347229-c75b-4020-a349-95d73f58b0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304fc5d2-edc8-48b8-b5f2-a60239530a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5eb839-286a-4cee-854f-ca60341feeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059a1b62-2b81-4e20-aee6-d29cfc3628db",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319a273a-a39b-4e74-a384-8881659aa694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc31887-0100-45c4-8ef7-1a929fa91d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f823ed8b-3942-4f5d-9dcb-e04b9a5873c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d039b0-4185-4594-ad97-eb73ef9ded76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639e6af4-5c10-4eed-b3c3-71ed7fdf51fd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36caa616-f1fc-4fd4-88e7-1d8f783ba4ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361ec5b8-6b57-493c-8556-7c9c049425cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47572e7e-1b9f-4dfc-a741-58b26ce04db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659598ac-e3b2-41b1-a6ca-5015260a7590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9632e4-c60a-40fc-b946-6780de19dbc8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9e713a-0332-480f-9e2a-e3c5b2c98b52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28857db9-eb7f-46e4-a334-9236af2443c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9455742-36ee-42a1-84b5-f466983edb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba740e9-8e3c-451e-858a-1093bb434f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f8ee2f-6863-4dd8-866e-53fb9e5a869a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9258e4d-dc23-4c81-81b3-279de76a03b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830582ff-00c7-4754-a59f-d50b8a48a97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43556931-94d0-418f-9d9a-53b9a7193006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205dfbf7-4eb0-4ca7-8db0-7046db0970be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e6f65a-ea7a-46cb-9b3f-a228097567cc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb940ac-b031-4592-b4a9-6897ae79bb94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede5fd4e-6262-4ec9-b21e-e661c926c64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7282a0-b7a3-4f41-88ef-4edea3cbeed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971686ec-d96a-4e4d-8c04-d6af0bebbdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad05fd68-3881-4029-93df-18a561fe1f33",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50fca3f-9fbc-42ac-aa36-6e33f1c03c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd6652c-6155-4338-8c09-a9c605f36780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03138e31-c584-4ae2-81dd-57a731635eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4c8ad1-60b6-4721-95d1-040d9af1800a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2164e51-5471-4970-b248-250c22fa8ba1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cfee1b-716b-4ef8-af12-ea14c62aedea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96411688-ab41-4178-b5f6-4c4f0b36830d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f0d00b-aa14-476a-b6a1-c845a7afb383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c388e2-d80b-4a1c-bb2f-21c9f4ac252f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb78cd73-2ae2-4084-be6e-7992b4726bce",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a713eb-a1b8-4112-8289-eca586ee2e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f485e9-4205-4ff7-94f6-52846adbc613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43453cfa-b589-49c1-837c-108cfdfc3904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51a91040-9b23-4422-8126-43ef1b8abc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae76cb34-7578-4651-be4e-ebee39af2e16",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef6643b-66a3-4653-9448-a86919d45207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed2092ef-4bc8-49a9-bf14-a3e2ab51e3e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f08715-e9b8-4fe7-9a36-cf5c4860a70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8ecc50-5740-4744-ab6b-102828aeb1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fadf59-0faf-4695-83e5-4ee3309f2949",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e879d47-9998-4c86-b7e7-91ca78bb3948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ecbc8e-fca0-409b-ad2d-077459e87cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798b9fcb-095f-4a0a-9772-f0868c57c8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5997b9d9-34c2-4703-866a-674928b201ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9231fb-cc7d-4fda-b089-bbe39333e178",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234b6572-8fb0-43a7-9062-851ac63b2ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86f1a8f-6932-46b0-9e12-4e8122d46753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd3eed0-4c35-4cd3-b161-3f778b78ffae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de28f975-f35a-4aa7-b1ac-aaa2e576561d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0d9899-d824-4c8f-8db5-fb236b8a2364",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7cbadb-e947-4b0e-9072-f1605460c024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea8ef76-9b1c-4d25-9f82-41af9d4cdf21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cfb878-5691-4c89-96f2-5ebbb6f5be0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b007b72b-62cc-4bb5-8a74-d9b43fe2c5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d909fa65-2b8c-4fdb-b150-90e98536f9f4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d45947-7433-4a6e-8644-f57f0906db69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0591d8d-9e3f-486c-a6f2-27f52ae3fe31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d9f48-5f1a-4395-85d4-23acd204ae91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39f6497-0227-4d54-b9e4-aecbce60a1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd0be61-0f83-4aee-804c-ee6879f64b86",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33231ed2-6a00-4898-96d0-0c88a6302936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140a7c14-c616-430d-bfb9-daa3d87390a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e32b405-4fe1-4fa0-9359-41c477426f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6e6fae-d3c1-4ea0-9eb4-f2ebcf2a997e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e077acd7-9714-4493-b360-3169b955f3d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33671eac-0260-4738-83cd-e711ac19cf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7f93b6-fb7a-408c-8b88-49ecc90d24a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bbf268-3bc7-4614-a21c-26cb4d060d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164e0ac6-fea3-4157-b5e4-97e574bd12c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35d4425-7a25-45c4-bc06-26da86e6a234",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16137f00-4d1c-4f2d-8c5c-6aabaf64eb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d676630e-459c-45c5-a2c3-11e40c95f751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987be6bc-f7e7-485d-8340-5bc41fb15a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1889c507-2a95-44de-bd1b-126a342c1b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e590096-bfb5-41ba-8815-d42c12558bb2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322d43fd-0f04-4627-9e3a-6e69fef178a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63c3f1e-d66d-4bcd-b6ee-a60d99044d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0eadb1-890f-45e5-a7ba-1a6f77cbdd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8a4b9b-1cb9-49b7-b1c5-16f7995b365c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d03ccc-c59e-491a-91c1-6c96b953bfb2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3b7073-79a9-441f-a686-24e114dd93e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eba3ae2-d9a0-467e-ad86-a0634b1dfbc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82b677a-ad70-477e-abe2-efe401332a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48736afb-8a70-40e4-8356-13b3bd9fcf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1163f8e5-b255-440c-b41b-b48eceedd64d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77918dfe-e97d-4c9a-9031-0ea2b6458580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c35e4a-980a-4a42-b00e-3bc6ff4e4f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80f4f28-9fb0-4010-abfa-b800b286a6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2546eb43-46db-4980-8be9-da790a6ecf05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984f2dc5-c6dc-46c9-9f37-baa53c527b95",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34716b89-7c9f-480d-81fc-be19beae3ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3beb09f6-9110-4742-bd91-a54d273f7a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e19a98-c867-464e-826d-4a223200f8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14f7447-8e48-4e4f-a5c7-593babf378da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc242bc-baf9-4e89-ab37-16e2b72e972d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6a2177-a0cb-4791-8daf-9e6147a0d8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c401965f-99f5-4c44-986c-b270376f60a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7079da-59db-40e2-9bbb-a3c8742ef35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0add12fa-8d5b-43dc-8ae7-5ff360a0ea66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801e983-1b7b-44c4-9739-540875f53b34",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e79c178-9535-47f4-b9a8-108c602cfb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f8fa33-b89b-4e2b-bdc6-22fafc8f1d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1861ca8f-6794-42ba-9a9b-039411391679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a222a0-841c-4f6c-ae6e-2589963a527c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec54e7ff-ef16-4cd4-bdda-fd8f71b7c15a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dd7f0e-63e0-4ac0-a8f9-e46788e30e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a060b008-0694-4427-a0c6-92dfa5242a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7d05e0-25c3-4057-8e43-d6523317115f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec928984-b812-48ef-b783-f05a47fe2c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c973733c-2d88-4e88-9d75-fb5792ff3d33",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59211c4c-8d52-4822-a08c-9e82f20d7c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177d490c-9f9e-49c8-b373-8ae00a09d0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6d0255-0a3c-4447-91fc-542229b6f24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab0b783-13d0-43e4-971c-b622f93fec8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5601f85-8091-4c71-a402-37cd94bd6ba7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2489e4e-9c14-4ae2-959f-667fec6f3bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66569cd9-7a1d-48f0-ab70-fb0edad2361f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c48a526-2fd5-426d-ac84-d067c5c7c015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de24b27-c326-4d09-a6f2-87c3a2df13a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e324d277-0df7-4eb7-b9fa-a0502cd538da",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9287d98-60bd-4b31-95b7-7fa54f8be7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb62098-a78a-4416-b2cf-e930aba9035f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c02aa4-d9c6-4a8d-8d31-7c4b2dbafc1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e8c344-05aa-4a56-b066-0e5dbd868c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5e0480-dfd8-414d-881a-900283486189",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5664c4-226a-47da-8350-704ab974d8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8158251-8e12-4dbc-b061-f40cb9bff78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84aa62e6-b054-4def-b064-71382b23d6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2de01e7-9988-419c-aa46-a3bbb9d140ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17febf0-3600-4136-b35c-90f91b02c2bf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c67e37-2ea9-4d71-8cd2-45242de0b0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19548c55-c5df-454d-8c19-c52fecb8d7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e8214b-7023-4465-a14e-54660752b5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3821c1b4-cd34-492a-9eeb-abc0a02ac3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41593f9c-108d-455b-95ee-6d4a67944b86",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bcc554-ba37-4caa-8fd6-1acae7586644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27da34f3-3d85-4e93-9613-99df7ffc3f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92032f7-3ee5-4a4e-8541-48e5cd01f3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1e83b4-420b-4624-a53f-22e4f39d0258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae899b7-a2fd-4b36-8c82-3a713b9288f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f837f6f-041a-482d-af9b-79c7166706a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef5af61-dec7-4f3d-ae41-f216c7fd3d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c45a896-ad53-46ef-bf55-bd269759f5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897d1808-ba79-46aa-b0d1-da3ab507523f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c545271-1880-4c2b-b27f-87776bf84680",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6d5b2b-fb4d-4473-b1ba-af7aaa829b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddfba25-32a4-4a1b-bcdb-2ac574ae592c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9671e54-dace-47fd-83fe-90332ecba980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24cd28f-866e-49f6-9166-280d47dc0cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48780b96-c820-45c7-89c3-83335e1f3342",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d42a63-5da1-4d0f-ba7f-d4796560a459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4131193f-5ee8-4089-ab74-f0a4a01ebf59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f03c14-e32e-4611-9645-bca8f6b0aeac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55e8df3-d259-4b41-a1be-f3be5284d84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06332b68-94c7-4d44-bf5f-209da9d58d0d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93e41d2-b51c-4221-b37d-907ee0333826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3426e9c8-d04e-43b3-81a5-b1bae15fc40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bc7294-c454-4c33-ad7b-bd9edfc57738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb79dfa-dd2c-4b48-81cb-943f6c8a7dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd168997-8d3e-4c04-98f5-506cd577b764",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b326bfde-aa06-4bf5-bbc3-de7f26ce7f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326f46e8-344c-4103-ba05-97d4fdefbe33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98732905-ccd8-43dc-8e41-79ac3859c778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451bdf11-0820-4fcd-b8c2-68e135b7a97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d970fd-688d-41d2-80a7-6eb32662947a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bf134f-3c71-40ec-b606-97e654dd1b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940539c6-c804-4ec6-8da0-4d0f017818fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9122e19d-7a65-40d8-9f77-a0fe121fba05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7662c767-3c21-4135-83a9-411f0cf98374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99188c9e-acf2-44a3-9fc4-55d9759d5056",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba3af8a-73e6-4f94-bcd2-b1ffde62bd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e091f10-b022-4b65-b99b-519a699783ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4714ab74-7a75-450a-a8c3-26e00b097d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50eb220e-2efc-4177-bc30-2fa26db14873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3078e176-fc48-464a-ad05-c0142b8cb106",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7effc5-eab3-4f83-92f6-32752dc07c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45e652c-fd94-4fd6-aa35-f3fb258c8a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6033d0b-6007-407a-b306-cd99bb55a286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3515257d-2d16-4647-a276-970367f7ea83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315459f2-5ead-4fa4-994e-a152384cf17c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341dc879-361a-41e7-9bc8-b1b455983bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bce9c72-396c-4b50-b3fc-dbbd3780f74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b644ac-9d7a-4b72-83f8-0161b8b0cc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255f320c-e977-4f77-a4fb-c3bada662846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3370a1a5-7e33-4647-a5ab-73ffe848a35f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9170702-1fa9-4956-827b-21c04cc88714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac7ff5e-d2a2-4d7e-a2c5-9d7c05d552b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8a96fb-008b-4bf4-9157-1afc59eacea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb96500-9fec-47ed-8f29-0cbb7def1078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffd0cc6-7ae1-42e6-a965-286442367699",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1da6d84-c8de-4ba2-842f-6f6f2308a66f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac622a67-6037-4c14-922d-978b8f22b979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d8e5d6-5e6f-4bc4-b20a-fd53b784919c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6eda0f6-967f-4952-bf7a-ccbe44e1af58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9632cd94-c452-482b-b5ab-921a48ebc9b6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe311f5-1281-4de5-8d37-65fef672e211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41c71099-545f-467d-bce0-672ca1f301cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d74eb63-71a2-4ee4-ae25-d9367ec9cd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d656aa70-f8d3-4717-b6a4-a2f1b6d09ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48280a3d-2d21-4901-8dd2-be2b12c3840c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2777694f-c732-4b3c-8467-a16f312dc1c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c0e613-649d-4468-a9aa-3934d92133ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac295d98-8b67-47d2-b7af-a6dd9f961307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e4c51d-7b53-4299-9b0d-81d9ab1162eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d800f3-1c6a-4fb7-b1a8-e347eeded82f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2b829e-f592-4c4c-899e-890807188031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e968d4-006b-4090-b3f6-173460e3eae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f558a27-30ce-496b-902c-11ad32c44031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38a167e-86d0-4a9e-9201-5b73f9e328cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a448c308-b1ed-4f1a-8179-433d91ff72c0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7361306b-8f5f-4d5d-ab2b-2f25d370e699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03f2902-55e6-4097-bdf6-abb3cb47f1e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b2fa52-58f8-4ea6-a7bc-d20edeb2c9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb1e179-caa1-4ca1-b5cc-2db2ba1ac77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeac7f1-8e17-4ad2-a013-da49168cdf67",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b36a7e-d2d0-49dc-b556-31bf7e9b25d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "052b7bed-f584-44d1-a909-a6b5295e2a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669e36cd-6e1b-4791-8849-13dc2b82c844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4de8e3-d639-450a-bcef-cd28c652afb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e8d68f-c628-42be-a623-4ba91826ac05",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ddaa0-db94-48f9-b3d1-43433f0c8c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f31c45-c4e7-44ab-a0b6-f8982f47a5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22217fe8-612a-4fe6-aec5-37825dee7dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac24b1f8-418b-4944-a571-80cf8f538853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867592ea-1b8f-4b31-aaa2-2e7dfb8b9011",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dbdb12-f039-4bc7-8d68-033ca91fe918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0ffba3-5355-4cd8-a21d-b9704d1ead1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f44da27-9a57-4928-9751-652c706cf7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb2adb2-ff7b-4542-bf3f-9c4868331b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3628807d-75c8-4f3d-8b80-50ab68561dc1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf76554-4730-47dd-9f23-2ace9c33a49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd98403f-2855-4104-a232-dcb34ffb6b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bb85dc-1464-4631-a6e2-ba3cd537e12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c95afc7-63eb-42de-9ff8-97d594bc245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f644e66-313d-47b3-8219-eae430899865",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece0aca8-de03-47d4-bb9b-1a48d4e28aba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516b4e19-731d-413d-aefb-31d6787bf628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e340b6-23f5-4240-921c-65fbe5bbfa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d45966-9ec5-42e3-913e-d190e05e2285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbfe155-c1d1-40e1-90bc-f68c5404463a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1acd6f2-3e66-466a-8f5f-d6cdaa7939d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207601d5-48a6-458f-8628-d28f322559d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c40304-6ccd-41bb-84ad-0bc7f4cd1b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce46899-b856-4815-a1a7-7f323f97a1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d541e88-bf27-4877-82d6-4716d389162e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd4af7b-4171-4790-82d5-631732687414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc03e0c9-721d-4aa6-a025-7acca6f3e174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf65af2f-d93b-4a28-a814-14f65e5d3ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b8490e-a244-4beb-9963-2c06b326974d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f6ab0c-a0c5-4826-8e73-49c17cad196d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8457508c-5679-4732-ba18-3226c6366cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a6b5b7-1d03-40f3-8d12-bea9619949ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e74184-5435-485b-bcac-0301bf054b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ce4495-94b5-4a88-bcc3-b3b2a55ff9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad6b9f8-2544-49b6-b146-78868b1591e6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9f5b1b-3275-4b30-be2d-76770925b9f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac9092e-a8f2-4be0-87be-d247e6f4fe5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c4740e-dad2-4d9c-985a-c769b8857b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08e0dd2-3862-47a2-8825-83451962a279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc9cdcf-9e1c-44d2-bb98-5a5231b70ff2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb715815-fa8b-42bc-b27b-24a150c84aae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb02362c-55b1-4436-a5e0-004c9ac1a657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3be8c7-bde1-40e0-a196-48120eecd8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959d8281-eb20-4066-8590-3a2216c69820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ab69f-b5d7-46de-95c5-fd7e89934291",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6075431e-eaff-43ef-bfcb-88208062c8b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c611da4-61fb-42c6-8a07-e75b799195c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c62777-04b3-413f-a371-2c36efa41f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe7fdb-111c-4815-9d9d-566c7ea70b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f519dc-fedb-40a2-92ca-fc2b4d79a6ee",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8853add4-9417-4076-899f-4221d77a1491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1875dbda-117b-4bf9-9702-dc879b5cae8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e39090-2987-4b9d-a943-915275f146c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffdab15-934f-470f-a9a3-5abde6bcb272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db782ae-daf8-4bc0-84c0-6bb6142340cc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d9cf74-5022-425c-9d7c-1e3d5bcc9b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c077b8-c22e-4dfa-aa7a-072716ed3849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c438447f-df1b-4a68-af54-a104e58581f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da133b2-9385-4340-be3b-f173e1eb1885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd78d236-7085-4ecb-990a-bb65be9f703f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707290f0-3f9d-4262-9689-ccd9b149396a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8af24c-6b69-4d4a-bd39-f4c3a4a2d21e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172c3d39-4912-4eeb-ae3f-fe0d4d32b5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b94ddef-e01c-4d90-96ca-93c06f1ad202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a98ebb-c644-48ba-969c-10f344316778",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d357126a-caa0-46e0-8e2a-6e6ddc9c0640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c2991c6-d1c7-4827-9487-529c63794edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443dfce8-3508-4830-b9e1-64623e878087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba28966-751b-4ba4-9ace-a7b482034305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90595c6-5e51-4237-882c-8e1e7d74cd39",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d43622-004a-47cf-adf7-5861f64c8192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1042b0-ee71-43cb-88e8-fc1fca1f3a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9ef295-2118-46f3-b13c-01e52bb4e0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050fcd16-5746-4774-9ab9-1bde90548e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252ff703-ac28-44ba-9e34-e506ecad6faf",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8df55a1-f770-47bd-8bbd-74d85dcef0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756677b2-4e3f-4cdf-bc42-7572e0da3f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1111435f-0b2a-4727-a0df-25d5d21ce6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c9233a-63df-4e03-9b35-9105be5d51a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368c9f51-418d-404b-8264-fd91c60f5648",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65f5cda-95b1-4480-9fab-9a61358ead2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0819f2-49b6-4c97-86c8-6b91f69e1f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0393d17-3b29-4121-bc22-f799aa0e4d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9945d534-3c2d-4b52-939d-865aa864c460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af584546-5570-4d8f-ba5a-3af141237f00",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a48ac20-d487-46ad-bd13-ed95e3d2669d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9719f6-92e3-46e2-8788-7bacbc2d0277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10d7a23-e214-44b4-86f2-ca720a37a415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481db2ce-a605-416a-8eea-bac764659d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac1029a-3283-4e07-b631-66fcdf7247f5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50241bc-060b-45a7-89a3-734fb5ce31bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b5a652-838c-436c-81a9-d4c16d386bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4eef77-26cd-4e61-bed3-99167df12b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5555c917-0017-4c50-a34c-b88f306a7ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17005646-1b0e-41b0-bac9-2dafc46c8214",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec5dc89-82d5-4f56-ace0-84e146a2a932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb0c7bb-c778-49ef-b336-9c16950faa5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62f963d-9f96-486d-bed0-882e50cacd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2615a1-b089-4e7f-96f4-481077bf7752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6210da-1e5e-4db2-b47c-5e80a504774a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1254ba-27e4-4851-93e0-4a6cde359577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87674fb-8ae3-43fe-9bb1-fbd2d0e5b02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76814e06-e4ac-4a36-93aa-3882e0d7358c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de40f023-f885-4e86-8c69-dac395027e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b3532b-0a2a-4e11-96d7-c677bc13fbbd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93da413-46ee-4486-8df8-68bfe9de0f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aae74ea-72e1-4988-88b3-3718a18e74a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce0fded-2c57-4067-a7ef-5d925d74274b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a541206-0ddc-47c8-9cff-96ed705221c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc945e2-7157-458e-aeba-51f610127a3b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adafef1-8cdc-499e-a928-5e7bfc9ab65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb5b8ece-4acc-43d0-988c-e07c4870e436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41a2398-3cba-473b-a0f0-d7abebe54703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad4f84d-7f96-412f-a90b-751777459d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed259e6-682d-4608-af17-9737f76cecc9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e4f789-c62c-437a-80b6-b74db2687c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415ff4f2-1a5c-45d8-89ae-bb437b67a4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3036256a-c59a-4087-a259-d55d53106ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939fd8de-bc65-41b0-8e3f-c41019a1ced2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214fdfb1-a83a-4eb9-ad88-fd3294f888df",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c477c0-3a51-4395-b341-56487a409226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b9aa65-052b-405a-b945-4954aa920681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087b62ea-502d-43bc-9710-d5760086462d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46046a3-1fb4-4bb6-8685-28a2173ff8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e26153d-0835-4ea1-a8ef-9447725d0387",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f09e7d-54fc-4f62-8f62-75aa67c3112d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a6ef77-3194-49de-af69-38049ce4c2fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529eb62e-d43c-4b19-9684-a99653e52b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd88d061-bdb4-42da-83bc-b275c8b29b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e879c4-ed98-4fde-91b4-54511074c232",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd500d1-5e7c-4ad4-ad5a-a0f2a098c905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f551b5d-ca8c-4884-a8d1-d65fe3213272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435f5c1f-58a1-47a5-9149-2859e5c19a4a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4500a3ed-c375-4731-b7c2-0639831afaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009e294d-da05-4ead-8790-88dc19f61682",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd39ed7a-b62b-4b7e-9dc5-1671b74b20e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6c3d342-dfef-4987-9ff1-dbca2312c929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f6dcb2-90e9-48f2-8ca6-f8f7f5c8d253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf767072-868e-4728-920c-d25fbe1053e9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "472323b1-7a59-4f66-ae2d-6f31c60f9b35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cb355de-3572-48ae-959b-ce7e6bb69e28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a57bcec3-3a78-40f1-a922-4725353401e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b41d819f-de4d-49cf-a0e8-94f24a706281"
                    }
                  }
                ]
              },
              {
                "id": "e994d160-d04a-4dce-b009-41eca56ec2ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "416d18e7-e3d7-48b8-ac10-198fa2919163",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e86d643-91cc-4e12-b162-2e0d7cac5141",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f3c3bd6f-f54a-42ea-98b4-32460ffcb320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085458e8-669c-470f-b021-a14e243e9c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00e2af7c-6f03-425a-8149-43cbe474bfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26caf4f-7176-4927-a147-6d4615f858cf",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff9667d-e1bb-4b1d-8b1e-4f532b5845d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "34599d54-74b6-49fa-805e-4019fc85c9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a808ed47-3290-4f1e-a85a-d25619f430e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f2fb6f-77d6-4f2b-b0c2-aaddc38d3fe5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb630100-7c61-4979-9807-9fe27fb3d999",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fe5ccd9-35cc-4f02-bd14-13dc7637b167"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06a34051-8cad-4391-a6b7-45af44c23f6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efa0f206-19b5-4287-8c41-181d5cd2d95b"
                    }
                  }
                ]
              },
              {
                "id": "3374982f-df9b-4e7c-aa85-62e529715c35",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ce92d4c1-d0e2-4ed9-8612-3a7c49f9e46b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7451671a-ac99-4f0d-b039-93f4d9a4cb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d1f7c527-e605-410e-939c-b54f31d802f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64847684-2a21-471d-86b1-8f6419c505e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdaea8c-b9fa-42df-bade-5424afa9d605"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2ea75e78-3e90-4207-8be8-e91a7d878987",
            "name": "Positive Testing",
            "item": [
              {
                "id": "baf0e7c9-102c-472d-bc7a-07de2cce89bf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32f0a845-1a1f-42eb-a0f8-7618f5a63346",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "06be6038-88b4-495d-8973-8fad48e2e2eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb2ab3ec-86f1-41cc-ae32-5475766a539a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "765074de-33d9-4c40-8bca-84f05a28447b"
                    }
                  }
                ]
              },
              {
                "id": "6927e21b-8305-4e0d-907f-20b4b0f9462f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df9978c5-14f1-4ad5-b846-1ed01b54ef48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7436935f-42b3-4f73-9fb4-6f04e8c4234a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc3d6edd-a444-4179-bfbc-b9f4b39ffbf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96afddc2-c71c-4cbf-ba87-5bdd84d699c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "879f4a04-cfd2-4adb-adcc-21f8f39e6931",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2b45a3c9-8261-46b7-91e1-eb8a2f42d6f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95c46a4a-79b7-40d6-962a-8bfcce4e2852",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4548473d-f771-431c-8cf9-b0142392d7d3"
            }
          }
        ]
      },
      {
        "id": "9e0ed9f8-4575-499d-a96a-bc0016753b9d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b407cd32-19ea-4464-824d-35766ece74f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb343c9b-b195-4d37-a994-17795ba2f786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8402e3-bbd9-47a9-a90c-b365cc2a6488",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fccceffd-e810-4562-b75d-1dde6e0b24dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcec26d-fe82-4b7c-95d3-545ddab75668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "243bce35-9b35-4c3c-a776-aab0c0dafece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4504b1-5bfd-43c6-a3a4-6d8491c49178",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad0c763-4557-4564-abc2-68d660d10622",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0a2c053f-41c0-475b-a294-c935dbeeb318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c3f4dd-4b7c-4945-9ee1-ee420347d0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d34abc-5f07-4d7c-8a1c-463bcf176b59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e040136-6913-485d-bbda-ea88ac3983a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83b74118-02ad-4f1b-b4cb-b615429a349f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d07e0add-44cf-4cfe-9768-7e46a260617b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3639abab-1073-4b1c-af3d-141c3ebde379"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38bca8c0-c3c1-4793-92b7-d7d9e3641b63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "672bd12d-6d42-42d3-8149-5eb85736054a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99b9b0df-90d2-4e89-80f4-2c5dae569b75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5565939-e24a-4337-a14d-45e16d809ecf"
            }
          }
        ]
      },
      {
        "id": "f6b25b44-a084-4f88-a659-6d5843cd75fe",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "154349fb-2331-48bc-be9a-4e6023e82415",
            "name": "Negative Testing",
            "item": [
              {
                "id": "278662c0-deb2-4fc4-8bff-16fd29cd5c1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bd2a332-6aad-45c8-a9e8-abdf7977f959",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2751a308-6cb4-4f08-a7d2-4a6ce57c8955",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7f3fc9c2-f5d5-4d94-b502-d9a3ba60dd83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3c4a6e-2f64-49ed-8e77-3c463be39105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49b672d2-c3ca-4728-80e9-addc727ad56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e502a9f4-a651-4064-b344-d4496b94f7a1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb383124-d8ed-4e97-8ad5-08ce9cd54c7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c8d5f46a-b063-4b45-a87f-6553f203532d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479efb48-7e9a-4d37-bc8a-2dface448469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8371c642-5121-4aeb-84ab-b925258f3896"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fbcb5f5-0f80-4480-86cd-184755422ad0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d272860a-2b1b-4d77-a90a-6959ac879cd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0680dfed-56db-418b-80c7-3b770d9b9b88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b04c9e0-e582-4329-bc6b-2b62ed7d8c02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d3af9ba-7737-4a4c-9a66-bba69c2a820e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6a7a1a81-16b4-43ec-a1dd-986624772051"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7f02cfb-8dc4-4011-bd3a-9afa7a1e2feb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aff13ba6-8e67-46ba-9b31-2c14a7bf9cdb"
            }
          }
        ]
      },
      {
        "id": "19625110-4580-4367-83c6-74389df648ee",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a8726d8c-e412-4cda-a6f6-8f2f5899ca96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f062ecac-9ebb-44fc-8d9c-2b993b3a070d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2baa261b-3c9e-4046-86c0-f71736f5f2ea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349d1566-de8c-4866-ba68-5b2236cf69e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1598cff-3d51-4dab-96ae-ca842026631e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33c6a48-a9f7-4b0c-b21c-68aeb96a206c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee7f4118-0931-4980-b262-7815bb839560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c78f3c1-2b1f-4735-892b-0402ea85113c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70c86b8-cf05-41e7-a02a-c5308d023b87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "676ea6d2-5ee7-42cf-af11-5065d966f747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a250a485-c2e5-4f8e-a466-8113e3cc45d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96dd7aff-17e3-4c73-ae96-ee2a0bbfbdc7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4699098-8512-4d11-ad7d-02b72f37047c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c31d22f6-e751-4835-931b-f6c22d82e2b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4598a284-085c-4db6-a9e3-357a475c68a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7830b541-de09-4cdf-832c-8901299f4e93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a51f912-6d7d-45f3-a7c0-64f52d212aa2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9242cc97-8dcd-4b3a-9396-e579e3769449"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fb7d000-2c12-422e-bd4f-f96dd39708cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b2ec5e3-646e-4dc5-bfa4-6c0664673303"
            }
          }
        ]
      },
      {
        "id": "5d4d5499-b45f-4766-a6df-e83dc37a3e37",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52800ce3-40e5-4004-be44-42b24af9eb1f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97a89d03-ef44-4eff-8a09-f335eb9f8e25",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c15ae127-0fe6-4035-9072-384f243a9a1c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aad31fa1-da01-438d-a7d5-082b9fc95450",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aae3cabe-84ef-45b5-98a5-7e81af452949",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 12.222222222222221,
      "responseMin": 3,
      "responseMax": 387,
      "responseSd": 35.31311019130952,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676335265993,
      "completed": 1676335280211
    },
    "executions": [
      {
        "id": "3fb495ff-7fef-4047-9c1b-33c9fa24d7d9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e5c7ba87-2fc0-479e-a631-9c867942122a",
          "httpRequestId": "0572c5c0-daf0-40de-ac8c-bec01c488fc0"
        },
        "item": {
          "id": "3fb495ff-7fef-4047-9c1b-33c9fa24d7d9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e86fe1e5-25d1-4a1b-a9a8-acb9a6626cd9",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "4c6d7ce9-aa14-4a54-9977-dc3d438f5d0c",
        "cursor": {
          "ref": "7ad61ea1-2b2c-4c15-a253-050b9de0b303",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3b51bc9a-7eac-432c-889f-4b3fd9f012ce"
        },
        "item": {
          "id": "4c6d7ce9-aa14-4a54-9977-dc3d438f5d0c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3ef8c2af-d873-46a2-a08e-5197d142a53a",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "587126ca-15de-4974-8ba5-5cb564823b27",
        "cursor": {
          "ref": "a6cd926d-ecc3-4112-93c9-52834622d6b0",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ac678ac2-d67c-443e-81e3-326c04ad47bb"
        },
        "item": {
          "id": "587126ca-15de-4974-8ba5-5cb564823b27",
          "name": "did_json"
        },
        "response": {
          "id": "e9015b2c-38c7-4217-aa89-48bbd07adc85",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e12e17b-9396-410b-96cf-c998f364b736",
        "cursor": {
          "ref": "84247156-5250-404c-9fe4-7d1917c22dc4",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6ce7e6e-56ec-4c90-b317-77078d8906bc"
        },
        "item": {
          "id": "9e12e17b-9396-410b-96cf-c998f364b736",
          "name": "did:invalid"
        },
        "response": {
          "id": "fa00e52a-c9ef-41eb-b61e-a7a381e0130a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9e12e17b-9396-410b-96cf-c998f364b736",
        "cursor": {
          "ref": "84247156-5250-404c-9fe4-7d1917c22dc4",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6ce7e6e-56ec-4c90-b317-77078d8906bc"
        },
        "item": {
          "id": "9e12e17b-9396-410b-96cf-c998f364b736",
          "name": "did:invalid"
        },
        "response": {
          "id": "fa00e52a-c9ef-41eb-b61e-a7a381e0130a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0eadb9bc-eb49-471b-9c94-d855e9b078e6",
        "cursor": {
          "ref": "2fe8b0cb-a278-4f36-a483-0e0f6c59935d",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0946d24-b168-4382-ae82-18675e2a0e27"
        },
        "item": {
          "id": "0eadb9bc-eb49-471b-9c94-d855e9b078e6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "efcbda2f-faf0-411b-bfe9-7b4b872a6776",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37212fda-786b-4e32-bd0a-0f7564e30207",
        "cursor": {
          "ref": "2a9d1d92-20f4-4406-bc79-fd12820e127d",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "55fa08a8-e74c-48cf-bf31-941d2a43bd2b"
        },
        "item": {
          "id": "37212fda-786b-4e32-bd0a-0f7564e30207",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4c75fa2b-9089-4366-8282-d29b3866d7d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d981e44f-3bb6-4706-89ca-b806dd4778c4",
        "cursor": {
          "ref": "db368f56-6410-4be4-8e17-1285b18422e2",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17792361-28b0-4d19-a0eb-7d56f509dfe9"
        },
        "item": {
          "id": "d981e44f-3bb6-4706-89ca-b806dd4778c4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3376d37b-1f52-4d90-a41c-d8b8a87cb510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b34975-a404-4779-b924-fcdc902e49b7",
        "cursor": {
          "ref": "3ec34ba0-5d55-46da-8116-d95f53b20d8c",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "aee3c85f-0d69-4ea3-b103-47b71149176b"
        },
        "item": {
          "id": "02b34975-a404-4779-b924-fcdc902e49b7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07c2cf5a-22f2-4de4-ab50-9b137f8c2e88",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b34975-a404-4779-b924-fcdc902e49b7",
        "cursor": {
          "ref": "3ec34ba0-5d55-46da-8116-d95f53b20d8c",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "aee3c85f-0d69-4ea3-b103-47b71149176b"
        },
        "item": {
          "id": "02b34975-a404-4779-b924-fcdc902e49b7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07c2cf5a-22f2-4de4-ab50-9b137f8c2e88",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a912f2cc-d27f-4fee-b985-ab802aea9f41",
        "cursor": {
          "ref": "d21810d7-400b-48f3-b80b-b8894e5ec6f3",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ad989e18-0791-4a0e-a239-6db21cccf4f7"
        },
        "item": {
          "id": "a912f2cc-d27f-4fee-b985-ab802aea9f41",
          "name": "identifiers"
        },
        "response": {
          "id": "f1540044-840c-4bc0-ac49-534ac9adf74a",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c2e723-843e-4229-984d-f4c49f72037e",
        "cursor": {
          "ref": "5d061aa9-7c69-4fc8-a62a-a119ed976aa5",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8859fae0-e745-4074-8358-e3b38d33eb47"
        },
        "item": {
          "id": "a3c2e723-843e-4229-984d-f4c49f72037e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "817b445c-c6e9-4afb-8544-a00b5f449477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c2e723-843e-4229-984d-f4c49f72037e",
        "cursor": {
          "ref": "5d061aa9-7c69-4fc8-a62a-a119ed976aa5",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8859fae0-e745-4074-8358-e3b38d33eb47"
        },
        "item": {
          "id": "a3c2e723-843e-4229-984d-f4c49f72037e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "817b445c-c6e9-4afb-8544-a00b5f449477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47e11e4-94e3-46ad-b452-a9a1d427e9a2",
        "cursor": {
          "ref": "3bc9bcd0-9df3-4feb-bffc-35aa1e3f1e46",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68a42dd7-ebd6-4b0a-8fbc-6609d49446f9"
        },
        "item": {
          "id": "d47e11e4-94e3-46ad-b452-a9a1d427e9a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "50c9e590-ce25-4e53-b4f5-31dcf0f3b6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2925052c-48c0-4f32-aacd-1135e0751bee",
        "cursor": {
          "ref": "1163f0ee-efb0-4d84-8349-53c395e35e3f",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25446ac2-1fa1-47da-bb00-7b6d1ce0a9c7"
        },
        "item": {
          "id": "2925052c-48c0-4f32-aacd-1135e0751bee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a99d584-dc63-4423-9d57-760ca78d7010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e391fbe-cb02-49b1-9b4c-598a8f41afe9",
        "cursor": {
          "ref": "a54179c0-66c5-4733-a350-bb0b8ba2f557",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75ce9ece-e484-41a0-b02a-b41e8c0a3f98"
        },
        "item": {
          "id": "8e391fbe-cb02-49b1-9b4c-598a8f41afe9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d2e45160-a760-4b85-8efe-b085c8fb7b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95029eb0-a935-4e3c-9e4c-8c2156c4ded2",
        "cursor": {
          "ref": "db509375-0d12-4830-a4ef-7990f42a602b",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d2087c29-f591-45f8-aeff-e03fc7da0e46"
        },
        "item": {
          "id": "95029eb0-a935-4e3c-9e4c-8c2156c4ded2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ee461ae9-5681-4557-8491-783eb022a491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187298ef-8cb2-4d00-b05d-0f80d117c6c6",
        "cursor": {
          "ref": "8bca55da-7c8a-4aea-ab70-7aeac15c6b94",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b085246b-0331-4782-b74c-ad73924e0fd9"
        },
        "item": {
          "id": "187298ef-8cb2-4d00-b05d-0f80d117c6c6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bd2bcd64-cce4-43b6-b825-0a3b5d6a652a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12617d17-7b12-4a7b-8d72-e359cab7bfd1",
        "cursor": {
          "ref": "1e535bf9-1b4c-44fe-946b-a9cb286dcac0",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "adeea93c-a1bc-4f17-be08-80f54f8854eb"
        },
        "item": {
          "id": "12617d17-7b12-4a7b-8d72-e359cab7bfd1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1910c93e-6f20-4e89-87e8-ece9ae212d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5367e2-6cb9-48d6-84b8-bb307174bdca",
        "cursor": {
          "ref": "82998b83-1e5c-4b22-953f-ff956f4b592f",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "545a0a46-94a1-4a4a-b3ed-52154145f74b"
        },
        "item": {
          "id": "3a5367e2-6cb9-48d6-84b8-bb307174bdca",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d7a60155-c772-4727-af99-5eb703694649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3008ee6e-31b4-493b-9ae5-d696a6a29f5f",
        "cursor": {
          "ref": "93080fd5-8e34-482b-8eaf-6ea98396a9d8",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "608a2196-62ee-4669-82a5-e362392decae"
        },
        "item": {
          "id": "3008ee6e-31b4-493b-9ae5-d696a6a29f5f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b24c22fa-16fa-470d-ac45-69c322787323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4030e35b-3793-4dab-8f21-17877225d881",
        "cursor": {
          "ref": "45d27c9b-ab98-418a-9561-3b2335311469",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "963100c4-1e83-463a-89dc-4479decf8599"
        },
        "item": {
          "id": "4030e35b-3793-4dab-8f21-17877225d881",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0e609247-f203-4562-b26e-4c4f0fca17d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c62b41c-a477-4972-a069-18bda64a6ac4",
        "cursor": {
          "ref": "830fcbd8-8c05-4228-aa63-832a18e1a915",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "25b207e2-cc21-452e-a2d3-a87b09ff9cfe"
        },
        "item": {
          "id": "4c62b41c-a477-4972-a069-18bda64a6ac4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "740f3b57-758d-4351-939d-77ff0153189d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a99a0b8-3161-4ee2-b8cc-93b20e3c8ee4",
        "cursor": {
          "ref": "79b92435-1672-4ce8-9758-5a14e036bcb3",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c6023c7a-a391-4da4-9928-86818bddb4be"
        },
        "item": {
          "id": "6a99a0b8-3161-4ee2-b8cc-93b20e3c8ee4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4840d745-7071-412e-8225-82969da300d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a051a682-ae7e-435f-aa05-95d728fffdc1",
        "cursor": {
          "ref": "fd0533e2-6072-4ded-b616-28d432d0f243",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "50c6fec9-bbd2-4dcf-a776-7fabb3242b89"
        },
        "item": {
          "id": "a051a682-ae7e-435f-aa05-95d728fffdc1",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "f703b455-f7fe-41b9-86f1-e3c7a1de9ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e23860-d2e9-40da-a576-fa681a0d62ba",
        "cursor": {
          "ref": "7404b989-eb1e-4d48-acdf-0acaf1bd760f",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "76d33cf8-9909-4b13-84c3-fe71dd2b490a"
        },
        "item": {
          "id": "a3e23860-d2e9-40da-a576-fa681a0d62ba",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e1518b9e-6d88-42cd-a11c-2cdb1069bdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5e1e4e-fb98-4ef0-8817-b150459b446a",
        "cursor": {
          "ref": "03e8c694-8e53-4722-b342-32de1573b66a",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ae7d1144-c82b-4907-a97b-e15143ea70f6"
        },
        "item": {
          "id": "7e5e1e4e-fb98-4ef0-8817-b150459b446a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "069129ff-2c60-442a-9f40-2d3e547b4266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffe647c-98aa-4b8a-8e98-83c543c894bc",
        "cursor": {
          "ref": "7c649a91-7a42-4ebe-a000-2e1501fef68d",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dfe5cd89-c0ad-41e9-b8ef-a3168be35730"
        },
        "item": {
          "id": "2ffe647c-98aa-4b8a-8e98-83c543c894bc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2f71419c-0189-40d2-a125-cb31ea145532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab362853-1717-4196-813c-2bfe584026cf",
        "cursor": {
          "ref": "65313aef-d5e7-4a09-b968-adb64e15f078",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "555f19cc-eab0-490d-a369-39db5a2ae019"
        },
        "item": {
          "id": "ab362853-1717-4196-813c-2bfe584026cf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "457297ab-4ff6-4e4b-9deb-e13dd35bfed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf84822-7dff-4964-9b28-ec1db68de836",
        "cursor": {
          "ref": "e920670d-3fbe-426a-93d9-5e502a9bb37e",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fad218ff-9bb2-4977-a050-2bb06ae1cf5a"
        },
        "item": {
          "id": "bdf84822-7dff-4964-9b28-ec1db68de836",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1daa42ce-81bd-46b6-b18d-70846a59ace6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ffc1e5-75ed-4b2c-bb68-307743426e11",
        "cursor": {
          "ref": "2ff89596-b149-47a2-a144-2d798dd2d2e8",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "734971d0-ed73-4003-b93b-389494e1ee7e"
        },
        "item": {
          "id": "e7ffc1e5-75ed-4b2c-bb68-307743426e11",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1af8925c-22aa-431b-be10-eeb1ad077523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed011270-4726-4382-9862-008a7e4bde1b",
        "cursor": {
          "ref": "57d23771-d8cf-4f60-87b3-1494b16e493e",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "64c54db0-5ec0-4dbb-a310-c02ee1dfb648"
        },
        "item": {
          "id": "ed011270-4726-4382-9862-008a7e4bde1b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "46fcc9c9-5082-4768-a2a5-b4e3b29d5e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965c4d3e-6da8-4077-b749-bde1057fb2ce",
        "cursor": {
          "ref": "0c32e537-93df-4cab-94da-b454cb47cfb8",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d0a7e126-36a1-4e28-9379-a4826011a9b5"
        },
        "item": {
          "id": "965c4d3e-6da8-4077-b749-bde1057fb2ce",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9611e293-4469-4e67-bf64-7568c1b79d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07acf68a-a7f4-47ac-aa45-9571245050b2",
        "cursor": {
          "ref": "3279b5dd-d06b-4a11-a88b-0f184b6de061",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dd6a389a-45aa-42f8-8a57-f1334cfb5e28"
        },
        "item": {
          "id": "07acf68a-a7f4-47ac-aa45-9571245050b2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ece7eb93-c9fe-4b96-9eaa-62bede3153cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a89d8d-7ab8-412a-8953-a83297d41332",
        "cursor": {
          "ref": "d49e5245-74aa-4b76-9522-98a1026253b7",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8ced3ba3-422c-44ac-b183-f5100a060911"
        },
        "item": {
          "id": "25a89d8d-7ab8-412a-8953-a83297d41332",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8a3f0a92-1ce1-4ed3-863b-ed8485fa6517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca9e5de-4866-4a90-a96d-46e2461e308e",
        "cursor": {
          "ref": "2dff8b95-d364-4a93-b3f6-cedfbe757cd9",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3a8d2c2e-ef53-4c83-8059-3f374a482fdb"
        },
        "item": {
          "id": "7ca9e5de-4866-4a90-a96d-46e2461e308e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bb08c0b9-0fb2-4dcf-b823-fb5ea16f1e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de85953-2772-4bb3-9d61-771f35dc53e4",
        "cursor": {
          "ref": "5ddaa8e2-cabf-4ef7-9a7e-721c36b7a38e",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a15ae990-72d6-41fc-b265-1c7c1a01f0ab"
        },
        "item": {
          "id": "7de85953-2772-4bb3-9d61-771f35dc53e4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c1005ade-c85c-48c0-a8e1-7ba4430acf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4b75af-ba14-401f-b466-16b9de154bab",
        "cursor": {
          "ref": "c5196157-2944-40f7-815b-2ab06229afc2",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d16b2a6b-4508-4874-b47d-4a558d525557"
        },
        "item": {
          "id": "4a4b75af-ba14-401f-b466-16b9de154bab",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "393ff4c9-5dc6-453a-a679-135453785d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47df9e4-7691-43f4-a014-bbfd4feefd13",
        "cursor": {
          "ref": "bcd47362-50c0-4dc6-9bab-ea346fba33dd",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3be7cebe-6d54-44c3-9dcf-1741e8888d4e"
        },
        "item": {
          "id": "b47df9e4-7691-43f4-a014-bbfd4feefd13",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "34ec8619-225e-454b-8bde-9594fefdfcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86dcf63-c7c9-40c9-a277-92d9d7191597",
        "cursor": {
          "ref": "0a90d5de-43a2-4da5-a168-bc75c982b6cb",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4adc884e-495f-4dea-b4d9-8bf7477332cd"
        },
        "item": {
          "id": "f86dcf63-c7c9-40c9-a277-92d9d7191597",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a8f85f33-a02d-4309-be76-ce5e201d5930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62add4d-2eb1-47e8-8fc9-01b031f5c5b9",
        "cursor": {
          "ref": "8c8faac3-8ff2-464f-9b8c-875264dea2d9",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "54b7ba9a-b256-4d02-b104-f180f61f39bf"
        },
        "item": {
          "id": "e62add4d-2eb1-47e8-8fc9-01b031f5c5b9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8a77fd17-6928-4bf8-8f3f-98a702710056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc57828-57da-45f9-a836-8dd61b8ee38f",
        "cursor": {
          "ref": "f144508c-99ee-4934-ac89-09626325b49f",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f5cc2312-3eb3-4b83-b7fc-516e09c5de0c"
        },
        "item": {
          "id": "8cc57828-57da-45f9-a836-8dd61b8ee38f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fbd58577-ae17-46bb-8bff-0dc4347a7654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8949a8-8ea7-4c48-b2ce-8641d23c73ac",
        "cursor": {
          "ref": "7673000d-84d2-44a3-93a1-220253090363",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bd27366f-05a5-4bda-a3c9-7eabb15f1f98"
        },
        "item": {
          "id": "9b8949a8-8ea7-4c48-b2ce-8641d23c73ac",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fc603f89-a66a-4c31-bd6d-6e1ec26be7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032fa927-55f6-404e-a7f0-01ff876cb78f",
        "cursor": {
          "ref": "aa0f0932-245c-4ff4-b602-4f2430862931",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "519dcb15-4938-44fd-aa9a-cc76c5cc9af6"
        },
        "item": {
          "id": "032fa927-55f6-404e-a7f0-01ff876cb78f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d9e097c1-6031-46ae-b65e-cd19649a4a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27df5307-d9a3-41fd-b04c-530edb61463f",
        "cursor": {
          "ref": "bdae261f-79d4-48a5-beab-32809615e3b6",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f5b599c1-774b-479f-acfd-903a5ccc9a32"
        },
        "item": {
          "id": "27df5307-d9a3-41fd-b04c-530edb61463f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "540b3225-5638-4ab8-8067-5604bee2b8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b11941-9b9a-4fe4-92f7-2b5660562c60",
        "cursor": {
          "ref": "cd8e51c8-5014-4f10-9473-7b37304aefaf",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5092d739-37bb-4518-b836-7c51aef7496b"
        },
        "item": {
          "id": "c9b11941-9b9a-4fe4-92f7-2b5660562c60",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e25d5694-b9d8-4ff7-ab87-1a614a4c7a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c8f5e8-38e5-41ec-9bea-e9255c0565df",
        "cursor": {
          "ref": "4c35b521-1aca-4dfe-a8af-68f4f00981c2",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1acada16-8594-4981-afcd-f550664028dc"
        },
        "item": {
          "id": "03c8f5e8-38e5-41ec-9bea-e9255c0565df",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0d37c7cc-f08b-4684-aa01-dfbc9c003407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3815e90e-449c-4242-a1e2-c115d1659ce3",
        "cursor": {
          "ref": "c409f99f-39b4-42f3-bbdd-706bb08c7879",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2aba405e-37ab-4c7f-8cf1-efdac43bfbe7"
        },
        "item": {
          "id": "3815e90e-449c-4242-a1e2-c115d1659ce3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "12470d2d-6afb-4e17-8d54-a5a76dabb0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a59dd78-34f4-4597-b06c-ad9e36dd56f0",
        "cursor": {
          "ref": "b85b15f6-a6b0-4f87-8c24-7841da29f9c0",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bf35ff16-f756-471c-b044-f9d2a0613155"
        },
        "item": {
          "id": "4a59dd78-34f4-4597-b06c-ad9e36dd56f0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a78feff3-fe38-47ec-8977-6201f2330d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "eac3917f-5893-4be6-96c6-227a0eb523d8",
        "cursor": {
          "ref": "d3247cb4-760c-4fe2-b443-4adf4ef545ca",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8541957d-6705-4d80-ba6a-0b5114624f6f"
        },
        "item": {
          "id": "eac3917f-5893-4be6-96c6-227a0eb523d8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "28ee6c82-be75-465a-a2f0-7580e96b90ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bdd631-194d-4583-9bcb-278b50cd0d89",
        "cursor": {
          "ref": "5ae5ef08-3799-416c-9913-45ddd6140a04",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b1724562-572e-42bd-8de0-ce184a67df99"
        },
        "item": {
          "id": "41bdd631-194d-4583-9bcb-278b50cd0d89",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3182b515-547e-4189-9fde-61ce6dd34743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39a7be0-1894-4073-baf8-65648e9edf45",
        "cursor": {
          "ref": "9468bc6e-5c3f-4c21-a0dc-a699097e98c0",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9bc80070-3c17-419e-8876-feb7bbcc0696"
        },
        "item": {
          "id": "e39a7be0-1894-4073-baf8-65648e9edf45",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f9505b6e-f6f3-46f3-9259-aeee0d4063c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf9ab72-3d79-4fe5-9bc7-231b46889fca",
        "cursor": {
          "ref": "e3bb8b5e-cf9f-4d2a-a56f-1f8ee0ae52f4",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2c838779-003f-469e-8456-9789a248f125"
        },
        "item": {
          "id": "bcf9ab72-3d79-4fe5-9bc7-231b46889fca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0c40576a-86e5-4b54-b04c-2419423278c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6490bd8-d1b6-4fb8-b20b-806bdb5f4617",
        "cursor": {
          "ref": "e09abdf8-556b-4792-ad08-a4a7d94dc6f9",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b81a79bb-df0b-47c2-bd31-c1ae71c015cf"
        },
        "item": {
          "id": "c6490bd8-d1b6-4fb8-b20b-806bdb5f4617",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "00d844f7-0d72-4ddc-9e73-f44d50f6020e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389100f9-c942-4c6e-babe-259bf6635c6c",
        "cursor": {
          "ref": "e6d566aa-604d-49ae-8a8a-6ec49a202ed5",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2318b318-5849-4e2f-8eb2-f1a498261d8d"
        },
        "item": {
          "id": "389100f9-c942-4c6e-babe-259bf6635c6c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "05a1cfa3-44b8-45d4-8fa8-cf019ea1fe0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b73b446-1575-4622-8aac-298cf72648ae",
        "cursor": {
          "ref": "89bd8839-cb48-4da3-a956-ef6dad149fa2",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "223da1d9-e38b-41c4-9c17-971277c76a07"
        },
        "item": {
          "id": "8b73b446-1575-4622-8aac-298cf72648ae",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "edfaaebf-c3e2-4a1c-8771-fbd8bbfdbb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "90056bd4-6c79-4df6-a007-8e5662c59063",
        "cursor": {
          "ref": "629da4c6-8882-4145-bc56-9e7926563e11",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8a007d69-0907-481f-a9c7-bf9994626aea"
        },
        "item": {
          "id": "90056bd4-6c79-4df6-a007-8e5662c59063",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "350a2ebc-28b9-401b-af3e-c6428284a02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d3d17d-34fa-474f-acbf-03d0fd1927b2",
        "cursor": {
          "ref": "eb93ba05-0aa2-4378-8e4d-290089cc2402",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a57ce5b6-dc52-48d9-870a-09457a3939f7"
        },
        "item": {
          "id": "49d3d17d-34fa-474f-acbf-03d0fd1927b2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bf30d056-47da-40a8-ba77-5c9e26dead77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb37814-4c95-4448-b77e-0a01e4cb4ec7",
        "cursor": {
          "ref": "dc9f7ace-4ce3-4cf8-9002-ba650699be92",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "741577f8-4c1d-4725-9245-9d17f4b9bad7"
        },
        "item": {
          "id": "afb37814-4c95-4448-b77e-0a01e4cb4ec7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0ef260b5-fd9f-48bd-a939-285b02fa5c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86265e06-0e18-41c9-8eaa-21ad170fab7e",
        "cursor": {
          "ref": "b39a4941-1619-4c96-885d-b58277be83a5",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6e29db7e-4d47-412d-8caf-53a5ff5bc973"
        },
        "item": {
          "id": "86265e06-0e18-41c9-8eaa-21ad170fab7e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4566c1a5-4eeb-4f70-a39c-d427782d12c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec032b8-573d-43eb-a08d-0fafc8bb24e5",
        "cursor": {
          "ref": "3fa446bc-c8f1-4dba-b26a-db10d964e8f1",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "018a60c3-414a-4a07-9871-e21e08238b11"
        },
        "item": {
          "id": "aec032b8-573d-43eb-a08d-0fafc8bb24e5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f4b2b14a-25b7-42d3-8d10-7ca5afeac40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f175f7dd-b7d1-4dee-a698-850d1291fc58",
        "cursor": {
          "ref": "d4ca10f7-7765-4a6f-b05a-07e16017464a",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "48a7eae4-d3d0-4114-b977-0a06b3d187e4"
        },
        "item": {
          "id": "f175f7dd-b7d1-4dee-a698-850d1291fc58",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "34bf2e90-efa5-4af0-995c-77d86e7958b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aae31b6-627c-4863-b92e-7faaeb7f7bd8",
        "cursor": {
          "ref": "a6c7f99d-3ec7-40b7-b95d-29b10c066f00",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2e32d1f0-271e-495e-98d7-c2554dc5d7df"
        },
        "item": {
          "id": "0aae31b6-627c-4863-b92e-7faaeb7f7bd8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a0e9eb9b-92a7-4b3e-a8ed-4882a58ca415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ed0eda-362f-47a0-9217-2496131eb3ea",
        "cursor": {
          "ref": "b766cda0-8e71-45fb-bec5-f3d543a37573",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "67e1bafd-5b52-41b5-9429-bdc67586cedd"
        },
        "item": {
          "id": "01ed0eda-362f-47a0-9217-2496131eb3ea",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8570fbd-c726-4231-801c-2d61e1e83522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b01fe66-59ee-4b6d-b22a-41fa41c782df",
        "cursor": {
          "ref": "271dad50-f244-44c4-9014-1786cf876803",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f5f00507-5c7f-4256-8d4a-813f7e3cedbd"
        },
        "item": {
          "id": "7b01fe66-59ee-4b6d-b22a-41fa41c782df",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1cca46ac-5086-4595-98a1-2c21e2f5841d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c40bc66-6cd2-45f3-afe3-3714de3e5b95",
        "cursor": {
          "ref": "f4eca09e-dc75-4d4c-99ef-77afc99f3013",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "aba47906-53b4-426b-8bd9-32bdcd185664"
        },
        "item": {
          "id": "7c40bc66-6cd2-45f3-afe3-3714de3e5b95",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7cfbcc2e-d654-4282-b794-dcb3a776fc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e126960b-7331-4718-aa67-0e309c90d940",
        "cursor": {
          "ref": "4d461fc7-475d-4550-9252-f15b33bc15c6",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a8d8abe0-5488-4df5-9fab-e5c648d7a1e2"
        },
        "item": {
          "id": "e126960b-7331-4718-aa67-0e309c90d940",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cd7ab784-8d48-4800-ae2e-7d4681918c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db7fac9-6934-4571-a497-ba1050574986",
        "cursor": {
          "ref": "995e4081-fd88-4dc0-a839-2696f0a4fe23",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b3ff3c90-7429-43c9-9df0-9d7b50c91281"
        },
        "item": {
          "id": "5db7fac9-6934-4571-a497-ba1050574986",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c2bb9a73-2168-42e0-bfed-4cc71b08e0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11f9f7e-3131-4801-b960-d6c126447221",
        "cursor": {
          "ref": "fb32c4ef-fc6a-491d-a28d-5434f0f0ddc0",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e5797964-a7e3-4648-bdb7-f37f2cf3def5"
        },
        "item": {
          "id": "e11f9f7e-3131-4801-b960-d6c126447221",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "09ad56c5-4ee7-4798-b417-1ca69f9cc647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1e546d-a081-48cc-8fb6-1b1180153f3c",
        "cursor": {
          "ref": "411d56ce-f7bb-4681-bd0f-22fa636dc6b3",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b3c3bf3f-1059-4bbb-9a68-066f61c4ad6e"
        },
        "item": {
          "id": "6d1e546d-a081-48cc-8fb6-1b1180153f3c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "411c6250-70af-4da4-8792-0d856398317a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7781e7ee-74d9-453f-899b-2b17f9b90106",
        "cursor": {
          "ref": "20ce3549-3977-412f-8a53-9ec5cb9e0e44",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f1007e5a-cc11-4464-b722-87be9d637fc2"
        },
        "item": {
          "id": "7781e7ee-74d9-453f-899b-2b17f9b90106",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "79626e0a-5687-4f7d-82ac-6cef89a49ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ad6da1-8c74-4560-bc1c-33550139c14a",
        "cursor": {
          "ref": "126543d8-db48-434a-aa31-2e9e4bee9d0c",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2257d296-3398-45dd-b47a-1b1f94608742"
        },
        "item": {
          "id": "79ad6da1-8c74-4560-bc1c-33550139c14a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7515b61e-9a85-47c7-aa1d-007794515b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9093b6-a955-45d5-b4a3-46f3c7aa99ec",
        "cursor": {
          "ref": "b3e16afc-5f45-44ac-8a5f-bc6e430e04e8",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "53968099-c99e-4aa1-a9f8-4d23e1aceceb"
        },
        "item": {
          "id": "dd9093b6-a955-45d5-b4a3-46f3c7aa99ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0d386418-670d-4178-8ca0-abca1f76c209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f413d8-ef29-4b4e-adfb-52bb9b12736b",
        "cursor": {
          "ref": "092ccfac-bf69-47c1-af52-543159a64077",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d3b93b9f-a343-4a75-a8d5-59838face066"
        },
        "item": {
          "id": "07f413d8-ef29-4b4e-adfb-52bb9b12736b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f71a1c53-e440-4697-9ee4-78120b503d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65eb35d-a645-400f-bba7-8e5560ccbb37",
        "cursor": {
          "ref": "00c21ea7-5a16-4595-aa54-1f40dbe4fd4d",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5578f74b-6da6-4b58-aa3d-730d6bf625ad"
        },
        "item": {
          "id": "b65eb35d-a645-400f-bba7-8e5560ccbb37",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2d638a2b-d518-4245-916f-19919a56d747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f739cd6-2554-45bd-8ad3-cdd95f546692",
        "cursor": {
          "ref": "6d2b15ae-81aa-490b-b695-3fca8f1b7318",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e7a6cdeb-f4c9-472d-a102-c1189a99dc6f"
        },
        "item": {
          "id": "9f739cd6-2554-45bd-8ad3-cdd95f546692",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "48a72f91-6cd4-468e-887f-4ee1b9363786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e1eea1-cd90-46b5-9535-847b82954d15",
        "cursor": {
          "ref": "932b0cf5-fca2-4fee-87f8-0c4e266062e7",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "22cd4d38-8185-4b4b-ac96-c47ba10dfc42"
        },
        "item": {
          "id": "c3e1eea1-cd90-46b5-9535-847b82954d15",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b832f8c2-22f7-4fec-92c1-2f3c2dd45b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a02104-2e70-4440-84f4-70faf5b5d56f",
        "cursor": {
          "ref": "501f4bed-e84c-4e6c-88df-fbf5eae86c1a",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "53d49366-88c2-4041-ad98-91046da49eab"
        },
        "item": {
          "id": "69a02104-2e70-4440-84f4-70faf5b5d56f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d9616652-f980-4947-8f47-603b75161311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d2d52f-be15-4840-9ac6-1aeb063a05e7",
        "cursor": {
          "ref": "16279fe4-4a96-4a15-932c-466383d279b7",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ea027b05-0518-4aea-b9b8-e120df0be559"
        },
        "item": {
          "id": "e8d2d52f-be15-4840-9ac6-1aeb063a05e7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "542e9212-39fd-4616-8bcd-f19751c9800c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff4fd17-8e73-4b26-b6c2-74fd0186feb3",
        "cursor": {
          "ref": "b078a20c-1bfc-40f1-97a5-57d9ba399949",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b3e94ced-ed43-46c3-a8dc-c8b5dc99d993"
        },
        "item": {
          "id": "3ff4fd17-8e73-4b26-b6c2-74fd0186feb3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c014604a-2e49-4266-88cf-ac988f3548a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e4251e-447d-4303-9503-b0d3fbe8608c",
        "cursor": {
          "ref": "675b094f-ae22-45b9-af50-769343f264e6",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fb80b754-568e-4d4c-8795-4281f8441d98"
        },
        "item": {
          "id": "72e4251e-447d-4303-9503-b0d3fbe8608c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7fdf630c-094f-4ac1-878e-80f3661ef565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b53f36-4cc3-4561-8604-5da216aaf34c",
        "cursor": {
          "ref": "7b6f72c8-0a67-4a77-8342-b3a33bd0d368",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e3e6b2b1-ba24-4764-8ca0-3bea8a0aa630"
        },
        "item": {
          "id": "c9b53f36-4cc3-4561-8604-5da216aaf34c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7c850536-0137-43ea-8637-3309dc53fad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0001d223-266f-4684-ad07-679ab010630d",
        "cursor": {
          "ref": "742ed7f6-5ace-455d-9222-4f6e9a8a519e",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "27d25bf8-8609-4893-bac6-4db4ddd020a9"
        },
        "item": {
          "id": "0001d223-266f-4684-ad07-679ab010630d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "412e9f4b-cc66-4b24-ba6b-99812187d88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8678e977-c7a3-40c3-b24a-cde6147908b7",
        "cursor": {
          "ref": "6fa0431e-eaf9-4947-8778-cfe154881450",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "35b65345-a0fa-4575-810d-7b66c51c8456"
        },
        "item": {
          "id": "8678e977-c7a3-40c3-b24a-cde6147908b7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "64b6d800-88c5-47a2-895e-60bf913ca399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965804c6-0060-48ed-8397-3fb31db0a1e0",
        "cursor": {
          "ref": "21bc1503-e1bd-4fb7-88f7-3ce69100efe4",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2b41c906-c90f-4e36-9841-0f7a438a41e3"
        },
        "item": {
          "id": "965804c6-0060-48ed-8397-3fb31db0a1e0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ece613de-c42b-4f9f-9bfc-6317ee7311d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222e74fe-39ad-4af3-bded-79c03d60e7bc",
        "cursor": {
          "ref": "7769cec8-eb5d-4bb7-b788-3178b267d88f",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b02971bd-8c0b-4b4e-ac59-a830a481ae85"
        },
        "item": {
          "id": "222e74fe-39ad-4af3-bded-79c03d60e7bc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "34b9cf7e-a33e-4f18-ba90-a128dcede4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995774df-8f29-4555-b54c-7ad064048256",
        "cursor": {
          "ref": "baee7445-29c0-4097-9b42-33f4f4ff2304",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "434856b3-dce4-416d-952a-aa0d3b355afe"
        },
        "item": {
          "id": "995774df-8f29-4555-b54c-7ad064048256",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ce812ee0-8f7c-4c5f-b8d8-2698fc415017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fde7d6a-2f09-42fc-9033-9dbfdac9d0e9",
        "cursor": {
          "ref": "75bc75a0-49c5-4df3-9eec-abe8b0b32e83",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "32ced0c9-c964-42f1-a472-806ca9973ec5"
        },
        "item": {
          "id": "9fde7d6a-2f09-42fc-9033-9dbfdac9d0e9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bcf47d3b-df0f-4ade-8913-140247aa1ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd2c27d-7df6-42f9-9907-bf0a6e91095d",
        "cursor": {
          "ref": "48904385-ca3d-4642-a0d1-ab5bf0d369e2",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ce0d793a-55d3-4c6d-a57a-abbd00614687"
        },
        "item": {
          "id": "0bd2c27d-7df6-42f9-9907-bf0a6e91095d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ea0d85bf-4e51-4bbf-ac75-f68573837f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c36740-9ea4-40da-aaa8-c4a7ba2b851d",
        "cursor": {
          "ref": "f5a53ae6-c278-4b89-94a4-ea6a42a4ebe2",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ced22164-a2cc-451f-af29-4e3054527254"
        },
        "item": {
          "id": "e2c36740-9ea4-40da-aaa8-c4a7ba2b851d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2733c63b-6065-4c07-bc1c-6b32551d7b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c56985-3974-41e0-9cc1-0c72145bc4e1",
        "cursor": {
          "ref": "dbf53c5e-851b-4670-b3dc-324be9e7c642",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ea04e310-1842-48cd-84c5-0ea78124e0a1"
        },
        "item": {
          "id": "94c56985-3974-41e0-9cc1-0c72145bc4e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9b79b3fe-8bc6-48db-9c22-061e9531ac7b",
          "status": "Created",
          "code": 201,
          "responseTime": 23,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "3e065db9-0c51-4df2-8a3b-b743e9361e81",
        "cursor": {
          "ref": "20f60653-a269-4ce5-84d8-b786e524c3fa",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8aa7d85f-0a77-4920-8cf4-758da6372846"
        },
        "item": {
          "id": "3e065db9-0c51-4df2-8a3b-b743e9361e81",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "53d5dcfc-1df7-409a-bb04-9b0884764a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046fc5cf-0455-46c1-987b-69ba0845863e",
        "cursor": {
          "ref": "8165e1de-4247-407f-96d8-7cc65affd17d",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c483aa2d-d0b9-4a00-ac42-a153aa94359c"
        },
        "item": {
          "id": "046fc5cf-0455-46c1-987b-69ba0845863e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "531e5533-3da5-4723-a15f-3271ffd6736d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5946ce-0d4f-4de4-bd07-ea8bd03c0cf0",
        "cursor": {
          "ref": "239428b4-428f-4b90-84c9-4ce8d9953693",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "127c8839-ee11-4e3b-95fd-087b10e7242b"
        },
        "item": {
          "id": "8e5946ce-0d4f-4de4-bd07-ea8bd03c0cf0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "32f089b6-b5b6-40c7-ac0f-3695305a5d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98331b46-e002-4ca1-bec5-cf7e16978b68",
        "cursor": {
          "ref": "c51b0919-425b-48b0-a311-b8d4d7197a42",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "119e0459-4c93-41ce-97a8-3c2d0cd857c9"
        },
        "item": {
          "id": "98331b46-e002-4ca1-bec5-cf7e16978b68",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "44ac9c00-1a69-42de-9485-b2905d7fb21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57539a1-b667-4231-96d3-89a6a8fec8a1",
        "cursor": {
          "ref": "a7478d70-69b0-45f3-8833-16cb3da1bbef",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e46c9341-ac9b-43df-acca-56094f3e9951"
        },
        "item": {
          "id": "b57539a1-b667-4231-96d3-89a6a8fec8a1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "25945779-8604-4c07-9fdb-9f49e5289685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02b0528-ea3e-4834-9d89-ffcd767fe2ef",
        "cursor": {
          "ref": "2dd18d58-762f-4ea7-ad68-b62f1622d370",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a4825dc-808e-4654-baa0-5c1edbf19cec"
        },
        "item": {
          "id": "b02b0528-ea3e-4834-9d89-ffcd767fe2ef",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a5832752-1622-4086-8210-d3987c003e08",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4e15b6eb-bbc3-4980-b883-cd001d73e6a0",
        "cursor": {
          "ref": "3159e859-69ca-443f-9b42-8c20a7ddc489",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2bb18952-76cf-4a24-8473-232b17901d9b"
        },
        "item": {
          "id": "4e15b6eb-bbc3-4980-b883-cd001d73e6a0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d4478865-56cc-49fc-8400-0363d12bbf2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6d5637-f5c3-495c-bb50-84168d90ae81",
        "cursor": {
          "ref": "efda4a7a-9b78-468b-8c34-9bcf98955e8a",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5438cb6d-df69-4dd2-b918-6bd1a7d3b5df"
        },
        "item": {
          "id": "3c6d5637-f5c3-495c-bb50-84168d90ae81",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "07c53c59-0b02-4fc8-938e-82270d181427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c37879-c7c9-4bcb-a331-c9d34ac38ac8",
        "cursor": {
          "ref": "5cb5929c-6286-4157-b7c5-729f9d094085",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "81d83605-1a7f-4c63-b36d-65980df2e5a7"
        },
        "item": {
          "id": "59c37879-c7c9-4bcb-a331-c9d34ac38ac8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dd3f5195-4e49-49ae-8d4c-fb9c3c924393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7983536-012a-456d-bb89-496719e8c147",
        "cursor": {
          "ref": "d03f7e74-ab43-4f84-bda8-f6f179c4b6b2",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "272f2855-771c-4e65-946a-ea07e7735b23"
        },
        "item": {
          "id": "e7983536-012a-456d-bb89-496719e8c147",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "13e7df95-5f1d-4a47-8fea-16f3c734caad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864e1a2f-8b25-456f-b728-da0d903cbff5",
        "cursor": {
          "ref": "c1cba6e6-e1d2-428d-805a-9dfa9aa7278a",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ddb6ae51-4fd0-4144-a6de-66905bcafb15"
        },
        "item": {
          "id": "864e1a2f-8b25-456f-b728-da0d903cbff5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2a22bda5-6b86-4003-a8c0-26d8a09fa4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e25023-fdbd-4614-9519-76dd78e3c9a0",
        "cursor": {
          "ref": "9408e692-a8f4-4cc0-ab68-626d4e926631",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7241185a-c837-40ea-a88c-abe930b6b6d9"
        },
        "item": {
          "id": "16e25023-fdbd-4614-9519-76dd78e3c9a0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "097e3a13-5eac-415d-ab57-6a507502b68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2778d391-1363-42c5-9412-51d1dc21e73d",
        "cursor": {
          "ref": "0ddcca96-17c5-4548-ae2b-48551b5ca399",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aabca4b3-20ef-43df-bf44-b48fa8761879"
        },
        "item": {
          "id": "2778d391-1363-42c5-9412-51d1dc21e73d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "08531975-5cdd-4967-a7de-18345b596c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c9ee8-8533-4b48-9711-2b9ecfc136c9",
        "cursor": {
          "ref": "50f8d6e4-fa72-489c-870e-f9f1be626a3f",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d502e876-9906-45b7-88a8-ee9576f0218d"
        },
        "item": {
          "id": "551c9ee8-8533-4b48-9711-2b9ecfc136c9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "21f7c829-c6be-4da8-957c-dafee90870ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad041c2-e175-46e6-bd1f-3d860ba94fc9",
        "cursor": {
          "ref": "9abe7f14-95d5-4dbb-8992-90a1b3507d92",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "aca873c9-7cf1-4bc5-8049-a0e837a1a0ac"
        },
        "item": {
          "id": "fad041c2-e175-46e6-bd1f-3d860ba94fc9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c02e94cd-5dd3-448d-9f41-2993d602c9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f2e0dd40-a9c0-4ed8-b11d-473ac6151ff1",
        "cursor": {
          "ref": "eea4bbe4-bafe-4d42-b6b9-0b6fee3459cd",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e47b5527-d155-4222-a484-6d77d43bb2d4"
        },
        "item": {
          "id": "f2e0dd40-a9c0-4ed8-b11d-473ac6151ff1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f6dccf65-55a2-4dff-8263-a24d3abcb8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "75571dde-eea0-4c13-87fb-efa50590bb03",
        "cursor": {
          "ref": "34ed98ee-612c-4c0b-9094-5d29a466a83f",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dbe3de53-458a-4e4e-bd47-151a10d03a87"
        },
        "item": {
          "id": "75571dde-eea0-4c13-87fb-efa50590bb03",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dbd17a24-753b-414d-8654-d5c23bc9ab0c",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cef4fd8-b6a6-4f65-8bbf-ad91df2bf7cf",
        "cursor": {
          "ref": "843f1c0e-efe3-46e9-9c92-1e521346e615",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "63f4716e-859b-4fb9-959c-4db4553393f3"
        },
        "item": {
          "id": "9cef4fd8-b6a6-4f65-8bbf-ad91df2bf7cf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6eabccb1-6e2a-44ee-8dbc-298ccd4f2188",
          "status": "Created",
          "code": 201,
          "responseTime": 20,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc55e33-2695-4e6f-90c2-921cf4e81ef7",
        "cursor": {
          "ref": "c901d1be-668e-48ca-adf2-3b4186eabcbf",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c4036d20-8819-4664-bd60-7c9ea1ad430f"
        },
        "item": {
          "id": "fcc55e33-2695-4e6f-90c2-921cf4e81ef7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bc28bf4e-e24d-4291-bd0b-aa6c860916ee",
          "status": "Created",
          "code": 201,
          "responseTime": 25,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda0f64c-65e5-43da-b391-c20a85487e4f",
        "cursor": {
          "ref": "4621557c-5eba-4609-9b68-adf90e4d0afe",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "44dd0237-aef0-40e2-a99e-ac125107b15a"
        },
        "item": {
          "id": "dda0f64c-65e5-43da-b391-c20a85487e4f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0086aea1-30c9-474c-8d43-636451129802",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90dd555-c50c-44fd-8c02-9d45f6b97ac2",
        "cursor": {
          "ref": "cf37b27f-da99-4a2c-b914-2dc0cd47b0c8",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b8fbb2ad-2c79-4841-86bd-ad9c1dd708e2"
        },
        "item": {
          "id": "a90dd555-c50c-44fd-8c02-9d45f6b97ac2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b3481a8e-071c-4f70-90f2-1273f85bcf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "386b4296-ad83-4d32-85b1-ed39d703c3b1",
        "cursor": {
          "ref": "50641691-8a4e-42e0-afd8-0bcd896227e3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "49a2fee7-5867-46ee-a3a1-09dcaf5fed38"
        },
        "item": {
          "id": "386b4296-ad83-4d32-85b1-ed39d703c3b1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d631fca5-571d-465c-a7c8-78b2319e2b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386b4296-ad83-4d32-85b1-ed39d703c3b1",
        "cursor": {
          "ref": "50641691-8a4e-42e0-afd8-0bcd896227e3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "49a2fee7-5867-46ee-a3a1-09dcaf5fed38"
        },
        "item": {
          "id": "386b4296-ad83-4d32-85b1-ed39d703c3b1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d631fca5-571d-465c-a7c8-78b2319e2b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8c9312-160f-4c29-bf21-1cc1171116c6",
        "cursor": {
          "ref": "5128f583-5c3b-46c0-ba76-e6909281a7de",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ee453b92-83cb-406f-a87c-299a05662991"
        },
        "item": {
          "id": "ea8c9312-160f-4c29-bf21-1cc1171116c6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56c8eb85-4a14-412f-b404-076179c137a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c1621a-1751-4449-9df8-ed92f064d8df",
        "cursor": {
          "ref": "33de7fcf-1ae4-44ef-9c52-c81f99fbfdd1",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3f3de100-29dc-45dc-a021-d8868563ab9e"
        },
        "item": {
          "id": "e3c1621a-1751-4449-9df8-ed92f064d8df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c3807472-8c5e-4207-8830-4e4ff41e1217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4122b48-98f5-4f38-88fc-68d60e3b4bf8",
        "cursor": {
          "ref": "693babf6-64cb-4bd9-abb9-cb4b96494e90",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c5e442c1-9f03-47f5-bb59-9b421533d0df"
        },
        "item": {
          "id": "b4122b48-98f5-4f38-88fc-68d60e3b4bf8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0c3f6690-564e-4beb-b8cd-6fc856a8b70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf70fb6-b030-4b22-aed1-f4b7b246b6f7",
        "cursor": {
          "ref": "71c9ae0e-afd1-4826-bd8c-31269e28247a",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b98933ac-5f05-4329-86ab-9fc5ea642c30"
        },
        "item": {
          "id": "3bf70fb6-b030-4b22-aed1-f4b7b246b6f7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "43e0ddee-fe02-4f63-95d2-ef45c4f34459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7702ac-e7cc-4b26-8a4f-17ff79351a6a",
        "cursor": {
          "ref": "890548d4-b134-4459-886a-75925635f938",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1fc23751-51d1-4e31-a297-d3e13e9c4dd2"
        },
        "item": {
          "id": "9b7702ac-e7cc-4b26-8a4f-17ff79351a6a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d3eb791f-49b1-46a1-b404-2d982511c623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6011b3d8-96f5-4cfa-80aa-e6b40ded5a8d",
        "cursor": {
          "ref": "3b30f1b2-ca90-4f78-b500-b647f60ebfe5",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "629cc879-86f2-4b33-9363-fd9eb15a5993"
        },
        "item": {
          "id": "6011b3d8-96f5-4cfa-80aa-e6b40ded5a8d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "46a15f4a-843f-47b9-85b8-b0310ac82a31",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4dbeebc9-4123-4fa6-8af2-8053259aeca4",
        "cursor": {
          "ref": "b0e0bd41-863b-486b-a02f-697baa7a4d8c",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3a18b646-4ed1-4751-803a-71c03b5843ca"
        },
        "item": {
          "id": "4dbeebc9-4123-4fa6-8af2-8053259aeca4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "90e3f019-21f7-4625-82a8-a7dbc1d3de73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d092c1-151e-451b-8570-b591e164787c",
        "cursor": {
          "ref": "634b34d2-1258-4084-b19d-795c5ce9fed7",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f1ca39c7-4203-4bb5-99db-e3532561c65d"
        },
        "item": {
          "id": "16d092c1-151e-451b-8570-b591e164787c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4e1d0bfc-1c41-4e5c-ae4f-2640e6f2c341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c9bb18-f9dd-493a-8563-e3b3b9b7ef98",
        "cursor": {
          "ref": "117a18a6-d176-4638-b3a3-13e92c361c9c",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "57949070-4329-453c-b782-44205cacd7e5"
        },
        "item": {
          "id": "d8c9bb18-f9dd-493a-8563-e3b3b9b7ef98",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cd4b8dd0-6ce5-4058-9602-a2f9ebf17e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6441df63-64a9-4c98-9ed2-b236d66e8cf2",
        "cursor": {
          "ref": "d5b6107e-8592-40ac-9d3c-1d3e8d0c87db",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9e1d5dd1-163e-4a16-949f-5439290e756d"
        },
        "item": {
          "id": "6441df63-64a9-4c98-9ed2-b236d66e8cf2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "79a7cd26-27ed-4864-8401-ca3d0165d324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae2ca00-8235-450c-a04b-d33f2b9c727e",
        "cursor": {
          "ref": "133d54b0-b8b3-4e44-aa8b-fc4d2e598b0a",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ec798352-f428-432e-a007-f1ec41050c5d"
        },
        "item": {
          "id": "fae2ca00-8235-450c-a04b-d33f2b9c727e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3cfae9ab-f594-4f4c-9c24-e8ed59073f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5ec5d2-336f-434d-be91-7fd7d39091be",
        "cursor": {
          "ref": "7f12bba6-879a-4fa2-959e-7cc321c39925",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b4882102-c577-4744-b7d2-fe6cc1f24ec7"
        },
        "item": {
          "id": "9f5ec5d2-336f-434d-be91-7fd7d39091be",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "18fc7d6a-0d25-4118-8228-77f7fbaff5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6168493d-c79c-44dc-b9e2-b6a305454aa9",
        "cursor": {
          "ref": "3a0449e3-3cd7-4fdb-8f9a-e4b9450223b5",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "888c03cd-2c82-43e1-a415-0b0676eb068f"
        },
        "item": {
          "id": "6168493d-c79c-44dc-b9e2-b6a305454aa9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "475dcd3d-4443-49d4-8a5f-a7139c2ab235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c8f6ac-4807-468d-b7aa-5b876c8c5c53",
        "cursor": {
          "ref": "7648cdd3-bd57-4501-acfa-1560385abc4a",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cce317d8-7d92-4eca-9fd5-b17888ff7dd1"
        },
        "item": {
          "id": "53c8f6ac-4807-468d-b7aa-5b876c8c5c53",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c4ab0af5-f956-461b-a1eb-0b2977770815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e919d0-a091-4a3d-b70d-edb2829b23e6",
        "cursor": {
          "ref": "752c79c5-5742-4e60-b3a9-09835127c6e8",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5ab4955c-6011-47e0-9faa-9d2a5c562cbb"
        },
        "item": {
          "id": "85e919d0-a091-4a3d-b70d-edb2829b23e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "59e53dbc-aa11-434e-9d93-b9989da9cd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6495776f-1c04-4047-88aa-fdb8909fbd93",
        "cursor": {
          "ref": "dd37ad45-a07d-4982-bdab-ccfbe0bd86fd",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d0fa156b-dded-44fe-a1c9-1c3b11567460"
        },
        "item": {
          "id": "6495776f-1c04-4047-88aa-fdb8909fbd93",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b2fbb390-d888-4e90-9b18-f15abc465e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21e045d-0d15-49c7-b5aa-4e80d56383a9",
        "cursor": {
          "ref": "1e80d069-b61d-4df4-9c46-09b74dff390f",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "81f29b5a-47ae-4927-a504-ba242b8414d0"
        },
        "item": {
          "id": "e21e045d-0d15-49c7-b5aa-4e80d56383a9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "039d2f5a-42ab-4e65-9f20-34c24338d9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01da8b1e-e321-4299-bd3d-fb1128dbff4c",
        "cursor": {
          "ref": "63ac047b-ff03-4e90-8657-2eb15ae7b3ea",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "02309460-2dc2-4e36-b53e-4b5d3f47721f"
        },
        "item": {
          "id": "01da8b1e-e321-4299-bd3d-fb1128dbff4c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "17c56224-40d0-447a-8d42-56ac0ff0f535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6a1ae0-7476-4afa-95dc-fbff6ec7d965",
        "cursor": {
          "ref": "5216ced3-2922-42d1-952c-e99e28c2fccb",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0a5752fc-623e-4303-9775-1bf86b7f2603"
        },
        "item": {
          "id": "fd6a1ae0-7476-4afa-95dc-fbff6ec7d965",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2fc0883b-cd17-48d1-9eaf-f31b999f2a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12ae3b7-9b26-4142-900a-bd5936bb7a9d",
        "cursor": {
          "ref": "63b25d0a-c517-44b9-9087-0ff205d47015",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "38359f7f-0ad2-448f-896f-e5380dd87860"
        },
        "item": {
          "id": "b12ae3b7-9b26-4142-900a-bd5936bb7a9d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "27e4f8b1-fedf-46af-98a2-e82398fab623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf40f06-0354-4a9d-9f62-7d0ab165e9c5",
        "cursor": {
          "ref": "c3341233-99c1-4af3-8782-5acb43c7451d",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "be96ab28-b246-465a-9f58-2f146c68fc87"
        },
        "item": {
          "id": "ebf40f06-0354-4a9d-9f62-7d0ab165e9c5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cd079db8-ee51-419c-8317-bd11ab463e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4da8dc-7b8c-4a1c-af07-3fb249bf2973",
        "cursor": {
          "ref": "c6edef5a-20a9-4244-aae1-5301d383bfc6",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "59f721b1-c685-4056-a483-7af913d169ac"
        },
        "item": {
          "id": "dd4da8dc-7b8c-4a1c-af07-3fb249bf2973",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3c73a8f1-e186-45e5-b87d-20f76fd9c0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701e8a27-ecbc-4284-a66d-ef22bbf819ec",
        "cursor": {
          "ref": "d6946dc7-546a-4730-8307-6393378812ad",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b212033-4c43-48d4-9222-2332ab93d149"
        },
        "item": {
          "id": "701e8a27-ecbc-4284-a66d-ef22bbf819ec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3e9b5450-c5c2-4cdd-b26e-902de9d2d6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60e2ee4-67e7-426c-91fb-1ea6661a5743",
        "cursor": {
          "ref": "80580e5e-a9fe-47a6-aae1-62f8825aa56f",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "41f95583-16e3-4817-b27f-c8a86c5880d3"
        },
        "item": {
          "id": "b60e2ee4-67e7-426c-91fb-1ea6661a5743",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "03b83250-fdb7-4e99-966a-583a46a5a447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80545fec-883e-4e15-85d6-7accf6f28f54",
        "cursor": {
          "ref": "0d4fd504-f32d-46be-9402-db404377ce33",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "57cf2448-33ff-4b87-aab3-451361480292"
        },
        "item": {
          "id": "80545fec-883e-4e15-85d6-7accf6f28f54",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "37488782-84e0-48be-bd9c-3ff4088da7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93684637-1cfd-4a2a-9cd5-b5a42e207cfb",
        "cursor": {
          "ref": "5bf65649-57ee-422e-9b47-a773c488d646",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a24fe183-aaeb-4883-b2e7-e054e6e95934"
        },
        "item": {
          "id": "93684637-1cfd-4a2a-9cd5-b5a42e207cfb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e18a02a2-f2ac-436d-9215-7f4b58752dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a6f62c-2824-4b2a-b4c9-65bb97a63889",
        "cursor": {
          "ref": "bbbe7d8e-fc6c-4dff-96a4-1d5ed77ad963",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "06f3b865-59a1-435b-96c3-60dcf898e43d"
        },
        "item": {
          "id": "95a6f62c-2824-4b2a-b4c9-65bb97a63889",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8346f795-fb98-49a4-a054-43b0aa4c41ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030db618-9a2d-422d-b4c4-3255f0141757",
        "cursor": {
          "ref": "0a4b2098-c6a9-4c07-a3e8-a8c8eccf9906",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "81f9cd55-1d66-4984-81e1-24dbb36ffd74"
        },
        "item": {
          "id": "030db618-9a2d-422d-b4c4-3255f0141757",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a5b41bcc-d6b4-40ee-bb34-6afc4e026b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242475b0-bafd-4582-8ad6-a73a47e6321f",
        "cursor": {
          "ref": "bb4872af-e8ad-4b64-8f2b-67dc4821f84b",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1354f34b-671b-48f4-8aa8-364ae600d302"
        },
        "item": {
          "id": "242475b0-bafd-4582-8ad6-a73a47e6321f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "edf3eaf7-8409-4c3b-87cf-9cfcbcff5431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8bd88f-9e54-437a-b02f-ec212076799e",
        "cursor": {
          "ref": "6b5e42c8-6185-407e-8682-0689e57ab06b",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2e0f2a2b-1f86-48d5-b349-fdfe64c4a5eb"
        },
        "item": {
          "id": "4e8bd88f-9e54-437a-b02f-ec212076799e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9ccac10e-a5c4-499b-a3b5-a827327b3399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c172390b-4ae8-4931-84e6-d8796b8ba769",
        "cursor": {
          "ref": "4872e3ad-6838-4bc2-80a7-9300b25a3055",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2b8cf39c-d0d2-4ff4-b829-659eaeaff028"
        },
        "item": {
          "id": "c172390b-4ae8-4931-84e6-d8796b8ba769",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1c3491a4-15ed-4694-935f-b9f2056634e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf320f7-cbe6-4bcc-8661-ae2d1c04addc",
        "cursor": {
          "ref": "eb3a3df1-e265-452e-a375-ad2b0d0dcf08",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d6ae892-38fb-474f-b73e-51b10819d815"
        },
        "item": {
          "id": "acf320f7-cbe6-4bcc-8661-ae2d1c04addc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "14a34b01-a66d-4e07-934c-1afcc1610901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0eecaa5c-2e0e-4dcb-8e55-b127e1022652",
        "cursor": {
          "ref": "08012ade-91bb-4adb-af7d-b049391680be",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "19a10355-248f-46b2-af23-259daa0bc717"
        },
        "item": {
          "id": "0eecaa5c-2e0e-4dcb-8e55-b127e1022652",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "70230b13-ea10-4804-bc3d-a399d5dc8b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "4099e2cf-96bf-4270-91bf-97b48143f381",
        "cursor": {
          "ref": "5c5402f4-ce8a-4ddd-a36a-d3a2b14c0abe",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed0af352-ec20-4354-876b-adbe228ddebc"
        },
        "item": {
          "id": "4099e2cf-96bf-4270-91bf-97b48143f381",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e4a81bf-59f0-42d3-b0fd-3a4d3a329d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4099e2cf-96bf-4270-91bf-97b48143f381",
        "cursor": {
          "ref": "5c5402f4-ce8a-4ddd-a36a-d3a2b14c0abe",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed0af352-ec20-4354-876b-adbe228ddebc"
        },
        "item": {
          "id": "4099e2cf-96bf-4270-91bf-97b48143f381",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e4a81bf-59f0-42d3-b0fd-3a4d3a329d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d46ed8-13c9-40df-8eaa-8cf14db19dc5",
        "cursor": {
          "ref": "956608d3-7179-428e-900e-2bf708f71fbc",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "354217d3-450d-41e4-8af0-53220a78589a"
        },
        "item": {
          "id": "94d46ed8-13c9-40df-8eaa-8cf14db19dc5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "25b129a7-fa98-4132-83e2-efd588a534ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21b5a72-2e6e-4c45-89d7-76cf452c8e96",
        "cursor": {
          "ref": "2f13f26f-3aba-4799-bb4b-71003dfe4c37",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "76c561c7-432a-4259-9e4c-d2d0eb81ff4d"
        },
        "item": {
          "id": "a21b5a72-2e6e-4c45-89d7-76cf452c8e96",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "035d3422-0705-48fe-93fb-c201af313c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac8433e-0655-4b0c-8c9a-85338210a6fd",
        "cursor": {
          "ref": "78294c2d-3ac5-4ecc-90b8-a1f83d7f290d",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3676339d-f3c4-409d-97cb-f0a6b117c15b"
        },
        "item": {
          "id": "1ac8433e-0655-4b0c-8c9a-85338210a6fd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fc3a001f-15ab-4941-8934-7d9dbce03335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee7da50-336f-47c4-a169-06b1bb75c5ae",
        "cursor": {
          "ref": "5e2c24f1-3aaf-491c-8d7e-50bf775d212f",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fb59faf5-84f9-4109-b948-65fa41c39c78"
        },
        "item": {
          "id": "3ee7da50-336f-47c4-a169-06b1bb75c5ae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bb390c6b-cd15-48d4-b194-15ee4cdbadef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77663691-509d-4c02-b10b-a13ce0cdc210",
        "cursor": {
          "ref": "a2b53760-3e36-4755-bfe3-7d1284b3043d",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4f9acd08-add3-4ab9-a3f1-e9da394958d1"
        },
        "item": {
          "id": "77663691-509d-4c02-b10b-a13ce0cdc210",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a584ef0-4f0a-465d-8992-87693ef9ad6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fc852b-e321-453e-9640-f4c54f88890d",
        "cursor": {
          "ref": "1670e0cf-35a0-48ef-a517-8bc081e0b0f5",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0e880d04-450f-4aef-b43e-d9aced2d3d7d"
        },
        "item": {
          "id": "80fc852b-e321-453e-9640-f4c54f88890d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "65c4bea5-684b-4773-90b4-4b2715b41838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c1d0ae-79bb-4f05-8b92-d1deaeb1df7c",
        "cursor": {
          "ref": "a34dd413-4556-4711-a720-fa65d0577ef1",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7a955e3b-5673-4843-a7af-1c588cf73722"
        },
        "item": {
          "id": "64c1d0ae-79bb-4f05-8b92-d1deaeb1df7c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a2f097fd-f9c0-4e91-bb20-68cd614ea67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aec2a9c-e5a3-46b7-8435-9c1566546124",
        "cursor": {
          "ref": "d0eef9ab-c778-4763-874d-471282011341",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a675982b-81f9-493c-b60c-fff8328c8f62"
        },
        "item": {
          "id": "8aec2a9c-e5a3-46b7-8435-9c1566546124",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "88f09e7f-c344-4ca5-a3ce-00445558e969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30bf5c4-121a-4c5d-a5d4-1a8cca84256f",
        "cursor": {
          "ref": "932a8510-3edd-4cd4-89e1-be99d645d96a",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "51403288-ea70-4bf1-9749-d2d7e07ed1ea"
        },
        "item": {
          "id": "f30bf5c4-121a-4c5d-a5d4-1a8cca84256f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c214fa1a-7b89-4846-935c-f88746456d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4430c46f-c2bf-4643-8e1d-eb22796d026f",
        "cursor": {
          "ref": "a6881b95-4d7e-49b6-a32a-292aa67f3314",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40b10469-c6fa-4a16-90ab-d3a15b1ee509"
        },
        "item": {
          "id": "4430c46f-c2bf-4643-8e1d-eb22796d026f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b2052ed8-ed98-4602-8158-4f54b2788e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7ff090-ad5f-4e89-9f87-4d8f215d55da",
        "cursor": {
          "ref": "442571b3-5d27-4b13-9836-150b4394f0ec",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2ab915fe-325d-4911-9a05-b2af518b5136"
        },
        "item": {
          "id": "2f7ff090-ad5f-4e89-9f87-4d8f215d55da",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "25593ff2-095e-4f46-b0d9-ee8bae1907ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19c0814-0cd6-4fba-8ab9-1686f9511ef3",
        "cursor": {
          "ref": "57edf416-ecd2-4b3f-9958-e76c656afde3",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8d57c3fe-0b67-4baa-aa37-a8efd54bead2"
        },
        "item": {
          "id": "c19c0814-0cd6-4fba-8ab9-1686f9511ef3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "960e04f0-7541-4baa-a055-323c7536c950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b898d7b-6ed9-405d-ae90-d3614b45b74f",
        "cursor": {
          "ref": "31e77531-ccd4-4467-8111-496cbd9b9d01",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f02b14e7-48f4-4cec-ba80-0e76afccfe41"
        },
        "item": {
          "id": "5b898d7b-6ed9-405d-ae90-d3614b45b74f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ea0e0ee1-dace-41a0-9b73-9733e99b3736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aefc5ee-196f-4125-bcfb-e17c2ad28e36",
        "cursor": {
          "ref": "0524f4cd-a1a8-44a1-8d08-549a93b794d1",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9ce9a1c4-1971-49b9-82dd-71784dd7d6f4"
        },
        "item": {
          "id": "5aefc5ee-196f-4125-bcfb-e17c2ad28e36",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2599423f-4ef8-401a-83da-4577dac32703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3504cfc9-083f-4b09-af92-8f3a2272f500",
        "cursor": {
          "ref": "3901466f-42d4-4ada-87a0-c3935e44f198",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1b87da5b-33e8-4458-a4ee-f81debd6388f"
        },
        "item": {
          "id": "3504cfc9-083f-4b09-af92-8f3a2272f500",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2951500b-168e-4309-9d30-63b0f65def6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8165bd0b-c050-49a1-9a2d-6992f9621bfc",
        "cursor": {
          "ref": "56160008-074f-45ee-b570-7ff098d899f8",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "17199e43-4f00-4224-8e11-a301c7c95a62"
        },
        "item": {
          "id": "8165bd0b-c050-49a1-9a2d-6992f9621bfc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "816c6fd7-a43a-4e62-acdc-bcbcb7653285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a756bb-e254-487e-ac67-c68860597e50",
        "cursor": {
          "ref": "296ebf1a-eaec-4fe1-a910-c69fb7161aee",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1d5dc1ef-d831-4dde-8d47-e15509c67a00"
        },
        "item": {
          "id": "e4a756bb-e254-487e-ac67-c68860597e50",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "adf85c84-a644-4392-b721-dfd88c5700bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cd0b8e-6dbc-48fc-8cea-17f5b60002b2",
        "cursor": {
          "ref": "3139fb28-9934-4002-85f2-511d94cc27c1",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8d8aeae2-c99a-4018-b8fc-0ebf8c854839"
        },
        "item": {
          "id": "38cd0b8e-6dbc-48fc-8cea-17f5b60002b2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3b2974c3-d3fd-4a47-a13f-36e8328f8bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228aeaa0-a56b-474e-8573-bac5dffd9705",
        "cursor": {
          "ref": "ea7516a6-09f2-4849-ab60-95cebe7ee3ee",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a21f59fe-b7c9-4042-8bf1-85349d99755a"
        },
        "item": {
          "id": "228aeaa0-a56b-474e-8573-bac5dffd9705",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a020e939-08ea-4be2-8157-a44dbaebf1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52620942-9443-4bdd-adf2-6aa48e313950",
        "cursor": {
          "ref": "a6105892-605f-46a8-be69-1ce119c68b68",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c720b5f6-59df-489a-bc0b-7f3c1303e169"
        },
        "item": {
          "id": "52620942-9443-4bdd-adf2-6aa48e313950",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "acdd2df0-3ab8-47ee-86f8-0a0ec3957e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cafc54d-2113-4ef2-ae0f-45cbd044a7f1",
        "cursor": {
          "ref": "98a2d344-6278-4206-ae2f-4b3a33bf8642",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "761ac95a-fa56-4b7b-a63f-3caf1d032ed8"
        },
        "item": {
          "id": "1cafc54d-2113-4ef2-ae0f-45cbd044a7f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9f688794-1070-486b-94fb-66d8a863f4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d467f412-9f60-4bcb-973f-9cba091b37cb",
        "cursor": {
          "ref": "9fc70398-26f0-4fae-84d0-54723a3066ad",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2fa25d40-9288-4a71-b2a4-6e9c0701b204"
        },
        "item": {
          "id": "d467f412-9f60-4bcb-973f-9cba091b37cb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7a6f598a-e3e8-416b-8aba-853b1fd03709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6416787b-9364-47dd-8e0e-3eb1c66a77cd",
        "cursor": {
          "ref": "7dfd5a39-a5d9-4e98-8945-292c3aaabaaf",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2a07611c-907e-4e62-860f-32e95bf9cf2c"
        },
        "item": {
          "id": "6416787b-9364-47dd-8e0e-3eb1c66a77cd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d69e9067-84eb-48ea-898c-d787eda5fec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf98f9f6-a8d7-4f81-8e0c-607f9b280b96",
        "cursor": {
          "ref": "c16b01c9-f683-4291-9b98-4e6f571a841b",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a008e250-b911-415e-8384-c8d6befd3b1d"
        },
        "item": {
          "id": "cf98f9f6-a8d7-4f81-8e0c-607f9b280b96",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aa8d43cf-76fc-48ef-96d6-94b3f6cd1ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059a1b62-2b81-4e20-aee6-d29cfc3628db",
        "cursor": {
          "ref": "5c7d6eec-ad80-474f-a8b9-349e6fd15cf5",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "90f17759-f10f-48ad-89c3-c6c5c0dbb53b"
        },
        "item": {
          "id": "059a1b62-2b81-4e20-aee6-d29cfc3628db",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d5d619a4-8f12-4e79-b9c9-da6aa0a5b446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639e6af4-5c10-4eed-b3c3-71ed7fdf51fd",
        "cursor": {
          "ref": "5840f9f9-f573-4c77-bd43-25d5dd5b0a0d",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3514ee73-4460-4b67-99bc-72e688e593ef"
        },
        "item": {
          "id": "639e6af4-5c10-4eed-b3c3-71ed7fdf51fd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5c876f27-6f6c-4e47-a67c-2a5e6598acf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9632e4-c60a-40fc-b946-6780de19dbc8",
        "cursor": {
          "ref": "6176c1b3-5b22-4b45-b0d2-d1fbf375aab1",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6e20e047-d524-4aec-a138-271143169377"
        },
        "item": {
          "id": "df9632e4-c60a-40fc-b946-6780de19dbc8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cf9dbf49-0008-4ac6-9677-166835f8bc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f8ee2f-6863-4dd8-866e-53fb9e5a869a",
        "cursor": {
          "ref": "84d6517e-ae42-4d4d-91c3-59fca809a87b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ea16d72-60af-4364-9c74-9a7b829e970a"
        },
        "item": {
          "id": "36f8ee2f-6863-4dd8-866e-53fb9e5a869a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "81224a69-60f8-4b63-86b4-e24965e970a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e6f65a-ea7a-46cb-9b3f-a228097567cc",
        "cursor": {
          "ref": "ce79f76b-2d26-4930-9a07-869aa5e2cdec",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e25d9310-1e1a-4476-b30a-f2718190331e"
        },
        "item": {
          "id": "b3e6f65a-ea7a-46cb-9b3f-a228097567cc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7a98edff-c19d-4bf7-90aa-e63420d54f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad05fd68-3881-4029-93df-18a561fe1f33",
        "cursor": {
          "ref": "ba9f86c8-54a9-459d-88fd-f438281be36e",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ea289350-ca21-4ea2-b858-be778caa4e00"
        },
        "item": {
          "id": "ad05fd68-3881-4029-93df-18a561fe1f33",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "20c43a1f-23b7-47ba-81aa-c2c57dc5ff02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2164e51-5471-4970-b248-250c22fa8ba1",
        "cursor": {
          "ref": "688b7d54-71a6-4124-a41a-4cf1836ec3c8",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b9645458-de87-49bf-89f7-2bb27674f450"
        },
        "item": {
          "id": "a2164e51-5471-4970-b248-250c22fa8ba1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0e8f5ba2-3608-4537-bc8a-76b016e82513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb78cd73-2ae2-4084-be6e-7992b4726bce",
        "cursor": {
          "ref": "c045d0cb-1805-4b80-aed6-2fb7ab8dcd24",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "30099dcd-48d4-449c-ac3d-7a4bd06598a0"
        },
        "item": {
          "id": "fb78cd73-2ae2-4084-be6e-7992b4726bce",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "05c97265-d9a1-455b-aa53-02c11feb81ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae76cb34-7578-4651-be4e-ebee39af2e16",
        "cursor": {
          "ref": "e28747f0-e5c2-47d6-b63f-959aa54aacea",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0706ffb7-7cbc-4f61-837f-ae5c10b87e8c"
        },
        "item": {
          "id": "ae76cb34-7578-4651-be4e-ebee39af2e16",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "aa9fb5f6-8557-4091-8b98-d84ce4478432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fadf59-0faf-4695-83e5-4ee3309f2949",
        "cursor": {
          "ref": "5f4382b4-8c83-471b-929a-badd85f0f6c3",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "96ec13fa-b2b6-4d22-bf27-8293c3b1a294"
        },
        "item": {
          "id": "25fadf59-0faf-4695-83e5-4ee3309f2949",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c6282edd-42c6-4c7b-8131-af62fb8a426f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9231fb-cc7d-4fda-b089-bbe39333e178",
        "cursor": {
          "ref": "bcb8590f-034a-420e-84e7-54c3242ad4ce",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2163c58c-64ab-490e-92c3-1c0fd1c8513f"
        },
        "item": {
          "id": "2a9231fb-cc7d-4fda-b089-bbe39333e178",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "77e644a4-bc83-4633-b65a-c277f82d35ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0d9899-d824-4c8f-8db5-fb236b8a2364",
        "cursor": {
          "ref": "ff8d9529-4775-4cca-9a41-6932d1d110d3",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8f132f11-acb6-4660-ad8d-e02306b8fbef"
        },
        "item": {
          "id": "6d0d9899-d824-4c8f-8db5-fb236b8a2364",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7d0cb452-a5d5-4e0e-8587-072692c44abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d909fa65-2b8c-4fdb-b150-90e98536f9f4",
        "cursor": {
          "ref": "c882606c-3072-4f79-958f-44ffafd6f687",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4ddc01f7-42db-4669-afdf-38b95418cb7c"
        },
        "item": {
          "id": "d909fa65-2b8c-4fdb-b150-90e98536f9f4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9476712c-22a3-4109-b9d0-2b813212b535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd0be61-0f83-4aee-804c-ee6879f64b86",
        "cursor": {
          "ref": "38555c39-fba7-4e72-8125-ec489e519d14",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b5b5dce3-f672-4daf-b572-ff60bc4234de"
        },
        "item": {
          "id": "1bd0be61-0f83-4aee-804c-ee6879f64b86",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bb2b4fea-5fe3-46d3-9f05-b74e38553c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e077acd7-9714-4493-b360-3169b955f3d4",
        "cursor": {
          "ref": "3549b48f-13cb-4b7a-81a5-2bf47e62c67f",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b7c26beb-5eac-403c-9224-2a3b231cb339"
        },
        "item": {
          "id": "e077acd7-9714-4493-b360-3169b955f3d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0641e681-f01c-4d86-a230-100cd0f2b06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35d4425-7a25-45c4-bc06-26da86e6a234",
        "cursor": {
          "ref": "0fc43d0b-d3f4-4064-a5ad-0f371d084564",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dc989f14-eca5-4862-a1c4-23755cda74d7"
        },
        "item": {
          "id": "c35d4425-7a25-45c4-bc06-26da86e6a234",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1b83807c-3d2f-44a8-be4e-7be59c2a40d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e590096-bfb5-41ba-8815-d42c12558bb2",
        "cursor": {
          "ref": "8cdf0ddb-250d-4ea0-9717-5583576f2188",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "620b8a06-2359-4f66-8a1d-4358faa1afa0"
        },
        "item": {
          "id": "3e590096-bfb5-41ba-8815-d42c12558bb2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "104640ef-1927-429a-afa9-91ac440091a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d03ccc-c59e-491a-91c1-6c96b953bfb2",
        "cursor": {
          "ref": "be8d800e-a5b9-4df5-b7ea-cb6a0c813dac",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8bcf5163-97b6-406f-b380-3b2c2986fd9e"
        },
        "item": {
          "id": "89d03ccc-c59e-491a-91c1-6c96b953bfb2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "03fcf6dd-0fca-4e54-b8a3-eeb0573eac35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1163f8e5-b255-440c-b41b-b48eceedd64d",
        "cursor": {
          "ref": "8d8316b5-ed22-40d4-9b91-9dd436ad2945",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9152e5df-198c-4ecd-948f-a802f238bd67"
        },
        "item": {
          "id": "1163f8e5-b255-440c-b41b-b48eceedd64d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f48411e4-d5f9-4b4e-a9e0-480744c7b89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984f2dc5-c6dc-46c9-9f37-baa53c527b95",
        "cursor": {
          "ref": "f8083444-7287-4501-b31a-0dee15fe7acc",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6a5f462f-caea-49ab-a7a3-b048b8913ec4"
        },
        "item": {
          "id": "984f2dc5-c6dc-46c9-9f37-baa53c527b95",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "44c940a2-156c-4cb8-8cf8-e8706413a624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc242bc-baf9-4e89-ab37-16e2b72e972d",
        "cursor": {
          "ref": "4e628758-73cf-4acc-9af9-624bd71c236d",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2744475f-44d4-4b12-894d-15981a785828"
        },
        "item": {
          "id": "adc242bc-baf9-4e89-ab37-16e2b72e972d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "41e35918-00bc-48d1-a440-8cad45394e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801e983-1b7b-44c4-9739-540875f53b34",
        "cursor": {
          "ref": "c339989d-a924-4ca6-85d8-1deb9d75787c",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "db0ef679-6ba0-4bcd-b7e6-1513ffb29cb7"
        },
        "item": {
          "id": "a801e983-1b7b-44c4-9739-540875f53b34",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f124c941-a437-425e-b101-667ebd480e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec54e7ff-ef16-4cd4-bdda-fd8f71b7c15a",
        "cursor": {
          "ref": "99316889-412a-4d59-8892-595ed9efdbc8",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "02ae360c-7ca1-455b-b8ac-4f1308f53ea4"
        },
        "item": {
          "id": "ec54e7ff-ef16-4cd4-bdda-fd8f71b7c15a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "88730496-2990-478d-9c87-a35ed80ee627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c973733c-2d88-4e88-9d75-fb5792ff3d33",
        "cursor": {
          "ref": "d94619f7-9c38-42ba-bf8b-7bfbca37766c",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "af838c53-6f13-486c-beaa-a093eced567e"
        },
        "item": {
          "id": "c973733c-2d88-4e88-9d75-fb5792ff3d33",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "14a81c28-f52e-4517-a3dc-540dcb4c393b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5601f85-8091-4c71-a402-37cd94bd6ba7",
        "cursor": {
          "ref": "700377f1-e8fe-4783-8092-72a43a41f19f",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "70e0d757-f8ae-4ee9-ab05-8d22d7718fde"
        },
        "item": {
          "id": "c5601f85-8091-4c71-a402-37cd94bd6ba7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0d825121-1961-4079-8fd1-01d528a7a18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e324d277-0df7-4eb7-b9fa-a0502cd538da",
        "cursor": {
          "ref": "e06786ab-26d8-416e-bff7-5d280c82b73a",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5e4cf0c1-323e-4e51-9228-9cdf99f8cdd1"
        },
        "item": {
          "id": "e324d277-0df7-4eb7-b9fa-a0502cd538da",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "88066b36-3508-4b74-a029-ba5081211ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5e0480-dfd8-414d-881a-900283486189",
        "cursor": {
          "ref": "936a73e1-57aa-47e5-a327-9029f1b3aca0",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a0e75bae-02f8-435d-8d25-c09223196356"
        },
        "item": {
          "id": "6d5e0480-dfd8-414d-881a-900283486189",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f4f7b719-dbdf-4dfb-9c72-362035a13817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17febf0-3600-4136-b35c-90f91b02c2bf",
        "cursor": {
          "ref": "bd731905-ba0a-4819-bcdb-0c4e05f24e4a",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9996b9ba-c48c-473c-bbe4-ad9cd16b097a"
        },
        "item": {
          "id": "a17febf0-3600-4136-b35c-90f91b02c2bf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1a21d2e-5f92-487d-919f-92b4991c47e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41593f9c-108d-455b-95ee-6d4a67944b86",
        "cursor": {
          "ref": "46c47e70-dfb3-4664-a0af-f14e09d7ea95",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b67a4954-3011-4039-aa14-73f74419a1ae"
        },
        "item": {
          "id": "41593f9c-108d-455b-95ee-6d4a67944b86",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "512d6186-5d8e-4479-8899-2a50bf114edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae899b7-a2fd-4b36-8c82-3a713b9288f6",
        "cursor": {
          "ref": "d23c1e7e-1f3a-46cf-a8a9-577249271874",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "88964537-61af-4709-af96-ecbf9795d9a8"
        },
        "item": {
          "id": "eae899b7-a2fd-4b36-8c82-3a713b9288f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3d9e631c-2d64-497c-a137-f3d2b9883340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c545271-1880-4c2b-b27f-87776bf84680",
        "cursor": {
          "ref": "19491e8f-0d89-4ad3-864c-032ff6bb90a1",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "79ea5bfa-8ba9-4515-a129-c5f15882b417"
        },
        "item": {
          "id": "4c545271-1880-4c2b-b27f-87776bf84680",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5cc5bee9-8d99-4cd5-a872-df47fcbf9fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48780b96-c820-45c7-89c3-83335e1f3342",
        "cursor": {
          "ref": "efcc42dc-b425-41ce-a681-26a370b729e4",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b5b9dee4-b619-4d52-b1b7-d2eeac09bfa3"
        },
        "item": {
          "id": "48780b96-c820-45c7-89c3-83335e1f3342",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8cd71c77-373b-437b-9c04-705614124c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06332b68-94c7-4d44-bf5f-209da9d58d0d",
        "cursor": {
          "ref": "ca010e85-6806-4193-a841-94c0f776b229",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "42c95209-189c-4594-bbc6-415f8996687d"
        },
        "item": {
          "id": "06332b68-94c7-4d44-bf5f-209da9d58d0d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1c1fa531-c282-4f73-a250-15fd07049f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd168997-8d3e-4c04-98f5-506cd577b764",
        "cursor": {
          "ref": "0ac5ab37-fd61-40bd-ab88-be6812a64d57",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b2adb182-e29c-4196-a10e-529f6502047b"
        },
        "item": {
          "id": "fd168997-8d3e-4c04-98f5-506cd577b764",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "67e72886-34f0-4afc-af4f-ef437643432f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d970fd-688d-41d2-80a7-6eb32662947a",
        "cursor": {
          "ref": "02dc8628-0e52-4e8a-bd50-c2ea224adc19",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "97469d6e-64cf-4a8c-8149-3f6cedb61cea"
        },
        "item": {
          "id": "d8d970fd-688d-41d2-80a7-6eb32662947a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1652c88a-4bd1-4e79-9ee0-0bc682a9f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99188c9e-acf2-44a3-9fc4-55d9759d5056",
        "cursor": {
          "ref": "59db0fa9-2661-4d73-8071-e1c5a3d07462",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "415b3e5c-e3e5-4af7-8cd2-bf2819d165b6"
        },
        "item": {
          "id": "99188c9e-acf2-44a3-9fc4-55d9759d5056",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a63d5a52-b9fd-4cd0-9576-7b222fc8070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3078e176-fc48-464a-ad05-c0142b8cb106",
        "cursor": {
          "ref": "9f01d794-cc03-4259-9d7e-4055f279f471",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c340754-eb05-4da4-9584-feef0d89e1df"
        },
        "item": {
          "id": "3078e176-fc48-464a-ad05-c0142b8cb106",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f992e938-2ca6-449f-b3aa-3a5e98e92e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315459f2-5ead-4fa4-994e-a152384cf17c",
        "cursor": {
          "ref": "802ad7b7-096f-439f-8795-651c68c45b94",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d49ab8f4-ee81-4370-85ab-a5bb1ca93b1b"
        },
        "item": {
          "id": "315459f2-5ead-4fa4-994e-a152384cf17c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1e426842-66e9-4f50-92a4-bd3e7d38f772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3370a1a5-7e33-4647-a5ab-73ffe848a35f",
        "cursor": {
          "ref": "1b85f26c-2427-4873-a244-a2e4e9b3400b",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e3a0db30-1e55-4a24-8ee3-56bddb2ac060"
        },
        "item": {
          "id": "3370a1a5-7e33-4647-a5ab-73ffe848a35f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4336c040-9765-4f91-8d58-e467b8abe536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffd0cc6-7ae1-42e6-a965-286442367699",
        "cursor": {
          "ref": "48bd316c-5eba-447f-9b1e-1d8130f09275",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a4ba5569-3e9c-41f2-91b2-08e4be8a91f3"
        },
        "item": {
          "id": "6ffd0cc6-7ae1-42e6-a965-286442367699",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fffb6fc6-72e9-4d32-89cb-eea8a2892d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9632cd94-c452-482b-b5ab-921a48ebc9b6",
        "cursor": {
          "ref": "403ae345-fe9b-462b-b4f6-7c3e9d7ca058",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cb0ee349-a9e1-4ce3-a2f7-9aea7b3ca9b3"
        },
        "item": {
          "id": "9632cd94-c452-482b-b5ab-921a48ebc9b6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b255d560-e5b6-4604-b6c8-92fda717d0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48280a3d-2d21-4901-8dd2-be2b12c3840c",
        "cursor": {
          "ref": "a0ee9ff3-fca2-41a9-b977-48c8524f8f87",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1bbec278-480f-46bf-8f21-604520c99068"
        },
        "item": {
          "id": "48280a3d-2d21-4901-8dd2-be2b12c3840c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "263d9004-2cfa-4973-ba00-958ba74b8c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d800f3-1c6a-4fb7-b1a8-e347eeded82f",
        "cursor": {
          "ref": "ea34c51f-47ee-4c42-be66-7264b091a170",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "56cbc11d-23f6-44a0-a84f-4b19a5e06605"
        },
        "item": {
          "id": "f1d800f3-1c6a-4fb7-b1a8-e347eeded82f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4b9f165b-da14-433a-83bf-bfcd3c02f7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a448c308-b1ed-4f1a-8179-433d91ff72c0",
        "cursor": {
          "ref": "88857eed-b1ae-4279-9354-9d984551a1a0",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "231f9a4f-afca-40b9-bef8-48bddbe656da"
        },
        "item": {
          "id": "a448c308-b1ed-4f1a-8179-433d91ff72c0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e95ae3e9-b95a-4851-9d50-82f945be27ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeac7f1-8e17-4ad2-a013-da49168cdf67",
        "cursor": {
          "ref": "40006a96-6387-4a22-8f6d-1b38dc341262",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9d5d66ba-83ef-462c-ba7b-9b218412fcac"
        },
        "item": {
          "id": "ceeac7f1-8e17-4ad2-a013-da49168cdf67",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "07e4a00c-df7a-4393-a831-ce83e64d035b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e8d68f-c628-42be-a623-4ba91826ac05",
        "cursor": {
          "ref": "a39e994b-fc48-46c9-bd8e-fb48bd229ce5",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "70fdab75-e1ee-4f39-9255-c5e0c0af954f"
        },
        "item": {
          "id": "43e8d68f-c628-42be-a623-4ba91826ac05",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3c9d5c6c-046d-4c59-b171-9e095df2e959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867592ea-1b8f-4b31-aaa2-2e7dfb8b9011",
        "cursor": {
          "ref": "9e483c18-5ba1-4862-b881-83ab05a9f578",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c5fb0e4-74d7-4aec-85af-661fd18535a6"
        },
        "item": {
          "id": "867592ea-1b8f-4b31-aaa2-2e7dfb8b9011",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "012c35d2-0311-49d4-a8ab-bbf5153a3438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3628807d-75c8-4f3d-8b80-50ab68561dc1",
        "cursor": {
          "ref": "de579356-ed8c-472d-977e-fd049d771b3f",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8bc46e28-97b0-478f-b3b2-42bf4494cc86"
        },
        "item": {
          "id": "3628807d-75c8-4f3d-8b80-50ab68561dc1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "17555ed4-7003-4eed-98fe-74e29006282a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f644e66-313d-47b3-8219-eae430899865",
        "cursor": {
          "ref": "0a17fc14-e3bc-4dae-be7d-0d7eea09e6fd",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cb108f21-7236-423f-af85-6e1b75778b7f"
        },
        "item": {
          "id": "8f644e66-313d-47b3-8219-eae430899865",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8b2166c5-a1cb-436c-9fbb-22a78390666b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbfe155-c1d1-40e1-90bc-f68c5404463a",
        "cursor": {
          "ref": "b1427ee6-f87b-46ab-8678-f381540b35ac",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "05f935b6-7755-4b12-ab1a-6fbd60089018"
        },
        "item": {
          "id": "4dbfe155-c1d1-40e1-90bc-f68c5404463a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7e4a33b1-bc1a-43c7-b13c-21721f602574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d541e88-bf27-4877-82d6-4716d389162e",
        "cursor": {
          "ref": "478c543c-843e-4f3b-8e40-5dfe93661164",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "27060836-85ec-492c-a912-1288a766ba97"
        },
        "item": {
          "id": "6d541e88-bf27-4877-82d6-4716d389162e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "07b7097a-6ab4-4956-8fb2-1b1ca790e1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f6ab0c-a0c5-4826-8e73-49c17cad196d",
        "cursor": {
          "ref": "5e3de680-6a01-4907-9b76-a6077b416822",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "76e171ae-8d4a-455c-a3d1-8f87a137d2c3"
        },
        "item": {
          "id": "52f6ab0c-a0c5-4826-8e73-49c17cad196d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "de62877d-d458-4c99-ad70-aa53156de080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad6b9f8-2544-49b6-b146-78868b1591e6",
        "cursor": {
          "ref": "d83c77e5-e2ba-45cb-a040-89e9096903a8",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "db081887-6717-4716-a6a4-bea15033f78e"
        },
        "item": {
          "id": "aad6b9f8-2544-49b6-b146-78868b1591e6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bc2d2ebb-06d3-47da-8743-60f5528c8949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc9cdcf-9e1c-44d2-bb98-5a5231b70ff2",
        "cursor": {
          "ref": "60fb84e2-d166-400d-85ef-d687a60f0bbe",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8e416b9f-563a-4f2f-a5ed-8016daacc09a"
        },
        "item": {
          "id": "9cc9cdcf-9e1c-44d2-bb98-5a5231b70ff2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c4ca5405-e1ef-4c40-a921-c33741b10c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1ab69f-b5d7-46de-95c5-fd7e89934291",
        "cursor": {
          "ref": "3a78f039-83ea-40f1-82a6-1c9be96b0402",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "90b76f02-ae45-48da-ada3-f76538abccb5"
        },
        "item": {
          "id": "fa1ab69f-b5d7-46de-95c5-fd7e89934291",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "076279bb-26c6-4e85-ae12-ba71f2638b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f519dc-fedb-40a2-92ca-fc2b4d79a6ee",
        "cursor": {
          "ref": "00fa6207-1320-46b8-9d49-c43115e49c65",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a4600234-1888-40ff-a464-b1c5ee95a848"
        },
        "item": {
          "id": "a5f519dc-fedb-40a2-92ca-fc2b4d79a6ee",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5f256130-edca-4623-8672-565b348927fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db782ae-daf8-4bc0-84c0-6bb6142340cc",
        "cursor": {
          "ref": "962ffb39-88b2-434f-87bb-81a85e18e136",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6bf8a476-61cc-49a7-9d71-77744865442f"
        },
        "item": {
          "id": "2db782ae-daf8-4bc0-84c0-6bb6142340cc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "60a0f2bb-1981-4014-9379-e95797473a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd78d236-7085-4ecb-990a-bb65be9f703f",
        "cursor": {
          "ref": "0ca6d488-ce9d-47f4-800c-2405625f72f3",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "17939793-3ca4-4e2d-92ca-e5a92012521f"
        },
        "item": {
          "id": "dd78d236-7085-4ecb-990a-bb65be9f703f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bec1cdbd-3109-4b44-a596-9a42a2c99b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a98ebb-c644-48ba-969c-10f344316778",
        "cursor": {
          "ref": "6fa5d5ec-324c-4775-8cc8-08889abf1c31",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "40f5c121-069a-4b22-a1a0-824cfc422367"
        },
        "item": {
          "id": "74a98ebb-c644-48ba-969c-10f344316778",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "017db336-6a8e-4454-96a7-3e8aa64e49d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90595c6-5e51-4237-882c-8e1e7d74cd39",
        "cursor": {
          "ref": "05259e07-474d-4d09-a75b-c7e46af4ff5c",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "de8053cb-01f7-45c4-b3ff-fe64bdeb1086"
        },
        "item": {
          "id": "c90595c6-5e51-4237-882c-8e1e7d74cd39",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ad127030-a7d9-4b83-8d36-926ec0d38fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252ff703-ac28-44ba-9e34-e506ecad6faf",
        "cursor": {
          "ref": "442b8226-71f6-4bc9-8b73-2872d277a8a7",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c00a65bd-5e02-48a3-86f4-238f8e0bad63"
        },
        "item": {
          "id": "252ff703-ac28-44ba-9e34-e506ecad6faf",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8b50a1a8-ba0e-4ae1-babd-736f36d70b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368c9f51-418d-404b-8264-fd91c60f5648",
        "cursor": {
          "ref": "8afb7403-b1a9-403c-8a04-469ac4c0c396",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a9b95019-8217-46d0-8408-9d54e53f4787"
        },
        "item": {
          "id": "368c9f51-418d-404b-8264-fd91c60f5648",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "41e4b82e-0473-46dd-b117-3997ecf60693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af584546-5570-4d8f-ba5a-3af141237f00",
        "cursor": {
          "ref": "743b0301-9d0b-4f46-be89-9d5d5595bce4",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6b8a9e2-47cf-4817-b851-63b35e2b9b53"
        },
        "item": {
          "id": "af584546-5570-4d8f-ba5a-3af141237f00",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5a8816b4-6a8c-4257-8af7-7becd43b9d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac1029a-3283-4e07-b631-66fcdf7247f5",
        "cursor": {
          "ref": "f62a7819-15eb-4fbe-bbf2-4c76eccd0140",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e2ff5272-8013-4ce9-abdd-911c9ef44418"
        },
        "item": {
          "id": "1ac1029a-3283-4e07-b631-66fcdf7247f5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c08c0c75-0518-461b-8f78-523912ae9406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17005646-1b0e-41b0-bac9-2dafc46c8214",
        "cursor": {
          "ref": "2519a4a7-fb1a-4c7c-bbc6-a4a26bf33cf6",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "95ef58ec-e548-4c5c-a09e-b17d6e498bae"
        },
        "item": {
          "id": "17005646-1b0e-41b0-bac9-2dafc46c8214",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d8d44ac7-7024-40fe-b39d-921fa80c5430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6210da-1e5e-4db2-b47c-5e80a504774a",
        "cursor": {
          "ref": "1e8a896d-235e-4360-a7e8-36972a9ec8e1",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "235fb3d9-9fc7-4c74-a4b0-6f5a5615f19c"
        },
        "item": {
          "id": "cd6210da-1e5e-4db2-b47c-5e80a504774a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7212bff1-6765-4664-98fe-ba84e565a470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b3532b-0a2a-4e11-96d7-c677bc13fbbd",
        "cursor": {
          "ref": "c40e6992-f82f-441f-986d-cfe792bb6bb6",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0e590645-0264-4a09-a10c-59d74406bf01"
        },
        "item": {
          "id": "36b3532b-0a2a-4e11-96d7-c677bc13fbbd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cdc59a03-d201-43bb-b972-ebd61f5ade17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc945e2-7157-458e-aeba-51f610127a3b",
        "cursor": {
          "ref": "0fddfa2e-15c7-427c-8cdd-013e40135fed",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6899a0d5-d5a7-4c1f-a830-b5bee27e72ec"
        },
        "item": {
          "id": "bcc945e2-7157-458e-aeba-51f610127a3b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c9c7dbdc-9c20-46d7-bf39-f764273bb2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed259e6-682d-4608-af17-9737f76cecc9",
        "cursor": {
          "ref": "b59d7c11-8bb7-4fc9-92c8-978b5fb32388",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d0eeb7ec-8e9f-46ba-b707-247f040d380a"
        },
        "item": {
          "id": "9ed259e6-682d-4608-af17-9737f76cecc9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b4b56f53-aab0-4d39-83db-70efda325419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214fdfb1-a83a-4eb9-ad88-fd3294f888df",
        "cursor": {
          "ref": "d23f6e68-d5d9-41ba-b9ce-031899f35a40",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "be02fe99-eb3a-47ba-ab9b-f9f21a0dff42"
        },
        "item": {
          "id": "214fdfb1-a83a-4eb9-ad88-fd3294f888df",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "065f7749-3241-4f37-a3c3-51f575c1b76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e26153d-0835-4ea1-a8ef-9447725d0387",
        "cursor": {
          "ref": "8ff8141a-fdab-4414-abe9-d69476f2e1e7",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4ce5d32a-c243-41ca-a3fc-9bebe8c21e5d"
        },
        "item": {
          "id": "9e26153d-0835-4ea1-a8ef-9447725d0387",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "18cb2f4a-ca7f-4b68-8693-a001788e5384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e879c4-ed98-4fde-91b4-54511074c232",
        "cursor": {
          "ref": "decc80e2-9a18-4632-ac97-78de260b0b9f",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8f6883c3-f3b4-4b11-9144-94528d9e0bcd"
        },
        "item": {
          "id": "f7e879c4-ed98-4fde-91b4-54511074c232",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d5476625-4389-4972-955f-52b9b6eb8584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009e294d-da05-4ead-8790-88dc19f61682",
        "cursor": {
          "ref": "4ccbe033-6d1e-4f4f-bb38-43cd745ba62e",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "084f4870-9b7f-44cd-ab06-32c693935635"
        },
        "item": {
          "id": "009e294d-da05-4ead-8790-88dc19f61682",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b270087c-bc59-421d-a1e3-53c828878222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416d18e7-e3d7-48b8-ac10-198fa2919163",
        "cursor": {
          "ref": "325cbb88-cb7a-41c6-a4ac-e80e6d3edb17",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "55482e0e-3af9-4cd5-a0ae-345fb5799c7f"
        },
        "item": {
          "id": "416d18e7-e3d7-48b8-ac10-198fa2919163",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "73116e33-e379-417a-9edb-bd291947f2f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26caf4f-7176-4927-a147-6d4615f858cf",
        "cursor": {
          "ref": "1299ac25-fb4e-4d0f-9587-7c3eec430ddd",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9464a8d7-2ae1-49f0-b4de-9861b2e8c69c"
        },
        "item": {
          "id": "b26caf4f-7176-4927-a147-6d4615f858cf",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b6e0e345-9d39-459c-aae8-06f5c05dd4c6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce92d4c1-d0e2-4ed9-8612-3a7c49f9e46b",
        "cursor": {
          "ref": "bf171997-b36d-4d3d-bdab-5ba75824eaa3",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1ce3cf2e-5f23-42c4-a858-7c93ac73dfb8"
        },
        "item": {
          "id": "ce92d4c1-d0e2-4ed9-8612-3a7c49f9e46b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ea0aa58d-94fb-4563-a008-6b5ec0960642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "baf0e7c9-102c-472d-bc7a-07de2cce89bf",
        "cursor": {
          "ref": "f452e3b6-1673-4b04-aacd-12eca6a4481c",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9da35eb1-91d0-43ee-b6f8-cfeab33f0651"
        },
        "item": {
          "id": "baf0e7c9-102c-472d-bc7a-07de2cce89bf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6974e52f-fb34-43ac-b879-6b9f608ac2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6927e21b-8305-4e0d-907f-20b4b0f9462f",
        "cursor": {
          "ref": "38d5174c-5a8e-4773-aa91-63d0dca45be5",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ba58877b-df7f-4e98-8473-5b15f6efa40e"
        },
        "item": {
          "id": "6927e21b-8305-4e0d-907f-20b4b0f9462f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a1d4aef8-41cc-4614-9312-c0eb38cdbd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
        "cursor": {
          "ref": "0c76e505-9684-4743-8a61-9d0e378b2dd0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1869975c-0a4b-497b-a8bd-bcb6f335fdf8"
        },
        "item": {
          "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832b6fa9-8d4d-4e68-9310-e17ca6434307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
        "cursor": {
          "ref": "0c76e505-9684-4743-8a61-9d0e378b2dd0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1869975c-0a4b-497b-a8bd-bcb6f335fdf8"
        },
        "item": {
          "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832b6fa9-8d4d-4e68-9310-e17ca6434307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
        "cursor": {
          "ref": "0c76e505-9684-4743-8a61-9d0e378b2dd0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1869975c-0a4b-497b-a8bd-bcb6f335fdf8"
        },
        "item": {
          "id": "5828d36b-cb35-4788-940f-ab2552768ab4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832b6fa9-8d4d-4e68-9310-e17ca6434307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4504b1-5bfd-43c6-a3a4-6d8491c49178",
        "cursor": {
          "ref": "c89ad09c-035e-4912-acaa-0291b016d43b",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f980032c-f478-41aa-b8f9-231231dde3e0"
        },
        "item": {
          "id": "1d4504b1-5bfd-43c6-a3a4-6d8491c49178",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7ae361e7-37e4-4672-913b-b2ffc7c2f82e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd2a332-6aad-45c8-a9e8-abdf7977f959",
        "cursor": {
          "ref": "c4f88530-f977-4552-9d99-fb3841db6245",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "234e1aaf-696a-48be-96a5-10378cd2729f"
        },
        "item": {
          "id": "2bd2a332-6aad-45c8-a9e8-abdf7977f959",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b2ce883-6514-4829-991b-bcb3b8405def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2bd2a332-6aad-45c8-a9e8-abdf7977f959",
        "cursor": {
          "ref": "c4f88530-f977-4552-9d99-fb3841db6245",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "234e1aaf-696a-48be-96a5-10378cd2729f"
        },
        "item": {
          "id": "2bd2a332-6aad-45c8-a9e8-abdf7977f959",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b2ce883-6514-4829-991b-bcb3b8405def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e502a9f4-a651-4064-b344-d4496b94f7a1",
        "cursor": {
          "ref": "33357cde-7de2-48dc-b1ba-80b456690a6c",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7f7187e0-783b-4cd9-99d1-999ebf394e42"
        },
        "item": {
          "id": "e502a9f4-a651-4064-b344-d4496b94f7a1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "21b5fce2-8daa-4162-9345-b91396daeb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2baa261b-3c9e-4046-86c0-f71736f5f2ea",
        "cursor": {
          "ref": "746deda3-8448-42c3-8bd5-f0eb27c566c7",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b39e48b7-d5f5-4a95-9851-f5e80e897592"
        },
        "item": {
          "id": "2baa261b-3c9e-4046-86c0-f71736f5f2ea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6789adae-1c64-451d-afc2-63fbad049d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2baa261b-3c9e-4046-86c0-f71736f5f2ea",
        "cursor": {
          "ref": "746deda3-8448-42c3-8bd5-f0eb27c566c7",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b39e48b7-d5f5-4a95-9851-f5e80e897592"
        },
        "item": {
          "id": "2baa261b-3c9e-4046-86c0-f71736f5f2ea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6789adae-1c64-451d-afc2-63fbad049d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3c78f3c1-2b1f-4735-892b-0402ea85113c",
        "cursor": {
          "ref": "f5d1157f-f782-4752-aef7-b765487bb6bd",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dfb142ce-faca-4817-888a-6b26736c9c43"
        },
        "item": {
          "id": "3c78f3c1-2b1f-4735-892b-0402ea85113c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "15288ccc-d50d-47bc-ba84-2e4c0345f266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}