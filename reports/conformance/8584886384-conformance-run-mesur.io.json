{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a23da50d-ea7b-4cac-9a78-484ec5562145",
        "name": "Clear Cache",
        "item": [
          {
            "id": "723989a2-27e7-4d7c-ad51-094dee5a687e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be2318bb-1d60-4ad3-a437-13cf5e83eb6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c7476ca1-a19c-4765-b34d-60bcd4d770f1"
                }
              }
            ]
          },
          {
            "id": "54af4ec2-cbb1-4ab7-ae39-8116115d86a6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a96bae40-da37-4f97-b9b6-70fd3b0492d2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b88b9739-e61b-465c-b9bc-ecdb55fda502"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "724f3c20-865f-40f2-a449-5b7ce8aebc57",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ffdbfb4f-7a6b-42cf-a8d6-ed95b2d477ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e71a68e8-33a8-4a74-9e93-536187e7f782",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b390718-282b-4a33-b400-e0785524fed6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24b07ee7-5a95-41e1-bd34-3540a5ab4e16"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9707e3fd-0bb2-4c3f-8174-0744f2d1f568",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe5e9179-8e50-4351-b961-a14573bbf72b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44665776-0915-42ad-a4e3-616bbda07cc1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c5d5e52-bad2-4276-96a2-9ee262a43b3d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf466fa8-b843-4684-98e8-fbe33d99b421",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "05d0139d-926f-467d-91ae-16e94a8e08db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3d1e1eb-9017-4b97-9f24-52db71b8097c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e4921b5-8f27-4fe2-a9bc-50d54a53190f"
            }
          }
        ]
      },
      {
        "id": "c9fa143b-ecd5-4681-968b-8fdd161629f7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "81710853-017f-47e6-8238-b6b14cc4cc5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dce8a6ab-5647-4253-8546-6fa644de6632",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c023bfb3-56eb-4bb3-b77f-37d99bd56910",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88aedbbd-7a7d-49a6-8fe9-9c4103b93009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c4c26ff-9da3-43ea-8f50-73a00b4acc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fb2fd7-2bf5-47a2-8039-9fa1778808f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2906a684-a653-4f75-a073-3977f0f9473a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4549122e-ed3d-478b-8553-777fab0d279f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cc9c8b-1aa2-4f4b-9906-70fd91e12eb5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8483f4a2-d723-4dec-99ab-09df6d244cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "028c1e7b-7645-4595-a9ac-ff2cec02dd75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8fa56f2a-cd87-4538-b37d-13d989336e1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9b54c12-c6f6-4b27-a375-f35b863c1b69",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b5baef-a0e0-4ecf-b34f-15185d18a199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb607990-a24b-43be-9ba5-0efba09c2a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b331b7d-c055-4352-8950-ff984cf24585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e352568b-3d2c-4077-b542-631a62e5713f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "657b32fb-114f-4406-96be-f67c386fa438",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6a99f43-0e01-45ae-a7d5-91f0b4df1f8f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5021918b-b8a4-451a-9641-1f7f089793fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "df595a39-7648-4f8d-afc5-c01bbdfe3436"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b70f9b3-8c71-46e5-8f85-b44e17fcf039",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a234a72f-d79e-4251-9ad9-e2b7cf1946b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "868af311-01f6-4f81-ae73-9ac939b51dfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "144807e7-e57d-4c80-9017-1207780d6e84"
            }
          }
        ]
      },
      {
        "id": "bccc055e-792e-4252-a569-a42c796f72cb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "975f28e4-a16a-42de-a5f8-f76ba52cf28a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb42750c-e5a4-4617-893a-4cf999f786ec",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "54359bd9-a844-408a-9e9a-902a3ec08caa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8122cf79-328a-43fe-a30d-592ee39fe787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bd504f-d5b9-4e8a-b1ab-2a322cb4f578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26098b1d-18d2-4ac7-8a41-354cf0505c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2cca716-81eb-44b3-9c5c-c5ce3143627e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f18ac03-f363-44fc-a273-624d6e58c33d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e2583e-9993-4e4a-b31f-b3181765ec22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe651440-f3e5-472c-b00d-d3c7f22ca042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65380b13-a157-4255-9dd4-6ff497fd2355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71ae38f9-5cac-40ff-8c4d-93e9bb5c2b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83522833-be93-4ca5-98b6-53ccda9cdaad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94885d3a-cf0d-4b25-9de1-12e676d4e420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1491b776-fc3a-4bc5-9da7-28a9642f71a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42175b8-5475-4c8f-b664-f327a0afb65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "366c1bdf-7d35-4fbd-b0dc-0e14582969ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edcdd65-263c-412f-a49e-3ae642e83b25",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f19a441-ff1c-462d-9ea5-47ed419826c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf92804-774c-446b-8927-6bb175f3b54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea947c3b-94a2-4d3a-adea-cdc379942741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c2db7e3-d4ca-4328-ac54-7327cb2e7c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7505f58-5c84-483a-bf37-40723f266e92",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f79fae-7dbc-483d-a823-a2f7738423f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dccd08-aa81-48d9-99b1-89c1bbf53272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8db8184-6024-4431-a9aa-8db52966ef46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e3a24cc-633f-460d-a925-bd77b2d19428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06599c22-ca3a-47bb-814c-f3d7b81e7a76",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1a15ca-28c1-4113-8141-239640013356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee49ab5-727b-4226-ae88-3cc71a00d10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608e3283-bf94-44b2-83f2-f04c90076d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70bf2c20-245d-424c-afc7-e42104da6cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63562837-c03c-4aa8-b322-d485bbfc8dcf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4c12bb-e2e2-4018-b572-1d0c611ee711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3a5029-3814-4831-8397-2c014f246b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e4c54c-9f32-4a42-8d0c-84616343d821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "764d2fd7-ba85-442b-ad11-9e46b992a79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ca31c1-5e7e-44cd-9d09-ebcf524c55e2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be267173-6700-4be3-801b-5da502fbfa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbd7f6f-5a02-4cb3-9a8c-1ce2121625f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4407e68c-5205-4384-b297-b57440c88f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96c9e2e4-e547-4c45-8638-be16147ab8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ada2394-3b85-49ad-9fbe-44bb871a4016",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c0a8fe-b62a-4b16-9136-8d8b3321794d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192d0272-8447-41a9-b46c-49fd46a6936b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38216c45-765d-4e27-a4bc-95dd82b3b2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80c724d5-cf7d-466c-99ad-99062506a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8014aa-d6bc-42dd-98fa-1418544e6e49",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082bfed1-dadb-4d40-88ea-ea878dd0e3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71328bdc-167f-4b8a-9b95-53074cf03ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ce4add-1fa8-4ef2-9d4b-f7e84db1a9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d147caf-2816-4a38-9729-e03e27974148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e3c6ba-9377-4a2f-9182-386b07c6953d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8f1119-5adf-4026-983d-95c8745ddddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae6a27a-b3ab-4ff7-8007-0405db6fbcb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50dfc62-b991-402c-b739-2654cda1376e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a453d470-ca42-4369-9ab9-00f93466e347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1e5fec-d8c6-4d33-b9b7-c34de52fd97d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6781085-e603-4461-91b8-453cc99405ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb75cd5-10df-4e42-904f-9a5700df581d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b15c9fc-0bcc-4aa1-8ecc-2798dc55f696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ee8fedf-b774-4682-8954-eb2bab9a4d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e1aea6-d014-4c99-ad0d-feff84d0aab0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a166e4e1-240a-41c5-a58d-4e71ce469d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96899b3a-0bd6-40b6-9e01-3290afcce6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18df529c-f387-4990-9015-3c0115755563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1eef3ddc-1622-468e-aa0e-3b3d80b79b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbec338-6e70-44c4-ac30-bc34090c1978",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4e8cf-0b0d-4e52-8093-b25532e837f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3477759-4692-4500-8c1d-1f3626440fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8649bff7-73d6-486e-8cd3-ed8707fd02f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6084e33-fe1a-4fd8-9b90-4c66e8dacaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97be9691-09fb-4068-9318-c7ee3b2659f2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e693cdbd-6348-4764-b543-387a1906d1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab55825c-2fe6-4ead-bd2d-dd30378a8758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5c5ed9-9b1d-47a1-8bd7-804abd77672f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbe7f8a7-75a5-4868-8ca3-af8246dcb699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7718a96-47b4-45d5-865a-e3c581dc76b6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b2f79d-f672-4207-add9-b6c37694b2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ad4fd8-b0bb-4f9c-96f7-58a6ce7788b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3e6ddf-fbd6-4abd-a7a3-533368a2f697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75b4ee92-943d-48ba-b18c-eb02a55df67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02222f91-70df-4f31-b66a-3bc392048908",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0649f12-dd6d-44b7-b836-8128ace8912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77390b1c-5e93-4093-a6ab-7511ed2b37f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0852bc61-c667-495e-ac68-1c97a9f94001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65065320-d162-4521-98cc-cc3bb1b0973c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf9040c-94ac-4f72-aff7-08db5f611ba2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c038855-e7b9-41a9-b21d-6023f60314ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d532b272-4047-4816-820e-a805a7980062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a42380-852d-4af0-9f36-49d64cee0e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b195085c-8cad-48bf-b0f3-1db43a7bd5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b838bf2-f375-4e3c-8e4a-3bc0a72dae15",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd1cb5c-6ac0-4471-a517-298c7fe260e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39be2997-6185-4ce5-8f4d-1a6000783f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393c48e9-c4e8-41b6-99ba-d3ee94a766d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b52cc8a-ebaf-49c6-aa05-dd78b6a8f59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fca363e-22eb-460b-a3ed-396d56bfb4db",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bf0e93-7c51-4057-9023-ced23736e84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b589b272-254f-4114-a27d-55ced291953e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7055cd9-d9b7-4e36-b8e0-6541a5a73b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90991798-435e-4562-8a23-ee1bbb9f99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee0ffd5-26c5-4fbc-91e6-af192b431350",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ea0fd9-fc1f-4388-b25e-ea4f14b2336c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10be0ee-e0c1-4ae6-8122-104fe553fcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7075fa76-c357-495c-890e-6bf15d81619e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50a663f1-8f90-44ab-a7d1-db37ebdd860b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3eeafd-4a53-4161-9ded-cb9013c7894b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521ebe76-cbe9-4935-b9fa-0d7d46bb4344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6476a380-6225-462c-808b-866579c7a431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6793432-563b-40f3-8d2a-e17c1a5385b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e29bbc72-f9ff-4c42-9052-9989a06bc6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd414b-95f7-41e0-8978-9e7bab914f8d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8deb61-13fb-43e2-b326-94c4170bd9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a21198d-a881-487c-ac1e-5fb7794e36c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fc4a93-19f5-45f9-b2b2-d1678913757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d59231c-263c-49d1-a845-bbcc88c13607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d714a04-bd80-4d2c-ba60-b8fbe8c33945",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb465afe-cae2-4e8e-ab4c-7987e200ed38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb14297-87ca-4b93-b821-a08ab30b6fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb0cf53-95ea-4632-b505-d99780e635ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0160ac-f03b-44e4-9fdf-dfe6bcae4bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3adfd89-8fcd-402b-8b17-ca588a4ba213",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456d0d2d-c068-43de-a4e8-c0630b3f0c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e899081-ed12-4eff-87c8-9d0f3b343cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a0700a-e6c1-4bff-887f-7c1b6d23de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5010b28-ef79-4e8f-bde9-5ed61b6d9058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d231e7-04e0-4879-b33b-bbad8ed7b014",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cbdd9b-8dad-486f-84fa-c96c68519992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda89eb6-1c5a-43e3-ba61-d5163b0d90ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c34a434-798c-41c7-9155-95682604e3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e74c86f-915b-49f6-aecc-d1bdbe9aa798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963ba0f4-9462-41bc-a598-8c99dbc15f9d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95519d6-d111-402e-aff0-ab4657608d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea31ab5-2893-4bed-9868-84d1a42b2a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aaa104-325f-403c-8441-fbbf4676c597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7a0e60-f1fd-4b4d-968c-761a1350d310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2281ef55-1fbf-4791-8036-159730390c30",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9df507-1901-430a-83b2-645dc5807fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500b0f47-aa67-4580-be51-e60c88f37b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd251edd-100b-4cb2-a26a-1c051197ec8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3beea64-2910-4009-881f-2c0b168be9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd5639d-5198-4f6b-89ec-4b7b4ec59b90",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2126b3a-cd3b-42e1-a77c-1f48fd00b040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39180db-113f-47ad-9406-7740e9dc5d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3ff306-70f2-4e50-ab80-d76578f04049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb61f3d-7500-4e02-8232-88d22bf5e1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65331321-3184-4757-953a-eb9a6cc86864",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ea2c3a-1fbd-4560-b3dd-236fb2eff623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58a8480-854a-4be9-8fe1-a2224b2d5441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3502a124-2e68-4370-ac99-d8b4c0251760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "947c4d81-316b-421f-871d-9536acd98a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694fbeee-24f1-41c2-b039-db9e46bf88ef",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8989d86-8eea-4f7e-b145-51de01a66a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62c1199-4588-40c4-89b0-bec43abed738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e70e02-efb0-4fca-92b9-e3f069b92b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f76dae4-b080-4fb1-bc70-02cf8e930087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c5842d-1c28-40cc-9ca2-0aed1fad74bb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b5d25-1071-41c4-8268-0a2b9d98f606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c248e3-1f41-4736-bd9c-3ece15c215b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4134a709-9e64-42ed-898f-2fda1550f95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffea673-aa4a-47b3-a296-bc2358ecbd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d664f9cd-1249-4d4f-a740-3ba8040b06e8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbdb935-47b9-4fd8-85c8-002a6d874ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c325474-dccc-4d9e-a567-044d8898bb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28857e4a-825e-4c43-9884-5c70f7afc22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72bbea46-60c8-4255-9526-8012dae929e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09645a42-b47e-4ec4-9b62-63a4120460a3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4213ed6d-dd20-41a7-9e97-f10d0202fbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9285eab-a8a0-4903-9551-e2a03de56c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937e84af-6bcf-4bc5-ac04-147e5f5ea23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7aaea78-bff5-4cfc-84ca-b13cf920244f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9db518f-58f0-40c7-9fef-86219b51e26c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d794aeca-fdc1-427d-8c0c-af757d3a5738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8826468-80ae-40bb-bb51-939d38ed4ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff78bd3-7c68-432a-a1bb-08f931af68c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "52d68792-1e84-4fcd-8e55-1a13b46e5806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104197c7-c4a1-40c4-ac94-5a00fa3d50c7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18708565-8b49-4d3e-8055-5ee7033f86ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cf5f300-6d94-4349-a2cf-21d3236625ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9620a55-df44-4276-8e79-d67092a4aeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f69f95a9-8683-47ab-90e4-e9086b836549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5608062-38b5-478a-8df5-a9146835a25a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2026289-9501-42f9-90e3-500e61c9b9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7a0add-3d6b-455c-bb46-ad5ec74c7063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af86c22-3d4d-4c8e-9706-f060c7ef9075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c68c091-d1f1-432f-9496-489e48862e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67436f1c-c5da-44bb-aca4-48159dbd78a2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365b7fa4-287f-45c1-8c09-cea8c43a16b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857f70a7-de53-4637-81b8-ac14116745ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33711b40-7728-4282-8cd8-ea7829aace60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "713c31aa-d853-4ef6-84d9-a23c23e43816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08da2fa8-2f8a-488f-8856-12f4375a7a87",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ec68aa-d9d2-4a71-b682-9746f0f71536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57cf19e-09a9-4705-b1cd-beb5e39af046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6a6403-4fa3-4f0d-b5a4-777ca3ee6a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63ded36e-10f9-43b6-8521-64ea9c522590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bd02a2-d2d8-4825-a568-8cd159605d44",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b214841-916b-4560-b2df-97e8594c7616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e92fd0-4a0e-4e53-b247-4a7d0d643118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d0f46d-5f71-4c40-98d8-88395a4b6e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0da6807f-55bc-4453-9c1f-706fb4d56a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b28ca7e-aabf-4c98-b88a-c097f9c8e34a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b09c1eb-7907-4c3a-a507-8042b203e597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8064b0-f36e-4b76-9aa1-b5fbc96c3c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019819ff-988c-4e10-aad0-f6f9f3edb4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b17c417d-f2f8-46f3-add5-78e4ecb3b140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dad508-f3b5-4536-a9af-aa61342a45f0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66122613-3d13-45f0-a60c-7402d3e6c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2eba970-6dec-4b63-a4b8-321e5ee95be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda4b5f3-62e9-4ee8-9c71-3a3e3ef11d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "df0cab4a-89f3-4226-8cd1-3aa359119eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4b08c1-5ba5-4ec4-b8ce-06bf3e5ad7d5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd1d4c9-fdaa-445e-8b20-a6631a878330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8812e19f-d05d-4b11-a970-c7d61734df9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90a2eae-85a7-4331-bc82-2dcabeefd509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "353dc5f7-dff6-4dc5-a81d-9e45eff4c262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771d697d-fa0a-44b8-bd51-d2c1c7b50f2f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4523221-11f0-4748-afd6-4100246c8f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eabb46-0cfc-45a6-ada8-f29c21e31382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5a473-dd5f-454e-8cd4-d58c14d5c5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "80935ef2-15e6-4e8c-a38d-d4edda934237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fbe8f2-8a0d-49f3-b9d4-c3436258d424",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03bc962-3b76-41d2-b2a1-d6ee7aec4f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00fed27-25f3-4be1-aa56-88957ad28195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219fabd-d4ea-4ee3-8210-f953d6c0d119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e8259a-9f64-41ab-acc2-b0b4b4af203b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea000e0-dc4f-460a-b4ac-48226a78beb0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fc5963-0746-4121-bdc8-e28a5787e370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b162a0ae-0a05-4269-94cf-4de35c95f115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568d4f1e-1d35-4de5-be50-03f5e029dce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95105587-846f-4597-8af9-b7d2628a7eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a385c95-8745-4f71-9fd1-cef47d3d8798",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cc5bdb-5457-4df8-b559-21cad1b6d3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c915a53-6b09-40a1-9944-ccf0cff90268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8057b79d-9146-4978-9e75-5f658dd3f011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bc989a-58b2-4bd4-b1de-41a29cac0f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ada9730-2091-4153-9471-3dce64281371",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeb9a3e-7348-43a2-a161-56e554c945d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c1af4c-3b88-4a75-aae2-f08e3050275a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c16a629-f375-471a-946a-0a353b5c51a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9410568b-b3b2-4f93-ad8a-147107c7f99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9f9b11-cb6b-4536-87ef-ea2f5cda25cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bccbe2-8fa8-4c7d-a3ab-466cecc4793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4283d338-06ac-4320-b903-7c18ca8f97c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59439820-d477-4091-88a2-ea56345a0d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6230f5-a787-4466-89dc-15e4ab848ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f203aa18-2bf5-4b68-8e9b-bdad9e04b93d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b510cea7-3508-4077-a863-dafa5461e708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796750d5-1868-4f49-a62e-cb1bd7bfa415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43054c3c-da0f-4bf3-a7f3-6b03827cd3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5188630-6eaa-404a-abb5-57243892ad78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13eea9b8-2df9-4067-b9a5-0f19ff093ad1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4ecd98-246d-4327-8dc1-91c94e6ba399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8e990a-63f1-4e5d-b306-45d30971fb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f8dccb-0e7e-4c3c-85d7-ad3ade6c6e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd819992-1310-4181-8c5f-75aeda3deb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd5b777-4914-4bee-8f9a-578a78e8bcc4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506cf152-2290-44c7-9b6c-6c54f17bc2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e900c41-7da2-41ea-b760-b89c9abfa42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc69e616-b453-4bcd-b03b-09b3998ba6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b617056-6173-4ff2-a49c-163403b4a55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18dda22-8b98-4490-8a50-753888cec30c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88144a18-0f23-4db6-9799-ea36527fe4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5ac48e-9d84-48d6-be43-521e5d4d3071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed43b82-1f0f-4556-a370-f8722bb59fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f47689c4-7ca6-49e0-b9ff-1642ac1fad3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddeb346-a145-4e09-acaa-2e87dfc9832b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34a9cc5-c8f9-457c-a797-0a36a93a543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fde468-5c21-48c0-8338-e62e258b9c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675bf34e-ebc6-4685-8179-760cb5fdb5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3919f191-0b1f-4b94-ac74-3a27b2bfaa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbaf4cc-259e-4983-9c37-5a3e2d52f713",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f190b795-55e8-45d9-83e6-8266b7084611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc39c661-a06c-4fe0-8164-fce32da50595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675b52e1-4600-4139-823e-08105e6dda37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4d772a-78f5-4646-8cfe-2ff092bc3d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbf70e7-4f06-474e-9872-5975b3cef265",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb948bb-9406-4a9d-8399-f46913d7f9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb35ee7d-5f40-4f93-aaa3-dd0b7fdee874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06752f63-65ac-438b-8e7a-a8c9cb1eb319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "80f31d4f-c658-49a5-8155-b51ef4a697b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ed1706-ac9b-4544-a90b-5cb06f6cba11",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901ccfd6-1ab9-404d-b5d4-6d75b3c0ee68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cd7357-63f9-4f59-b2bc-4b0113b8376b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6b9708-4a3a-4cfb-98ec-36f5e7c2ad1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3513093d-443d-4155-8d1e-87d8b6f24e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbacbdb8-84e1-4d3a-b6fa-148e1ea20cfb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b207955-fd0c-45de-acf5-33a7896d9cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321ae205-d77a-4bd5-a2f4-b13a7bcab29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79e2ed3-a371-49f8-a255-55d41930aa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "912e6fb6-9266-4ddc-89db-2cc460d7e6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b99c31-7186-424b-8faf-e66fa04539e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc49ccf9-e172-4456-b29d-bf1442db735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ec0f40-eb29-4fa7-a4c0-6b165769ba0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b96ebc-84a4-4a3b-ad46-c7652b06afba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0d74ae-052f-4c02-94bb-319e730b515d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14b31eb-7755-4d54-aa9c-22a19b730882",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e72da8e-0876-4952-bb79-3a2aff87619c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce0091d0-c8db-4b4c-be6d-cd383d5155b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed738d74-39e9-493d-b1d7-45b75a7b63ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3bcd08b-6fcd-4c76-814a-de8333e37753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6a8766-e7c5-4f34-86e9-c58748d8420e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44414cc-0dab-4278-b5c7-e1d0f0fb9a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741f0356-b1c2-4ade-95f1-5e909ae207d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2c2561-f036-492f-9fa4-eeafafa69482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52f428f-37c8-43fd-b596-1488ab463258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f1c192-da0c-4d97-8672-9ed625223bda",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00fecd6-fa75-4a10-b4da-eaa3fc104dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995d4f9a-5bc4-422f-842e-8fbc65ad63fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b7303b-70c7-42b7-8120-9c0b75ebd3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d888af9-d539-4930-b5a1-d026f2475b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141e6c3f-c58c-4318-aa10-a9edef1a6216",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af1ea7c-e569-4877-9a13-f3eec54934dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba241d33-6782-4299-ba2f-32aaf0a521ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f329c94-1e21-4be5-9ca0-fe48759aa510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5f1871-96a0-4647-865b-14231bad548c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f903109-361a-4a8a-9e3a-134829286057",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7029e9f1-9ef0-4343-8675-e454eac8d244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e902b4aa-9110-463d-ad0b-23a730c96de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91d0b6c-4c73-4d08-8766-9bc60516e615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b02c557-25e9-4ec0-8e75-2213df9c4b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598e2ad9-af09-498c-ac74-5de861df390f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70527bc-9080-45d0-9a80-c131a3eb7010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9be8534-955f-47f6-bf6f-32ec238aeaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25056171-e16f-409b-b8f2-6ae1c3b1fb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b33d8ae-4c67-4645-87c8-55d65badadc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fdd540-341e-49de-8d81-1a2a9243aa51",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843c41f6-fafc-408e-af0b-92de67730d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6af14f-bf06-40b6-a105-16edf2a0443e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd350c07-b3e0-4ad5-aa56-6e4eedc959be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3221af9b-8e0c-424e-a138-b2854cc7da5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c8f038-08c3-448e-a359-46a10f574c60",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5474b59c-0ea2-4bea-a646-be0d8db87480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b8266c-4e3c-4fc5-b94c-bc7c0e5897d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d7ab29-0f6a-4344-bfd1-ce2a06cb8aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a745c0ba-3b3b-497e-bf83-9f7908a8a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e1fe75-4266-4772-b6c6-94b0ae1a541b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0e7fef-95ac-4541-8c6d-9f20b550a546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77fcbe1-d345-4faa-a5a7-ea33c5d27731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875e999e-9c21-4d5a-ba88-9a04e570a685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec479066-32ea-4213-9bbc-3a9fcd5a62e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e4e263-b67d-4934-9f83-2385ad6e740d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb49433-91f8-4e30-a80a-fa413eafb7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb42c35-c55f-424f-b666-62bd62a6ef41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a89ada-bfeb-4c6f-a9cc-28d837fa4bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "096f549a-ffc2-4cd7-9903-306f0dcba861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d440967b-f23f-4513-bf55-c1c379dc7d51",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5ce68b-68c7-41fa-b2d5-5fbf2c03e9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77537a8-f08e-42ea-8f79-06b9bde03f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49489701-5117-4998-8e4b-086bdde98806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78029706-bc90-434d-b52a-d9fc8ada47be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dddc359-82aa-4d73-8aa3-35a62d9b6d9b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fc3aba-12fd-4758-8025-af880af6d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c2e08d-b9da-44cd-a917-a0203975ed8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4324694d-bb4b-4b12-bde7-498df0070c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29e5de6e-2d58-4504-9e81-15a348e9c010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3864ccbb-2598-4a86-8b8a-6e18e265f53c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef4f3b8-6e1e-4fd4-aa23-7a15266067c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a13452f-f1b2-4e50-bf93-fa9f5e342765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd98117-1876-4d9d-994d-4afcf2f2484e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8065556f-c896-4c26-b3ce-fe910dd0c6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb4cb90-cbe4-431f-afef-362ce11f6d99",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7567de-9f94-4769-856f-addcce8b73a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341685fb-e834-4146-ab97-4d642ec4bec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4366b16f-77a4-4b37-aa51-ab915693c3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8262ef0-47cc-4b4f-98e5-8401c6cd6a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ea0900-ceb4-438f-9129-d0173e36d53e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617aae17-9785-4791-b0fe-f603622d1dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c1f88b-6919-4049-9b5e-4a5b9134bb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe448bdf-0a97-43fd-b6f5-86b79ead99de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0007454b-753f-456d-9fdf-fb42aebbd51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6815f186-6e96-483e-ac9a-61fbea8a558e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8667a653-d212-4303-8494-1e53ea53bf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c7762d-76ce-434f-b867-4a25277291e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ff3f61-e7c9-4963-a91e-28985e6c02f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e316d56-f57b-464e-9bb7-3580642ec529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cab92a-3978-46e5-81be-1c317e3b3c52",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31d297b-017d-4620-92c4-f48f9370399c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d964ec-7eb3-44ff-a6ff-ef457c37e8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fab4646-687a-4a98-8277-527dd9130f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36df93e6-71a1-451d-9180-b823dbcaa782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90b620e-6b90-4f6e-b96d-387230f6ab00",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5c84db-bd0b-413b-b7bc-4b7e5b675b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5687ce35-0726-42f9-944d-28e4a52511d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4399b949-3177-403d-8bac-9c26e0797e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f63262b3-c96c-43a1-adb1-b0e36111b11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40afe633-35e7-443e-bb60-6b25aaeac729",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb9fdfb-24f6-48c7-b262-80a8723abf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e78c38-2aad-4222-a1bf-0f79c067f135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b784cd4-5f79-4522-acbd-6fff133f8929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "487ae923-6b16-47aa-bc6f-8259da6c92d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4a95a4-f0d7-4c13-bf3b-e163740f3c40",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8b5b8f-d0de-4dfb-9517-6fbee40d4069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda2f6da-69cf-4837-8dc6-7c9827189697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb8494a-d2e1-491f-926c-ee80a32fc11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80299e82-c5a7-4714-815f-c8d66be4d4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73deab78-ea6f-481d-96fa-4ac8d6bc22d3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9bbfa9-86c3-43d6-956d-a08eb58ca702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e9838e-a2df-4fe7-ac1e-cac7b6c2ad05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcd7a08-9e93-4c36-844f-5c44d3b0c87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec21b7a-d8f5-4c9a-aa19-b4455a2cb7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6e448f-55b7-4627-8d63-fd4abbd59d3b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120cd286-6c5a-4b80-8202-2befd081aa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e741276e-f20d-418a-9de7-c25af4be60d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801f8d21-02f8-41ca-9743-a6b46bbf8e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a367428a-a082-4d6f-961d-99631da75134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9029a0-148e-4794-9876-23a8f51b9832",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fef12c-7f96-43d0-8a05-453043315772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dba4f72-c410-4a9b-9a7c-e64e1b25cd0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7679bae1-495c-4b72-b2c7-1ee25cc5bd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "306a3dab-ac9b-45aa-9804-244084f16b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70002a2-1ac3-416c-9811-2b3a455ec600",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027941b5-42a2-49ff-837c-173ece192f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051257bf-08a7-414b-a6cf-3b96650d80a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46db123-c02c-46b3-a48d-a30d9aea4752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5c60fb-7a79-475e-866e-e02ec9e84f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c06aac1-8fca-44f1-bb90-1d93c0bc0b4e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c0738d-ab14-460a-b7f7-df4dd0ac2f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ee6f9d-9adc-444a-819c-0e5750cae071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afee779-d5e3-4ce7-87c1-7f51ee6baa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d29eadcd-e05c-49bf-9ce1-cb0fc0b62858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d972397e-88e8-4b15-ac61-144fcce1f3bc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc936ac-0fc6-4837-8f2b-5aacce42efcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227f719b-7736-4a3d-8aed-81946bcdc539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ba8d29-77ff-46ba-8e86-67bcc4f8d33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a1ea9e-685f-440e-841c-0d9dcccc05a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c84adc6-1914-4249-9698-c0d6e12581da",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ab716b-b164-4cf5-a070-6ebc729c6a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96feee07-bbb2-48cf-a85a-38af740079f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7da4c7f-730d-4c15-9322-40fffa14920e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9cbea6-10f3-400e-89eb-7256b2681bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9533139-b8cd-42db-a5c1-b737c62472af",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1389f6e-65bc-4d39-87ec-c80b25f06348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f344fdf-532c-4883-ac52-efe6e63fc9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3bab20-2ad9-4acc-9316-1f30a76133d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5a12e0-308a-430a-b5de-bebad36ec851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a901a0-455c-4c17-89ba-201e344f4a37",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bebc28-ae87-4b4e-b0ae-6cddda4c5a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25ff9a6-5a76-4943-be5c-b9539a79ba54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10a7286-0496-4ec4-a1b8-27c5904b59ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c84c5c3a-79f2-4cd8-8091-276b65e11b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f1e2f2-8666-486e-a161-37fd34b0729f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a698179d-39b8-402a-b2a9-ec64e1408d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c02669-5604-4d39-97a0-668b9cdc920d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc952c-06f9-47be-bc46-6bf54c31f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebfb9cb4-159e-4055-999c-efa635d4f7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac899a3b-1bd2-4bfe-aa68-20afdd5cf86f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2974b0-3a51-4577-92a7-f5c9720d8424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd49bf2-a041-439e-9ca9-7a044c7768d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e0c101-f53b-4bb0-b97d-295b7e6bf231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db144fe7-53a8-401d-99d3-40fe6218819a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833befde-0e58-4496-819f-c0e88aa75a11",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16fa0af-2d43-4052-b956-1e1cc8affcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11036ded-d797-40c2-941c-6c8efa620212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49a50b5-114c-44e2-857d-fba4bb32381b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "efdb56a8-db59-4c58-aafe-510d226b1ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f89387-b99e-472e-93c1-b084efdb23db",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a44170c-b104-4061-bd1a-d76f41e9832b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3e988667-6add-43b8-8038-5dd67c8eaf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf21d573-c662-4b52-b634-c16ab8b2282a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "140bcd2a-447f-4aee-b28e-8421a94e9fa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bbdb635a-869f-4a47-9f65-a186cdb3f5a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9df11bd-02e9-4d82-baa6-d7b3a185d526",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dd378f-5370-4d19-bebe-cc8806c5b487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "830a3b94-a323-4595-b995-7713e158f334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68633d97-e93f-43d0-a632-1f4d8c49ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa81aa09-9b8c-4bdf-989c-6e0c80c1b859"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2cc2830-4d16-49f9-b1d1-a4fdf2421aeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68cd18e3-0d7c-460f-97ba-f220ff36ad75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc0765bd-f7bd-4e4d-bda7-09b76d584135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95569ed1-56e7-436b-be1c-cb385584d292"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a56e8a2c-f535-4f85-83e8-0d67754afbb3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a552918-0ae9-4085-b755-11343754a7f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86049fb0-69e1-422a-acb5-5abb8b3cfc81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6ad98f2-a4cf-45e5-aa04-d3c64737726f"
                }
              }
            ]
          },
          {
            "id": "cb43c480-0b60-4a5b-b396-94530b80a881",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09c8d1cf-b200-47ba-8185-f8f16c34fbe7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1cb7e78c-9d26-4315-8f3a-4538b6ba5420",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0919f21c-018f-4fa7-a06b-93ce2d9752f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "72dfff3d-de00-43b7-bc88-f30a8ce07b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbe5073-50fb-4ac0-b14d-9b5d424b8d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0198a524-45ab-4797-b43d-86aea31edd40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30953594-f8bf-4858-9f30-4e49ba034765",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1f76b36-ab31-4e9e-9940-049f16cc602b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "546b1853-dd99-4a12-9ad7-fcaea1690402"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5863636e-709d-4eba-bbae-2c3ace51ba10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd14447e-1851-42a6-8c9e-0c89eac4772f"
                    }
                  }
                ]
              },
              {
                "id": "ff954d12-4109-49f4-8a1c-ff3553b45801",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b89fe85-5be7-4e4e-810b-a6fcae1287a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3975a59d-1213-41f7-ab29-4b13cd883ece"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a8346dc-4d59-420b-9505-6ec43635f926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af6fa1ce-dcb4-4337-ba0a-04e31780a097"
                    }
                  }
                ]
              },
              {
                "id": "1b8a6abb-248a-484e-890a-d79426c74ebf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "342782f7-978c-4e96-af4c-f2afbbfaf17b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d9ffdd6-19b8-49c4-8c5e-fae351e608e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbe3d04f-4f5e-4489-8350-219a8cd4a22e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4a2d267-e8b2-4628-9076-debdc966436f"
                    }
                  }
                ]
              },
              {
                "id": "b8a1488e-65a8-4d7a-803f-00eb2201d8a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1dcb024-0fce-48e9-bd76-fd15b954adb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42e6d846-7c15-4fd6-a51d-e1f5ffc51390"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c72663-9e11-4bfd-9ef0-85989f051130",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "82229def-36ae-4ef1-92ec-d9b3ce0f7c0d"
                    }
                  }
                ]
              },
              {
                "id": "b4e7137d-74dc-4549-9de1-777160490628",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6945b1c-8c9e-4c1a-819d-f0933979deeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35df63b3-eaf2-4e5c-912c-4a184933b053"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b05738e-a363-4591-a099-359e950534f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0d8654b1-2c03-47c0-8c42-9cbb1b0da9bc"
                    }
                  }
                ]
              },
              {
                "id": "a448b631-8f3e-41b5-ab0a-c78069112a0a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f6faf1b-845e-46cc-9aee-f0830bcd11af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d4aa020-9eea-4275-b5e9-b5b302ad29de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14d119a7-d9fe-4ea4-b11a-3f8279ea3641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bdbb736d-57c6-46c4-922f-28f2249cadc1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40fa0b2d-e31b-4c3c-b162-5424252e46d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3242584-f71d-4986-864a-9b36af273242"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "92637aa9-e028-40ab-8110-446f4d263345",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bae970d4-b249-4bc5-a898-da5f3c6fc2d8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "497f3f57-6093-4821-8a48-4af2f2581dfa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "101a6823-0d3e-4dae-b80c-2952ab9a1580"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "248d39fa-733a-4966-8744-f95db17ba2a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0075812f-cc15-4cde-9c72-56ed2f5e267f"
            }
          }
        ]
      },
      {
        "id": "f6e75189-78fb-4379-97f0-2e4a9480136a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "93bfe7ae-c3fe-4100-be59-254690f33588",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c386e58-2d45-47a4-b6b1-3b2291adb0a5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "63abee0f-6863-4eb0-821f-6c83eb9f184a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a1b74f-4c01-43cc-9561-3d12c5155e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4016b86e-9a3b-493b-9f58-0f6214744a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13f8c0d-51fd-4d8e-bc64-4fca9b014a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2221d93-732a-4f2b-90e6-e63571e49878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e4c1cd-cf5c-4c8b-8192-11c65bdb0b86",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1b6fab-dc0d-47c0-8e14-d0d95d79ffee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fd8231-b20c-4b64-85d9-3aac3526d7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7713bf-798a-49be-babb-81b577fa8542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "901dbd45-de64-4c35-8f8e-25754dc0d8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfaca64-d380-4a9e-86c2-42cf37f5daf5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7942e4de-bdb9-4efc-8f74-ebb2434a4ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96275990-c2ac-49dc-b98d-00ac58770388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84de16f-ce26-474a-956e-c3bdd07e236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecd21f8-c9ce-4f03-a3e8-cd1a5d840d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b445be6b-3699-4c7e-87af-e90904e2b641",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c70614e-3141-4236-b75a-19a11ece37f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7080119-3da0-40c0-84c1-510229f10252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7f7a89-9c97-4409-8776-71e9f938de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bf8213-4536-4a83-a706-8172c0bbfda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f652e3-92c7-4bb7-8bdc-ded115b0700c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec1c622-4f6c-4493-880f-66373631d416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b6f1a6-98d1-42b8-9511-c78baf920c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8848c273-7b66-446c-9add-695e7bee8d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b30c9a76-4dcf-4fff-9b69-0e70ad40a157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f57724c-3ca2-45ab-ab30-b63a7054d696",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc86b77b-2565-4035-8718-3e59883ed8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c34404b-2a4b-45bb-a553-9d9639df1c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8487998-3faa-4f5d-9ab0-32416863d4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0fed8df-9459-4408-a43c-e1dedd560dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3282b03-59f0-4cac-b769-764bf0c32815",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10654c43-4a6d-472d-a67b-da3f464f0995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cbb96a-c26a-4d44-9a74-db6a911061d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa54b1f-8094-4141-b418-8c563a63b8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5752cb-1e74-4d3e-838b-50825059bd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badb2f68-ec56-4322-9f7a-c5bcb921e934",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9db480-4708-474c-90dc-92942e8a234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ca01c2-e2c6-4623-b888-fbadfcd84a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e42c821-14ab-4686-a93f-954a3f3ef834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed51438-6db8-4801-be16-36d107cef197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d2db45-96c1-4432-ab7a-1a0f1ebaf8c7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c5c76e-7f63-466b-a95b-b165496c3a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831174ce-07f6-4756-aa6e-6dda778d5ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe6f78-2189-4eb5-bf4e-c2420b728f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1ae9d4-4a98-44a2-af61-1f46d8c3b67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf807ccf-5d64-44cb-850a-d9297beda743",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd05e667-a6c9-4e15-8114-be9145b280a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f59c72-05f4-40fd-a1d2-6911519d69fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948e23c9-d56c-48a2-a231-96e97a3e6d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "639adb48-d295-4428-a837-1454e0ec7639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784bccf3-7718-4506-9339-7aab9cadf9fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fa2a14-6c7e-4117-a23c-ba2b97bb007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6309d920-e885-44ba-9795-a7aec680782e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c0096e-f7aa-4318-9df6-bb9de6876e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fe25e0d3-77de-452c-a6f1-e4855f83fadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f4eeef-6899-4f6e-a9f5-4788c80f7685",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55237cf9-f22a-4ec1-bd51-55fc279ba86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a13b933-5db0-4506-8dc9-e4ace25040b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bda57b2-0a5f-470b-bd4a-989910a26f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23f7cf24-795d-4d55-af7b-07deb81fb918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b095a4-44b7-494f-9f28-5a7848ed85be",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3379207-4a66-445e-b08d-87d998f9075e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b79e92-fa80-49f7-a928-cf6f07934786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552e6e52-4025-45b1-a87a-6864cacf3c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee193fe-dcbe-4192-bf58-e85b22f518cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9131c234-83b1-44bb-97c9-031b59575d86",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd8af16-a134-4ecd-ac6e-20c7c2aa7771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c996b15-74bb-46ba-8a09-b3efa0f57db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee94fed-2630-4d87-a362-bfbcb73d6ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "838ed631-37a4-4bc2-84c6-be5b3fbc0196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb1a802-d757-4aff-8333-8acdebac819f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4d267d-fc5b-428b-8446-a92116ca4060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7d3658-a80f-45a7-b7d0-03daf2fcfb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30a6f46-cb63-4317-b71c-caaec5804d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8576fc-f825-4a68-b82a-3100ff586c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49be107-0bf5-4caa-81dd-2c1fb493448a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ab1671-0c39-4357-bd6d-83e96146903c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97cfd0cc-4db2-4a71-b4cd-a890fdaebc7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c6142f-ec8a-4159-99ed-6f5f3efc8241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1c320c-ac5c-4a5f-a4c4-c97e33377bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c820a883-563b-4e61-9c51-87f1c8cf5af2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c123be-e9c9-4205-89c6-f3c1d6e2db30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40542a34-6f13-4ebc-95eb-32a2b2615ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c0216c-8a91-4fa9-8448-62a7269c416c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7abcc6f-ee57-4edc-8049-7cbc4b5eeed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7527b1-1622-40dd-883e-4e353f9972b9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059f23c5-e870-460e-9e95-d395f30ebac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b43b031-ce89-45d9-b9c7-717760fa24b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c92226-7f43-44ff-9a2c-6161761caf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d65f13c3-573d-4ccb-868e-11b8789abf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2270404d-496d-4e34-b83a-50879a2733cc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826393b3-38d4-4fcf-a04a-c00c05e6e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d2caec-ee65-416f-b2ea-92b6cb6f3f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17ba792-0b4b-41cf-90bd-084e976c5dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "047fb14e-865b-4075-9884-14b1d6577a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f18df5-d631-448f-b663-ea909a75e7e6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9930a4-a463-4ddc-9f99-ad4eb240a688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37829e4a-8049-47e1-a615-00c942d4011a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20665a0a-48a5-4858-be91-331da81922eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef61526-0dbf-4e4b-ae3c-553099feb15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25f4ef3-0226-49be-8a57-c413ffdb268e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a0662e-52e5-446a-993e-e06266acd645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15320b8b-c6f8-404c-896c-ef8565dbf5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ca9dc9-d42d-4585-b25f-9f79fa692091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ee905a-fa5b-40d6-82ca-d8158bb29afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733bae39-0951-4f6f-a179-30e119b6dea3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f355246a-e934-411c-8938-89b904440fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e3e919-51e4-4c0a-944e-20b81e7357ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc646f3d-bee8-4245-adc5-a1ac16e5c65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef60668c-0801-4c51-a28e-cbb1c79caf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc7f436-43de-484b-9599-f510f1c2ef00",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481eb675-1f22-469b-a02d-39cf3d07fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb9ab5e-b8d9-45a0-b53d-4435ab9e499c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fe2334-dd7e-4fd0-8b2d-c00b494b0233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87f6fe34-e7ae-425c-a02b-9015ab9d9db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e161d0f-591d-48dc-8207-723d5904b6e0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3638d9-9d7b-4b5d-985d-b7555069eeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddf8a74-c43e-4d23-8920-be3ef8fa1fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b145cc-b13f-42cf-8c21-8207996989e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff7ae34-77cd-44b7-a7b6-235afb802433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8287ea2b-2fa9-486e-bf9d-1e786dc6a50e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf374dd-f0e1-4576-b56d-1538263aceb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357c0274-ba62-4949-877a-d208e760a52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461777e5-31b9-4551-8a0c-9f849ffadc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf820e9-9cc2-49a3-8cb9-7d93f25705db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c80e78d-1ce7-4c73-8aa8-6c760a586a13",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0239541c-3298-4162-85c0-4c9c21afc6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54b08e7-028e-4792-9ed4-92e2482d896d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb479c71-a315-4a81-ae83-fd99461190e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dae722ce-1c2f-4d33-b284-0f381e8304a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1d8cd0-c8ff-4f55-9ed7-e74aa6c6c826",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd9f68c-dd99-46f3-8afa-5944553bf033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e455ee26-f2a2-43dc-8e7c-7c69d5956265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae5c413-f3df-4ea8-8635-2c5150cfc623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff26226-0a58-4eb8-9ac7-56a679735208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e1658d-0312-4ffa-88ee-00c764aa27da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51068347-bf6c-4255-a27c-30f0f3c18635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371bece4-b45e-4c41-badc-9e0bbb18496d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba47c2b-2691-45cd-ad2f-0e301d8a10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f690e52-b001-4d2b-8a4a-c8aa91052fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613d7874-9717-4a89-bc21-49ea27fa8bd7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70589f35-7219-44a1-a8ee-3fd05c414a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b2bd28-c0ce-4228-8770-75ad75af09d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b80a89-38cb-4739-94cd-8120aabc5a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca5ec54-8c16-4be6-b725-227f1b5aff7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa6f6fb-5912-4e19-a217-d0769e0047a1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b6c06d-310c-40d0-b85b-5d5056b07d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa2b3e9-338c-42fb-9c78-b4a23b096837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730249a3-e9a1-4198-a889-b208cd226661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "146118a4-9fff-422c-a8a0-1c07d9200ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abdfc41-2456-47f8-8677-9bc1395f095f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753087a2-7900-4972-b104-312fc990faf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bd91ad-77a0-41e9-b13d-1d921e857a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa16db33-4a75-487f-b56a-1fd41467839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c13216-f9ed-4229-a8b4-bcd275f1d8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fba3386-b24f-415f-828d-a676046e2558",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1f7c71-db3c-45ee-866c-31b8d07d500e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9654e1d8-1afa-4ec9-afe6-63a474b12ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740d7aca-1345-48ee-b9ac-2241ab98f60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5be11963-1d55-4261-9607-54cbf2f0b124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868d8bb1-2335-4569-9830-c9038120e2e4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93034324-c93e-4c1e-8bf4-449d311672e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbb58bf-a070-469e-9fa7-500e88b75b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80be63c-771f-401d-85c4-dbaeb5f297f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e547b4a-18d2-4989-b864-509a75f1a284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1af474-efe7-48bb-9d02-990ec8eee39a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651631e4-b9bd-454f-9ea8-2f38e9179f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd84fab5-9f85-4ee9-984f-94d787bca85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebddd2e0-bf34-4290-8f44-61932f2a6239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8bd893-b0fd-4382-9b9e-a12a15af29bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4440b8e0-095f-4e5e-b31a-a08d22ec8507",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25042d15-aa74-4c1e-b315-5ab20708fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab128ca5-a0b8-4478-888a-1f8b56631e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f4aea4-a0cd-44d5-8cde-31835362ac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28bbe7e9-6b24-4340-ae8b-980069769545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce41d5d0-0c50-4e7d-8516-298a45ef885f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ca95a4-4033-485c-a2d5-2b2b5e7320fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3da2a69-be8c-458b-94e8-ef5d15901711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70cd0bf-6ae7-4d3a-84d8-32ad651293bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a835758-ec9e-4037-a024-8de30beb0505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fe0e3c-4729-4fa3-aa96-c3a1ada8749c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb25dd-4715-45c3-ac2e-0facf2e5de1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc606e04-195d-4dcf-b067-33483264af88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f5c379-0d77-43cf-99a8-156acf8de423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec0b403-0f4f-468b-8d92-69d4ab590970"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6e40cb1-e6c6-4a1c-9ba2-55403761f679",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea69713e-ffd9-46ef-adcd-576f795e5872",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d27cac-8391-4682-8d4d-ce5efc71bfbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "db8f66cc-8658-4d92-93c5-395ab348af15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491fac97-6ba2-4963-917f-aea6540c7224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26938357-17c4-4ccc-90d9-838acc98067e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39c196fa-ea92-4fb2-a14e-5eb2ee97efb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7b7ed15-3d0b-45d1-8d86-0daff2fb7aa8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4fe276d-5c67-47b3-8e06-3e73d9b6cf55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed057371-4a52-4b59-b29c-f8c98ea0b404"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac527eae-a252-43d6-8da1-e44d7229c50d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ae550b5-a1c1-4b79-a1d0-fbb5cf90d4e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a69d7476-fc67-462f-b55b-e894de3e5e69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82c5a413-2a67-473f-9b5d-e335768162b0"
            }
          }
        ]
      },
      {
        "id": "2d324526-7f60-41bf-8652-c62fd2725242",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b09065c8-ce03-4e3b-bd75-51c58dc5f008",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f2316de-a864-4fdf-ab25-c59530f9ac83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "327b5233-d698-429c-95f3-bdb43959e96b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45761f5-4c63-4454-a66c-19fce679d112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a426a1d7-12af-49e0-930b-c17d45ba1621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee48eb0-e174-4821-86d7-eb815e1ba13e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80443bb3-1804-4a6b-8dcc-388eaadd3934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195fbfb7-e34f-4d4a-9836-0f0ad3dfc96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43de6023-03d5-4308-a640-f273032d92a6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7c73dc-bdcf-440d-8891-01e7d0a3c10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bc6d39-3a60-485e-a091-fc5c5a9bf6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd035ca-0706-4b0f-9d63-4c0bcbb42144",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b1c8a1-870e-496e-963b-c8e82f487dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5ac354-84d3-4e85-bcd0-39886f3b35eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dde88e4-cda5-4c41-bda4-0a03e114eb6b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a505d5a-b5c2-4600-86ec-fd1202bcd9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fda26f-f97e-45e6-98a8-03858c0b7b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70766aa0-8311-464b-ac5e-eb4e01c086f7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5725f369-3cbd-4dd9-b353-02b7c3a6b30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d32b502-1769-4278-8fff-d408b4070597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db198154-8612-40a6-9956-0263ddb92060",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd637364-43cd-438e-813a-55089a54087a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5366acf2-161c-4846-80cc-b2db7001aea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eb7157-d1a5-46d9-9911-47990c75d8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b6cbf3-869c-4a34-b460-23cbaaa9e7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0832f634-e0b8-4ffe-89fc-5c2657aa4fa8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0816b884-923b-4f53-b1fc-dfd4c3942e72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c007a57d-20ac-4df6-a6b1-bf3254cf2f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cfa737-a8d2-4b86-af50-7ca098432a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008f1bb9-096c-4b20-8eb2-afa0f64e6cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2899a7bc-63a3-48d1-86a5-780fd68ee42d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22602bba-e5b5-40ed-855d-cf5ac9132878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aef672f5-2791-4986-a7ad-d257d25a91f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cad9741-0d84-4b13-b1f8-7e06c89b9c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee8d335-3b5e-4b8e-a32b-2f6d4ab390fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f654db5c-6aa9-47e1-a786-eee6b30e9ee0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163c1d1e-6bef-4139-a3c5-2a04c04967f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "161e1343-86e3-45a3-9c6d-92a7066e4a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95661bf5-6e4f-4d0d-a439-e48734ceb2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9175fe4f-ec9b-4b42-9199-af45b78fb484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a832508-5ced-419b-8604-1aec89274c47",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbb93b2-bdd5-4701-9e13-a61caff2184f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d58f616-b7aa-4071-9645-1b17996ff620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d9af79-4e7e-4036-a96d-81886331dae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d56b95-7971-4a2f-9476-50e754bd346b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfb5730-e751-4f06-b7c1-76630f61606c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b459170-8e50-430d-ab46-874cc7a6fc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce59f09-3fd5-48c0-92f5-134c0f930753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490339e0-bec8-45e1-af58-f8bb243385e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437afd83-3998-48c4-b6ea-5376d2c6f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3eb665-0a09-4954-b1fe-2d516fd5702a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f5e13c-1e4a-4966-b69d-4f78468797de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d52f534-3fd9-4d12-b2a2-d4e08cdd03a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293816a3-bbc0-48dc-8f10-7ae7db640361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e175c7a9-5060-454d-b98a-5ec3e9e3c91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed756a6-28a7-4f21-9962-347fcad0f0d4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a1cfdf-b7b9-4fa5-9cbf-e0c53e326eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f98f550-fcb6-4615-9135-0c872149681f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33b0c25-3305-4742-81da-e87bf5ddd545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01479cb-1c78-4b31-a42b-cf841c1c010f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1167ac-e1d4-431e-94fd-3ce571608b2a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84654464-43e2-4f42-b0f9-6b9e8ed404b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa5af749-fd21-49be-8848-6081eaf24b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d6ea36-756c-47b3-a5ed-23638087de87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a27e1a-1c93-43b4-8048-be050df338bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a568ed4b-b5f7-4d53-9786-6249e0cfb8dc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d7e95e-73cd-4acc-8019-66f56e5d4a70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f673b8-9001-413d-bc87-28c5c521627e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a292bd-c0a4-403e-b883-666c61fb7398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d82a2a4-d91a-4732-b134-98bc5b58a92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3892d0-16e0-4285-896b-6d65e198a2c1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696c5705-35cf-4b5b-8d33-4c061da2523a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fabd1c8a-37ed-4597-b666-06f15ede8050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd87535-1fef-4dbf-ae73-9f5262ec544f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d6a225-d695-483c-ab2f-5c251aa4d29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ebedcf-cce0-4924-b7af-694ec0726c4d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2512c65b-f0ba-4ac4-b518-e5b181e2361e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d21720-0baa-4d36-b64d-fcf7e473e2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e7c166-f153-45f3-acd2-af7b7ba45863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cece0f0e-b606-4642-807e-840e1247e53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a2ea3c-916b-40f3-8714-1a35faebda12",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15d9f09-bcb9-427e-b743-a65e7b7a93b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7d5507-89c0-4679-93f1-754c0ec7c722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78846b72-ebc0-4761-a132-d63119eceb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4b590c-18ac-4dee-ae4c-b6c6c9978ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a3ce72-b50e-415e-a889-43c3a31bacb5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce2ca17-835c-40e6-a06d-ae3446f5e2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca5bb83-d334-45e7-9020-3c76f7b5ec51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654a698f-578f-41d4-894d-0f9051ee1e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801fa291-1aaf-4f18-9e77-36124558faa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbb3dfd-1228-47c4-ac82-f697cd29fd1c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5977a36-0152-4771-9f99-abf3375e34c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057fca13-c752-47ef-a45b-d667341a1aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acceac20-1209-4186-8108-80b2ec67ae15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70d98fa-15f9-4862-9755-0cbfff723a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52627101-abe7-4939-b9b4-cd687c761883",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4b3dbc-27fe-4c98-9de3-db2cf33cb4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5576c06-021d-40af-8ced-e48a21198b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879b7ae8-0aaf-474e-9813-e7548db22f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45314d18-7c05-4837-b493-5b19a499a07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652403f7-c66d-47f6-84f4-0a306a032397",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b2aa36-d507-4cfd-8353-9a49004d6e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dea3935-829e-470e-b736-c884e2ff960e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d9719-f0db-4914-a720-4bef606cd8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e43b3cb-e1db-4c7d-ad44-2b63a8181068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87565e7b-6701-4509-a90a-d80fdaff14e5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97d1d3d-27c5-4250-b2cd-509de3f14ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ebbd183-d64c-439c-8fdd-dbd4effa5ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc35d4f-ea88-4602-89b4-080cdedd5f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8914932-bb01-4571-9f1c-3895da5e2f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46fb948-5ae4-4fdd-bbf6-e858ce8d686e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373e73b0-e271-4a33-8789-69e73f32f213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb85ae19-90e6-40c8-a14e-6c8bdb09be87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba702a8e-fbab-4a3c-b194-1d2a37ec2f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618d6c4c-32b3-4900-bf60-a90299b976fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c579779e-dbc7-41bf-be9c-07cd2540b142",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefc6d16-12ca-4e04-8012-a65431512bc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "690a5c6b-89f3-47d7-8ed8-b36922f6a3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bdbc6a-b233-429b-82e7-aacff453cae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd42096-ec1c-42de-b137-610eab496c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1b18fe-f765-4170-9d0b-6307284e064f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d30aaa-872a-4e5c-a656-12b6629bf51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93105fe8-8c77-4552-9c17-f71bca182542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba239b7b-876a-456d-9ea7-49f4c79bd902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974cdcfc-35ca-4174-922e-972264ab12eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226d8fd1-a5da-4a12-816d-002427cd3c12",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6ab69-debb-4a3f-ad0d-613ac9177255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fde88e-b516-458b-a15f-5b1fd3723268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddbb46d-9c58-4771-a4aa-54737521446a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b75bdc3-b5bf-4063-b276-68258b6863df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bd8bcc-bbec-4eee-a6c7-1d2a617be98a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd31e2f6-5181-4a22-a14e-8cc864c3bfa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aec667f-b520-499e-bc83-2fa783a67fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b71f90-c3b0-43c8-99ce-0cb74abdcdb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed2f5fb-7a43-4c6b-bdd2-1a6754451f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaf9ceb-0957-4d4a-b1a9-28327384f132",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cb6e84-0200-4614-9f9b-2e43292a3a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca1c6542-5153-4a1b-8e52-7c9575481927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7d7b96-9219-45f8-9a45-edd1031143c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134963cd-a243-4262-a0bb-13a2933943d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287e7fa9-e78f-486e-968f-af016df29c56",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a1d223-d6e9-4409-94d6-cc46351fda16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edda6b25-cb98-4f35-8df5-e944efb77521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51edaa27-b575-408c-a4e1-1365cc6ba17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6fbcbd-d58e-445c-bd75-12c9154d92e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2170bcac-7903-43fe-bd99-36eacfa8202c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db86bf25-98dc-4c0b-b6c2-4414a363f16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e771fd-269c-44ad-bd2a-520059c187b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f96d87b-760b-4017-bedc-6713b469f29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8f902c-bba5-40af-9c20-24bcf13996a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311db888-ec83-4de4-a07e-5fe695ae1ae0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea952211-4870-4ac5-97d4-ea3207712c1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4341c943-acc9-476a-8678-842fbeb3647d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01779c8e-c883-4b81-9b82-b48eacc72540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f25b269-9a98-432f-9744-6709beb2c8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f0cbed-58c4-425a-8f59-c80bfe75afea",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27ecac1-60fb-4c92-a653-6bcb39b5d747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ea02d1-23ac-4e85-ad0f-802b4f6d0f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3175c20b-3c39-4e83-90b7-a016d16c9ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cb74b9-c933-4621-931c-a8f175108bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee7db9c-1aed-469b-8fcd-267a3ee9c302",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55427b6-f86b-49b3-af7f-0978815a238f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f53f03-8b28-4bf9-b30b-0a334d5654d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8372cb9-4c0a-43d8-8041-86c95a411a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793ec738-5d06-4b0a-b9d4-0c0a1e7a46d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3317a16b-842c-488c-81a2-82886f36df59",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c9e0f6-1df6-4ef7-b41b-3325f630c7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92563e4d-7a3e-4ba6-9275-6f10a243c096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a8066-5487-4982-bd09-a6558ff5c839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14e6e8c-07e9-4dab-9ab5-515e41fd3c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0058e1-d181-415c-b934-6cafe910f0bf",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163e9d39-173c-4923-aa84-0b7a8728c388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159523f1-decc-4984-ae6c-46f2dd59feb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0591533c-da3b-412d-a056-6137c96e294a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86a3924-b739-4308-81d3-099521eac65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def01fe8-d951-473f-a17c-00f145da447c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fea7e0b-c103-468d-bbc3-33f338e8f4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09612716-ebe8-4c24-b5b3-9f4cef5ee23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2051cdb2-8fc0-4c50-92cb-4fe0dbf68f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f21fe50-f14b-4d24-acc0-ea6eca5a5bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09335875-68d6-46c3-8c62-307944781f73",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7e8906-8640-4752-8185-6e7ab89fd147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bd347c-3c08-4618-8f43-d30d92905e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca7eb2b-9149-4ca1-9297-4124267cf712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5e4cbb-0c2b-4aa7-9e41-bbd75bcca11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc5fd59-2b9f-43bd-85f4-2d6772a228cf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f514911b-c606-48ea-83da-4e6f9847138c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0c61d1-48bd-4801-b285-6fd94387def0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13762184-3bd6-4861-937b-9af1c36896c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0ab85b-7c5d-4780-879c-f46ee47c5738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3686c00e-1395-4c03-9fcb-5754888ebe66",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0a4e64-b49e-4062-ab8f-5b932d0102ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fe206d-b6a6-458f-90f9-f001d43c0e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd3949-d935-4a07-b5a2-27a3d4ec1ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c085b69-45e1-43de-815b-65024e4d9de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3391f0fa-1dd4-44b3-9bd8-285a71fa82aa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb8ffa1-dfef-452f-aa86-4228331b7c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecd4241-d1c1-4ac0-94a1-331b7b65dacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa3cb10-64c4-490e-a98c-5af69e4cdbb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1784c2-2f3c-4e80-b4b9-b8c8d9c57b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd0aa54-fd57-4c0f-942a-7f0b8fd88466",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85319789-0ea4-4803-9ca5-6776264047e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b0b4c4-8fa6-4db5-97f9-14fd30687300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5d0324-7232-49e9-9023-8bc755f9fd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522375b7-492a-4629-9581-1daedc262eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d472591d-7a30-4393-9bff-6842b68a392b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92757fe7-dd1b-47d3-bf1d-78fa5033d27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeaf4beb-f68c-4361-bacc-26caf8399987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bace5ce-da64-45d7-b303-00245472b454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14cfdfa0-e0b9-4c33-afd7-f01aa962e9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f38c9a4-d0f2-4bfe-85e6-4a84d571895e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcb827f-34e8-422c-aa9a-693f77086749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547b4b41-1d5c-4d84-a831-7ffb61cbe41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "026e0f6b-7a18-4b5b-a77c-87ff0b6a3c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c22f95d-15b2-4819-9585-bbea229f0fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac867a88-0f86-4025-bde7-5808098cc241",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968b20d8-ed8e-49f8-a4a3-b475f0f03233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8068689-eab3-456b-9232-8e14981815b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d1d742-8921-427a-9627-15c28d191410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a244f7f-a1b0-401a-bb09-9de96b96ec8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85392686-d914-41c6-a962-3f2344b99deb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9492d31-6256-4690-889c-cdb5bcf11b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cb92d6-481a-4e7e-bcd6-04c92ffb7c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16082e05-bb00-476f-a48c-ffcdee3d1b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7082b2ff-c81f-4599-bed4-1ccac1da0b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3132c69-76fd-4ffa-b32d-b1c152f0d63f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8356f9e8-52e8-465d-8a4d-d27501391caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30545fdf-34a3-481a-9b46-0b5a629a5d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975f48ec-d009-46da-a9a4-99fddcefbdd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f2d2de-0072-464d-a86a-c120aef58222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973d755a-8859-4ad1-8777-b1199da82a94",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c35fdea-0b7a-40d4-9fec-89019bcb26ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a596d57-ef0f-4e25-b49f-115242eb7e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4d6818-9a73-4a4e-81fd-094b98aa92ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c16908-ec96-49f8-93bd-9acba26f9d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6010e23d-e9a0-4189-b6ca-4b40088ddcb1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e280a12-ad47-4463-b002-c3998dca1c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6403d2-8ad4-433b-a69c-ed531c371ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a993f452-eb46-46a6-b055-aae5f62e25b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193febc9-c6d2-4517-b03c-1dc2a53768e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80fffca-0ace-4b57-b61a-701900853235",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f9f9fe-6c9b-4d7e-98fd-3012dd6ae8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21fcf14-431e-44cd-902c-de91cfe9fca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c52ca9-8036-4a73-90ab-a8be8d6fff06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65c3eb8-b945-4ec9-8258-902a58e3326a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45441a4f-a19e-40ab-b60d-df53fae7a78f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d791784b-e338-4aea-8441-53245f7c106f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626f71cd-83de-4d74-a731-59fc732aff5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b1be5e-d144-4c4a-a64d-ba444d813863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9a6704-de91-453c-a619-567b8827cf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e670049f-87b9-48b2-a69e-e0ba63db4128",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce614b27-215a-44fe-ab29-083231601b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91116411-295b-42bb-ba40-5fe1fa6a9afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2525917f-ec1f-41cb-8d13-721038cba232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c58bdc8-e14c-4e6f-9ad4-87112676a1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4922e9e-b0bf-4469-bffb-7cea464cc40f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a55e51c-acbf-4274-bcbb-7cde54815e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba4ee3e-419d-496a-a860-3cb4384ab7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0a4ba4-cd93-484f-b534-aa6fbf802180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff7bab3-8717-447a-b5c5-41842206d661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584420d6-9015-4550-a7b0-c4613c8fa779",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60dd4b1-dc13-4bc3-92d0-16cddeec3323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349eb916-e473-4738-bd9d-9b4d4fb22290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2446a67-e92b-4813-9cda-ec9c78f6646e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bc3c46-6ee4-4cfa-b406-7e2d2a91bfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7700fd8-c71c-4d81-8b8e-c603f18a1445",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a57577-a475-4d05-9971-f03a704a2942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008cd621-8ce1-490a-84ee-60b676679c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad3c68f-7029-4c68-bb25-f77e952b2c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a9c8c1-65a4-49e9-ab38-25e8eabe6aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98aef51-8ad6-443e-8fd2-eedbe24a7cde",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4d12e6-59db-4989-be85-df164afca9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cfc30f-f942-4e58-b66a-9f2bf21b2820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8e7a89-1f1c-4e63-8dd7-09c863cd9f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb07446a-9373-4d45-a1da-23f7def426ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd277c41-3730-48bf-b4b1-3017b038e4aa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8a109-cacf-4b2e-81f8-58a2e54bd812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00053fed-858f-4712-9945-8dfe873c7122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba680586-5bad-4523-a7f3-6f26f2cbe15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b14fea-3ddf-4ae0-96f0-7a2fc35d7744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4c9356-4baf-499d-b69e-9dcb040a21df",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1e4c03-ee97-4007-89f8-bb2a32eef53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eabc8c2-f203-41b2-ba03-03db554729fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe65312f-2d5e-4746-990b-3b0fc6755ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3469e2ac-8c43-47f1-96ba-a4cca77ede66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37964674-9914-4d01-9bd4-888c59630ec7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8f0391-b156-4df6-b6af-a896665fd642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1519015-8c83-4fdf-ab0e-854c7c8b9af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be492ca0-5b69-48cf-9870-6b45e2345d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244c4eb6-231c-47d6-89ef-039995527076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21763c3-da8b-4a9c-a296-a0ffe7eb0a85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557fbf35-0aa4-42ec-a85c-50326c0b6c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2337ddce-f9bf-4f27-b71c-169a9f7f7ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a46fe92-70f6-4db9-8442-3807dc57136d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fbf77a-52a3-4b7b-86e3-d99511f30a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9717ba3b-93e8-4691-8e50-3c74457a388f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc769318-6624-4722-ad1a-1242badbe5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b42055-3dfd-48b0-ad18-d1a3c72ae96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beed96c0-261a-43ec-b05c-1691827c8ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9493a3-96c5-46d9-bae6-072afca0e130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575fe55c-3f89-4515-b82b-9bd6c7aae7ac",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec10a61-bc4c-482a-8721-e030b334b5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce480329-eb3e-4038-ae7a-631ed2ade939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3595937f-1883-43b5-a525-e4e502ec7145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7227f0-bcc8-469a-aa28-98ec00fbfd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f892f89-43ca-4f36-8444-72218c0665cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a57027b-cb48-4993-90a9-d870df8761f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bf76d9b-839d-48c0-add5-b2b6f8fbc108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3329aef-f037-4846-81c2-6e274a3b3205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96404931-1f36-429e-8f09-148e51cbd9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd9dc2f-f906-4c7f-a94e-f33f56f62c46",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ff6f61-8dc1-47ab-a1bb-af482272ac05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2222f530-cddf-45d2-b499-74ff3baa85c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f24a86a-a1a4-4cc2-a3a0-5b460e048c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7b85cd-6945-41a6-a1a0-95bdeaaea959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e2d346-48f0-4d59-a4c6-21e62220e602",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab3e43e-ddf3-499a-b729-467844bce965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "097eee0b-fc7e-433d-aa79-43878de67365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28aacb57-909a-4d0f-b54c-f1455437ce61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ce6340-ad4c-4b8e-accb-0d0bd3b4a1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a82d51e-2730-4d5a-a51f-8562b69cb3ae",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36fc99a-7262-4bd8-9042-4a23ac9ca1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a7a8e9-237c-4191-a1ad-72df9f82d482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e98704-78dd-4630-8f7f-ae9fde9e0379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cddf9522-52f0-4f71-96b4-3c3e6999c4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7535d9e1-c562-4833-8a8d-a399e2eba933",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f87589e-711b-4aa6-8c12-044f46dc555b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f562826-f275-4384-9aae-57ec9db43df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726f55cf-17ef-430e-ac88-9eba3eb2846c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd96a3ef-3669-4263-baa8-598f777cdd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6093ae88-2c72-4731-9b90-dd08188663b8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3772e9-d0a2-4533-b0fd-14f1ca122a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "725c1c57-f9b0-4800-b6b5-b721ce3768be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c670de7-1c79-459d-8105-faf529081b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641869e7-fae6-4324-850e-277d882bdab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede13fca-565d-468c-ae71-1d094eaa4e2c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a475059-b2d9-46b0-ae33-3be567103e6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e36d59-cf97-4806-b69e-f850e31b820a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a796850-3652-4881-a5b6-b4c25de8bb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9fe7a3-73c2-4658-a2a3-44f5adcc1393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af4613d-8fa0-4f22-b85f-50684ce2602c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ed64f1-c64c-4256-88c7-d7e69571240f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "275d610c-21bb-4b0c-85d1-47b224a2b0ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0bb37c-2514-4405-9ede-4eecc2535548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f375e25-bf9c-4c15-a949-10765221e88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60010fb5-9f9d-4b51-8ecf-f4babbe67200",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bded553a-c812-48f4-9585-b86c8b5032d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764ec1a9-b6c2-4ab6-a78c-88a3f4c9960e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a8c84e-60eb-425d-9c8e-af7f04a00e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8423d0e6-5153-45af-99c5-5696e5fe00bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ea27e1-ad72-4d90-87ef-a575f4423137",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44403b77-7823-4149-92d8-89409f98bedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be97104-ee04-4571-92c4-af47726dc025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a36c33-df37-489a-b9f1-f7d33cbf8321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ab9620-ca39-4514-a39f-20c02b69a339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcde725f-9010-4689-8730-107f1945b6d2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e1768f-fc1d-4c05-b9b0-1f8e422cdc49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "579d3b44-d7ec-4172-8a62-5099de0f8ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b17a029-3015-401e-bbd2-4eea4e1f0a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8988da8-c4c6-470b-9dfc-5e27bfa84d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7779debf-a231-40fc-9659-74ffc29e9d8c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bfef68-bc63-4479-a273-28e2f98a73f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef461e5-2d1e-47c7-9f40-6998381f8edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2780ee48-082d-45a4-86e2-f40bcfeef232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa6e5f2-5f89-451e-a9c9-6209b459df85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657591ec-6249-4ca7-8207-12d3c3743bfa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b90bc2-7a45-4845-acf3-e69493cc0835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b75f1f90-f692-49d0-86a8-7c4a1f2288b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0520d627-153e-43bd-a29c-7443795d00b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15446728-06f6-492e-bd7a-907a0e252356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e806f081-7fb8-459e-81ef-d6de89cd108d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70c8367-227b-4b5a-bcbb-e936ee9a1b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "885fb5e0-4fa7-4b3a-b9bd-3961926ed145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d99fcab-f526-491c-b8b8-c8a898624708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbea982b-2d29-491a-9792-cfc40b7d38ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87475305-142d-4193-bca8-c5329f331cc5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234c2a07-837c-494f-8c89-396789231087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bfe2574-26ce-4573-9c61-b46afa5dcedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2b487d-c6c0-47fa-b6d5-e4e574ea0647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74190cc-2c0e-4260-ba5e-7a5559692f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c309b6-88c5-4c14-bacc-cd22cbd74902",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727474a2-a896-4a53-b40f-183be9cb923d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2384223e-d3e3-40d1-a4c8-40faccb38537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec6dfdd-4524-4433-be0c-a4cecd67fe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e98d2bb-d7e1-4fe8-aa2c-068151bedf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671123cc-12ef-4747-bef4-2be39efd0f32",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bba2e4b-3cc5-4e5d-91d6-32268efae73a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2028f609-e016-44d4-840d-680872ecd711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f602a9f-e9af-499b-86da-6ab9a81bf93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b5dd71-b121-44aa-b29e-880abbbf0a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c2b011-a327-423c-9a8f-768c9228a903",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8868e59-bd2f-4ade-9a94-06ffee08222c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "227fc117-2966-4c78-88de-347391ead92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dfdc3e-c526-4ccb-91d7-a1ecbe3aff02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49b9675-22b5-45d1-9bfc-522e40e92279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71dc0c1-6571-4cde-bc33-94252f6feb5a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065b05ea-30a7-44f0-a1ea-56ab35e5460f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18c514a-7e6b-49f2-967c-8d9b18c629c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0eb244-ca29-41aa-80f8-bf6cc1e8c3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dd4120-237a-4f1d-b0d6-48fbe8748a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cb1571-476e-479c-82e5-2679d4e60087",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acb44bb-c57b-4f4f-a873-c837bfd2d914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c75bb16-69ee-41b4-8447-02db202fc16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79f13f6-e116-404c-a22e-4ec156bc9f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3354d5-8c5c-4bf8-a5cb-ce4b208d8ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edefa18-3983-45b2-ade0-e58d14485241",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57b2449-8605-4862-924b-69440bdc512c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "933ddeca-48bd-46cf-8206-d99039bcb628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77d7ab-6211-430d-8b84-226310e1474b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3e0766-8019-49f0-a907-2dc7512ee896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c81bb5-c534-4c46-82d5-a4d754db6fb4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51191dbe-4092-4de3-a465-2a23cbfa306b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023bb441-2686-4cc8-8d8e-6083cb9babe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bd033b-45b6-423e-89a3-5727cab0f4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca8d20c-91ce-4ddf-934b-8471ad77ad8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5275e54a-f085-4716-bcae-74f4b0db65cb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f2f5de-508d-4b6a-93f7-706d854bfb28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4502a06-506f-4ff6-a1c0-7281284c5a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a169220-36d4-45e8-8ef5-150c75ded378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e5de43-0728-46e0-b84e-ec86d843022f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4278018f-3493-44d0-95a3-b1f29cf95109",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14887e9-0bd4-43d5-9d43-df7892d19ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43f8fe6-9745-445b-9cec-6fc1ee981585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7761e5db-0551-48ca-a6e3-18cfef0621a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345891fc-b3ee-453a-9055-96ce745f841c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6b7935-b7dd-4e0d-85c2-37f130c2ece2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f9f1f4-57fd-47fb-b9d9-31a25e39e52e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "440a4076-981a-4e11-acf0-226a20c15a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd4a28c-79f5-45e5-920a-2f4a2bb2c93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d2cd26-d52f-4986-b081-6dde26d21054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203ae101-57a2-4954-a048-cb3598c7a33f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daf9519-fe97-42da-8d6f-71342aec279c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca6cf7c-c685-49bf-a73c-88c7cdac11e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acb459a-3db0-4480-807b-2172189bfcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4150872c-c04b-41cf-8c0e-6f4db389d43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad5b283-0405-4487-8b20-7c155e60421a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa080e9-5508-434b-a2ea-5ded786ab642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "637d743c-e746-4506-911f-60dac3cfb676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc15eb1d-46cb-454f-806c-250b47f7439c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f703dbe-0c0a-4080-b912-f9da4b0e8ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e903e6-b00f-4a3e-97f6-99964f38dd3f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3338e7-0fb8-4e25-b01e-4045632b621f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7b4154-4a77-476d-81c5-b231666aa664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738bfcf6-cb07-4c03-89d9-59c3aaf1f6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d68a15a-2df7-4f7a-966b-abecfab56318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42df4230-e642-401b-89b5-a394147c77f7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c093b8-f954-4077-acc5-908148ff2d85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e0465c-f378-4dfd-ad63-a436581c054c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4d69a6-a628-40b7-8e9f-a6d5d8e0d5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f161ae7a-7cf5-49a4-b04b-6a86f838c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db18fcf-6514-4650-95cd-97d87e72f611",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934236b0-127f-4f13-ab0a-bae7e5bbb0f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dab3894-91ba-4607-b8af-a57c080aeaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e5d14b-70b0-4f97-a27e-5946297f8fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f775dc-5a94-4282-955b-f059347d4202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f626498-5717-4450-8437-9bbef5b8bbed",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3cd2e0-3bba-4e56-a48a-2b4972eb04df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1af3132-53f1-4a25-b714-4307e56a7340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05a09a5-b91a-4db8-ac61-dc335ac29bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ddf9c1-1826-4087-a0d8-0595bf0c1322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40863ccd-ca22-44dd-b8b8-abc2406cb182",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfe46fa-a631-45f9-99c2-c4905c666aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5f5f18-2107-40bf-be6f-d7dad37c0618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2864b8bb-30d8-46ee-a571-ac924307d5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4ea5e5-c389-4733-bff7-7df1af144ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a22061-33ac-40d5-a853-6f93ebdb4d9c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaab7b3-6529-4148-ad95-7d8b9731067c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c46a2da-eb0b-4152-b28d-a918bf6a4c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef6a11c-bd22-42bb-b80f-8144985c6ae4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b2efb4-7bc8-4430-af64-0fbc5dd06847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeb6483-5c98-444e-90b3-aa6dcb234dfb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c51553-b5e4-4e8b-b42a-a5c08f1aac73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8703e5ac-05bc-44e5-9c75-b791a7bc1ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94300fd0-d5c3-4cf3-95d7-bfc622b8857f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27f20e1-ec5b-4a89-8c52-5a3ef16cc384"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "507a4d2b-a2df-4097-a569-17bf227fcbd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bd822ae-23d8-4ee0-8871-1d8d7d1c6cd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47150c61-9db1-4400-86e7-2e65c7e24088",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c86861e7-0137-4428-99a1-440cfb1c82ff"
                    }
                  }
                ]
              },
              {
                "id": "111dd7bf-5669-4415-9c49-8cb3184f8dda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "355de10b-1ce6-45d2-a1c7-76b3579c6449",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1a2523-5007-445c-9612-15c352634cfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c48a7c2e-4f1d-46de-83dd-89ef551e6113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32972597-244c-4210-b24d-02008b875b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5efdff4f-8e87-4d43-83b2-c975d327d47b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01003512-f7f2-4437-8225-72dd77985901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34e11d3f-4592-4b51-ba13-bf36b2b6bc19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bdfbb11-c8b8-4f9d-87fa-7339a4f4065d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b920962-78ba-4a22-b7e6-2dc6848e0f0b"
                    }
                  }
                ]
              },
              {
                "id": "bac7141c-b998-45de-8c00-c073ebfda99a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4907562-0640-4a94-bac3-f631c90b675e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ca3a30-d17b-4f7c-8aa4-4a8d2413b50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3291ac29-862d-454b-a630-ea62d94d1525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36487805-aed8-49c6-a783-a8d277252b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d823b342-0ea7-4175-8bf3-a9604d7e7250"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0de90808-e710-4576-8baf-85b366c769d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca423dde-fc51-486e-811a-24a8db28bfea",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b2a4122-9174-413c-aa16-5092b355dbb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "be0f028c-1c9f-4c0e-bbe8-ba7fe6193b11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "362cdc91-4205-4892-908c-2a908a609e4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da7c6718-fb69-4974-a728-802828c4a85c"
                    }
                  }
                ]
              },
              {
                "id": "7f089df4-69af-4934-bdc8-43f3ff7c2f96",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a4e9fb6-8175-42e8-95c2-68fab77374a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83342f2f-8f00-4d3c-a4bb-48d41358fa3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60dfe80c-f77b-4c4c-aab6-a1e60fdbcf3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca6c01e2-c2ea-45fb-a5d4-714b35687449"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "384cd9c9-8b03-48c2-b497-5c4b289e9a37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6516c4bc-0376-4202-99ef-e97ba91b75ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d338fbf1-cf48-46ec-ae6c-254b62a0039d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ff62db0-3846-4a46-9895-62b2fc750940"
            }
          }
        ]
      },
      {
        "id": "0c77dbb0-1349-4f3c-8898-fd80c524d21b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d130aa86-1848-47ec-aa3b-a467bd491e4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13a08398-9854-4063-978c-567bb6f9bf3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aaab478a-2cdd-4095-ac36-5ac305e15239",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd3e34e-7034-4636-b1f3-9360de084c8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "96626ae8-42e7-4af8-abe6-7d314ad21e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83d4ac-cdcd-433e-b109-5f2a4bc12ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dd658d8-6481-4017-97a4-89548c8ed8a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0c2d8e9-7f19-4cc2-96af-dd60140c97d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54d39c22-8b00-4bcd-b6e0-3b75bf902593"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3397c5db-bc79-4fb6-92f1-31da2b5a0904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8d57008-68d3-4b3a-91e7-2f42b846c964"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "262e0c08-00f8-4af4-af13-4db883adfd73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "41a45f86-cf7a-4b70-98b2-80f2bf968ace"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "882f7495-d120-43b7-8212-bb06b3141f74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44a028ab-11d1-460a-8576-77d6892bb37b"
            }
          }
        ]
      },
      {
        "id": "d86479a4-a8aa-4eff-9274-4c20f535ec86",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "66e8a3cf-d5ba-4934-8b89-255a468636f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62378c56-2426-448c-b243-98fff56f6b71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7796ef05-8a5f-4bb3-a0d1-ef1e2d01df8c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2255024f-e3cb-49e1-aa6e-0fe565901779",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa53f49f-cdfc-4ed6-b597-f16b4b9ac8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4653e359-ba82-419c-8511-33475af09f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e90ba54-e782-44bc-86a8-51ea38aa6176"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82b19e8c-ed69-41bc-aac1-e5147e4c07fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e892bdc0-ac8c-44d1-887c-8c050d7f2712"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2355bb93-0fb1-4a3e-b2d7-b09502f0e746",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "707f5552-e6c0-4d29-984d-fa31113f61ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3088c71-cd9f-494f-a91c-d0adc4c39f34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa2a548e-c1fa-4deb-86f2-2b7394e3ed13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61e0d5fc-559c-49bd-9e35-905739e91f2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af183261-b00d-4d89-930a-41dfe7ca0ac9"
            }
          }
        ]
      },
      {
        "id": "680bddff-d45e-4346-94cd-ad444d936812",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e10ae6c7-b944-453d-96da-ce28f619036b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ace98578-8b54-4662-baf8-286a8495b7df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f26be746-785e-4664-bf42-2305f3f8e05c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f094ab24-ea05-49fa-a8af-2a060100a63f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b70ffc6f-edbe-4e83-bd6b-a72591ec7153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e796dc7c-1f9e-42d3-9fe8-549c57440922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b423e9eb-42cb-4665-9a6f-9ae4747f2acd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e322a41-0a27-454f-83dc-345386a73004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f58e7e36-5df5-4b2f-a441-e811ffddca4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65b1da76-0106-404c-8ab0-3f2001b7eee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24b7cea1-03c0-4c68-8a7e-22488bcc10e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "667dcb81-d932-4ecc-bfb0-30622e7b7d79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "674aa398-9efb-4da5-8184-25e99e18b7f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8148f433-63e7-4901-94a7-5dab2ee2ee16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4d5bbf9-72dd-4d69-814d-8f6f13201704"
            }
          }
        ]
      },
      {
        "id": "3f885e21-16d7-4ab2-a57a-5fb92e642be5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eaaaf92e-eec4-4581-bd54-fa7b6f6ac3f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50b46f79-59c5-4237-b234-d9d6ccb6c42d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "15d5d3a7-d8c6-41a8-9893-446eb3811588",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "815e00eb-42b7-436d-8896-290ee6b0048c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbfa8cf5-90e5-45a8-8707-5080728a657c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.9999999999999964,
      "responseMin": 2,
      "responseMax": 246,
      "responseSd": 25.930768633127,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712450315927,
      "completed": 1712450325747
    },
    "executions": [
      {
        "id": "723989a2-27e7-4d7c-ad51-094dee5a687e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b88d4fd2-df4a-4873-9bbb-e50d51ecd9ce",
          "httpRequestId": "b9ac7bd2-0ac9-484e-bf5e-861dedf5a1e9"
        },
        "item": {
          "id": "723989a2-27e7-4d7c-ad51-094dee5a687e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9876dac7-e3be-4726-8558-1a1aad5b941b",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "54af4ec2-cbb1-4ab7-ae39-8116115d86a6",
        "cursor": {
          "ref": "21f62f66-5dda-4da8-96ad-9232810e0a6d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "66fd10eb-9f83-4e1c-87ea-b9ee78b8628e"
        },
        "item": {
          "id": "54af4ec2-cbb1-4ab7-ae39-8116115d86a6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bf7511ff-555c-40b4-b936-5cd6276839ec",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "e71a68e8-33a8-4a74-9e93-536187e7f782",
        "cursor": {
          "ref": "300435e6-6958-4edb-9cea-5a0343d306f3",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "45f27f98-b36d-493b-a619-f3e1e116ef0f"
        },
        "item": {
          "id": "e71a68e8-33a8-4a74-9e93-536187e7f782",
          "name": "did_json"
        },
        "response": {
          "id": "bb197edb-1978-4ed4-b328-450ffe45093f",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c023bfb3-56eb-4bb3-b77f-37d99bd56910",
        "cursor": {
          "ref": "3ec2bb8b-8d17-4eb5-97d6-973c19cc852b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "374e12fd-d6bd-46a4-ba4d-95148d2c591c"
        },
        "item": {
          "id": "c023bfb3-56eb-4bb3-b77f-37d99bd56910",
          "name": "did:invalid"
        },
        "response": {
          "id": "2ca540c3-b545-47df-8890-4367015f7f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c023bfb3-56eb-4bb3-b77f-37d99bd56910",
        "cursor": {
          "ref": "3ec2bb8b-8d17-4eb5-97d6-973c19cc852b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "374e12fd-d6bd-46a4-ba4d-95148d2c591c"
        },
        "item": {
          "id": "c023bfb3-56eb-4bb3-b77f-37d99bd56910",
          "name": "did:invalid"
        },
        "response": {
          "id": "2ca540c3-b545-47df-8890-4367015f7f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fb2fd7-2bf5-47a2-8039-9fa1778808f9",
        "cursor": {
          "ref": "a2116f55-439d-4fae-8cd5-bf219d720d06",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47049652-341c-4bb0-95ad-d55b2f128799"
        },
        "item": {
          "id": "82fb2fd7-2bf5-47a2-8039-9fa1778808f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "432cd41f-18f0-4dd7-8ad4-e9d464d27408",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2cc9c8b-1aa2-4f4b-9906-70fd91e12eb5",
        "cursor": {
          "ref": "71e491ea-cf1a-4190-88d0-86b338acaf0e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c4701b1-d5bf-4a17-a4ac-00f4866992bc"
        },
        "item": {
          "id": "a2cc9c8b-1aa2-4f4b-9906-70fd91e12eb5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "43e6c7a2-c20b-4d74-9b5e-dd536d2b82ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b54c12-c6f6-4b27-a375-f35b863c1b69",
        "cursor": {
          "ref": "a9d2c0ad-908a-4855-b323-bbf77de87fe7",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6714d3aa-cb58-4886-adbb-f6536ad1c4c7"
        },
        "item": {
          "id": "a9b54c12-c6f6-4b27-a375-f35b863c1b69",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "396dff00-0150-4898-b991-94895f274226",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a99f43-0e01-45ae-a7d5-91f0b4df1f8f",
        "cursor": {
          "ref": "b9d2ab71-e8bd-4cea-88ca-30fce5b581d2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb424a76-4de8-4460-a3e1-0b448b7178dd"
        },
        "item": {
          "id": "b6a99f43-0e01-45ae-a7d5-91f0b4df1f8f",
          "name": "identifiers"
        },
        "response": {
          "id": "35560d6c-bfeb-4e6c-8978-66ec21ef9615",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54359bd9-a844-408a-9e9a-902a3ec08caa",
        "cursor": {
          "ref": "d104f53c-f072-4598-a419-86ad94b384d7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "324b0a47-37e6-47b1-b15c-1b29d00641ae"
        },
        "item": {
          "id": "54359bd9-a844-408a-9e9a-902a3ec08caa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dec875d5-0341-46a7-8047-33044869c201",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f18ac03-f363-44fc-a273-624d6e58c33d",
        "cursor": {
          "ref": "84db3c4e-99c7-430f-9f85-12996a78325d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "080c2a65-117b-45eb-8578-c8444b09f256"
        },
        "item": {
          "id": "4f18ac03-f363-44fc-a273-624d6e58c33d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "71e3e16c-30c5-4940-a093-bca2d9912258",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83522833-be93-4ca5-98b6-53ccda9cdaad",
        "cursor": {
          "ref": "b8588591-c343-49d4-b80e-d5d45063b418",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7bc38495-e9a1-4e0a-8005-ff9e92031f73"
        },
        "item": {
          "id": "83522833-be93-4ca5-98b6-53ccda9cdaad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d9b56b15-fb6a-4c2b-b730-b038531c4f0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edcdd65-263c-412f-a49e-3ae642e83b25",
        "cursor": {
          "ref": "af146819-db4e-4744-a294-a2db0466550f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a6a76003-e525-4abe-b62f-f94c43d13668"
        },
        "item": {
          "id": "3edcdd65-263c-412f-a49e-3ae642e83b25",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "30971a2b-6c5f-49ca-b772-05ae7ac8fa49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7505f58-5c84-483a-bf37-40723f266e92",
        "cursor": {
          "ref": "7b97672a-4299-481b-822a-ae67441d7647",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5ad70320-56e5-4f38-a2ce-97c03e2c4eb8"
        },
        "item": {
          "id": "b7505f58-5c84-483a-bf37-40723f266e92",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1afe0d3d-3127-4680-afa1-a550e82b7160",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06599c22-ca3a-47bb-814c-f3d7b81e7a76",
        "cursor": {
          "ref": "b8599044-b1bc-41ae-9467-83c380e95294",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0162a9bd-a811-4e84-a31a-77417f0a05b4"
        },
        "item": {
          "id": "06599c22-ca3a-47bb-814c-f3d7b81e7a76",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "866e85b3-eaf7-4a97-a093-dd3090f0c170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63562837-c03c-4aa8-b322-d485bbfc8dcf",
        "cursor": {
          "ref": "1f2717f4-dd71-4707-a10b-17c30c8a2b85",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "35d6c68f-3a46-4430-b4c2-c2d2e8e75112"
        },
        "item": {
          "id": "63562837-c03c-4aa8-b322-d485bbfc8dcf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "642bc86b-5e76-49b1-b757-b54a7dbdfdcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ca31c1-5e7e-44cd-9d09-ebcf524c55e2",
        "cursor": {
          "ref": "dd8d50eb-bfcb-4d0a-bd6a-2ecfa4db555f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dffced6a-894a-4d7d-9777-1728dda162ac"
        },
        "item": {
          "id": "69ca31c1-5e7e-44cd-9d09-ebcf524c55e2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fde8ecd6-745b-4626-bed8-51e382c7ca79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ada2394-3b85-49ad-9fbe-44bb871a4016",
        "cursor": {
          "ref": "ba99a0de-a3c3-4284-b261-244e1b286a5e",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a5de3ac9-0149-4e0b-8190-5227eddc783f"
        },
        "item": {
          "id": "1ada2394-3b85-49ad-9fbe-44bb871a4016",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dd2d97d0-b907-43b2-8979-89c448fd50ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8014aa-d6bc-42dd-98fa-1418544e6e49",
        "cursor": {
          "ref": "85e9ab63-70d7-4b18-878a-2068b54694ff",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eb65a775-f57f-4757-b1aa-bddbff5e1d8e"
        },
        "item": {
          "id": "9c8014aa-d6bc-42dd-98fa-1418544e6e49",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4193d004-e371-4077-8816-206cbad12021",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e3c6ba-9377-4a2f-9182-386b07c6953d",
        "cursor": {
          "ref": "a68eef2c-c7da-4404-80de-7235517a5554",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "56038464-dbca-474f-adc7-fa50dc6aaa6f"
        },
        "item": {
          "id": "c4e3c6ba-9377-4a2f-9182-386b07c6953d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ab9a0c5f-c84c-4f53-a8d1-83290a52777e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1e5fec-d8c6-4d33-b9b7-c34de52fd97d",
        "cursor": {
          "ref": "7e13265f-bcba-464e-a0e7-035732f30932",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "93d940e5-5e90-464d-b2b0-363f597e5ef7"
        },
        "item": {
          "id": "4c1e5fec-d8c6-4d33-b9b7-c34de52fd97d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "61b9238a-688d-4cb9-84d7-c8a6beed8c90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e1aea6-d014-4c99-ad0d-feff84d0aab0",
        "cursor": {
          "ref": "1d2de553-2d9c-4b22-8b60-f1e2d8057179",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "69865d60-88f7-414a-a603-85aed4acf9b1"
        },
        "item": {
          "id": "a8e1aea6-d014-4c99-ad0d-feff84d0aab0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4157e899-553e-432f-8f74-da04e5b84025",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbec338-6e70-44c4-ac30-bc34090c1978",
        "cursor": {
          "ref": "020601a1-4085-410b-a5f8-9b84282103eb",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "889b0e08-7836-480c-9936-e2244b359f50"
        },
        "item": {
          "id": "ddbec338-6e70-44c4-ac30-bc34090c1978",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "22481c3e-5709-439c-8cba-d3a96eb6b9c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97be9691-09fb-4068-9318-c7ee3b2659f2",
        "cursor": {
          "ref": "f88004ef-7d6a-4253-a2c0-a1783af3f918",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4ca4077a-42f1-4b33-aa40-48ae0cb92378"
        },
        "item": {
          "id": "97be9691-09fb-4068-9318-c7ee3b2659f2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aa0f4cd5-875d-49e4-b595-07c5d9961584",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7718a96-47b4-45d5-865a-e3c581dc76b6",
        "cursor": {
          "ref": "67e8dba9-0eb7-4ed9-b7dd-e23f95964123",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f4881ade-ecc8-4560-94cf-a7e9d9aa49e6"
        },
        "item": {
          "id": "c7718a96-47b4-45d5-865a-e3c581dc76b6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f35585ba-087c-43ae-a9e7-42bde814eaa1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02222f91-70df-4f31-b66a-3bc392048908",
        "cursor": {
          "ref": "40ddc241-a827-4a70-b6fa-613cbaa1a13e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c534a0d-af5c-4122-8ebf-00019e367d4b"
        },
        "item": {
          "id": "02222f91-70df-4f31-b66a-3bc392048908",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cac1a8bb-07dd-4212-b5a2-fe655cda2705",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf9040c-94ac-4f72-aff7-08db5f611ba2",
        "cursor": {
          "ref": "9a6526fc-1fab-4f9e-a2a9-f44125f1d589",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f4724dd8-a252-4152-8eae-d01d43aa92e0"
        },
        "item": {
          "id": "ddf9040c-94ac-4f72-aff7-08db5f611ba2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "188ee0fa-984a-468e-9f26-b235bf1608f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b838bf2-f375-4e3c-8e4a-3bc0a72dae15",
        "cursor": {
          "ref": "8c0f65ed-463f-4f4e-abb8-521d6e42816a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8a51183d-c991-4926-bcee-7f994add8246"
        },
        "item": {
          "id": "0b838bf2-f375-4e3c-8e4a-3bc0a72dae15",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8b170319-c54f-45e7-9aa6-564d6af7a543",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fca363e-22eb-460b-a3ed-396d56bfb4db",
        "cursor": {
          "ref": "08060157-2ad9-4b89-b58a-5e41877b0f35",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1266817e-dd8a-4e01-a5fc-670354a5baea"
        },
        "item": {
          "id": "7fca363e-22eb-460b-a3ed-396d56bfb4db",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8eea178-6d00-4b45-bd02-182a78ff3f6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee0ffd5-26c5-4fbc-91e6-af192b431350",
        "cursor": {
          "ref": "b3912bd7-35de-4dfb-8b82-82fde787d07b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9e8ced1f-5bed-4aef-972d-89d4f0f9ab60"
        },
        "item": {
          "id": "8ee0ffd5-26c5-4fbc-91e6-af192b431350",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b48cdcd2-eae3-44b4-bd5e-14b3d36bab1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3eeafd-4a53-4161-9ded-cb9013c7894b",
        "cursor": {
          "ref": "aef283bc-f2f4-4181-9f1c-72e67aec68f5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0b802215-48c6-44d4-9684-775572551612"
        },
        "item": {
          "id": "9f3eeafd-4a53-4161-9ded-cb9013c7894b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a2e60709-ce1e-4c29-8e5b-d97c3d0d6cfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfd414b-95f7-41e0-8978-9e7bab914f8d",
        "cursor": {
          "ref": "654bbc31-1ccd-466d-9261-e785f4726233",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "16dfee50-57fe-44c8-a75b-c249c5984d55"
        },
        "item": {
          "id": "9dfd414b-95f7-41e0-8978-9e7bab914f8d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ab5dadbd-37ec-4735-ae5e-52db6a3d8ade",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d714a04-bd80-4d2c-ba60-b8fbe8c33945",
        "cursor": {
          "ref": "0b116d33-044b-43a4-87db-ab2d0fc551be",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "82d1d76c-649a-44c4-9c1c-09f559c23e4d"
        },
        "item": {
          "id": "8d714a04-bd80-4d2c-ba60-b8fbe8c33945",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a26893f4-d045-44d0-9dd3-42a3c7de7d87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3adfd89-8fcd-402b-8b17-ca588a4ba213",
        "cursor": {
          "ref": "03816feb-87ca-44cf-8609-ba84b43dfc2d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e45cbc8-ad1a-4313-a940-ae089951b288"
        },
        "item": {
          "id": "e3adfd89-8fcd-402b-8b17-ca588a4ba213",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f66a541c-5dd4-420c-bf2b-91e4262a3e19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d231e7-04e0-4879-b33b-bbad8ed7b014",
        "cursor": {
          "ref": "a17bcf75-b400-48b9-989d-6af69c5b5c7e",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d26f5285-a7ed-4d9a-8050-93219eb110ac"
        },
        "item": {
          "id": "a1d231e7-04e0-4879-b33b-bbad8ed7b014",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3c8e449f-2c15-46b9-92c3-10f7fadc2a28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963ba0f4-9462-41bc-a598-8c99dbc15f9d",
        "cursor": {
          "ref": "ab60bfb3-141c-47df-8572-41ccceb3c901",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "58d3794b-c916-43e2-92d5-af5e65e12037"
        },
        "item": {
          "id": "963ba0f4-9462-41bc-a598-8c99dbc15f9d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "355e917e-7c3c-490d-a7cf-8d52b65b37e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2281ef55-1fbf-4791-8036-159730390c30",
        "cursor": {
          "ref": "4b50b955-46df-4473-a51b-6a57a0339da2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8b4fc9b5-61bf-4edf-8ecd-0b78d987aa42"
        },
        "item": {
          "id": "2281ef55-1fbf-4791-8036-159730390c30",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2c13bb7b-85df-4fde-a6bb-cfa43d739ad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd5639d-5198-4f6b-89ec-4b7b4ec59b90",
        "cursor": {
          "ref": "00acf90d-768a-4e24-a5f9-b39de19816ff",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8b51706f-3142-4532-b8ba-2ec01c91723c"
        },
        "item": {
          "id": "dfd5639d-5198-4f6b-89ec-4b7b4ec59b90",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "564e2d49-ab03-4de3-bbbb-6beecbe50c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65331321-3184-4757-953a-eb9a6cc86864",
        "cursor": {
          "ref": "3631686f-db4a-49db-a18b-89491d2ba092",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7a5d9486-999d-4d2d-9e22-112fe6fc8428"
        },
        "item": {
          "id": "65331321-3184-4757-953a-eb9a6cc86864",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "844fc1dc-be8d-4fad-914c-9fd27fe13ca3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694fbeee-24f1-41c2-b039-db9e46bf88ef",
        "cursor": {
          "ref": "e6ff8b8f-77b1-45f8-a5dd-df8fa55d97cb",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0fe1b5f1-be0a-4377-a1e4-75edebfd1e6a"
        },
        "item": {
          "id": "694fbeee-24f1-41c2-b039-db9e46bf88ef",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "98c027c6-4651-4e1b-9e30-a4c2f02802db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c5842d-1c28-40cc-9ca2-0aed1fad74bb",
        "cursor": {
          "ref": "83e3156e-06e3-4f50-b617-0efebc7fbda1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a453e37e-0980-4d24-befd-1a731828833d"
        },
        "item": {
          "id": "e9c5842d-1c28-40cc-9ca2-0aed1fad74bb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e0d670b5-72a8-4f66-8697-54777e21f66a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d664f9cd-1249-4d4f-a740-3ba8040b06e8",
        "cursor": {
          "ref": "33f4125a-02a9-4c4b-9415-0ec71e68615a",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4be85b55-fe51-47b0-becb-7ed219818c85"
        },
        "item": {
          "id": "d664f9cd-1249-4d4f-a740-3ba8040b06e8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6d4b475f-5c90-42e5-a1cd-a99fcbc9145a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09645a42-b47e-4ec4-9b62-63a4120460a3",
        "cursor": {
          "ref": "2fbb0b8c-6d6f-49f4-82ff-59efa198846a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3469cf7c-d5e6-4aa2-a233-3b39c2ff3ef6"
        },
        "item": {
          "id": "09645a42-b47e-4ec4-9b62-63a4120460a3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "50ffb500-d838-4883-9926-d319de56d1b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9db518f-58f0-40c7-9fef-86219b51e26c",
        "cursor": {
          "ref": "d4298069-da91-454e-bf5c-a2436d98ecdf",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "058f0a53-9c09-4f4a-8009-cfc12a9a44f3"
        },
        "item": {
          "id": "f9db518f-58f0-40c7-9fef-86219b51e26c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "40e76b7e-5f0c-4fa7-add2-43046c4d17c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104197c7-c4a1-40c4-ac94-5a00fa3d50c7",
        "cursor": {
          "ref": "e916319f-895a-4a82-87bb-b5bb5dd87e68",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "61e23be2-40b3-4c15-8b21-7f96dedb5674"
        },
        "item": {
          "id": "104197c7-c4a1-40c4-ac94-5a00fa3d50c7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "15328495-450b-4787-a45d-75da49d8108e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5608062-38b5-478a-8df5-a9146835a25a",
        "cursor": {
          "ref": "715ecab6-ddf6-4a83-9a6e-b1008e61cfbe",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "97b77e9c-5020-4e66-8f76-6345972a0a8a"
        },
        "item": {
          "id": "d5608062-38b5-478a-8df5-a9146835a25a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f3445802-6cbe-4210-8ab5-891081573685",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67436f1c-c5da-44bb-aca4-48159dbd78a2",
        "cursor": {
          "ref": "e0e2c3be-e2c4-4163-ad1f-ef7f05688cbc",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b183bcab-60e9-4c68-b449-577c9451283b"
        },
        "item": {
          "id": "67436f1c-c5da-44bb-aca4-48159dbd78a2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72a88540-bc08-4242-899f-0754e8439d66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08da2fa8-2f8a-488f-8856-12f4375a7a87",
        "cursor": {
          "ref": "5d8bfd76-a8c4-4b97-a3fb-f89666acd9a6",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bc5625f7-4fb6-40f1-aff8-198fa0884fc0"
        },
        "item": {
          "id": "08da2fa8-2f8a-488f-8856-12f4375a7a87",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8c4a84db-483c-4a43-810d-c4322bd5fd0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bd02a2-d2d8-4825-a568-8cd159605d44",
        "cursor": {
          "ref": "5ce6d3d0-59d1-4a5e-9abd-44219852cfb0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d5181d71-4a2e-4670-9582-e18d5b61b313"
        },
        "item": {
          "id": "90bd02a2-d2d8-4825-a568-8cd159605d44",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ce756532-8cf8-44d1-895d-5356cd0ff026",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b28ca7e-aabf-4c98-b88a-c097f9c8e34a",
        "cursor": {
          "ref": "232a5b02-0cc4-4e84-823d-94554eb69bcb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "364689f6-8f3e-4d58-b514-64f720b92b99"
        },
        "item": {
          "id": "8b28ca7e-aabf-4c98-b88a-c097f9c8e34a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "04a1b2c9-a3b6-4a8c-bf29-0dc581caa03e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dad508-f3b5-4536-a9af-aa61342a45f0",
        "cursor": {
          "ref": "bcc45464-9a8c-45f1-aa37-341af0fbe948",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5a47d34a-aefa-4266-aa03-e8a860f058f6"
        },
        "item": {
          "id": "15dad508-f3b5-4536-a9af-aa61342a45f0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e98cc67c-a203-4041-a7a7-b9155b001788",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4b08c1-5ba5-4ec4-b8ce-06bf3e5ad7d5",
        "cursor": {
          "ref": "ba579994-4b0f-4186-a8b3-c18580b38ee9",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6876513c-6c90-42f3-a895-c4a310daec40"
        },
        "item": {
          "id": "4f4b08c1-5ba5-4ec4-b8ce-06bf3e5ad7d5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "68cdd90d-0516-45d7-9cfb-1b5fe0f1b659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771d697d-fa0a-44b8-bd51-d2c1c7b50f2f",
        "cursor": {
          "ref": "3c954843-08d1-4896-aaee-54df78b471e4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "16c71ba7-9107-4095-ab83-1bd572b8779e"
        },
        "item": {
          "id": "771d697d-fa0a-44b8-bd51-d2c1c7b50f2f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "869f4ce2-6129-496c-a86d-52e9567c8c6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fbe8f2-8a0d-49f3-b9d4-c3436258d424",
        "cursor": {
          "ref": "2be631b9-f180-4945-b33e-3fef4d59b075",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9ec38e0a-3960-48ec-bb3a-3e9d5db5b3f5"
        },
        "item": {
          "id": "a8fbe8f2-8a0d-49f3-b9d4-c3436258d424",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b3b21fef-b165-48af-851c-12aa085deb0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea000e0-dc4f-460a-b4ac-48226a78beb0",
        "cursor": {
          "ref": "99a8aa61-2cc4-4d83-a876-274d20a15962",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6b7e6f3a-e804-4ceb-af32-af2d31c732ca"
        },
        "item": {
          "id": "9ea000e0-dc4f-460a-b4ac-48226a78beb0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b908e065-a5b0-4275-98b3-2f9ca6751045",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a385c95-8745-4f71-9fd1-cef47d3d8798",
        "cursor": {
          "ref": "a0fdf2ba-5189-4dd3-92e8-9cc27926d859",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5b492f65-32b7-4a02-a8c7-ef234bf609c7"
        },
        "item": {
          "id": "3a385c95-8745-4f71-9fd1-cef47d3d8798",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a1cd7393-b945-4925-b6f1-0de2a9a818b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ada9730-2091-4153-9471-3dce64281371",
        "cursor": {
          "ref": "c03347f0-3ddc-4e29-86c5-397ff6f17bb6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f6a2534c-a4f2-48bf-8247-76e4877f21f8"
        },
        "item": {
          "id": "4ada9730-2091-4153-9471-3dce64281371",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "297ca6cc-5d01-43d0-b871-9c0bc8c74b0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9f9b11-cb6b-4536-87ef-ea2f5cda25cd",
        "cursor": {
          "ref": "949a1a61-f5e7-4216-99f6-e807b4f39b78",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7af02dbc-054b-4ac2-8fbb-c70e960c258b"
        },
        "item": {
          "id": "da9f9b11-cb6b-4536-87ef-ea2f5cda25cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ef9fcfef-ae2a-4b1c-9991-6e8149db71d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f203aa18-2bf5-4b68-8e9b-bdad9e04b93d",
        "cursor": {
          "ref": "4e0394e2-a858-4e78-96bd-1b8dc7fb6b7f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6ec1be1f-5335-4637-a619-b0e6883926be"
        },
        "item": {
          "id": "f203aa18-2bf5-4b68-8e9b-bdad9e04b93d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c6582647-0096-4f88-b7ca-3905c4120971",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eea9b8-2df9-4067-b9a5-0f19ff093ad1",
        "cursor": {
          "ref": "8c4948cf-44c8-4bb2-9cc4-5f16704d771c",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "55601111-971a-4a6d-979c-8862ba0dacbd"
        },
        "item": {
          "id": "13eea9b8-2df9-4067-b9a5-0f19ff093ad1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "929d8644-e752-4464-a623-406d2e96f406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd5b777-4914-4bee-8f9a-578a78e8bcc4",
        "cursor": {
          "ref": "a924f2ea-f001-4f0d-b4c6-2e06ec2bbca8",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d79f874f-2c31-45bc-9df3-3950d5cd9464"
        },
        "item": {
          "id": "3bd5b777-4914-4bee-8f9a-578a78e8bcc4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "787818b7-705e-41d3-977f-de0c8bb31198",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18dda22-8b98-4490-8a50-753888cec30c",
        "cursor": {
          "ref": "c4fc5865-68df-4ace-9471-65be7a7ff22e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1ffa1258-34ed-4f54-b14f-9626f54e3261"
        },
        "item": {
          "id": "a18dda22-8b98-4490-8a50-753888cec30c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ea2d336c-aae6-4b71-85ae-6ccf86dbf5e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddeb346-a145-4e09-acaa-2e87dfc9832b",
        "cursor": {
          "ref": "17036bc6-f388-4853-be19-01c4484399b6",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "540c4e72-f09c-421e-9a9d-52655bd07041"
        },
        "item": {
          "id": "9ddeb346-a145-4e09-acaa-2e87dfc9832b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6c7fc50a-720e-450a-b889-f8716fc6daaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbaf4cc-259e-4983-9c37-5a3e2d52f713",
        "cursor": {
          "ref": "258b5ebd-5b13-42e0-96f7-40d2e227bc64",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b9514e2f-e0da-43e4-9915-120ca0bb5e81"
        },
        "item": {
          "id": "abbaf4cc-259e-4983-9c37-5a3e2d52f713",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "575aa78d-eb9d-442d-bc79-8829ad1beb35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbf70e7-4f06-474e-9872-5975b3cef265",
        "cursor": {
          "ref": "8a36b2ff-42e1-4cbf-8e4d-0baf83b47e29",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5f4cbb6d-5d69-49be-ad54-c6c22d7b8fe5"
        },
        "item": {
          "id": "7cbf70e7-4f06-474e-9872-5975b3cef265",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "66088901-ebc8-4624-9660-ab8fde31a585",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ed1706-ac9b-4544-a90b-5cb06f6cba11",
        "cursor": {
          "ref": "93b03a01-93f5-47df-bce2-884a221274d1",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2b7fa4cd-5966-4269-ae55-a82ef3643786"
        },
        "item": {
          "id": "17ed1706-ac9b-4544-a90b-5cb06f6cba11",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8be06886-40f8-4c98-be0c-07125520ca59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbacbdb8-84e1-4d3a-b6fa-148e1ea20cfb",
        "cursor": {
          "ref": "7930f610-609d-4821-af14-2d916cbb0139",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5fa06bb-0464-4456-8d80-aaf802fea985"
        },
        "item": {
          "id": "fbacbdb8-84e1-4d3a-b6fa-148e1ea20cfb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9826b9d7-e968-46f6-8714-ca68018c0613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b99c31-7186-424b-8faf-e66fa04539e0",
        "cursor": {
          "ref": "4aa3eec2-0d11-46fa-a767-da6fd505a643",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "293c1417-6727-4fb0-8b39-dff319e627fc"
        },
        "item": {
          "id": "53b99c31-7186-424b-8faf-e66fa04539e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bbd0fe5d-6b6d-42bb-9df3-a45fb64f0846",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14b31eb-7755-4d54-aa9c-22a19b730882",
        "cursor": {
          "ref": "5ebb5ebe-293d-463b-899e-4a2706fa6039",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3c99b004-8102-4a2a-99c1-3b0e5266b393"
        },
        "item": {
          "id": "c14b31eb-7755-4d54-aa9c-22a19b730882",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2d9124ba-9d77-408d-a196-6361114579f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6a8766-e7c5-4f34-86e9-c58748d8420e",
        "cursor": {
          "ref": "a0f91953-19fc-420a-bb4b-c1161315839b",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a2b00eac-baaf-4dd7-8d7d-45be4eef6153"
        },
        "item": {
          "id": "dd6a8766-e7c5-4f34-86e9-c58748d8420e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a95ce5c3-843f-4d07-9aeb-7935d2e8b4fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f1c192-da0c-4d97-8672-9ed625223bda",
        "cursor": {
          "ref": "8b28a629-1a84-4e39-9cf6-2cad192fc68f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "21ac3551-99c4-4db4-bd29-25b9792cab73"
        },
        "item": {
          "id": "a0f1c192-da0c-4d97-8672-9ed625223bda",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "11c885bd-0dc8-4c15-b7f7-32b1de5bdf8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141e6c3f-c58c-4318-aa10-a9edef1a6216",
        "cursor": {
          "ref": "77f700be-0dbe-467a-a1eb-6623b05f967f",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fc8d74ae-b894-4a68-ba50-403dd88188c5"
        },
        "item": {
          "id": "141e6c3f-c58c-4318-aa10-a9edef1a6216",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4ba08ce6-8bd6-4b23-a4c3-cf21aee1f334",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f903109-361a-4a8a-9e3a-134829286057",
        "cursor": {
          "ref": "e7a5ab01-e094-45a1-b78e-677202ed4455",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9524c518-41b6-4808-a5df-97045a9043e5"
        },
        "item": {
          "id": "0f903109-361a-4a8a-9e3a-134829286057",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "49060a5d-4562-4df2-82e7-ac747b7905b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598e2ad9-af09-498c-ac74-5de861df390f",
        "cursor": {
          "ref": "07e8cc1b-0892-4e0d-8d8b-641f3f4840a6",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "665883a5-5649-4949-92df-f78cdcc6e1af"
        },
        "item": {
          "id": "598e2ad9-af09-498c-ac74-5de861df390f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5d77a3ef-bf4b-41a1-b575-54b30d38f25d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fdd540-341e-49de-8d81-1a2a9243aa51",
        "cursor": {
          "ref": "dcdca83a-0ac4-4eac-a570-90c03873b3b3",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4316abcc-59ca-4959-b55c-e13ebc8dca67"
        },
        "item": {
          "id": "24fdd540-341e-49de-8d81-1a2a9243aa51",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3d0070e2-8f8d-4a4d-b209-6702e9fe81bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c8f038-08c3-448e-a359-46a10f574c60",
        "cursor": {
          "ref": "d76f9b7b-5b5e-438f-9d9c-23507b970ac0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "df2c4b41-631c-4dc5-b503-11554ac7a5d9"
        },
        "item": {
          "id": "a8c8f038-08c3-448e-a359-46a10f574c60",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fade9945-4fc0-4dd0-a536-359af31dfe5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e1fe75-4266-4772-b6c6-94b0ae1a541b",
        "cursor": {
          "ref": "b239f820-fe20-4f10-a1e1-5dceec910d7e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e3532a2-fd2d-4ba5-96a7-179599aa4711"
        },
        "item": {
          "id": "68e1fe75-4266-4772-b6c6-94b0ae1a541b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5c529e6f-a624-4597-89ca-a4485f512046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e4e263-b67d-4934-9f83-2385ad6e740d",
        "cursor": {
          "ref": "8e5a4260-e855-4fc5-a150-5467b7c7c52c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cb8548d8-4b66-49a0-83b4-e2ed677b322b"
        },
        "item": {
          "id": "c0e4e263-b67d-4934-9f83-2385ad6e740d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8e15f95b-5d8b-47aa-8b41-5f3d1496d3c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d440967b-f23f-4513-bf55-c1c379dc7d51",
        "cursor": {
          "ref": "0dbba5df-f4ea-465e-9607-404a29a78a48",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "021b2ced-60dd-4c9a-8926-84d333013b56"
        },
        "item": {
          "id": "d440967b-f23f-4513-bf55-c1c379dc7d51",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "414e30d9-a958-45ce-b10d-cca259a476bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dddc359-82aa-4d73-8aa3-35a62d9b6d9b",
        "cursor": {
          "ref": "09e7450a-7858-40b7-918f-1f5076ee4b83",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0f393d2a-8de8-4624-8cf1-e810f2f551b9"
        },
        "item": {
          "id": "1dddc359-82aa-4d73-8aa3-35a62d9b6d9b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "94f8bd3b-57c9-4f6c-a05b-3765cb6ffc82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3864ccbb-2598-4a86-8b8a-6e18e265f53c",
        "cursor": {
          "ref": "e0b45682-77fb-4a3b-8773-a4e9866e71ad",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8bd8edd2-7724-4fdc-8682-95ac042c82e9"
        },
        "item": {
          "id": "3864ccbb-2598-4a86-8b8a-6e18e265f53c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "501148aa-413e-4cec-a7bc-02ff9e861f33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb4cb90-cbe4-431f-afef-362ce11f6d99",
        "cursor": {
          "ref": "fdfcbef3-3092-4bd0-bf20-ad69da6067bd",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b2331ba0-c207-4703-ae63-c8206f708e5d"
        },
        "item": {
          "id": "fcb4cb90-cbe4-431f-afef-362ce11f6d99",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c904289f-24c6-4a17-b15d-c68b89715bee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ea0900-ceb4-438f-9129-d0173e36d53e",
        "cursor": {
          "ref": "8ec4a649-adb8-4525-9347-e5f87747f47c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "94637f73-2e70-496b-8894-7a55b506ba25"
        },
        "item": {
          "id": "64ea0900-ceb4-438f-9129-d0173e36d53e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "987d598c-a38b-454e-ad82-5062b1cfd9e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6815f186-6e96-483e-ac9a-61fbea8a558e",
        "cursor": {
          "ref": "45733b49-cd0a-425e-98f3-55177cc989f7",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2bbcc261-d06a-4091-b1d6-8ba7a0549c24"
        },
        "item": {
          "id": "6815f186-6e96-483e-ac9a-61fbea8a558e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "85607f76-1d83-4368-88d5-ef4f90ebc661",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cab92a-3978-46e5-81be-1c317e3b3c52",
        "cursor": {
          "ref": "0f6bfe4b-b9b9-47f9-8ef4-3ca7d644de34",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "21fb8a1a-b255-44b3-b093-eafd09a029c1"
        },
        "item": {
          "id": "51cab92a-3978-46e5-81be-1c317e3b3c52",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "309c2145-83b8-4064-b4a8-b31981bc9e35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90b620e-6b90-4f6e-b96d-387230f6ab00",
        "cursor": {
          "ref": "656cb030-3b49-4715-a555-3e1d40d4c5b1",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6f8c6782-2561-4015-943c-02b880e2fab5"
        },
        "item": {
          "id": "a90b620e-6b90-4f6e-b96d-387230f6ab00",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b7dcc6c5-3161-4995-bea0-07cc3146657f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40afe633-35e7-443e-bb60-6b25aaeac729",
        "cursor": {
          "ref": "99da3449-aa22-4f3d-bd64-7d4364fdb9b8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "57e7d2b9-75cb-4ea7-a3b2-65d61a4ef042"
        },
        "item": {
          "id": "40afe633-35e7-443e-bb60-6b25aaeac729",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9a7acd6f-c0ba-409f-9332-fee690729857",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4a95a4-f0d7-4c13-bf3b-e163740f3c40",
        "cursor": {
          "ref": "9df0e9f9-8702-46f8-98e1-f26a43a1254a",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2389afb0-c103-44f2-9469-d0d3a8bdacc9"
        },
        "item": {
          "id": "ac4a95a4-f0d7-4c13-bf3b-e163740f3c40",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cfdedd7e-f3da-43fa-b528-d4084e6bdd68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73deab78-ea6f-481d-96fa-4ac8d6bc22d3",
        "cursor": {
          "ref": "080c6a79-dd3d-4d9f-b046-ad471ece6236",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "983528aa-3c7b-4a97-93f2-dd33a6fd3295"
        },
        "item": {
          "id": "73deab78-ea6f-481d-96fa-4ac8d6bc22d3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b47bef4c-905a-4384-aa18-2d4e21a032b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6e448f-55b7-4627-8d63-fd4abbd59d3b",
        "cursor": {
          "ref": "857372f8-15f7-4f07-9e8b-e53300c84177",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e0133087-29d7-439e-9cd7-6cd908e3f066"
        },
        "item": {
          "id": "7d6e448f-55b7-4627-8d63-fd4abbd59d3b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b78b2a59-7dc7-4654-92cf-0aa9c0ce1e6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9029a0-148e-4794-9876-23a8f51b9832",
        "cursor": {
          "ref": "ce1f4332-1664-4fd2-b35d-079033dc6e4a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "05ae2626-1755-403d-9242-5019e0260e69"
        },
        "item": {
          "id": "8b9029a0-148e-4794-9876-23a8f51b9832",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fd956f8e-e5a2-49a4-93e5-bb8d596d26c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70002a2-1ac3-416c-9811-2b3a455ec600",
        "cursor": {
          "ref": "3a916b00-6c9a-40ef-8456-1543179199c6",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "60d72644-253d-428c-b78f-26d1a48ff409"
        },
        "item": {
          "id": "d70002a2-1ac3-416c-9811-2b3a455ec600",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "78301ff5-5de0-4c9c-894b-89664886aaa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c06aac1-8fca-44f1-bb90-1d93c0bc0b4e",
        "cursor": {
          "ref": "7d884598-cf84-4ef8-be92-cc5a12ac77dd",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "89df7eae-b591-4a04-907f-7267e0146d0c"
        },
        "item": {
          "id": "0c06aac1-8fca-44f1-bb90-1d93c0bc0b4e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8c26cac6-e457-4aaf-97ba-572e2ca12d53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d972397e-88e8-4b15-ac61-144fcce1f3bc",
        "cursor": {
          "ref": "6aa1a62c-44f2-4509-8c37-b06a9bffc111",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8e7deae8-71ed-46ff-a13f-d9b7c82881f0"
        },
        "item": {
          "id": "d972397e-88e8-4b15-ac61-144fcce1f3bc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b037a801-e0bf-48db-ba86-2d34e46a3e71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c84adc6-1914-4249-9698-c0d6e12581da",
        "cursor": {
          "ref": "2410bddb-cbc6-46b8-93ec-3f6d237f7b61",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0530413a-a55a-4df6-ae93-592cd98cdf20"
        },
        "item": {
          "id": "7c84adc6-1914-4249-9698-c0d6e12581da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9298039c-5f77-4806-9e86-b7102d75df68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9533139-b8cd-42db-a5c1-b737c62472af",
        "cursor": {
          "ref": "14431b1d-fe5a-44d9-a172-593b476840c3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0a4defb4-f8f5-41dd-ac64-5b08e8505362"
        },
        "item": {
          "id": "e9533139-b8cd-42db-a5c1-b737c62472af",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e6c316a-c8fa-454f-9614-e23bb8252cc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a901a0-455c-4c17-89ba-201e344f4a37",
        "cursor": {
          "ref": "82b8a913-0a95-4cc8-9e51-49a6369598ea",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "787dffc3-5c8e-4d61-bc0f-35a74f3fac71"
        },
        "item": {
          "id": "21a901a0-455c-4c17-89ba-201e344f4a37",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8208968a-d420-46da-92ce-5d32ef752862",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f1e2f2-8666-486e-a161-37fd34b0729f",
        "cursor": {
          "ref": "90ab41e1-d1fc-4f4e-b0bf-a5c591070fca",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b5490900-aebc-483e-a9c8-25d231cf2cbe"
        },
        "item": {
          "id": "40f1e2f2-8666-486e-a161-37fd34b0729f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "86401a7a-d3ff-4e7d-83b3-cf963a0e75fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac899a3b-1bd2-4bfe-aa68-20afdd5cf86f",
        "cursor": {
          "ref": "2b6fc203-6681-41c1-998c-4510de7966d9",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "56e6d608-ac29-4465-bca6-18723f9d9d0d"
        },
        "item": {
          "id": "ac899a3b-1bd2-4bfe-aa68-20afdd5cf86f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "03bb0ea4-9ecb-42cb-9058-04bb9a4685c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833befde-0e58-4496-819f-c0e88aa75a11",
        "cursor": {
          "ref": "f7c95283-74f6-4ea5-8fa7-9a07c057b88e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "517e42ca-8f4f-4169-9bdd-33ac8976e3e0"
        },
        "item": {
          "id": "833befde-0e58-4496-819f-c0e88aa75a11",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c6654b0e-9efe-41a5-8399-bc043957f84b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f89387-b99e-472e-93c1-b084efdb23db",
        "cursor": {
          "ref": "3cb549ca-65fc-4166-af56-921a0e8893d8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bf59e97e-01fb-4aba-840e-f1ce4b608768"
        },
        "item": {
          "id": "73f89387-b99e-472e-93c1-b084efdb23db",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4e47dd62-67d3-413e-84be-da5b71ec0bf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9df11bd-02e9-4d82-baa6-d7b3a185d526",
        "cursor": {
          "ref": "8b63fc37-58ad-4c20-a4a4-430eeb33bf48",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "12814cda-3c57-484e-9b0e-0004f96adbf8"
        },
        "item": {
          "id": "c9df11bd-02e9-4d82-baa6-d7b3a185d526",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c042e5c5-d6db-4edf-bdd4-e1945a7bc6b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb7e78c-9d26-4315-8f3a-4538b6ba5420",
        "cursor": {
          "ref": "012c50e2-a40a-4b5d-8799-80508ac25a63",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5e517e0d-ecb8-4e75-8559-eb8e42f50f5b"
        },
        "item": {
          "id": "1cb7e78c-9d26-4315-8f3a-4538b6ba5420",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "51c0d8f0-48a2-4cc0-908c-3ee2a08bec34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "30953594-f8bf-4858-9f30-4e49ba034765",
        "cursor": {
          "ref": "19767bfe-a982-41ca-accc-54d5022d32c0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cc437791-d903-4f29-8b8a-c33dc1f723a3"
        },
        "item": {
          "id": "30953594-f8bf-4858-9f30-4e49ba034765",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2007f6d7-8358-49fb-8730-3dc0f928bc76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 205,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "ff954d12-4109-49f4-8a1c-ff3553b45801",
        "cursor": {
          "ref": "86388202-8432-4901-9238-c20f3c8e94e4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d6d1c60-7c4f-4c7a-bd4f-380409f65a41"
        },
        "item": {
          "id": "ff954d12-4109-49f4-8a1c-ff3553b45801",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e6b956ca-3a22-4086-a688-08486174fa03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "1b8a6abb-248a-484e-890a-d79426c74ebf",
        "cursor": {
          "ref": "639c49d0-2299-4a4b-a347-c3d75739d013",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "783e7862-8abc-4cd9-b47c-b66a0faf7ad4"
        },
        "item": {
          "id": "1b8a6abb-248a-484e-890a-d79426c74ebf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ca4841da-8319-4229-b8e3-32b1788e77d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "b8a1488e-65a8-4d7a-803f-00eb2201d8a2",
        "cursor": {
          "ref": "81da4dbd-ffb8-450a-9930-f4fc908fa716",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "99f56220-c135-43d8-b89c-91eced80e5ff"
        },
        "item": {
          "id": "b8a1488e-65a8-4d7a-803f-00eb2201d8a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "329cf3e6-a031-4bd8-aed1-42ef79320bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "b4e7137d-74dc-4549-9de1-777160490628",
        "cursor": {
          "ref": "d53eab4d-402c-4c25-85bd-4902b3dd14ea",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "83a67f5b-e56f-4966-bc0b-c3200370ceba"
        },
        "item": {
          "id": "b4e7137d-74dc-4549-9de1-777160490628",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "81229310-a422-4ae6-83ca-5bf1964f0b60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a448b631-8f3e-41b5-ab0a-c78069112a0a",
        "cursor": {
          "ref": "9b99eca9-dbcc-460e-a9c9-58c491fa7fc6",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "169c4bba-fc8b-4f61-883b-245f892461c8"
        },
        "item": {
          "id": "a448b631-8f3e-41b5-ab0a-c78069112a0a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fafffd86-4d8a-4b69-9d29-75eb60d91038",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "63abee0f-6863-4eb0-821f-6c83eb9f184a",
        "cursor": {
          "ref": "faedb3d2-6c8f-4a1e-92d9-4c4a74dadc37",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1afd7a07-f94f-4925-9370-7bccb7063f61"
        },
        "item": {
          "id": "63abee0f-6863-4eb0-821f-6c83eb9f184a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "516a128a-7e2e-4831-9499-e56500594c27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e4c1cd-cf5c-4c8b-8192-11c65bdb0b86",
        "cursor": {
          "ref": "efe2f288-2e34-4885-8329-d763c47fc4d7",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fe15deea-1ff6-4903-8a97-3c60d83f77a0"
        },
        "item": {
          "id": "38e4c1cd-cf5c-4c8b-8192-11c65bdb0b86",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "18aa5c45-bb71-414e-a65c-b6ab168db4a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfaca64-d380-4a9e-86c2-42cf37f5daf5",
        "cursor": {
          "ref": "46318e63-35dd-499d-bef5-22e5ac4930a3",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a090c4e7-4ae5-4a29-9a93-307f42ffa706"
        },
        "item": {
          "id": "0dfaca64-d380-4a9e-86c2-42cf37f5daf5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "449bc14e-3b66-4d31-97a8-ee3cafcd9495",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b445be6b-3699-4c7e-87af-e90904e2b641",
        "cursor": {
          "ref": "8ce29c81-42f3-4e38-a613-fdae9f13e818",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69e46e4f-64e9-423c-849b-2a0728075b90"
        },
        "item": {
          "id": "b445be6b-3699-4c7e-87af-e90904e2b641",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "97fcf85c-6088-47e6-a17a-d228142aa8f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f652e3-92c7-4bb7-8bdc-ded115b0700c",
        "cursor": {
          "ref": "f597f154-737c-4b2d-87c4-fabd2fac479a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "83122b6d-40c8-40a9-b9c3-e6e90519dda4"
        },
        "item": {
          "id": "a9f652e3-92c7-4bb7-8bdc-ded115b0700c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "77a9564c-8495-4fe8-8c93-898eda3f0c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f57724c-3ca2-45ab-ab30-b63a7054d696",
        "cursor": {
          "ref": "7451fd7b-a932-40c1-b41a-53af1f146cc8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2b636938-df9d-49d2-82dd-ca48b0292e81"
        },
        "item": {
          "id": "6f57724c-3ca2-45ab-ab30-b63a7054d696",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3af1f014-2fcb-4fd6-9a6b-ffb501a9f6f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3282b03-59f0-4cac-b769-764bf0c32815",
        "cursor": {
          "ref": "de21d40b-38f3-4de4-8958-d319c896c8dd",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5930e4e1-a21c-4011-b353-b09ce4282a14"
        },
        "item": {
          "id": "b3282b03-59f0-4cac-b769-764bf0c32815",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7a871b70-c947-4494-a730-c1a72af8bdd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badb2f68-ec56-4322-9f7a-c5bcb921e934",
        "cursor": {
          "ref": "554d91a3-06ac-4f11-8ffa-72b80711cc50",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4954ec80-8958-4280-bf84-c70cca614102"
        },
        "item": {
          "id": "badb2f68-ec56-4322-9f7a-c5bcb921e934",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1ee80377-e97c-4a8f-9efa-ac8656f607d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d2db45-96c1-4432-ab7a-1a0f1ebaf8c7",
        "cursor": {
          "ref": "29c28b76-c5d5-4898-bf5d-c2a41451047f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f9ddf51d-c7f9-45f5-946d-4d05c74b6c0e"
        },
        "item": {
          "id": "57d2db45-96c1-4432-ab7a-1a0f1ebaf8c7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d20377d2-45c8-4346-91e6-7d51c25be83f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf807ccf-5d64-44cb-850a-d9297beda743",
        "cursor": {
          "ref": "826a53a6-c9ee-4af4-8dc0-91fb353b0e2d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "76878ea5-efc1-4311-b7c4-e5ae0c3c2091"
        },
        "item": {
          "id": "bf807ccf-5d64-44cb-850a-d9297beda743",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1f0dd3b7-d2e0-4887-aebc-965c5a758a49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784bccf3-7718-4506-9339-7aab9cadf9fc",
        "cursor": {
          "ref": "051748e1-da28-455d-9dff-533ed354df04",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "53879f9b-d0b4-4f07-ab5c-9942bd9d48df"
        },
        "item": {
          "id": "784bccf3-7718-4506-9339-7aab9cadf9fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5a2ff243-ba53-4fbe-b6b7-84a2f3afbfcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f4eeef-6899-4f6e-a9f5-4788c80f7685",
        "cursor": {
          "ref": "35c7c59c-97d6-4e29-a93c-ac9d0d4ad207",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b46e051-de21-44b5-9803-7ddd90e60bf6"
        },
        "item": {
          "id": "b6f4eeef-6899-4f6e-a9f5-4788c80f7685",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "21142b9b-ffc0-4ddb-a5eb-c9c42b3859a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b095a4-44b7-494f-9f28-5a7848ed85be",
        "cursor": {
          "ref": "c1620d5c-f5d7-418e-a545-580fdc665807",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "26095bdf-b066-4e13-a27f-ad8c0e7bfa4a"
        },
        "item": {
          "id": "50b095a4-44b7-494f-9f28-5a7848ed85be",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "81eb357f-0032-4bcb-b7dd-618f1afbb85a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9131c234-83b1-44bb-97c9-031b59575d86",
        "cursor": {
          "ref": "4e874756-f215-4dfe-9e62-619927e26215",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "14de95ea-2bf3-4019-bfb0-922e8ea0f437"
        },
        "item": {
          "id": "9131c234-83b1-44bb-97c9-031b59575d86",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "21860d39-1a63-4a73-b3a7-7455c5fba0c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb1a802-d757-4aff-8333-8acdebac819f",
        "cursor": {
          "ref": "94c48dfb-94d7-439e-9874-8e37293b7037",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8ff8e984-0979-4208-856e-393386eeff5e"
        },
        "item": {
          "id": "acb1a802-d757-4aff-8333-8acdebac819f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "477dc2cd-9350-4906-bdc0-dfe1608c9f2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49be107-0bf5-4caa-81dd-2c1fb493448a",
        "cursor": {
          "ref": "c8d66b6e-ad6a-419c-a4d3-a3cf8ae461a8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d0e09838-9ec9-430f-af99-e4866039f3ef"
        },
        "item": {
          "id": "e49be107-0bf5-4caa-81dd-2c1fb493448a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6e56f454-10f7-4414-966a-8c4bff77b2dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c820a883-563b-4e61-9c51-87f1c8cf5af2",
        "cursor": {
          "ref": "8edb3ddf-c783-47fc-909c-02432d2b5f3e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "83a20576-ff82-4b68-a9e0-558af8e97627"
        },
        "item": {
          "id": "c820a883-563b-4e61-9c51-87f1c8cf5af2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7137aa6f-8112-4f2a-9949-098bfbb11f27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7527b1-1622-40dd-883e-4e353f9972b9",
        "cursor": {
          "ref": "f2ed49bf-83a9-443a-b3c7-4460fca22013",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "87c77a2c-72f7-459e-aa00-407d712c4665"
        },
        "item": {
          "id": "0a7527b1-1622-40dd-883e-4e353f9972b9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "df276d16-a01e-4d24-b881-88ca081834c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2270404d-496d-4e34-b83a-50879a2733cc",
        "cursor": {
          "ref": "3ceaf1f2-48ac-4409-b5de-55705c63397d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0a38c2f3-5b29-4d38-8ed2-9d00c21fbc94"
        },
        "item": {
          "id": "2270404d-496d-4e34-b83a-50879a2733cc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4809d73d-703c-4617-9159-f4bc7ee0e396",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f18df5-d631-448f-b663-ea909a75e7e6",
        "cursor": {
          "ref": "8ed3d207-dbe3-4815-b98d-8873315e8725",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f62c3516-d046-42c2-9a9d-5ab4877c10d7"
        },
        "item": {
          "id": "d7f18df5-d631-448f-b663-ea909a75e7e6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0a2b0497-9d95-4b64-b661-0ab032f28360",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25f4ef3-0226-49be-8a57-c413ffdb268e",
        "cursor": {
          "ref": "75b6c78a-ce19-448f-a50b-0be4872a746e",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "26e89921-3235-4015-9812-82ef8c5088a6"
        },
        "item": {
          "id": "a25f4ef3-0226-49be-8a57-c413ffdb268e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0a03f9d0-148f-4899-91c9-7bfc117be717",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733bae39-0951-4f6f-a179-30e119b6dea3",
        "cursor": {
          "ref": "cb78816d-ea5a-411f-8c56-068ab30a23ac",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2e2ac382-4f17-4dc0-9f8a-590a1e751f5c"
        },
        "item": {
          "id": "733bae39-0951-4f6f-a179-30e119b6dea3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dbf533e7-b157-4a1c-84d4-8fdb382a6601",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7f436-43de-484b-9599-f510f1c2ef00",
        "cursor": {
          "ref": "6416b3fb-8487-4b34-b5bc-b50906cf123c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1431bf7d-af3f-46f7-b421-43f931d40a0e"
        },
        "item": {
          "id": "6bc7f436-43de-484b-9599-f510f1c2ef00",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d985d1d6-2be0-473e-8658-782134a8b07b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e161d0f-591d-48dc-8207-723d5904b6e0",
        "cursor": {
          "ref": "dce60eb3-407c-4b48-a1d6-6a12349db2b4",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b0f2735a-b4be-40b8-bb25-f860a8624dce"
        },
        "item": {
          "id": "1e161d0f-591d-48dc-8207-723d5904b6e0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7224fb2a-c46d-4c98-918c-a8df81f77074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8287ea2b-2fa9-486e-bf9d-1e786dc6a50e",
        "cursor": {
          "ref": "d9cbd80e-a240-4565-94c9-a1609af544b4",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9795260f-e319-45f8-b8a5-078437db5ec2"
        },
        "item": {
          "id": "8287ea2b-2fa9-486e-bf9d-1e786dc6a50e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "43c854e8-7b6d-4672-b861-1dae181cc671",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c80e78d-1ce7-4c73-8aa8-6c760a586a13",
        "cursor": {
          "ref": "307cbe5a-fb0b-4f65-abb7-94caa1db9ed5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "13698125-731a-4250-b980-089e776d517b"
        },
        "item": {
          "id": "5c80e78d-1ce7-4c73-8aa8-6c760a586a13",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3c819136-5354-47a1-82f1-e1a68e5fa89c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1d8cd0-c8ff-4f55-9ed7-e74aa6c6c826",
        "cursor": {
          "ref": "4b7d677f-995a-4a39-be6f-f3ea50426034",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "317167e6-eb2f-4c14-9975-134a39e449a1"
        },
        "item": {
          "id": "0b1d8cd0-c8ff-4f55-9ed7-e74aa6c6c826",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7043ff9-574c-45c1-82df-a3fa2fe50809",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e1658d-0312-4ffa-88ee-00c764aa27da",
        "cursor": {
          "ref": "18189562-593f-4005-b938-c655296de96f",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f6eceb2c-4b41-46ee-9f33-5ffa7f398443"
        },
        "item": {
          "id": "93e1658d-0312-4ffa-88ee-00c764aa27da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c299864e-008c-414e-bd58-9736b78cc26d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613d7874-9717-4a89-bc21-49ea27fa8bd7",
        "cursor": {
          "ref": "923e47f2-9546-4e04-9e05-ae3f5c35afd8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0448ec10-3e67-446a-a69e-be1b497c779a"
        },
        "item": {
          "id": "613d7874-9717-4a89-bc21-49ea27fa8bd7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "504f6a10-1f74-4f39-a324-2d42ddb28a88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa6f6fb-5912-4e19-a217-d0769e0047a1",
        "cursor": {
          "ref": "167ce7e6-f6fc-48e1-b611-7aa20ebf998b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "42f74eab-1737-44d2-bbab-b7e05ea72df2"
        },
        "item": {
          "id": "7aa6f6fb-5912-4e19-a217-d0769e0047a1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "07d72a25-2fa7-4997-9456-1f5b34e5cc24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abdfc41-2456-47f8-8677-9bc1395f095f",
        "cursor": {
          "ref": "f447cc2c-196f-4e79-b65f-e99dd4e9ef16",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40f6f7c9-8f19-4c9e-b36a-81551a1607a8"
        },
        "item": {
          "id": "4abdfc41-2456-47f8-8677-9bc1395f095f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bc5bcbff-7be7-4a5e-af96-1d35c505d11b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fba3386-b24f-415f-828d-a676046e2558",
        "cursor": {
          "ref": "f016286e-e72b-4f99-a5f3-833619980417",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5710ec99-fa1d-4072-aef6-0b3890d3519c"
        },
        "item": {
          "id": "3fba3386-b24f-415f-828d-a676046e2558",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "add86cff-28f0-4f63-bd8d-0dfb77bbf0d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868d8bb1-2335-4569-9830-c9038120e2e4",
        "cursor": {
          "ref": "1ab9027f-2a3c-461c-8068-88613d79e0f3",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b515eb82-26ae-4326-acb5-031d3ec2a746"
        },
        "item": {
          "id": "868d8bb1-2335-4569-9830-c9038120e2e4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "db9069d6-8522-4234-b6b3-0972d875868d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1af474-efe7-48bb-9d02-990ec8eee39a",
        "cursor": {
          "ref": "84d3bda5-5397-4b60-be62-75b3d2a4feca",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cca8ec6c-a64c-4bac-8d8c-3d18ada0a29c"
        },
        "item": {
          "id": "de1af474-efe7-48bb-9d02-990ec8eee39a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8529dbb1-9098-4a4e-9a35-bfa3b22d04ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4440b8e0-095f-4e5e-b31a-a08d22ec8507",
        "cursor": {
          "ref": "54d78b51-1be0-4520-af4a-76feeb71e615",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c01fc03c-9e2b-4593-9461-3ad64cfe5d91"
        },
        "item": {
          "id": "4440b8e0-095f-4e5e-b31a-a08d22ec8507",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2ad2cbb7-c108-44d7-b121-cfeef5a7ea1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce41d5d0-0c50-4e7d-8516-298a45ef885f",
        "cursor": {
          "ref": "d088ac9b-a176-45dc-ba41-575d957c35c2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a926f634-ae14-4dc3-95df-0a2186d7db41"
        },
        "item": {
          "id": "ce41d5d0-0c50-4e7d-8516-298a45ef885f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0598fb4b-53f2-471d-9f94-69f9571701d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fe0e3c-4729-4fa3-aa96-c3a1ada8749c",
        "cursor": {
          "ref": "ff162b4a-e014-4ec3-99e9-d7b04f54cae5",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ea6e4fd2-f9d4-4d7c-9b27-0ee2bf366452"
        },
        "item": {
          "id": "78fe0e3c-4729-4fa3-aa96-c3a1ada8749c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f62113a2-efb6-41c1-9f10-c5830d655e07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea69713e-ffd9-46ef-adcd-576f795e5872",
        "cursor": {
          "ref": "d9137199-9d16-4c90-8e84-e2b79d5777f8",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "95067a29-61e4-4c62-8121-b7963a9bca49"
        },
        "item": {
          "id": "ea69713e-ffd9-46ef-adcd-576f795e5872",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "03d25bf0-b51e-42ec-bd84-808de474bf1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327b5233-d698-429c-95f3-bdb43959e96b",
        "cursor": {
          "ref": "9f529eb5-f2d2-4521-86f1-6183b5e07a14",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3d8c46f0-bb82-4cf0-bce6-a71b4d8760de"
        },
        "item": {
          "id": "327b5233-d698-429c-95f3-bdb43959e96b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "60a423ff-d9fa-41fc-917c-4b62851f51f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee48eb0-e174-4821-86d7-eb815e1ba13e",
        "cursor": {
          "ref": "1cf23f03-91f1-43a9-9b08-30f3d19a167a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "587ad856-fe03-4276-9bc3-95f8f1613bd6"
        },
        "item": {
          "id": "7ee48eb0-e174-4821-86d7-eb815e1ba13e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cf2a3a23-8414-434a-8027-786edf47d11c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43de6023-03d5-4308-a640-f273032d92a6",
        "cursor": {
          "ref": "2fe0063c-da88-4b9e-b65a-d1df6ce26ef7",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fd7c23db-54ab-4482-a746-14739d310a74"
        },
        "item": {
          "id": "43de6023-03d5-4308-a640-f273032d92a6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "733e1365-2123-4a9a-84ad-4ebfd9698896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd035ca-0706-4b0f-9d63-4c0bcbb42144",
        "cursor": {
          "ref": "0accfbce-03e2-4309-888e-d5d4b5a44460",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "346fc559-b5e1-42ca-8303-96b22271ce07"
        },
        "item": {
          "id": "2dd035ca-0706-4b0f-9d63-4c0bcbb42144",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e73f55b7-1a7e-421d-ae6f-f24310e984e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dde88e4-cda5-4c41-bda4-0a03e114eb6b",
        "cursor": {
          "ref": "fcdf2d76-e903-40ee-bf59-8fd4609ada33",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3c548e6f-148f-437f-b9e2-67eefdee1ba3"
        },
        "item": {
          "id": "1dde88e4-cda5-4c41-bda4-0a03e114eb6b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "712301f8-c090-44a2-9594-afbace48011c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70766aa0-8311-464b-ac5e-eb4e01c086f7",
        "cursor": {
          "ref": "29b04cf0-ddcf-42db-a3d3-190a8a1d402c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "034bebb7-ebeb-43a7-81a3-7513aff4526f"
        },
        "item": {
          "id": "70766aa0-8311-464b-ac5e-eb4e01c086f7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b622b627-2e97-494a-9872-72f1c7dddd9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db198154-8612-40a6-9956-0263ddb92060",
        "cursor": {
          "ref": "1e8ab9d7-a9ff-4536-8ba8-f8cbb0dabd95",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5ea4d490-723d-4a2f-888a-925d7ace271a"
        },
        "item": {
          "id": "db198154-8612-40a6-9956-0263ddb92060",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b6b7c306-7a82-4ee6-9985-8c84c93f57b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0832f634-e0b8-4ffe-89fc-5c2657aa4fa8",
        "cursor": {
          "ref": "583d0aa3-be40-435b-acf7-27102e2ef237",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9773c4cf-5963-4e1b-9669-a47c56338887"
        },
        "item": {
          "id": "0832f634-e0b8-4ffe-89fc-5c2657aa4fa8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "91a640a6-af87-4ad1-a524-2784adf632ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2899a7bc-63a3-48d1-86a5-780fd68ee42d",
        "cursor": {
          "ref": "abe80682-79a3-45e0-901d-edbc33bf9d48",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "de59b3b3-22fc-4495-8355-78ca3dfca9ef"
        },
        "item": {
          "id": "2899a7bc-63a3-48d1-86a5-780fd68ee42d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c470068a-4f8a-4c3f-ad08-43ecc29d9249",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f654db5c-6aa9-47e1-a786-eee6b30e9ee0",
        "cursor": {
          "ref": "c560492e-3503-4708-b38c-57fd98c34add",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9d77359b-93a2-4c9f-b647-e58078c8fd15"
        },
        "item": {
          "id": "f654db5c-6aa9-47e1-a786-eee6b30e9ee0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "62659679-ba0f-439c-94bf-a33913bd5654",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a832508-5ced-419b-8604-1aec89274c47",
        "cursor": {
          "ref": "fc6ddcbb-43b0-4e6a-98ab-6ad602138ed5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "00084c09-d553-4c37-8ae3-c199ac18f770"
        },
        "item": {
          "id": "5a832508-5ced-419b-8604-1aec89274c47",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9f1af7e3-d1ef-4ecd-b9d7-d2857ec1b1d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfb5730-e751-4f06-b7c1-76630f61606c",
        "cursor": {
          "ref": "9d0dbf42-95d7-499d-a197-82f22d7b9fe6",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "53183fe7-1b1f-4f46-ae9b-bf90c4cd9cc4"
        },
        "item": {
          "id": "fbfb5730-e751-4f06-b7c1-76630f61606c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "96b95ecb-ba00-49fd-81ba-2b941c6dea76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3eb665-0a09-4954-b1fe-2d516fd5702a",
        "cursor": {
          "ref": "84b197a3-d7d1-45f9-9e02-443fbf4758f9",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "66977513-f8ac-427e-847a-4817ea8a21f3"
        },
        "item": {
          "id": "4e3eb665-0a09-4954-b1fe-2d516fd5702a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a85f569a-9483-4995-be30-2b6cd250e6d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed756a6-28a7-4f21-9962-347fcad0f0d4",
        "cursor": {
          "ref": "4ea0a616-19b1-459b-885d-0fd6bef7e123",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "95aef84b-6582-4fe1-9d84-4f77c1fa8774"
        },
        "item": {
          "id": "7ed756a6-28a7-4f21-9962-347fcad0f0d4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c977a97b-0ae3-4058-aaf4-bac73bc240c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1167ac-e1d4-431e-94fd-3ce571608b2a",
        "cursor": {
          "ref": "831fd8c6-b95b-4ac9-bdc3-d56aa2706d7b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d596a281-181e-4bcd-9ea6-aef4393c1f54"
        },
        "item": {
          "id": "ab1167ac-e1d4-431e-94fd-3ce571608b2a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6fe8f94c-cb7c-4a65-a847-c5c12d2bf5ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a568ed4b-b5f7-4d53-9786-6249e0cfb8dc",
        "cursor": {
          "ref": "e42feefc-0fc6-496b-b1c9-4a8c191df28d",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a4eb53b0-00b4-4ef8-aaf0-e47a89d6eba5"
        },
        "item": {
          "id": "a568ed4b-b5f7-4d53-9786-6249e0cfb8dc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f7bcce68-d8c4-436f-8262-319d6f0f25ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3892d0-16e0-4285-896b-6d65e198a2c1",
        "cursor": {
          "ref": "17effaf0-79b1-462b-968e-9dac4e33526c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "067dd860-af33-405b-a382-60daf3ba5ef6"
        },
        "item": {
          "id": "ee3892d0-16e0-4285-896b-6d65e198a2c1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e1a0986-22ae-45ea-8436-9347e8d10a06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ebedcf-cce0-4924-b7af-694ec0726c4d",
        "cursor": {
          "ref": "8173ae75-60cf-4680-b389-51d6aea0346c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "55f38c23-5d0c-4cc9-975d-900bcc3883c5"
        },
        "item": {
          "id": "e9ebedcf-cce0-4924-b7af-694ec0726c4d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "06f23a37-3bd2-4fb0-9160-db1fc4593734",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a2ea3c-916b-40f3-8714-1a35faebda12",
        "cursor": {
          "ref": "208809a7-b226-4ea6-9291-84622051fa57",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "827b049e-572d-4621-a5c7-02e74b73e4f1"
        },
        "item": {
          "id": "30a2ea3c-916b-40f3-8714-1a35faebda12",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7514c634-8da3-4817-96f4-313f075da63f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a3ce72-b50e-415e-a889-43c3a31bacb5",
        "cursor": {
          "ref": "2842e25a-d2e1-431d-8836-e06ba32d6f96",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "82fcd16c-6559-4a8a-82d3-cb6b264eef0d"
        },
        "item": {
          "id": "b5a3ce72-b50e-415e-a889-43c3a31bacb5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "22b2ac98-d148-4478-a789-bfa0d60cae88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbb3dfd-1228-47c4-ac82-f697cd29fd1c",
        "cursor": {
          "ref": "8f10174e-b568-4914-b1c6-9873f3405bc6",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6afb11ec-add7-4ec0-8b23-a22dc695b9d4"
        },
        "item": {
          "id": "ddbb3dfd-1228-47c4-ac82-f697cd29fd1c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5358136d-ff92-4ac6-83fd-61120938582f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52627101-abe7-4939-b9b4-cd687c761883",
        "cursor": {
          "ref": "d34cd77c-24dc-4286-9bca-83366e52e04f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4bbe545b-058b-4952-a01b-64bef2addab9"
        },
        "item": {
          "id": "52627101-abe7-4939-b9b4-cd687c761883",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7aa34115-104c-45b7-9ffb-90c936b10d5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652403f7-c66d-47f6-84f4-0a306a032397",
        "cursor": {
          "ref": "6a06c521-dea2-4427-86b4-0b34d71bf74b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e6fc2ae3-dce7-4b74-bb0c-f947da8a210b"
        },
        "item": {
          "id": "652403f7-c66d-47f6-84f4-0a306a032397",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c52b6161-0e89-4dbd-bebd-fa636a6d1236",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87565e7b-6701-4509-a90a-d80fdaff14e5",
        "cursor": {
          "ref": "c8ebfd7e-6a54-42a8-b474-d1b58751cb7a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4b5f97c1-90b8-40ff-a277-b1e98dc4ce21"
        },
        "item": {
          "id": "87565e7b-6701-4509-a90a-d80fdaff14e5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "18510fbf-7017-4eba-86cc-e744dcd85400",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46fb948-5ae4-4fdd-bbf6-e858ce8d686e",
        "cursor": {
          "ref": "3afcad9b-5182-4746-a2a0-234d86d02b0d",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ac23be53-c319-4553-ac9a-51dc01b8669d"
        },
        "item": {
          "id": "d46fb948-5ae4-4fdd-bbf6-e858ce8d686e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ed7cd0e4-955c-48a1-8e50-a594fbfac855",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c579779e-dbc7-41bf-be9c-07cd2540b142",
        "cursor": {
          "ref": "aa663030-37d0-40bb-9acc-07e2efad00f0",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a85e413d-4d22-45d9-934f-51c94c68ba7f"
        },
        "item": {
          "id": "c579779e-dbc7-41bf-be9c-07cd2540b142",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9ae2e085-f9df-4773-acca-46303c7eea3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1b18fe-f765-4170-9d0b-6307284e064f",
        "cursor": {
          "ref": "f36545fd-0815-400a-b361-b1107aae045e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2811278c-f0c7-4df7-9eac-9d5357c43660"
        },
        "item": {
          "id": "0f1b18fe-f765-4170-9d0b-6307284e064f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "184a3e60-b4a8-4315-a64e-b1ed01141584",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226d8fd1-a5da-4a12-816d-002427cd3c12",
        "cursor": {
          "ref": "91f92f6f-9d77-4797-a804-69aa0061afa7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b114487a-272c-4d6e-9f0e-726aea51a009"
        },
        "item": {
          "id": "226d8fd1-a5da-4a12-816d-002427cd3c12",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c4fb3ed5-077b-4d12-9da8-27c90fb23af9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bd8bcc-bbec-4eee-a6c7-1d2a617be98a",
        "cursor": {
          "ref": "fe35bf35-5e45-474d-b7ae-69a451698c95",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e4995918-e64e-492f-9a38-dc680bea6b48"
        },
        "item": {
          "id": "78bd8bcc-bbec-4eee-a6c7-1d2a617be98a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0b8b8df6-4172-4ea6-9cd4-a402830c6b1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaf9ceb-0957-4d4a-b1a9-28327384f132",
        "cursor": {
          "ref": "0baf99a7-ac98-4921-bdb8-4db4af4917a9",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7e4ae9bc-df76-4982-9678-b70817cc8556"
        },
        "item": {
          "id": "caaf9ceb-0957-4d4a-b1a9-28327384f132",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "235d5691-7a0a-4258-923f-0c2de320adb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287e7fa9-e78f-486e-968f-af016df29c56",
        "cursor": {
          "ref": "3f27b094-5f01-4faa-9d56-128c66e05eb1",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3c088b67-14c3-4102-b412-19a7b8f42e92"
        },
        "item": {
          "id": "287e7fa9-e78f-486e-968f-af016df29c56",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ef7577f9-3dca-47f1-94ae-45a63eb06a3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2170bcac-7903-43fe-bd99-36eacfa8202c",
        "cursor": {
          "ref": "2083cdb5-7f00-4350-b37a-1453f711e06f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ec127caa-2440-450d-88c7-78ec25b36936"
        },
        "item": {
          "id": "2170bcac-7903-43fe-bd99-36eacfa8202c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f04b91c7-bd30-4119-8576-0c1184c42bb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311db888-ec83-4de4-a07e-5fe695ae1ae0",
        "cursor": {
          "ref": "aa5da762-c609-49ac-a4d3-f438c8fa6d8b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c10ce2db-8f80-4fd8-a45f-4ee290643899"
        },
        "item": {
          "id": "311db888-ec83-4de4-a07e-5fe695ae1ae0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a5cc16f4-83f8-4454-afc9-f9594afb565e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f0cbed-58c4-425a-8f59-c80bfe75afea",
        "cursor": {
          "ref": "b2ff1664-e67d-4665-855e-8aba0c91471c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0c95343c-f1a4-498c-9dd7-cbdf08067330"
        },
        "item": {
          "id": "47f0cbed-58c4-425a-8f59-c80bfe75afea",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "969f9fb2-894d-483d-b1c8-dcb691e8111c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee7db9c-1aed-469b-8fcd-267a3ee9c302",
        "cursor": {
          "ref": "265455ac-94d5-43dc-97a3-c4c3aa525d57",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aa567c62-e588-4bcf-9d5e-a1d7a875fd0d"
        },
        "item": {
          "id": "7ee7db9c-1aed-469b-8fcd-267a3ee9c302",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4df6967b-62c8-4688-9ce0-1a54685107a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3317a16b-842c-488c-81a2-82886f36df59",
        "cursor": {
          "ref": "8e246263-ce22-418a-9f81-b3998f0a382b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ab7811de-c937-4ff6-9d85-c4c583e221c2"
        },
        "item": {
          "id": "3317a16b-842c-488c-81a2-82886f36df59",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6aeaa1fc-6f38-4a79-ab4a-265af36f9f6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0058e1-d181-415c-b934-6cafe910f0bf",
        "cursor": {
          "ref": "9739d2bb-4cb5-4601-b1d1-c349990fe454",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b48a942-cdf5-449d-bcc2-d2b148186ec3"
        },
        "item": {
          "id": "bb0058e1-d181-415c-b934-6cafe910f0bf",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "928639b5-47e0-484a-aae3-32a8ecd0db78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def01fe8-d951-473f-a17c-00f145da447c",
        "cursor": {
          "ref": "2d7a692d-f70a-47a7-9900-eede21958660",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a62c6189-6d73-4e41-b56a-a28ae2594bae"
        },
        "item": {
          "id": "def01fe8-d951-473f-a17c-00f145da447c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d35669f3-382e-4e5a-9802-099d2f3b1518",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09335875-68d6-46c3-8c62-307944781f73",
        "cursor": {
          "ref": "02d2758f-4b4d-459e-a83f-6aad4ea74215",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ba367800-a2ca-4c3c-b47c-2675b68bbf9d"
        },
        "item": {
          "id": "09335875-68d6-46c3-8c62-307944781f73",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8437a952-0596-488a-9614-7fd709fa9b7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc5fd59-2b9f-43bd-85f4-2d6772a228cf",
        "cursor": {
          "ref": "13892cf4-5166-41bb-9695-1061d251a685",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d5fe506c-7897-44fb-9adb-c5b2f3a7e928"
        },
        "item": {
          "id": "3fc5fd59-2b9f-43bd-85f4-2d6772a228cf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c6e3705a-4a33-451c-bc3b-b31ae0abacf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3686c00e-1395-4c03-9fcb-5754888ebe66",
        "cursor": {
          "ref": "2a4dd8e3-cffb-4676-b64b-850661b1a5bd",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "09424be1-9824-45cc-9aed-fce3af1cdf1e"
        },
        "item": {
          "id": "3686c00e-1395-4c03-9fcb-5754888ebe66",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "971b3f8d-c1c1-4ecf-bd2e-ce06dafd8b69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3391f0fa-1dd4-44b3-9bd8-285a71fa82aa",
        "cursor": {
          "ref": "8b14905a-87a6-412d-9fd1-53d523687b0a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fd0eb2a9-fb8e-498c-ba69-347e355c5ad9"
        },
        "item": {
          "id": "3391f0fa-1dd4-44b3-9bd8-285a71fa82aa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a8f83039-1b90-414e-934f-9aecaac1751d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd0aa54-fd57-4c0f-942a-7f0b8fd88466",
        "cursor": {
          "ref": "444c8568-fee5-4141-a759-92c9b83883b6",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "34d11bb3-540e-4782-9591-f47a21bf22ed"
        },
        "item": {
          "id": "ffd0aa54-fd57-4c0f-942a-7f0b8fd88466",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f960744-fdb3-4f57-8cd3-832f8cb0d754",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d472591d-7a30-4393-9bff-6842b68a392b",
        "cursor": {
          "ref": "ce776602-225e-4127-9ef3-542f2533ec02",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e1c761b6-1f2f-466b-9dfb-28f3aedebda9"
        },
        "item": {
          "id": "d472591d-7a30-4393-9bff-6842b68a392b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e45011ed-c1eb-4c97-9cdd-00d562985601",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f38c9a4-d0f2-4bfe-85e6-4a84d571895e",
        "cursor": {
          "ref": "e46eb658-28a6-4374-b92d-28f0b868b745",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d95a37b3-c80b-4746-8324-a143df7fa4a1"
        },
        "item": {
          "id": "1f38c9a4-d0f2-4bfe-85e6-4a84d571895e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a8bf5bfb-3e87-42e2-a10b-71e50a4522cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac867a88-0f86-4025-bde7-5808098cc241",
        "cursor": {
          "ref": "80085f9c-de40-461f-871d-d3e29fdb9eaa",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1a1ae4f2-9401-4eaf-b11c-0c341a5202a6"
        },
        "item": {
          "id": "ac867a88-0f86-4025-bde7-5808098cc241",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "84a26fdf-4e8d-4344-bb42-c6c8d76a804a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85392686-d914-41c6-a962-3f2344b99deb",
        "cursor": {
          "ref": "2ee2278c-5836-4ad7-bede-3790388a2244",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55f8b797-9199-4f93-8b24-1194bcb51c06"
        },
        "item": {
          "id": "85392686-d914-41c6-a962-3f2344b99deb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d2fa9b7f-477b-42c2-8a09-a67012c9cc02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3132c69-76fd-4ffa-b32d-b1c152f0d63f",
        "cursor": {
          "ref": "b4e22fe8-3aee-4a59-aa99-888db4158dd8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7c119858-2321-4c98-aab4-0ab14c397b01"
        },
        "item": {
          "id": "d3132c69-76fd-4ffa-b32d-b1c152f0d63f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "52976d10-d635-40a8-9d0b-c631a410992a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973d755a-8859-4ad1-8777-b1199da82a94",
        "cursor": {
          "ref": "7c06205f-69a4-4257-8b79-9df2f62b989d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b8eb93a7-ee6f-47ba-bed7-31a0b34becd0"
        },
        "item": {
          "id": "973d755a-8859-4ad1-8777-b1199da82a94",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7dec0d5e-333a-4494-b3f6-e959826dbc61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6010e23d-e9a0-4189-b6ca-4b40088ddcb1",
        "cursor": {
          "ref": "cf92c211-4c82-4b62-a7ec-8ce3dcd57a0f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c110dac5-cc6e-4df0-a42d-0e9eb4f265ae"
        },
        "item": {
          "id": "6010e23d-e9a0-4189-b6ca-4b40088ddcb1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0313c8eb-0b28-4ac7-929f-cb2fc803a45c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80fffca-0ace-4b57-b61a-701900853235",
        "cursor": {
          "ref": "0419e865-768a-44d6-8c34-003c921b57b1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cd425dc7-e548-4ffc-a08d-7fd73a6e7f57"
        },
        "item": {
          "id": "b80fffca-0ace-4b57-b61a-701900853235",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cc9c3097-8156-427f-8971-b7c5ae655411",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45441a4f-a19e-40ab-b60d-df53fae7a78f",
        "cursor": {
          "ref": "1503912b-ab17-4cb4-ab33-1dbae76bb962",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ebb94dd2-40f4-4954-bdb9-9118e0df92b0"
        },
        "item": {
          "id": "45441a4f-a19e-40ab-b60d-df53fae7a78f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f32d21d7-60b8-4faf-9735-fc4c651bbd56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e670049f-87b9-48b2-a69e-e0ba63db4128",
        "cursor": {
          "ref": "5e59746d-6b4f-431a-aa02-0336e2aa7103",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "99ff1428-f9b2-4e44-887f-dbc38a8a9f87"
        },
        "item": {
          "id": "e670049f-87b9-48b2-a69e-e0ba63db4128",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ae834042-0b1f-4a8c-804b-18865ecba0ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4922e9e-b0bf-4469-bffb-7cea464cc40f",
        "cursor": {
          "ref": "36278b59-11fc-460d-93d1-b4f2d8e6308a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "00f25320-c5d2-45f9-b524-01feb814a868"
        },
        "item": {
          "id": "f4922e9e-b0bf-4469-bffb-7cea464cc40f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fed4c546-12b8-47c9-8200-bb50b1d456ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584420d6-9015-4550-a7b0-c4613c8fa779",
        "cursor": {
          "ref": "fba0d458-a942-485e-9e9e-86da55d7e16f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bcb790c0-f1d0-44ba-97d2-662ca8bd7e8d"
        },
        "item": {
          "id": "584420d6-9015-4550-a7b0-c4613c8fa779",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b9b69ad9-fb72-4f31-accf-899240db647d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7700fd8-c71c-4d81-8b8e-c603f18a1445",
        "cursor": {
          "ref": "a932631d-46f5-42ce-ad11-dfae9c7b06db",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "950788c9-8c60-4ed1-bf10-38ca798bb335"
        },
        "item": {
          "id": "e7700fd8-c71c-4d81-8b8e-c603f18a1445",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4964e0f1-4ab5-4474-9495-2590e737d3cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98aef51-8ad6-443e-8fd2-eedbe24a7cde",
        "cursor": {
          "ref": "10b4477e-6dd0-46db-a5c2-2a60bed432bb",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3d2aea78-b301-4bc5-a121-0b08930e20b6"
        },
        "item": {
          "id": "c98aef51-8ad6-443e-8fd2-eedbe24a7cde",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "958b7a03-83b9-4613-9fc3-37a80e8784f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 138,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd277c41-3730-48bf-b4b1-3017b038e4aa",
        "cursor": {
          "ref": "a377848a-e63c-4936-88f0-df0d34d6f3f1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "826b74c5-2e5c-4b5c-b0c3-f75a3b9c0697"
        },
        "item": {
          "id": "bd277c41-3730-48bf-b4b1-3017b038e4aa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e018ac73-95b8-4975-b5b9-4f8bc5b13872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4c9356-4baf-499d-b69e-9dcb040a21df",
        "cursor": {
          "ref": "7734b70c-8b3d-4f7a-a2f6-cf06edafe880",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ce49d047-ecc0-4d21-af5b-3a23547a9314"
        },
        "item": {
          "id": "2f4c9356-4baf-499d-b69e-9dcb040a21df",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2242c425-77dc-444a-b496-0831cbfc29f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37964674-9914-4d01-9bd4-888c59630ec7",
        "cursor": {
          "ref": "233067d4-2574-4d3a-a50e-b9b69fb857c0",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a725b71c-e707-4a57-a4a9-f71ce4cac4fc"
        },
        "item": {
          "id": "37964674-9914-4d01-9bd4-888c59630ec7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2a797dfd-406e-4ae4-a021-d551d1614171",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21763c3-da8b-4a9c-a296-a0ffe7eb0a85",
        "cursor": {
          "ref": "8e849621-05c3-4600-8fc9-fab914740ef7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "abc414b1-7753-4758-93e3-1f2e930b8ecd"
        },
        "item": {
          "id": "e21763c3-da8b-4a9c-a296-a0ffe7eb0a85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9b6fe045-eacc-48ad-a2d3-ec261c32a505",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9717ba3b-93e8-4691-8e50-3c74457a388f",
        "cursor": {
          "ref": "7ff5dc16-dbc5-42d4-a754-197f89f58040",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5d8773f1-4f8e-4541-b30d-596a4d6a37f5"
        },
        "item": {
          "id": "9717ba3b-93e8-4691-8e50-3c74457a388f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1e3e91be-d9d5-453a-971c-fb6f0c1f133d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575fe55c-3f89-4515-b82b-9bd6c7aae7ac",
        "cursor": {
          "ref": "605b10a6-fb13-46c8-811c-98d436cb0199",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "34677239-3598-4fd9-bd15-5694b8e6fb99"
        },
        "item": {
          "id": "575fe55c-3f89-4515-b82b-9bd6c7aae7ac",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d13e62d0-3c2d-4e19-af7a-5884b0283f16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f892f89-43ca-4f36-8444-72218c0665cf",
        "cursor": {
          "ref": "d9e03da7-9628-40fa-b2f6-7ea888cb6847",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "985fab73-e54c-4f8d-bf8e-5bad67f4c29d"
        },
        "item": {
          "id": "3f892f89-43ca-4f36-8444-72218c0665cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e2bfb417-a2c6-4a94-a179-00f824a60e29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd9dc2f-f906-4c7f-a94e-f33f56f62c46",
        "cursor": {
          "ref": "ccd41688-f357-4784-99cd-a2216e71b0b3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4f674d77-5c75-4d49-8acf-20c2862e7b85"
        },
        "item": {
          "id": "8fd9dc2f-f906-4c7f-a94e-f33f56f62c46",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9ac73bda-329f-4bb7-acef-af895378bfea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e2d346-48f0-4d59-a4c6-21e62220e602",
        "cursor": {
          "ref": "8705b702-caab-4d89-91a7-48d958a693dd",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "12857d6e-372f-4ab5-8a38-b75167e156bc"
        },
        "item": {
          "id": "67e2d346-48f0-4d59-a4c6-21e62220e602",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3184acfb-b5a6-4aef-8b07-7f58169bb7f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a82d51e-2730-4d5a-a51f-8562b69cb3ae",
        "cursor": {
          "ref": "04a62151-d0bc-461e-934f-085624654066",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "372893fe-9056-4443-bd9f-ab47d17f8376"
        },
        "item": {
          "id": "4a82d51e-2730-4d5a-a51f-8562b69cb3ae",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e8e8ac22-f6a1-4865-87ad-6115eaf28663",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7535d9e1-c562-4833-8a8d-a399e2eba933",
        "cursor": {
          "ref": "254a7888-2c3d-4714-bfef-9e343a95a9e7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "482383d8-f237-45c3-aac2-8717b5555bc8"
        },
        "item": {
          "id": "7535d9e1-c562-4833-8a8d-a399e2eba933",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "27e0823a-6452-495e-9ec9-15a4f9854ed5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6093ae88-2c72-4731-9b90-dd08188663b8",
        "cursor": {
          "ref": "bdd65fb8-90ce-4f9a-a55f-c04285f9474e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "94d30d85-3daf-404c-947e-eb77d2a83b4e"
        },
        "item": {
          "id": "6093ae88-2c72-4731-9b90-dd08188663b8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ff9bd71e-c19d-4ad5-b5ed-908c2759221a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede13fca-565d-468c-ae71-1d094eaa4e2c",
        "cursor": {
          "ref": "2eca983e-40ec-441e-bae6-38772db56439",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0b362075-5f69-4f6f-b9a7-3dd632e79f22"
        },
        "item": {
          "id": "ede13fca-565d-468c-ae71-1d094eaa4e2c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8f4d7004-2b4a-4e2b-9e12-382344da2649",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af4613d-8fa0-4f22-b85f-50684ce2602c",
        "cursor": {
          "ref": "574979c7-05f6-42e5-a108-77f051c7454c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "68041bc0-e344-45d5-ab30-c5a1ae7e3f9a"
        },
        "item": {
          "id": "4af4613d-8fa0-4f22-b85f-50684ce2602c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d0932cdc-66ff-47fe-abc8-00a505805ead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60010fb5-9f9d-4b51-8ecf-f4babbe67200",
        "cursor": {
          "ref": "054bca27-1eb9-4050-a2f6-3baef392d275",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d02b64a6-9fa4-4b5a-a99c-148007df476d"
        },
        "item": {
          "id": "60010fb5-9f9d-4b51-8ecf-f4babbe67200",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "818dc62b-8718-49cb-a8ae-6cee9e972981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ea27e1-ad72-4d90-87ef-a575f4423137",
        "cursor": {
          "ref": "caeba366-5f3f-4a6b-b9a1-2bd539d8d426",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e01b2610-d288-4f20-b1ca-e162a1c4ef23"
        },
        "item": {
          "id": "d3ea27e1-ad72-4d90-87ef-a575f4423137",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9a240915-e988-4f22-87be-4dfc864455e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcde725f-9010-4689-8730-107f1945b6d2",
        "cursor": {
          "ref": "9cb31be9-7fdd-4bbd-ad38-6ecc5bf97456",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0eeeef5f-c99c-4426-b526-d2c69c99d481"
        },
        "item": {
          "id": "fcde725f-9010-4689-8730-107f1945b6d2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b1dc4397-a59f-4d19-bd49-8d9bb983c2fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7779debf-a231-40fc-9659-74ffc29e9d8c",
        "cursor": {
          "ref": "55dd301b-eb17-4932-a997-e83829853b34",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "26933d6d-77e5-4033-85e1-b7890f7e4960"
        },
        "item": {
          "id": "7779debf-a231-40fc-9659-74ffc29e9d8c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f119cdfb-5285-4eba-b115-05d500d1c74d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657591ec-6249-4ca7-8207-12d3c3743bfa",
        "cursor": {
          "ref": "73dba10c-8ffe-40fe-9eea-b166e6ebc4a2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "af7a4420-849e-43cd-8655-90479bbb4477"
        },
        "item": {
          "id": "657591ec-6249-4ca7-8207-12d3c3743bfa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8b446046-7d37-42d0-9983-585b07b31d7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e806f081-7fb8-459e-81ef-d6de89cd108d",
        "cursor": {
          "ref": "a8552c40-856c-404f-a632-c86822b96c98",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2bbb9cb6-2eda-4d25-84a7-eefc99947794"
        },
        "item": {
          "id": "e806f081-7fb8-459e-81ef-d6de89cd108d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "de5c8450-99f4-475c-bed3-ecbfa2da6353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87475305-142d-4193-bca8-c5329f331cc5",
        "cursor": {
          "ref": "3a45b6fd-40d4-44f2-8432-c4e52f304dfc",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b5fbd0fa-e5bb-4a39-9e90-3d0dada0d93e"
        },
        "item": {
          "id": "87475305-142d-4193-bca8-c5329f331cc5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ac005019-c58d-4ca4-868e-9e9fdf9b5cee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c309b6-88c5-4c14-bacc-cd22cbd74902",
        "cursor": {
          "ref": "0d828693-8651-46b6-bb14-b99df4a51ce7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "733471ca-3c7d-473c-8f85-34b22baad9b7"
        },
        "item": {
          "id": "46c309b6-88c5-4c14-bacc-cd22cbd74902",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b33c9ba6-203f-4a53-b46d-7890cb3ae56a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671123cc-12ef-4747-bef4-2be39efd0f32",
        "cursor": {
          "ref": "c71e85dc-c47e-49dd-a514-0c9227a08a1d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1f46eb97-afae-44ef-8eb5-29def533093f"
        },
        "item": {
          "id": "671123cc-12ef-4747-bef4-2be39efd0f32",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0179c1b5-87da-4626-a2ba-6bacea850b5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c2b011-a327-423c-9a8f-768c9228a903",
        "cursor": {
          "ref": "06708df5-1ffd-4e6d-ba3c-d5d8c62019d4",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "23580d83-14aa-43fa-ad3c-0fbbc7a257cd"
        },
        "item": {
          "id": "68c2b011-a327-423c-9a8f-768c9228a903",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0006e08b-a951-46de-beab-cd5fc58608d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71dc0c1-6571-4cde-bc33-94252f6feb5a",
        "cursor": {
          "ref": "fb2ab861-39e1-48e0-bf87-0da6684602f3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7a7ecc24-10cc-4285-9d42-e4633fb573f2"
        },
        "item": {
          "id": "c71dc0c1-6571-4cde-bc33-94252f6feb5a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "38448f6b-06e4-48d0-b4be-3f49a4fc0cdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cb1571-476e-479c-82e5-2679d4e60087",
        "cursor": {
          "ref": "c0d4fcf0-d676-446c-be36-67115f47424b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "81e48214-ef54-49f1-a761-51533dbb2202"
        },
        "item": {
          "id": "c6cb1571-476e-479c-82e5-2679d4e60087",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b26fe18b-a90e-44de-9e95-e39b018fc001",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edefa18-3983-45b2-ade0-e58d14485241",
        "cursor": {
          "ref": "a5158ea4-298c-4c23-86b6-9726565d85e7",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0ec48115-5417-480a-89ec-890389b6aa7f"
        },
        "item": {
          "id": "3edefa18-3983-45b2-ade0-e58d14485241",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7176eb55-f2be-4383-a542-93aa87dc4784",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c81bb5-c534-4c46-82d5-a4d754db6fb4",
        "cursor": {
          "ref": "c35e7654-e03d-4acb-8b07-a437d78b5bed",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d27a1b40-1086-4d81-9d07-37ab88f418c2"
        },
        "item": {
          "id": "d2c81bb5-c534-4c46-82d5-a4d754db6fb4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a1f7a013-b22a-428a-8472-734bcde48542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5275e54a-f085-4716-bcae-74f4b0db65cb",
        "cursor": {
          "ref": "1b62852c-0657-4e2a-81a8-13c668357620",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d2501e55-3300-4cd2-a824-57dee57637d4"
        },
        "item": {
          "id": "5275e54a-f085-4716-bcae-74f4b0db65cb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "934d3c8d-5ed9-42ea-8c00-cc608bce62a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4278018f-3493-44d0-95a3-b1f29cf95109",
        "cursor": {
          "ref": "8f5d34c3-ee50-4747-b5ee-31aace3f90d5",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f8051841-cd2c-4169-98c6-c683f1199dc5"
        },
        "item": {
          "id": "4278018f-3493-44d0-95a3-b1f29cf95109",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "779b4c24-9aa9-41b0-a62a-c6a5d4cd3ed9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6b7935-b7dd-4e0d-85c2-37f130c2ece2",
        "cursor": {
          "ref": "21cfcb86-f792-4de6-924e-8c85dfcb7c29",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6df58168-8950-437d-825e-233996cc349a"
        },
        "item": {
          "id": "4b6b7935-b7dd-4e0d-85c2-37f130c2ece2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4d9b11fb-f1eb-4fb9-b7b1-7e369079cd94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203ae101-57a2-4954-a048-cb3598c7a33f",
        "cursor": {
          "ref": "bbb25837-3b5e-470b-9ebb-e5e35ff231bb",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cb09918e-5b53-496c-b7b5-992eb4c0a8a7"
        },
        "item": {
          "id": "203ae101-57a2-4954-a048-cb3598c7a33f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5b95ed9b-254c-4fb3-b207-6265188611e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad5b283-0405-4487-8b20-7c155e60421a",
        "cursor": {
          "ref": "d5cd99bf-c83a-4eca-aadf-65201466d433",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d8de54e4-25ee-4a51-8ca4-b46c25becbb3"
        },
        "item": {
          "id": "fad5b283-0405-4487-8b20-7c155e60421a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "67fcd9fa-65a4-4200-a05e-c6bdd0753345",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e903e6-b00f-4a3e-97f6-99964f38dd3f",
        "cursor": {
          "ref": "ed749ef7-53f5-47ea-ace8-44c7ae03e078",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d26f1b5-dab3-445f-bad6-bd581c7cc151"
        },
        "item": {
          "id": "f7e903e6-b00f-4a3e-97f6-99964f38dd3f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4bb7117b-1d91-4d9b-8f6b-6346a41cd7b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42df4230-e642-401b-89b5-a394147c77f7",
        "cursor": {
          "ref": "102f9574-aed1-4894-924f-62588dc4963e",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "74331ce9-ab75-4bd2-8bf6-4326842d5b75"
        },
        "item": {
          "id": "42df4230-e642-401b-89b5-a394147c77f7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e17afb16-b45e-4373-8096-83f091cd614e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db18fcf-6514-4650-95cd-97d87e72f611",
        "cursor": {
          "ref": "03aea504-95dd-4751-b169-c3a91145b106",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "71ac9756-60a5-4352-ad40-6c42fb8d9dd0"
        },
        "item": {
          "id": "9db18fcf-6514-4650-95cd-97d87e72f611",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a7d72adc-5e2e-499e-834e-0aeab0fa6941",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f626498-5717-4450-8437-9bbef5b8bbed",
        "cursor": {
          "ref": "b849a641-1949-458e-8300-60b5dc74e768",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4f59a8e8-e1fc-41b3-ac59-46e892642d3a"
        },
        "item": {
          "id": "3f626498-5717-4450-8437-9bbef5b8bbed",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "359b58c5-6068-47d9-864a-172c2736a706",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40863ccd-ca22-44dd-b8b8-abc2406cb182",
        "cursor": {
          "ref": "fab490b1-4788-4de4-a035-43d969ff2124",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c9afaacf-5cfc-46a6-a4f0-b35c2421ece9"
        },
        "item": {
          "id": "40863ccd-ca22-44dd-b8b8-abc2406cb182",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c0cc2fbb-be70-4123-a8ae-c7d2813939b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a22061-33ac-40d5-a853-6f93ebdb4d9c",
        "cursor": {
          "ref": "c3e667a9-fd11-4b6b-8c1b-fe63923b5dc7",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fdcf4776-d03b-4248-90ef-ba792d7d7563"
        },
        "item": {
          "id": "b8a22061-33ac-40d5-a853-6f93ebdb4d9c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "12822065-487a-4010-ab40-9561ba7357cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeb6483-5c98-444e-90b3-aa6dcb234dfb",
        "cursor": {
          "ref": "ce15af37-e2e7-437b-8d94-91a2ae8a2ae4",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "86e088f1-c6ec-4b3f-a843-b02b117f0e04"
        },
        "item": {
          "id": "edeb6483-5c98-444e-90b3-aa6dcb234dfb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fafca191-1cbe-4829-a487-f50da82d6762",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355de10b-1ce6-45d2-a1c7-76b3579c6449",
        "cursor": {
          "ref": "21a4af4a-d04b-49d6-a5ab-6a8e98c408d3",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0a3f78db-e38d-4cd8-ba0a-bac7dfa1c5e2"
        },
        "item": {
          "id": "355de10b-1ce6-45d2-a1c7-76b3579c6449",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "81831544-47a5-498e-8223-8e20455d143b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4907562-0640-4a94-bac3-f631c90b675e",
        "cursor": {
          "ref": "52ab2ad1-4f83-485f-a750-50a59c6666a2",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "81b84709-0dbd-4725-926c-bc5d88c8169e"
        },
        "item": {
          "id": "c4907562-0640-4a94-bac3-f631c90b675e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e4d79bb5-f952-4130-9001-b2267ad8756d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ca423dde-fc51-486e-811a-24a8db28bfea",
        "cursor": {
          "ref": "d24c405a-47ac-4698-b02a-243062921b55",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "73ddffdd-879a-4d42-b578-33a324200bf4"
        },
        "item": {
          "id": "ca423dde-fc51-486e-811a-24a8db28bfea",
          "name": "credentials_verify"
        },
        "response": {
          "id": "53d8a595-4807-466b-b74d-7535dd8fc017",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "7f089df4-69af-4934-bdc8-43f3ff7c2f96",
        "cursor": {
          "ref": "97cd4cf1-7294-49b8-aaca-721885c55f5b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "30eb9b6e-823d-477f-9e7b-05cddcffe029"
        },
        "item": {
          "id": "7f089df4-69af-4934-bdc8-43f3ff7c2f96",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9a72372f-db21-456c-a17f-3bf4676a9197",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "aaab478a-2cdd-4095-ac36-5ac305e15239",
        "cursor": {
          "ref": "f0a218a9-eb68-4153-bb9b-d6fe6c94d8c8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da5f1f79-08a4-46ad-9d80-09c4bf4a75fd"
        },
        "item": {
          "id": "aaab478a-2cdd-4095-ac36-5ac305e15239",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "83ec9c03-5166-434a-88a8-70b91a4104cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 2,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaab478a-2cdd-4095-ac36-5ac305e15239",
        "cursor": {
          "ref": "f0a218a9-eb68-4153-bb9b-d6fe6c94d8c8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da5f1f79-08a4-46ad-9d80-09c4bf4a75fd"
        },
        "item": {
          "id": "aaab478a-2cdd-4095-ac36-5ac305e15239",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "83ec9c03-5166-434a-88a8-70b91a4104cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 2,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7796ef05-8a5f-4bb3-a0d1-ef1e2d01df8c",
        "cursor": {
          "ref": "6d90270a-e8a6-431a-abff-bcdb3241e9c2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "25263a79-de91-4945-a2d1-566be9e18b03"
        },
        "item": {
          "id": "7796ef05-8a5f-4bb3-a0d1-ef1e2d01df8c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb021d9d-e0b5-4150-8f0b-3598166392d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26be746-785e-4664-bf42-2305f3f8e05c",
        "cursor": {
          "ref": "a290a9d8-8470-4ed3-a931-1c28d38cd9a2",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f042648e-e094-45ee-9bfc-992dc1255cd0"
        },
        "item": {
          "id": "f26be746-785e-4664-bf42-2305f3f8e05c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4a4f8b25-63b9-4822-a2d1-414d46e168ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}