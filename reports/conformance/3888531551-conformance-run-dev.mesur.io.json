{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "12d89c9b-2662-4755-bc89-01632554ca98",
        "name": "Clear Cache",
        "item": [
          {
            "id": "750bc034-d53b-4d6b-8d5f-4bd0be0c5fc4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a34b9b3-8826-4458-9a1a-18eae00b111f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "412591b1-8cfa-4833-8872-3e4133cdd84a"
                }
              }
            ]
          },
          {
            "id": "73b296f9-4cd0-4d21-b19d-02b8b4d967c9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a667be8f-0707-4b3c-b59b-7a328c97d362",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd9048be-1ee3-4cec-9f14-1d3d435c361c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5613498b-19f0-407d-a8c2-db5452857fdb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "faccb242-fa81-4516-acf9-0cc65fd0975e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e5953b3d-849a-4be8-950e-af89f1e3bfcb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98d3983c-bc86-450f-9c25-186fe78ff3d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b694c0e-78b8-47cc-bd9a-3afbf2e8bf0f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e1e7bd5-9360-4df6-bbd1-339aa18ef802",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fdc24590-b15c-4fe5-8034-dcc48b021687"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f95c519-5b87-46b9-b11c-ea943c8116e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9be59dc1-20e0-44c8-8604-6018d4252e41"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99cdaddd-e941-4d34-a3dc-c5a0d8f09807",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7ed4433d-83c7-4db1-b458-3967379762c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b1db236-ede4-4701-92bb-bd0c938eb402",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb8cb80b-9223-4704-bb74-169bf73413e4"
            }
          }
        ]
      },
      {
        "id": "006fbf7d-36fa-46af-a005-1c3fab62ec5b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "68aeaf32-f00b-4c69-9ce6-17573238e209",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60b5289b-e245-4671-a323-9a86b14d4a2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8295d906-0423-418f-878d-59b4a0ebffcf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edca7aa-2bcd-4402-8da4-959e2f33180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f4587e0-5d6b-405b-b7c5-e65bd11c7eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abfdb88-de07-440f-80b3-73d91f489d44",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191cf4e9-56fa-4694-b57a-10658b2d3915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30783ae6-cead-4610-9f7d-06bb82f0642a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01dc4da-3b3c-423b-a1b6-2a5b7ed19f0e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b41746b-c391-4b95-9085-73e3751723a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be0a94aa-9265-4fb7-a014-bf5b0fabe53a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8775090-eefa-46aa-a3cc-80f111fe40bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2fce13a-a90b-4bea-a75d-b3a71b36ebe0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3ce413-eb09-45ee-829d-9f97368e6183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e26b31ae-de9c-4651-878c-b771b6b8853d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd701c1-e32d-4680-b402-debdd91f6fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17197f1f-b4fd-4553-a9eb-1e3ebe0f2b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17726c06-88b1-4f87-a571-58da7c420284",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcea6c9a-8c9f-42e0-98fc-69a254bd0b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b92dafa-df7d-48aa-909b-e50be5d1bfae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81cc5b0-6511-4419-aa7f-97cf727e174d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9bd8b05d-efa7-4801-b870-dc127fe0993c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4d076c98-b82d-438f-8733-00ed59f3f13e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "337d666b-9200-4c84-9917-0f30521bcfd2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4dc41b8-ff4f-4768-948b-de57b2dd5a57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "211602e7-7b86-470b-9eb1-cb77c560570d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fc5644a-bc33-43f4-94cf-9faed6758838",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "87816aaf-1cca-4c7a-a9f7-32691d978156"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cf0791f-9764-443f-b0c5-d994016a63bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48f36afc-7cb5-45fd-a354-c57876e71f57"
            }
          }
        ]
      },
      {
        "id": "c55fcb8f-41ce-4701-8693-f7a17459dfed",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b7793d97-2060-423d-9732-3971030c09e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1071c58e-fcf5-415e-86d5-244eb0fc6fdb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fa77d7a4-1bc4-4b55-8029-ec5c04a9c766",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f769ea94-be4a-4fb0-bbe8-ae0b339adb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3480f916-8561-4642-9d93-8ebab2f3c289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96fd672-5f74-4386-8011-d15745f0ec71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65fe192c-ea3e-4114-bf79-299b5cdedac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a27e1e1-3727-48f0-93ee-6722973e0ad5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0de63b-b7da-4ce0-9d71-e3b838ee84da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80686634-95b7-4a70-af53-f570e9988f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218e7c7d-862f-4ada-b1f8-198990a17ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74921ef4-4c24-4aee-b0aa-ae40055ab036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6201985-70d9-4787-8b55-5332213a3802",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fbca78-e625-45f0-8007-5322cc0f74ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abf8173-e171-41c2-b662-83e5bd61f32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d85102-bcf3-4b09-aee2-634d2a001f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a473b83-ce48-4ab8-8017-8f28d8eb5e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b0d8ec-baf1-43f7-a2e7-1617bb6bec9c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed58342-e079-4c87-9d84-846b2a38a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f599ed0-4744-498f-91c8-f68f73acfdb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10e48d9-5c3d-4a5d-8fdd-d0d8f5e2420a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e482440c-6017-46ad-a3a8-7374ec2af4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9cfe32-e469-4da1-b78b-80bc404be552",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b422266-93dd-4fbd-a42b-88872b2e212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabf7061-1e60-4eb1-a8bb-2a62ee1a23b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f128467-d5c2-49e8-8caf-f72f6d6151d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dfacc5b-2b2e-4cc1-823a-0052fef0b500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817e118f-7360-40c8-95c4-273e165b0ead",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada30025-1f7b-45df-938c-cde4f884477e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34fc571-a8bd-4e93-ac9d-eaaa26e1fd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6f5888-23ab-419f-a08b-18bcf117e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b366d9a-45d5-467e-94ac-a34137990023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d35e085-2fe5-408e-8a15-5fc9bbb170f2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19525493-88a3-4690-b4c5-703cee5dfd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05f891b-0177-4656-9753-6a2e8c59ce52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703d4c54-5647-4947-b2f5-9664c339ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da583aff-7548-4f2c-a8b0-30ebbf62fc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a39cbc-43d1-44b4-bc46-d69b27c5f385",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730ecad8-4650-4da5-8108-4139fbb5b42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa9b2d8-0f9b-4ed0-9a2d-b8c52b3d99fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f92c79e-4c14-49f5-9815-a1cabaef0fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98872517-615d-4a41-8bb0-73495cfa5e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe3245-886c-4b2d-9e03-a74ae7c02c52",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309f661-639b-41e8-a9e8-f3271f903ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6626ecb-4eae-4f55-9e8a-5c8bc632c527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685f0ef3-91c3-4d98-a970-50b1f031e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f11143a6-908f-45e9-8407-0b0090df122a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e577bb2e-1ee2-4ede-8af9-6d7f801dcf25",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8d72f5-d495-43e1-b52e-ef43de8adfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c880da-6974-4b29-bf34-9c690f4a26e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacfef76-90ac-43a2-b31e-c4961b45022d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6620d8f9-6270-40cd-a31c-e0a529d405b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4c800d-bd76-4efd-8ed8-079fea116af7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38491c53-a8fb-47a0-b1da-353a4e3c05a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c97229-98fb-4220-b3c8-126576ad97ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc55efda-cf16-4998-9994-48fb9335ac6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e815619-eba1-4214-b3bf-8d3c3bcadc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a52ef1c-5a77-4d0f-9058-18b39c553d09",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affc7816-b39f-4f2f-8cba-686230b5f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187ca6e7-2351-4813-8da8-89be95a476c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5c5a85-6307-4231-9cf6-8cfacd9296ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfb5984c-0b69-4cf2-9739-7c3f413b1b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0673a6-c635-4498-859b-a86e78bb884a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e635c945-6f7b-40ee-8082-8e74c8be06ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263166ac-4ba5-4b81-8b98-61a25993c49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa2e86d-da2d-46e0-b467-b7bc93953207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0912984b-6937-468d-b2ef-c8eaa721ceed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b724a7e5-7706-450e-b3eb-94a873a522a1",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5764f3-6c9d-4e65-a91b-358f65c549ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310fe455-d691-47e0-bd26-b72bd395043f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d85806-9e3b-4fac-acb8-d80c06c9c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf4040d-9968-4ae2-a2d5-31049d13aaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b43efa1-43ac-4d17-ba95-cac1e674e468",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6696d78-b473-423a-a88c-68e4c9493ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e9432b-28b8-4379-9267-4c46b5df8665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224a1d1d-61e5-4b3b-b59f-4c24d9cb7083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14215698-5abe-42ac-932b-4be94e4d6932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81824e2d-94c0-48b8-8245-2fb31e5a71fe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea46313-8667-4e33-9ea5-500300a1f07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2ed1bf-8ecd-47f5-8694-4e539a8d1aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c19e525-3b76-4063-a7ce-73e07f305776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64bd041f-646e-412a-adcb-95bafb4ed606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5260d218-1185-4209-bad3-87db6a09544b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7bd2c5-9cb8-4123-ab94-e98b835bc1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc05853f-028c-42a1-9997-b55414d2a27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b961e43d-2588-4534-8fd5-6ca2831f0cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70fa3162-e040-4df2-bf0a-bce627cf6d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4a0216-c9cd-481d-bc5d-c0c5f95aea1a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b9bf9e-f537-4b36-ae67-21d903b02cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13589a61-c0e6-4d6d-9f56-87eaff8ce569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fabed1-0386-43a4-bc7b-1c71e92b2410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfa17bc8-35f3-4911-8af8-ca93e044f4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877cae8f-57ca-495d-b9be-1e87672db664",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5655775-b0e1-4943-b335-8ce625470c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf87f3a-2b03-4352-bb0e-801a26602192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a1c8b8-eb2c-4383-bdef-639bef550fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae592548-cc6f-462d-ba9d-c093f22e4e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c1d216-56a6-4aed-8fc7-2bd79bdca724",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2cdc82-5044-443b-be5a-9a35a74a9fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b677776-21c7-470d-b6e1-5d9f131a93ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60192b86-6bf7-403a-a716-05668e577072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74210ae5-1546-46d8-9495-78c60cd3f5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a24f89-d959-40e8-968f-0b50960d6016",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8761c11b-c04a-44ad-a9f8-eb6c53056519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf80217d-ee51-49c8-8cf1-4725391531b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37274a22-2b6a-42a6-b5da-048f2fbb2734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e2b70b-3545-4744-b764-115fccd2b9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88c9bc7-006a-4b2f-9420-995542df683a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f011038-a528-46fb-b181-10e1eef30a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efd7176-a633-4062-9194-d5794f58998c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f864103-42e6-4ed6-b2bd-3aa04a58366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2a64b7-7426-4536-a095-b4a1e09d20da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799c5c66-dd0d-4752-ae87-3eaceb774933",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9dd319-76e4-43bd-af11-348d9fccda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b46710-aa44-467a-9f54-63daddc65c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299307d6-2ed1-4b73-9546-77f10a66948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69bb3504-b279-4f83-bb71-042007de6d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8113f740-3703-40fa-aa5e-fabb8fbcbed8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8aa36f-4cfb-42fe-bd02-bd7ee0140cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9aefcb-62d7-479c-958e-ea4a4ea391b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9549dbf-3a89-4ac4-884b-d9c4f01fb6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a2e448-889b-4af1-a538-11f5e45abcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26a0008-215d-4191-882e-333409326ec1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1faa836c-8fe5-4f9d-90e1-992428023aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92c3cba-086b-4e9e-a9e9-bacf3db4ce36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cffed4-cc02-4e22-9059-6261f5d5a56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "191d80be-12fd-4aee-9558-750e30abdbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5885c8fb-2fa8-4adc-92f0-947e9658c8f8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fa07d5-16e7-484a-a01d-589770e3c149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73088486-3b96-461a-b689-1b5a44986a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284ee02f-164d-4065-86ff-5435e76e0135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31974345-1e71-4d1b-bca0-e9a4e447b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15de046c-3315-4777-81e2-fe189439d866",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0343017-0d6a-46b7-93d4-9bf33f5277b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90867ec7-e34c-41d3-a964-68e8bbc339da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877119b5-57e8-4a35-a4db-859bbb2dcd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bdae01f-9563-4a3c-964f-0f0658933416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7c7ed3-1b04-42c7-a48c-cc26251e96b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5dc10c-495c-44b7-8b79-06c55b4259a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fe38cb-78c9-4749-b816-fe1b225d2ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3244c9f-226e-43fb-85e8-057972c8f59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc18998-7460-4e94-ab0b-a6a342aff11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411eace5-b2fd-43f0-b021-2ed70d09c4cf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf21f79-c205-43d0-bf80-7457d70e406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adb63e7-8a0c-480f-a62d-f6460ded4a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2a1e32-6055-4ceb-a070-a0f837a29400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8279e4-2467-4da3-97f2-98e995af158a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a95917-99ac-415a-8fa6-29fe479c6402",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517e5d5f-f85d-437a-8345-469149888f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90140f2e-13ed-4370-94de-f91da7577018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38666a1d-39fa-4d09-a9e1-dcc9c1b3c3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f0afe3-e366-45d7-9052-7662c9769782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f14553-5dbf-474e-b9ea-ddd15e499f58",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d300dd91-1798-4e54-8f94-28541d5aed8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45b5ca4-68ff-4679-8cb2-e10105379590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30cfcb2-3de4-4736-9884-e99a8f18437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc9f462-6b60-411b-aea6-2210262fa41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad130f84-5869-4bf4-bd74-a38218af19ed",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef47297-2497-4fd7-80a6-e5e6dea8ed6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7508fe03-f23a-41c2-a2b2-068936c2c680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63696b1-26d6-42a1-bf3f-e78063f99fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cac0378-30b0-493c-8e37-59b433070caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999d79c6-347c-4ab8-98c1-7396a53ef67f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c694439e-f007-48f6-8e54-90745c5c4f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6708d604-b1c2-4f2f-958d-45d247ebdda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6d7b0b-c2e5-461b-8ca9-e1e042f44db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c07250-1ae4-49fd-b6d9-92de7007ee7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991c3c41-a759-421d-a4e0-12acaf6bef20",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3745454-96df-437d-a8aa-f45b131292cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a2f3a5-dd27-4c70-a770-8961642bb576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a08818-338c-40f3-86ba-d6d299354cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c28db6a-8993-4e8d-879c-71782d0bc86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a8624e-6fb9-47bf-bd6a-ca5bcb419246",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9aa45f-6263-4349-a461-344f6c4a57bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7e4e52-72e3-4f38-b95a-f042836c7329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a034c5c5-d531-410d-81d8-dd5749c9a8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "041d85b7-5beb-454e-8684-4a13a0950286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552f11c4-31a3-46ab-9737-a098eb652819",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83acda3-fa12-4e20-bee0-6639e87e6000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381a7212-274a-481d-8923-450c7765d66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f544e2b-379b-4946-a796-d68e8b3e66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9077ae27-c855-4769-9ddc-45ba484f8193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f3d2e2-fca7-41aa-867c-298068a47cf9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1239172-57da-4b19-8e8e-6f222ad2ad90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3187d7f1-a394-494d-8794-66db86711945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2dfbd3-1131-44ac-bdb6-79f394ce056f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "36d65686-4135-491b-90ce-bd87ab9b701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e9f8b9-6c04-4c20-804f-1d22a538d4bd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab0eac8-a64e-44f3-b5d7-cf44cec641f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3b7340f-2351-40e5-9eea-e35a17ee1c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca15c15-80a8-4b7b-a825-aee4d10f734e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d56452-9a43-4e64-a8d2-2f1346012850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270b612b-ee48-4dbb-bd44-e75d7ce829ae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2576aa60-ce1f-4d90-908a-f917ef3825fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dabe726-c446-4bec-b195-33c80facaab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d224e93f-fa95-49f8-95de-6b2da3261e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "208ec610-373e-4992-82e8-80de15309c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c3e31b-0731-46ac-9f7b-842c89be409d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7bea80-7fc5-4baf-8c4a-9037b8820068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e264a7e0-b33d-4323-8bc2-d76719582a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d737efe7-ba58-4954-85a2-97fdea3461e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f3b068-0b36-4a9d-8daa-130355d36f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804a0876-b731-492d-ad07-d9f779afe7e3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed81fbd-0f51-4aaf-9172-7b310cdcedd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7387aac-573f-4320-a907-e67535a139f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd65d27-5f0b-4891-88dd-213473d84ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be75b1db-d03d-4c4b-a590-60e40e8d7a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774af1b9-b93e-4fb5-a304-0afd8dadaa62",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aabf642-c732-479d-912d-4955cd91cc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1792116-7734-4964-baa1-1880909b8134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150c700b-575d-4b2f-af81-83b9513583e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a004af22-4fea-43cd-8842-0900aac5da0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90934ea5-b8c6-4120-8f45-f48a571f54d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2037397-2a4e-4826-a1b8-4c72f2a97b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414121af-1d1c-4953-b766-e8e7574b7d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05edbef2-7247-411f-80e1-bd2bcf6b4ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d386ef6b-fdcc-49e8-b81a-3221cb8cf55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720d0cd2-00a5-4ee5-9b47-f61b7451881c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888b7b54-37fc-4163-baa8-60670b4416ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cacf6af0-050d-4844-a0ef-1eee958298d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b85aa9-d21c-47c1-8322-db451ae7f924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cdab45-72a5-4684-b901-7d258d1de342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ea6bd3-76dd-46f0-8df8-03a98860780b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451330e2-ae56-49c7-97ba-0a44221aebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d86253-35d5-4eb8-91b3-d7fa741c94a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eb6fbe-d510-4093-a6d7-71d90ed18c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a4d285-222b-4ca4-9342-63fcfa56814f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f3bf17-eddf-4c66-b3b9-823622e6e506",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8702da4f-c6a3-4847-8bf4-e7e0e10abf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff93ea02-41d6-4e02-91be-89e6acee5a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9a2cfc-52fe-407a-92cd-6f0fffbea8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f153fb99-cdfd-4849-af94-d76657f33764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caba49e6-5ca9-40f7-83b7-49f6581f6769",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4f4f02-b169-491c-89dd-fd7eafe9b12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ad3e36-c6c9-4fe3-ab6f-e718120cd651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7753fb-91ef-4aea-8858-224cd8fe957b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84cde644-ccc8-4495-bd14-84ca6e45da1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5865c6-6482-4e80-99bf-6d1e42f069b4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c31d296-9668-41a8-9dbb-3a1396ce97f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f8cd5f-ea81-4013-b972-25ae32a9568a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40db6ce4-5de8-4866-8317-7102832cb030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3c36a1-b65f-4648-b95f-3e5fa8ca1443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1276921-2151-43d7-b1c8-eb9942c24e12",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d3ff28-37af-4460-96e2-13f43c701fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2f74ef-1a51-4a28-8726-1ac822ffbc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336bbeb8-d2f4-4d81-b573-b7ecc7d372ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23675039-acdb-4aaf-ae6d-8c6d114295ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccec1f3-200c-486e-b889-bb100e77c4cf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e99e5f-0a46-48c3-91a3-565173bf57a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db36eecb-bbb0-4c31-9637-6f6e0d07f70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f2bf0b-cec0-4c2e-8348-96db09af27b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d162ec95-0dd3-4ea5-8334-7097631452e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f472cc5a-6d95-43eb-b82e-e4f0efc6530d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e8e4eb-eaca-4af8-8d00-8749ced8b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52789f30-fbd0-4ba7-9934-de5efe88f76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7343bff-d5c8-4d04-9a7d-0d477f0323b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "419852f4-c3d8-4d55-9072-5a1439ec9c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee732583-ebb5-433a-8e43-76320744f703",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d59f5f-1f6a-49ae-a372-8c4915c679ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bb8dad-a357-497a-bb4d-c71490d3d2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f9de99-b4e0-4f38-864b-e4d0665bd7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f69005c-09a5-4e97-a95a-45989256d392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6271c5e3-e69d-4a24-ab86-24b81a28b216",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecd03af-555f-460e-9937-e95a014972dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923c7540-ca80-435e-bc7e-6d891e3f0277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb8c404-8966-4e21-9c1f-0922042e6616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7395005e-03ac-4da4-96ca-2a844e17403b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184e49bb-4cae-4254-99ac-a2fb4c6303a4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f301bb-74a7-4828-98b5-bd635d3eb909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4561e561-71e4-40ff-a0fe-fcb5799350f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3432c64d-cf3f-473f-a826-166973f7a612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e252d137-34bf-45bc-83dc-8c17e332a27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0a593a-c99b-4d66-9742-c91423c80a35",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8aaffa7-f054-4b14-86a8-aa2648932996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e6503f-f4a1-456e-9a91-1732dabd7067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539a5bd2-9a11-4f4f-8ed0-8dfc80f554db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b16cd4d0-752d-4743-9df2-ead5f8d49033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eebd1b-f640-49a1-ade5-7575c2f5de91",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5999cf6-177c-4ba1-b464-08a53fe3b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c65c2d-b836-4d25-932b-ebf357e1bce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cc4a7d-a25e-4cf7-9d67-236a7fdd8756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ecb0bc-8154-42aa-92fc-2ed673d568a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21885d6f-ae64-4c3b-8ef4-8fb3754a4516",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf43ff-9b2c-402c-855d-890bccfa73a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89547bd3-3654-42c7-993b-419927280f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a19a4d2-cbfe-451d-84a0-c1def08fce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4616bee2-b100-4254-bea3-75c5760756f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361177ab-71b4-4ac5-8ac5-352333dd7004",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf718a8-6030-4f35-8f8a-a79f744b4b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b5fb70-ebfb-4663-b01c-d4ac044f7545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a341e5e-a535-44e4-a44e-4beb6d96fe6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "03bdbacc-9c5c-4930-bb9f-20cc49247f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea41e393-cbe1-4d4e-b655-e96ebdb5c423",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f60691-9b26-42d9-b8f6-9e70d6651ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97270981-2275-45e6-b840-46657ffacbde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b462ea86-a05c-48bb-86d3-22cdfbc73812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dac24fed-026e-453f-8677-b326d7e9fde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0ac912-6053-413f-800e-73cd7b492344",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea22485-f2cb-4d7a-8cfc-6c8913f5912d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ae80f6-eb0b-49aa-8394-e08cd1f0ee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f35c8f-0831-457a-bfeb-b0c8bec4dd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d22ef77a-3693-495d-881d-bc0802b8ae67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f10d93e-e133-477b-9043-8fadb8862a55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1ebe4e-f428-4e10-8960-a533ee3bb76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63318b5-25e0-4e48-8be1-1baf61afca32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa15384-3a33-43ca-95d5-192e898d551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d28c88f6-8d0f-4539-9c38-52bc7f72b5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617b0fb5-7db7-4559-acb5-8193777701d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651002fc-de07-4dc0-8139-aad66f65d586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44aa69e-60e7-4620-bd81-0ae0b047b9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcc1603-cd1a-4c13-be29-c49b246b5fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87448594-85d2-4dc8-b4da-2cfa3f0da832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d4e6ad-57d9-4012-a11a-3404d89a5685",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e923a-000a-47d0-b69b-929586d776de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75545ce4-01d7-49de-82cc-9b7dd47bbb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e4c633-9cdf-46e0-a83b-4e96d54b9fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0941257b-572f-429a-8b25-4cbd81941cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fb396a-c6f6-44d1-9767-9b24aa94bd89",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cd2ced-83fe-4643-9148-390de2ba698c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67919ee5-7cde-48c5-8a96-fb96b815e18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93367fa1-5024-4393-b8ae-efd96a4f9e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ee7a5c-46c7-4bb9-a838-d43699cbcbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c9d2a8-41d7-480e-a773-1a48486f99c3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b91e98e-520f-4de6-b9eb-331eb920df41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb89c629-a0ec-44ba-b3cc-e11c14c1b573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dfc61e-1a6a-4f8e-9982-1b75a2772af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5103a645-0f52-458b-bf5e-951fddf7989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce7e1a1-0daa-4897-858a-a8773f71931a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad0c1ff-4aa7-4413-bc51-cdf3b12dcc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9953903c-b6d9-437e-adf8-ab8723835f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf23476-56c5-4e66-9185-fb6c186a9f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33f98f18-40cf-49b0-9adb-09b3ab612fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9540d1-9e39-4cb7-a1bc-5c86eae8bbf3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed95472f-2575-4092-a0a7-08f4360f9bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06118c02-ecba-4ab5-9eea-0d06feebd07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7d69a2-2fd3-4b8d-a113-a972f349736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd57ba18-7ead-4933-bff6-a30e4c2992c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac73fb65-97c7-45e0-83ab-6b492bf7651a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef41391b-c008-45cd-bde2-1d6a71c871ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876788b9-1d51-4e3b-9e8f-cfdf727abc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1e5a14-6f11-4bd7-bc58-6937b1ca861e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4554eccf-b322-4c74-af0e-cea8d701baa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cde8eb-1f89-4aab-bb1f-1db820268445",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9beb152b-c9dc-4a49-a0cb-4195f181f479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ae7ed5-6b9f-47be-b3db-7cd0322ae38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e13752f-082f-4f45-ab02-21d73d9cf137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "080260b9-5fac-45ed-a4a1-dde9664e25a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1134af-84cf-4513-954d-5fb13c8b3fd8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e561da8-78c1-4326-80f7-1783f10b82f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5218173e-2427-4a52-bbf6-8ce4f6428d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e62a005-031f-4fed-8b24-af2c1a33d18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f02bc00-6489-42f0-8f23-0ccf976296ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8258edfb-558b-41d1-b338-464c92e8005d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3f5b51-e2a2-4dc3-8538-fe7a12e64030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e9821a-f985-4344-99b1-8fa4225a6715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac6af62-9114-4080-9e3d-4ec4eef5eb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2cc601-4bc1-4978-b861-5035662eeef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae017fda-93b3-4691-b11b-6f6d4f4e9d8d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db63186d-8360-49e7-9192-84dbf7a7e9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df4a70a-4fc3-4b54-be30-9793ec5ce25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3c8b52-dd9e-45b9-80c3-f05d97a1bbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92b6fc1-9723-4bd5-8838-c85fe6e5bc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439478c9-173a-454a-beed-25af31b1b504",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cdd5ef-1984-4216-bfe1-082547445d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386253df-8494-44d9-b750-34ebad60fe1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60bf08f-a262-474d-a2f4-f2369c41d7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7c2cc6-e693-4709-85ac-6484d33ef6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47d6030-a41d-43fd-b8b4-2cfe8a6d8cee",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa024a7-9222-41e5-b48f-874abd502435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a10f02-3480-4306-9e6d-3920e55818bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8f8f0a-8271-46fd-9483-3306f31633c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "918ea6da-d822-4018-9124-a7ff0e66b306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ea8d50-0d1e-494e-b946-7d2de2d4ff93",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf6ee97-a85b-475a-a352-446e97a4427f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8dfc56b-c447-4593-8f9c-95037861e6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e6e136-c043-4283-8828-085a1f2be58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5964eb-0b66-48ff-9660-955e4ba90279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058d8eb8-cf9e-4715-a3a1-fdbf391e9526",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b465fdb9-c78e-4a2c-90dd-c4d8dfeea8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9dafdc4-2617-48e1-8b76-b8478c13b54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91da35c5-51e8-499b-94d5-d4308f260e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca825bbc-a71e-4072-b6a7-dd20b8f36270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee3b5e3-429d-44c4-9f1f-8a87faf3f3e9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61afe21d-e8de-4147-a001-08b160387ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ac4e3f-2018-4bf7-957e-3e1f7ecada85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a45772-7d95-465c-9fc3-0aa55a950518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2720f78-1ad4-4905-bf04-0c26e69d1cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b64f43-5fcf-4bff-b1c5-12ab1206a0ac",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aa0482-341b-4cbd-af5c-2948e19a33d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbff656a-1003-47c2-8be0-32ad3690c585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9a1570-a618-4087-acf9-3a4da514c1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e59ba363-3fd7-4520-a382-8fa27b3338e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22afecef-5644-4b62-b18d-7df69f096c7a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebf13c2-2818-424f-bb94-815fe483a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58440cb6-f3f2-4768-b619-f559e2988e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a6dd4a-ae0a-4684-acb1-6cf13bb1684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e96343c-ee2e-4288-9e87-6dd3080ce77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4fcca1-78fe-4058-849c-f5c306e0670b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd3ea50-23c0-4476-aeab-0b281adb3e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ec6f57-33b5-4c00-aa5b-a982f3a14958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d687acd1-3474-4341-afd7-867cf51b08bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d48edfc-5f0d-4f5f-a9f2-b0f0e7028668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690e6b2f-d76b-4cdd-b4cd-f80a2014316d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb4464f-152f-4a0b-9017-18d7b123328d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab45843-adc8-49ef-a3a0-bc5890d091a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deb66e9-e85f-4d90-9aac-c3d343c90040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "992804f2-df53-41b1-bed1-7d5b38de3424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a95c18-de01-43d1-ac03-a0fe7c690d85",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4969f23e-28c7-49fd-9b7b-5c2d905b56aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59193e89-e946-409f-9fa7-a7957ca8c121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6565f3ee-91f6-4ad4-bfc1-b17e08464494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3749271c-b7cb-4b47-b24b-f7110734ac1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56453213-1455-4eb3-853d-1a5cd4540dce",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c88d33-792b-494c-aee1-13e9a6b8b968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e3208b-9e45-4005-97b0-a4ae046e5ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5040248c-44c9-4d39-a577-a4402a62c338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0849976a-9351-4b3c-a6fb-dd8a204e5678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863fdc1c-3a01-4cd4-a4ef-93f1633dfed4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66b0dfb-8e2f-4128-92d2-46f1080ec255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92413de9-7680-4bbb-917e-1737ffe24bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150d7be-b362-4184-b506-4c3be99d86cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87ccb68f-989e-4a88-8a4c-20fd1fcfe585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de66cff7-b778-40c6-b9eb-092bf0e2bbed",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812ce93d-fcd2-4a4e-b3a3-a2e88e4a9fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8778fb8-1473-4824-90cb-33e42442def8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac09772f-619e-4939-a4bf-66c1237ab090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4160061-eb6a-4f42-9a64-fcb6970e0ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ae0359-e0ea-4e87-820a-75a282153821",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c0dda7-f4d2-428b-9d22-710deecec968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906fa6b6-d537-447c-8b21-edbd45f453f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff04bfc-ad97-432c-9965-4a6a2e143c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f49c350-b2af-4a95-ada6-d9c4ff177d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f9755e-0e6c-4183-ac53-104dee6b8726",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b79747-225a-4182-b2d9-792fa2014592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf49365-383f-42bf-9586-8e7e9993f473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdac5c8-10b2-4709-b94b-e52db7c294eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5aab71-2b63-487a-8460-57e6815397d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd054eb-7d39-4efe-86b6-b5718f65d17c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f61426a-a878-4c2c-8b2e-096dd91c0346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c672872b-8899-4746-a685-7f6a9fe9f745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559e5f18-f5c2-45a4-82c5-cb524d46da6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f96b42c-db11-4a46-bcec-265347281c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebabc12-94d9-400c-820b-d3aee65c2c21",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac015421-9591-4076-befb-3ac26338da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391fe8df-ba55-41e0-a700-984c27301ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91304f66-14ff-44b9-a649-67d572747eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de3f3fc-dcc3-4baf-9133-44c25d54654a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cd10af-e73d-45d9-b658-0229a1cb7fc1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf49f50-9687-43bc-a642-a55238bff351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a9cf5a-33f8-4cbd-b255-e9228c545749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae484e3-1d8c-429f-9a26-7246a9931a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7018ee1-123d-4d4c-a902-036595380a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ed5e03-5eae-46ca-b02c-23006996e903",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83069739-e203-459f-9e8f-aa7337fdff3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e8f395-2c17-4289-ac0e-7f37bd829d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0264d99f-5e61-4acb-8017-9dba7519af9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1666efa-381b-4fa9-bed3-4dffb82ebf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616f9c02-0133-449d-a1ab-28d822c7f894",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0f9f84-62c5-475d-af5f-2b4659461651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf51c2e-1241-4c56-8156-a426decb45b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c12060-39c6-47e4-8499-8d33e8b80584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e3e4a0-b6f4-4697-a89c-5692fb517362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30be719-0b08-420c-87a6-8a37af612940",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba73525-5f1c-455c-aec3-aaef88233c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f74429-1806-4777-9876-a62d2f7cf6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3822cf-d088-4001-a0f5-0fda0e814b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d90e9b1e-1e59-4976-a901-5cbff772e84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e9b2ed-0cfd-4c4f-9f3e-56524a058b0e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c3fc97-9322-4774-be81-f264b7937db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "51adff3f-00cd-4f4b-ba8a-aee87e31fc51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fa9b2b-d4ae-493f-bc23-fc3ec55421bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51bc3168-c4f7-4f95-84e3-086c20013fa3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cf70c4a-3372-47b1-a4fe-2873b65796c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65e30c60-f34a-41c0-bb81-414ea12dbebe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801a42c0-3231-4bc1-9598-fc6464e7e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff69773e-3a33-47d6-a6a8-44b9a70e6d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded12d1f-2419-482e-be58-f035e2f9b7d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3d135285-734b-4b7e-8f33-c993f1a0beb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b965c9-a31f-4d27-8384-a8ff368173e9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee68035-4a0e-4cb5-9c36-f84b56e64127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2531e187-9e30-4f45-a0b1-3e07511965d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf9663-5850-4c69-8ab5-1461b1d49e20",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a8b2dd1c-cab3-4608-affc-734d48ad404c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da896282-c7b9-4364-b97b-98c25cab545e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01c996ca-e8a0-40e3-937c-a37821533191"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4b69d18-522f-4e33-a0be-55c56e7fd0ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40905516-c588-4d37-9f55-87302a22b480"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0708adbc-6832-456b-82e9-9007cc6bbda3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a8b6a75-e881-49ae-aef0-3593b2a98b46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d624a365-b322-41c0-84d9-5539088a7726",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bde01aca-5fed-4115-b2d5-74b44f072941"
                }
              }
            ]
          },
          {
            "id": "dc0b2b5f-5e27-4d52-8993-4145d370b0a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d5eb736-ee94-4614-b56c-899d65f480fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c288a14-ec80-4af7-acc9-e191bf022c38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46b751e1-bbd6-45dc-8528-17a4a712a412"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bc4b3dd-8298-4333-a35c-f5fd75a26f54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "90c74d89-2153-4939-a017-d699e1baae06"
                    }
                  }
                ]
              },
              {
                "id": "081155f6-6ea0-4c12-99a1-d4d7b2aec9b7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f784f1b-bfd1-4f20-a505-508bbaa79377",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab602224-ebeb-4cc9-aad8-d944ddaa767d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24b55f50-4d4d-46ee-9fd9-37f546f57211",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1610af88-1198-43c2-9a0d-97cb383249fd"
                    }
                  }
                ]
              },
              {
                "id": "b6793bb9-03c4-45c9-86c2-a9825735fb42",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d009667-fb88-45f6-8544-d83698c9d910",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf1a46f4-a7d3-4ef9-9de0-07a8f2f6962a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ab2b5e9-93a5-4471-a9aa-0fde03fcdbb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3ff5168a-622d-4127-8e93-7931708d6292"
                    }
                  }
                ]
              },
              {
                "id": "7fa514f6-9e4c-4604-b975-0263e0daf4f9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69ed2dd9-0242-43b4-ae9f-411f5759dae0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4277d68-a109-4bd4-ab53-c73eac8e8da1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab653473-a402-4e9c-9593-c7a3373ab8c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "698d683d-d687-4b48-9ab4-8021df588b4a"
                    }
                  }
                ]
              },
              {
                "id": "f7fb0ef6-b0b6-43e5-8caa-d9e0b9136cb0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca256167-5d60-4288-9a1e-d06b6b4819d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "341da9f2-da30-4b71-8567-461ace9efd9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f804f66-dc62-4875-8d9c-d768df054bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18ab3e95-3414-4887-887c-aafab0b07f13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "919cb09c-2b6d-4cc3-b8e8-8649425f6340",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39f7153a-f492-49aa-bea7-f54dbcab31d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27937b5d-2760-4f60-a58c-603dce16a1ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9306d9b6-9045-4583-ab37-8878c8509daf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70a890e7-9072-4a84-9068-5343cab2adc6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cc8d9543-29ce-49f4-8fdb-80639022e638"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f23bedc-e684-41bc-9c4b-739a89f5ceb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b1b0ada-e77e-4a26-91ad-65bbda80660f"
            }
          }
        ]
      },
      {
        "id": "a6500374-6cc8-4b7b-913f-672042cc55ff",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "25394576-9d7e-485d-82b2-fbdf4e7da807",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbf3433a-3a88-4fea-bcdd-d9c1ffd87b68",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71e28482-9fdb-4776-bdb0-ebe569a6a14e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210b67e3-c564-4375-95f4-db7db735eb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8e2427-bf87-43ec-a751-72807d4641b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1993f9a-2670-41af-8684-051f43fa49f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac59e5d-3160-43cc-8be6-4ded304cbf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6afd42-d44c-4daa-95e8-1aaf139f6508",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2324f1ed-b84b-4998-88fe-8f6343533663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ffde51-99b0-48e9-8697-c5d1d7b5dfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd7030d-6dd2-44d5-8ea9-e465c00e3347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "048542fc-1089-4197-bb0a-e3fc093d48f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa0d886-7a3f-4bd9-b776-a05615cc397d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d369704-bd2b-436e-9d76-9df526efa091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9f20dd-df35-4373-bd78-6fcda1acb460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e97b2e8-5d08-416a-8a85-718f779b2eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1db900b-4a6c-4c6f-8b7a-9e4df8bb093c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cd4a8d-09ab-4227-96c0-852162face8a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbc1d1c-93a8-4d78-9547-b0e887da083e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75ceb1e-b28a-46f5-8e41-9f41662e0e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cbd160-7633-4707-a398-2874dbf2bbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "857b3af9-297f-4ba1-8099-2ab98b3f8be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be7e3a9-50e3-453b-9141-7ec0dfd8600c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0579b53b-99ba-4253-90b6-1d7a47a6b1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a403c2af-8b56-4532-80ce-f9433859e83e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3f8208-f26b-4cce-a250-93f2cd7f17da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93eedd0a-1bb0-4e21-94d9-ae88503edada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15191c33-e0aa-4de0-a991-590389560c76",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe00e47b-9d42-4313-ab5a-c34e56af01b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0abae14-01e0-4cd9-b6de-691c38571f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d2543e-1e98-46e7-b3f1-d7e4f89d430b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6438f0b-530a-414d-bf94-1497a06404b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f42085-9ef8-4ba1-9adf-668f799a0963",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02354a3-263f-4e42-b4df-3fd9c283f6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0dc2c8-d514-44b9-9a14-0bb417110a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08a0631-83b4-460a-a65b-4d79ba2008cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec89b74-28e7-4555-8d6a-8d64555ce6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc1884e-9801-4f27-a0e5-afb6da701158",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc54761-d81e-432d-b19b-a7a072e07fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6de8cf-a21b-47e0-9323-4d3918709ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad422c0-1c46-40d8-b5f9-40f544d30181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "613a7e0f-d7eb-4d15-bb6e-2f2927768c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426bbea7-d0ba-4de5-a50a-96dfa533d0e5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7af8d5b-e104-441c-bf66-a13e8fdbb066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2daff32c-4f67-4259-9808-ce3dd4ad134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efd6fd2-4989-4008-95ba-5fecfc1de324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc822ac0-6aa4-4e47-82c3-3c845167261b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45659889-a2fe-4ce8-8876-2dd4aadff14a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd742f94-1e11-4e78-8ca5-5c6ed38ae5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a931bf60-af1b-42b3-88dd-f0ef77237300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f61b7db-bf8c-4cff-a70c-27b9c5d481cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2475cfa3-c82e-4117-916d-e1018373f0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7849a435-7663-4017-a075-10f1efe420b2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d27bab-3494-4430-9e8e-c56319031aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9318e2bc-fc90-4c7c-911d-83059c9cdb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572006d3-1d70-440d-b81a-e1f88ed6c8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3888173f-5b57-49f8-a41d-0544e72549ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09325cc2-e52e-488f-8dd6-e8d340db7d07",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf53602-3379-40d7-b95f-51d1556f962d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c8390b-71e0-4a53-a650-6b3e06202c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1412c9-046c-4445-b6ef-56d04e8a4ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfe3e71-d468-4414-bb1f-177eb6d928cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47450345-1fff-48c7-9e79-3259a0f65ae8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3346dbcf-e80c-40bf-840c-ec981d57271b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60dedc54-5b05-4cd0-b6b9-4f2716011cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2ebf28-0cb9-4940-9150-e6aed7befaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4cb30e-ca38-4f7e-8980-4b5588fe76f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb75cbd-9f8b-4f20-b05d-6c6f5d1afae8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230cf63d-9469-488b-9fa3-e27697f52a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f940dd-fb1c-458b-9cd9-2317c73d7afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7e8c38-9467-4f58-b0ca-3f2aa34b0777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e42c2b34-b964-4aa7-a219-945c43b0766c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d2fea7-b19f-4fd3-86c0-d2a48f354827",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119b878a-f0f2-45ac-8cab-f8a7856560ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7037935-7eb6-4ae9-a7d0-ace2c8bebe13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c321534a-e1da-43c7-bc58-57d84c7fdddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "19782cd4-58d5-4f73-950d-eda470587c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c20015c-1b48-4cc1-9c30-a69af725cf78",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79b10c3-f3ed-4c42-9d45-0aafb18a45d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed8a5f2-8e52-4956-82b1-eccd25cebe34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caaaf47-3d16-4073-89e1-772e6527e002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d3f30f-19c9-46dc-8179-2c0dc580fd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b70a78f-e899-4fbd-9441-e00d694a6af7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0f0c43-88b8-44d7-ab5a-f9859d935526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234e945a-c573-4403-8f5d-51c39bb9db76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45810040-41c3-4393-8713-16d8ad64c862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d343bef5-57b8-4f40-8af3-cc8adef9b245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c807f882-e101-4e02-9978-590321f1702b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3eba064-e302-4915-ab55-01046149ee38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02e6657-6f26-4a1c-9688-b8e046b765fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9511d2d7-2f01-4781-ac0c-556ce34974c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df639a1b-d77a-4cf0-84c3-bb141274f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2324b27-9486-4d3d-a58d-519211e43c27",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfea22f-a11a-4523-9da3-26f9ff3639d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d81ad07-77bb-494a-8548-c425fb642bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c678ff7-b80f-4e80-88be-5507ac0d333d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "502610c1-5eed-4450-aaf4-28a86163d787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccef1e2-9793-41c6-b87d-350cab3f55e3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5aee61-21ac-4f53-ab6a-5340f6528b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9538149a-4101-4d58-b857-8760c5a7a8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca209e6d-d279-445d-9957-73b099032b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "556056ea-09be-4af8-964b-e495dbc26778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dedaf8-ea25-4222-970c-3aa566f07d5f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afada4fb-2f90-4a24-a932-dcf9038d5d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ce676c-f7d5-4998-beea-14768597e214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3411517a-a0f1-4b96-89cf-80c929eb2ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9db886d-2a8d-4f92-8007-7ebc9516808d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9198e458-1144-4d5a-8292-a1fe3aef7605",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809ae0a1-267a-417a-bd3d-85ab4893ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356ce147-4d40-4dbe-bdbb-d27ea320c961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11da516-585e-4f32-8df7-0007d375f736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cadf679b-537c-4e39-ade5-9e226282afe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9badaf-2dc7-491f-b5b5-8b686391301e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b189dd65-d8ba-4b6a-bd52-df51bc3b2658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b53dbc-860a-404a-8bf8-5fe0c14aaa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae21fb6-f921-493c-adbf-1eb88d2d4529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e561790-dfb8-42f7-9a71-d983f79fb446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4216b0-5353-49d9-9361-e81cfb607b34",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4dea04-9ef1-4b0c-9d7a-2f38052e5ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2281863-b5ae-4942-977b-7304c0c95c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b5c53e-d037-45bd-b196-25548eb78e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b1ccc0-868b-49bb-9912-7242be1b6714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26ae5bb-6774-4886-8aeb-952cda577efe",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c4bb23-a66c-4fad-a1e5-f21bf7d97e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1642196-bc57-42e8-a2b5-12edaac044f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449c26da-f819-4ce5-bf4f-c7059f072056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88eb83ef-b238-4b8a-807a-363ec2e7d7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecb4e53-2e75-45ab-8116-76dbca0ac0ce",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba9fafd-cf64-42eb-9120-f12150385131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a33fd8-47b3-4d72-9157-136480f5bc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363e355-4b0a-4f77-8f6b-bc10c73d378d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba2f3c1-c517-4f3a-85bf-36e02c0cc943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31566df-7452-4d7b-8e2f-6a4e5eac2794",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a15de65-7c46-443a-8940-6f7a5fbcb896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b789ca-c971-4385-b82d-7a411d4f190d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef9c2c9-6369-4494-ad84-283ac1d9ec6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a39f0ad9-7f31-4ae8-96c9-aacaf1d8d2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89299f0a-5181-484f-9496-e7fa5679a1df",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f054c21f-0687-4332-bf55-7e86e8772eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df10a899-bc06-4943-ad70-548ed66c3038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffada4df-dfe7-4041-9296-b9863529392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eeb8e60-262f-4924-8f02-1c9a122564d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b411594-a6ce-486e-9ce3-1eac761a60d9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2f0412-ad1f-43af-9dc2-157d0f63e30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960dcb79-7042-4fd3-953d-8713cc729588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0048e4e4-40c4-4df1-926f-36f3053e5ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc056626-fc08-4353-8059-e744410b46af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f32288-81f3-4274-a911-87c312b42b78",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e2dc93-30aa-4ed9-8f56-7353bdf38c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21056231-9721-4701-ac3b-b82b4e3d181f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624e0ee4-f909-4c18-b116-fd8eeb5a9669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9055564d-99e4-44d4-95d4-2517659ad275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaa95b7-f00b-4301-a962-ac223125d6fd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502ea8a4-6901-4cc0-8af0-d9126d140742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0d814c-a03b-4327-be3f-4da88c39f123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f63fd8-7ce2-48f8-9e23-ed12b04d3317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69899213-943a-42d6-8eca-e58daf413efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce40039-f560-40de-aed7-82b6956b4816",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bc14b7-2045-4bde-8925-9d9b6a1890f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c00238-603d-462c-a598-eeeede4a605f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab424234-6067-4d06-806c-f23eca056eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "145c3e25-87bc-4664-8314-354be730d086"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52f51b71-9d5c-4813-8c8a-0519192f6271",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da6bfc63-229a-4f7f-bcc4-d2076d1b86fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded39693-7f7d-4a5c-bd6d-13383301fa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5a5abd-c0d1-42ff-a36d-4f8acbadf6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebef1ef1-0d71-4f5f-b73e-e14a80b8e027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27781fa2-530a-4f92-8257-720acc013779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5677c957-5f84-4253-aad7-33defb504924",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fc4ee5-554a-404d-8618-25d98ca9b88c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f6dad485-bb18-4ba6-a31b-f8084ef8bc59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024ce624-6ef6-4bad-b82c-cc07cb9646eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf835fe7-ea34-40b6-ac66-a1a0a0e8c7c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42293696-c5b8-4ab7-a8b8-741c3b79ab83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e6ecf23-efff-4241-8eed-8d032e4a9c74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2cb8c45-37f3-43e7-b40a-b6159213ee63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddd0f9af-055c-4120-91ee-f8279c42757a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "132bc46c-5af4-4523-91f3-27fd8fa470c2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3507d4ea-6ac9-4ed9-9171-f1b2af51aee8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1313c6fb-fdaa-4dda-a336-b614972d8690",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e4342d3-6c79-4e1b-b80e-b2eb4271a2be"
            }
          }
        ]
      },
      {
        "id": "1e098fec-40a1-4c15-966b-e9823e6b75bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "86959a1a-ff44-4116-8f2b-fd5c2ac26cbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc97bf2c-f204-4a4c-94cf-9e7650b5489e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "509a1c1c-26ed-4853-be53-5b7b3e8ff886",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a438060a-4291-4605-9b90-5f3fbd8ad186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3846c5-9383-40d6-aea9-95b7fb9eb8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade9a9ab-a411-4a3c-b7fa-7d8716f3578d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496626de-83f6-43e8-b541-4e17d2355016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640befb8-0596-48b7-a771-a59911fdae3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c138873-9117-4222-ad37-18e1225647d5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1062e913-a737-480a-83fa-65e7183b51ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebc2501-8d45-484b-9e5d-258ba84e4752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2a3d54-9e31-4201-b2d2-6b8ff4540467",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabc4eb0-1d7d-49ff-92cb-1891450efb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52203c8d-1dc1-48b5-858d-897885beb2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d1588f-727a-41ea-a0c8-c3f6fd91505c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7256d3-276a-493f-97d5-1b494b9bed0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42642c04-a8e7-4504-95f5-3624bcba730d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55aee013-101b-4dc3-943c-c888ad67ae49",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b256f5f1-67d7-473e-a342-76066dd47f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abde653-e067-4657-bd8c-fda5f7434154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76126ce1-9aee-418a-8ceb-4cce0ec863ea",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee36c8e8-cf5f-4272-b9e9-e5fe4c98c65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a732809-4b48-45b5-a348-f5261fdefa69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545fb948-3160-4853-8a29-6bff4b3809e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663d53e1-8bb1-4148-a321-0a7bb95c4ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68d7df1-9b01-440d-b94c-ef514be4132e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b764c32-acf8-47f2-a57f-f9c88c931418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482af423-1696-435a-accd-5feb04c94437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1df61a7-43e2-4675-b753-0899af9dadbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e90f221-21c9-4c2e-a790-0f4229d69a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820deb1b-b829-4717-9ba9-9c70e4aec6d3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24739392-f583-441b-8949-8136d1e262de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "849b183f-ab48-402c-90ea-e6595d1def8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3772ac-0a75-4417-a51f-ad98c06f1d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5467c3-1e12-433c-a136-636577b76e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bec0fb7-fe93-4efb-9022-4a6d6bf95a97",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0b9053-d0cb-4ed1-b048-5e7006b70dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c665c65c-a440-42db-a5a3-eef6d4c21b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c560e-bc70-4bf9-91ee-0761a232360b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ee0ff4-23dc-4baf-8f96-62a51d3c16b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574adead-ce28-452c-8bd3-77a834bde541",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfd1fa9-a3f3-4c03-8902-9b2b997ffa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5bd8e1-e412-4f1a-87fc-4c3d6b175bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a7a790-dfb1-4f96-a52d-6589f954138c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a9783a-85e1-4f57-abec-63b399b336da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed9ad94-5e52-46a4-9a80-03752213d73c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33db881-ee67-408f-b5be-ef28a6d2b75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb7a0ea-4b6e-4b23-926a-758d10f3273e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2751c6cd-ebd6-4209-af0c-72f39af375dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47577869-edfa-45bc-9685-435279302f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ddcd8b-a369-4832-b693-619686d571e2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8666c8-c5bf-4477-984e-0b2ee2fd381d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00f71a8-02a6-4fca-93d1-6e125b324ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6683bc6d-e5a7-4074-b0de-66882180b093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b535e1fa-48af-485b-8904-ae42f9fa22dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4823f6-f64b-4cee-a353-3044474e9b35",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3d6b38-8bd9-41d4-aafb-18523cce8607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713b4306-5651-4957-9f8c-467d0579dfa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3c67be-78a7-4170-9665-a8b3295edd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8031bd-61e1-45be-805d-95c4f94851e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225b3534-c9ad-4f72-ac70-1213215c3f3a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7448f2c-4fc8-4bc4-9258-cf8100370e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "146f3dd7-6ae7-4278-a45f-3790da6be0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5d63b2-5af4-40f5-be21-f7305a040775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2d2b01-1379-4112-9217-a4a0b2b3f03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87e69b3-7e8b-4c9a-a5fb-9bbff0bac5ae",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4083349a-a3b7-4e02-ab6c-094fbbc58434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a962762a-5666-4a9a-9577-33f28ae78de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c369048-c355-4722-bebd-4f2a4584db52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44832e17-377b-4ba8-9fc6-1a61d36cc3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ece28c3-3a45-48c2-9548-a63a3ce211c0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09245199-bc9e-4888-9f49-6899a427a09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fa9d36-73d4-462e-a0e7-c39c9c10cd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c932bd49-03b8-496a-8e62-3af3f4036d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9950876-b42e-4c17-8500-43561ae05061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00e0cc4-41db-4611-b986-d31477bb8384",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d812c56a-751e-4c8b-bb41-79fed67f11de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860c4cd3-c039-49f0-86f0-4b94b310e360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b5de76-1f24-410c-8e0e-b4f4204891b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df9c5ca-20af-41aa-af5b-5e39f502b9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f89bb50-ca0d-4008-8914-ce7f62f67b5f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf20959e-1f0f-4e98-bf8e-eb3aedec8349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae75437-6ef6-4659-a750-1bac0e0a4a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b77903-9d03-4170-b474-ed2f0f1f8d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95e3dff-3f4d-41f2-94b8-1ac5a96ba9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502a5153-555b-452e-acd1-c82aca05bb82",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727bb239-53e1-4de6-aea8-1d9aa4583ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f80f21b-2c76-4e53-8614-750f547eefd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45215fa3-538e-438e-8b96-aab9befbf23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe88616-f9ad-48a1-8863-0c267210dac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b35c7c-8d39-47ac-af24-35ee661ff76a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53da49bf-50a3-4495-b23c-74b47679d92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22c79a6-3c24-4532-b16d-17776277350d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f621611-3a49-40ed-b8d2-e5ef29bfaa12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b0f54d-2598-4c29-881c-9928e9bfd1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ebd0d7-5542-4188-b53b-df8bc19b30f8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8318dda-58a5-4726-893b-57e0b7562554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96182a39-87de-4021-8653-0940a67b4af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59368bf-2c93-4277-be30-d1eda7d96084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334674c5-7069-4696-a221-e5baab9e86a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b920752e-0b02-439d-9216-e135f708a15b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f49ad0-ee80-4153-8cf9-eb5ae286548e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddaa2fc1-ea31-4392-ad23-62e87b7098a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c545d65c-22ae-4226-9181-6ce3f157eafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2a4c41-fc8c-42cd-9c98-5d8dbaab596e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d22b44-b158-41ab-a319-b301d9a73ba6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9631aa6b-bf7a-45ee-bfac-a619dc06daf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0df2343-ccff-4b07-b60b-98f5d5454d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9fcf88-c8a9-475c-8a38-ed339f4513d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1395cc11-f858-4441-879e-f2757a46a653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830aa2d2-30ab-4f3f-ab8d-fc2cfaa08c96",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6391e232-1981-45ca-91d7-3e6b5659bdf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c91f5f31-cec2-49f6-8695-50bdd41694f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a022cd-7dfb-4679-aadb-cdbf90b4694e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921a8dbb-39f3-476e-b0ec-1992b60d79fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ad3501-0a0d-47da-b39d-3269fcb9e5ee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5f80f5-6915-421a-a242-6d337b4b7cf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f32ccae-f80f-4345-ac0e-9415efe021ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2d0e7f-abbd-4675-813b-227ab2d1e11b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4021bb94-a877-455b-96c4-cc0b621b545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073b4a3e-51d5-4d2e-8d6b-e7c1436a1bf4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3f37c5-6a90-4d47-998e-61a7ed125f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31333446-cbe0-476a-b619-9a4a4a20df48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a1fa5-9554-42c9-80c0-f3ac5a14f1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f74417f-dd84-4d37-ad00-0b87aa9d0d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fce529-6f23-4b04-b165-23656859efb7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe10aa70-b4d6-4ebf-b712-3f886b0ee946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d21efff-dc10-4c43-af68-4ce4e89d336b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bc3c87-e629-414e-af65-576e56b27c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163a6979-075a-4a5b-932e-905aed561d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05356aab-436e-4dea-8fe6-5fa8d715f75b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dfb3c6-3a0d-44c6-973e-4b0448eca6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b4005c-6d63-4e95-b4f5-23abbb5b57e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a276cf2d-7372-4984-acd7-67bf6c1ac40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a64345f-eac5-4c21-83db-b8a1a74a7a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1807bf3a-706d-4c9c-8e9e-a7c7e3fc46ed",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f00f9-1973-4799-ae46-213cb6953bae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81559bde-670d-4bc1-94cd-f0b95ee7acfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b8836e-3117-4c8e-a93b-ceb13c5f85c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9380c3-f7aa-4188-95cc-2d64211c3d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b3a250-12ce-4fc8-a49f-d4a6d0f95002",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab0082c-b5d0-4825-b12e-307713582ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971a3dd3-0018-41be-ba15-55bcdf1c5941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0984922-f692-4801-8c5c-c23f90addb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29ebfe5-b561-42a8-a3a6-fdc96cbeb5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8c61e5-8cbc-4d91-b6a7-750f3baa3427",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a7e349-b6bc-47a9-aabf-06f8a88009b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a461ac-110f-4642-9d8e-a0b8bc22169d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec0f3db-f399-4ad5-81bd-c0680cf9a10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5531216e-5c7e-4fd4-9334-0c340dda3097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0284bc0e-09ff-4c4f-8250-799e61fc0f06",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fccb9b0-ec6a-4426-abd2-61a8d41887a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d22d0cd1-9b01-49b4-aa70-b338dd66d901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd14aa7-b959-4c2a-ae98-df44738f38c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e740aec0-3bbc-4888-8e6f-6bc393f4e21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cc76b2-2f4c-4c62-91af-00fa10fe9d8a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6f2a65-bdbb-40e5-abff-58888fcaaa11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039688a5-ffd8-4495-8dde-9979920d285d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dceacc-c236-4567-a03f-c28a328244ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044f48cd-93fc-48b4-9ee1-a53eb25f10b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ce4134-5165-4dfd-a056-2447c647c412",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833f7937-e59c-4e76-b53e-98a8922d367c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c674d84c-9fd0-49f0-a15e-3a30a4d110f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc161484-e4bc-4976-8b59-3233b829ce38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1402f41-4385-45e6-8098-af6fb4813187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42f6e09-16c5-4be0-a2ef-37caa2d4d4e3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0afdb53-f818-4d02-878b-62a59be16c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde7c899-1f8e-4f34-abdb-7d21d9cde79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767dd231-78c3-4e75-ab94-aa60c24ae363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7067c29-9375-4e91-b7aa-cbd7f19bed68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bd9b92-d2ed-4108-a063-2861ad6d8049",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fd182f-928f-4d72-92f0-572d3d900848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67607b16-4107-47c2-887f-ec9b61566ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5766f3d8-9823-4245-8665-2d17a9ebf4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c63377-c54b-42fe-aeb6-69f4147692a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9de34c1-2ae7-481d-8c01-e5f2becc6a23",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c26942-6761-4da5-8dbe-a7f4656318cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09c6e10-b77d-430b-8471-bedbd54f9383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4aca04a-5d30-41f7-807f-aa2d87baa955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c8541e-84c3-42cc-8671-10d31ae38606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89a16e5-559e-45b9-b446-56692646d366",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc47877-a83c-4bb0-9e64-a70c0fd842cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d4b293-8f27-4c88-8ff6-4f3f2ff4d559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de95feb-8487-4a22-b037-feb25078a360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abce439e-6f92-449b-8d23-9ddd6e784742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d85b92e-b3eb-4370-9d12-0d38eee45bc1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9825ab26-ab4e-4a65-a022-b52a906a22ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b108d56-37e8-4358-bb7d-4739291b4c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a2de7d-11af-4a7a-bc83-d28f553c6020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e045b5e8-4ba9-41d5-9a7b-bac141403a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bc92e5-ca5d-44db-8b60-1735739f3819",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b963572-d7c9-4e95-a09b-41746052729d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fccbc87c-b449-4247-a066-1dfaddc0313b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1ac44a-56b0-41db-b3f0-b27629a4e54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63ca40c-f2a4-4061-a510-61e87d06bee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e96613-9dce-4c14-9245-8609ab3f45c6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e130630-1845-4da5-aa18-89ea1097d8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a77fcc4-6cd8-4261-8d14-4b20d194e777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5696d2-d4ca-4586-9081-17ccd944d5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f8a695-405e-4b29-ae7c-436664e460c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4186813-8dca-4b3b-8e5e-f1efce70ec69",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3894d8ca-7ad9-485c-9033-79393576a7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b60d3f7-1d04-4915-9c60-cca3b9fd048f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf733ed3-663c-4aba-9723-274caf3ab9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4688ea8d-e1de-4f01-845f-08ae1ef44416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9a39e2-b5c4-40b8-bfb8-26ffb9ae6f1b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9495c08e-f15b-48dd-bd64-7b2bc3013a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d271ab67-416e-47ea-b644-b8997a01418e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638dbce6-b53e-4334-91ec-772244186474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d9a1fe-ba6a-41ef-8ba7-1654fa320bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9586a845-c33f-47bd-8fd2-4c0bb4e543b5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f7b585-b754-4a22-81eb-e8f7f119b14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1f1a05-1a1c-4719-8c2e-abee3b7ff539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488cdbd7-a07d-4fda-ba4f-83a9dabb433b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b04295-9d32-457d-8aaf-32543d08cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cf8fc6-640b-41d1-9b1a-fbcd4cf336f9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e1bf35-ccfe-4fbf-8c7f-33fc9917ac86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c8e145-84e6-4edd-8353-270b637269d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabcc728-9fb6-40c4-9196-f7157632a660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6c9888-f89d-42ef-ac19-54c57435d07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6887d41-8847-42b3-b8b5-6942e5ff877c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc16ed5-0b5f-4ae6-8402-a2977f90917e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beed6359-2e3e-4e69-93ad-3666ae034680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58939f6f-92d5-4754-98f6-24db8b0db3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa516c27-9313-4f92-9519-43ac7422df70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea62895-6dd5-4a96-84d2-18fe877b7d16",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4603369-87f2-496c-a682-d1bbc4852cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6ce0ad-d5f0-433c-85fe-f4673c087ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65e8377-dcc4-4af0-8c9a-cdab5920ae2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca83d0c-e400-4d73-b007-b1322a8638fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a037001-9cad-4cc5-990a-d4bc8e780c54",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623487d0-2168-4ebe-87c3-b70e1a2289d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfad2793-5772-4bc3-b580-df1d6e636eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58944891-112e-443b-9bb7-ffc251131177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e41d9b-c9aa-4843-900f-0f9270b851a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82d6f59-3cdc-4c92-af18-6468f276d2ee",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80f704a-ffe5-4539-9e91-072e76c6a10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b078a8a5-bd6e-41be-acf4-1b4e6691f196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe92d9f-d04f-4195-b945-37fa4d7132eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee10b5f-6ff4-40b4-b1aa-82a6ae452880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fcbed2-270c-470a-9cdc-a81dffc95829",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c2532-7482-42be-af6f-d1148f5406f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18f925f-ec57-4d7d-a4a0-f7da539f464b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6910bede-c6ca-4b93-8e26-639e8296bad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c671b9-1141-4cec-ba36-9c4d2963077f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd273328-0262-414e-8d48-795ab65314a5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb819d1-e401-489d-ab10-0d3410f92301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e625b196-1910-48ac-ad0c-5d4f99258171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f33606-1a74-48fd-b540-bb28e1864cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc27e9b-32ac-41de-8c80-69ce9aea3b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15439cda-cd40-402e-8a79-3aba53f7185f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b462f61-9940-46dd-a1a2-fb8044ba28ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926d6d65-a190-404d-bb8d-5fbc9e79270f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc39acd-b1a4-41fc-9f2d-d0713ac8c46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfd2b62-d313-4a2b-ad49-18cbe6cdc6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230b79a8-2559-4f86-9fff-46f516d33627",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88563a8b-6fe0-4f93-ae4e-75fccfaf5e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873363ca-58f6-4c4f-bf90-91dfc09d4bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8974038-593b-408c-83d7-c84a2057fceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7e34bf-50a6-4194-9a95-0687e61ad2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03300f8-418b-41c6-aef9-3ce8d7b02615",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41856268-6e09-4121-bf04-b5ebc3f6f45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ff4e25-0544-4c30-908f-bcc775d80230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76650a68-e05d-4229-813c-3bde1efcf477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf721f64-000f-477e-adfe-3e1790c77ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba507d7-6a2f-4640-8c2b-1b4ba7863a53",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14da597-dbbd-40c2-b7fa-5d1eaab9d445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2433d0c0-b5cf-4e20-94a6-e9d335e03118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935a9535-8662-4806-8260-1fd5a82bc242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12feb763-80fd-4d41-a529-009c80bc1662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff8299d-7250-4f67-a7e7-0a5a1d843da5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc84a143-86fb-4db1-9e6f-1ff5ef34514d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae340682-ef80-40dd-9db9-3d05a4c232f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c96171b-8118-4065-9e7f-68493b1fc504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39115ce-4cdb-428d-933c-fc8368d68b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee430b5e-a817-46b1-9b20-5f454e389578",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b760107e-5ed5-4104-935b-5987719d9e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f720de-4020-4306-b75e-30f762415c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305c237b-5795-48a2-9282-9b09e53f32a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a2f606-baed-4906-aec0-5b449f6e27b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555f99e0-c19c-46d9-b1a9-8fe80e88e7ee",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d752e3c-e4bc-4a59-bdd2-40024b70058e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f445b55-f368-4721-b0e9-d987b5d87138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e06bd1-84e1-49e9-ab0f-69ef9c5987cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8786723-b2a7-47a8-9ff6-10b41812b5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c21d17e-39b2-4d00-80b9-ddeb7dcbfa4d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d596874-7ac6-43be-af19-8595986780a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7943ff5-9b25-493c-ac68-060617bb7037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ade5698-8e17-4d4e-95f4-48ce4b3f6956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48f4794-6e18-4fe5-8cb8-a33114ed728e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df91874-8cbe-4b1b-b47d-3e20b214533d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4606cff3-5648-4969-94b9-0e5cbed80af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b423d0b-225c-4459-8893-7367890fa102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6347731-6626-40e3-bb92-5118c6f73aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874545ec-bdb7-4474-ad2f-2c0d9b59a4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbff1c98-25ef-4f75-8cfb-b077fe9fde8d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf581e7d-594f-40c5-a13c-788130cbeb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59153d1-e8f8-409a-85d6-2241e0953d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41574822-4921-42c9-9787-d526fda66044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce40f73d-ad1b-49a3-add2-255f86311283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27733b31-d3e0-42c3-8bf8-a1eff0edadde",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cda73b-f973-4b21-92d8-540feceffafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c36dac2-0086-46cf-82fb-df0e55fa1ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e757a64-49b8-48b3-b683-d509724a1f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b9b86d-da46-451a-9e98-a0b65e21f245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cfa717-f5be-471f-b9c1-24f3b6eebf1c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27b5c48-4c05-45ab-a087-fa175dc9b8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7eb621-7537-4b48-9e7b-dcb6a53480e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbc1bec-7c19-47ac-9103-6608b1b3f5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca2cc47-7a91-4ca9-bd4a-bfded114659c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7a20ed-731a-49a7-8ba1-b407220d3861",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca185f9b-97c0-48a6-9539-c064f5d90075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43561650-a1a2-4e41-986f-174e2e5abc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d683e53c-6349-49f0-a774-edb0e8b3177a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d8f5e0-10d8-4213-8be0-40faafb0e70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9d9ae9-a4bb-4274-b462-02c9483faa5e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543da3ae-bf91-469d-82ea-d9a07e8f8eda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2f6c260-1f9e-4410-87b8-48b66f18c2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa653c96-85b7-4635-984f-65c422150f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58955f8f-5fe2-4e66-840f-461c86ebb95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2df50d7-3ea4-434b-9f6f-0c46d5ae4616",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927ee1ea-f974-45f7-a52a-88153052c752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8203fc83-f9de-4715-a707-b547348443b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593dc5a1-ef27-48e9-ab53-865a5d3ab056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742f5afe-53da-4a38-83ad-c2707663015f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257cbc10-cb1e-445b-9c48-f382f6244f38",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d0ddc4-5abc-4001-8d64-ab43824b290b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d934282-c0a1-4816-a753-52e561b467e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca731af-90ee-4f83-8dee-687927414dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c993486-aa5a-4bbb-aa81-fa13a83485f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b9115c-1ad7-4a05-aa3d-f78e40a3f407",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f6f7b-5c39-4c31-ad3f-1b7d6b4e39ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf52a243-8301-4b5a-8737-73469b3d85fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09dce8d-26f7-4a2b-894d-5f5feb065aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb18061-05dd-4c1b-8471-94ff13c3369d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94f6ae5-707e-4a70-8cd0-d0754a5b0133",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c64cf63-1b84-4dd0-ae4a-c57f2400c8fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a60b8c1-3e2a-4ef8-a78b-74242732ec09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc8d875-73c4-42f9-b822-5bf7263c8b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72b8456-2ffe-455d-95a2-51fd7b5bb1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec98f564-8096-4622-9f44-d6a6fad820a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20818622-d69b-4d04-9501-97bbb3e0c079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aba102f-116f-4d51-bcbf-cf4bb0ec2fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0734e446-363f-4c85-a174-5000a465c326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53babc6-f4c0-4949-87c2-dc89e53cf0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e5b768-df4f-43c9-834f-0f69ec955a2e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a9650-27c2-451c-9430-756fce0671f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba5b522-2552-4400-b428-364a8bd37a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d48b5b0-410d-4212-b054-d860f97af238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f51abe-d64a-4aac-b1ff-9b5c117b5922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b91fed-164c-4d17-b019-dd404ce4048b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5658726-3ec5-4e2d-be89-a729069b2d4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c05b9c1-6493-44c1-a367-3a3ffbbef9f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045d7f2d-162a-486b-abfd-c325abd834f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d680e60a-52e6-4ff8-865b-b340a930fc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a7daf7-7eb9-41c5-93c5-17b90c389971",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e914e2b2-64b3-40f9-9525-c8913dd9f0af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39febca-917e-4f6e-8188-4649873a1777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ab46a5-7373-4199-8107-35a274c62c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4758a38a-d7c1-4ba5-9d6d-8106731caacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b247b6b-2d29-4e6f-9a63-c8048aec24ab",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fda92aa-cc40-4013-a18a-1b611bd78814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94c24469-6e2c-4d38-8bf8-7f31b8218b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7baf28ab-fa68-4f88-bddb-ef291cd30ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61619d4e-edce-4c07-a127-143c6dd3f3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12661b6-ac94-4584-af3d-b770a2ac82d3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910e933c-3157-42d4-aea6-c7047f40c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d490cfe0-5c4b-4445-a474-b4dd004bef36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa6c3ed-cea2-4a4a-a2ad-49c531be6677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1636b32b-a02e-4c74-920d-d5762459ed52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5855d964-e450-4409-9450-768ae7a0a338",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c44f81-8789-413a-a4e7-cf5b3141ab1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00736105-92f8-4282-8e7c-64791b927f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508dfb9e-80e0-4d31-9a26-04c83c176881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b264ad05-7763-47ff-b54f-1b412f6cd445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8b6b69-0557-466d-b94d-ec4c6adaf67d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301f32da-f509-4473-8f49-7643a5509802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35b8fc59-25ae-4ac7-9d9a-783c14549f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ef993-2f3d-4c44-a991-ea31d4b1c5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7669457f-ae12-4a89-a3b9-012dcb6b5453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdf894f-0833-40eb-a816-db1714fcedf1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293a030f-0907-4c5d-b170-636da7afa6ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69ede869-3d35-432a-bd0b-6a4dfcb25d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f117f270-092b-4477-a3a5-70427f5ba472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1e206f-74bd-4972-803b-a013a232b047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2bea8e-f73c-4a5d-a6d4-c4eec7b086f9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4dad2d-8a83-490c-9d69-760a24285320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e5f3d2-27a7-49ef-b361-a310538df0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d79ede-ee04-40c8-83c3-a393bca59e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d250e7-c804-469a-94aa-c246c818c7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebb4479-ad53-4e42-a591-7ff87cc9c976",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53dd008-1cb1-400d-bd3e-4dd207c521a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09df7f7f-9775-4c80-8910-c3fc257d4764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad60e1c-2df7-49aa-95c4-9e4afc185424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bdf4c9-aeb4-43ef-854e-ccde5eea7298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153d300f-26b6-4587-a6c4-2b07633b06f0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65e97b0-7c79-4e52-80b6-5efe2a6e0f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2c5d5b-3911-4e63-8689-1fd1eaadbcc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e69098-4509-4778-bc55-bac4f136c80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a43340d-ce12-4626-9721-bee104c774b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13fa569-1adc-4853-9c3b-76e6f15494da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b958ad6-36a2-450d-8a3d-02775c8a551e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeb3e6a4-db35-4e05-b77a-f9fedc3c93af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e051ac5f-99a4-4c45-a2f5-cbe44b31a740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d72a0a-6a44-43f6-8871-59f333e3b55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64950f96-772c-4d2c-b725-d30722e2f5a4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a8a05-3e11-4948-8724-c41faf1ccb4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485d5b10-46da-4bcd-9233-2fc0ce16ecec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183f2af1-88fa-4f1c-8175-ea10d40c601f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3ec64f-46b1-49f1-932e-3dab6518ddba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4ef80e-0d97-4020-8780-e59beae00a9f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15aa6d4-852e-413d-b6c8-9a3bda8a005a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81504850-9885-4624-b2cd-da89ff0e16e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb265ce1-a531-4c8e-82d4-1d5d7ea130d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf591f3-f3f9-47d8-b8ea-61db109b641c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06806f03-1610-4c83-aa6e-e1d5476f27f1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1396910e-edb3-4df6-b239-b6b3cd1e7a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178b5875-fbfe-4752-bd0b-0c7908c9f652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bf5506-ea20-48c7-a1af-e6a15b381d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8118b608-71cd-44a1-a281-5c5c5ab21a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac12ae2-ea7c-49a3-a2fe-38a29a6c886d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7b4306-b826-4a66-ae66-a291eb29361a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab76a764-d7c3-49f2-afa0-638ec0108e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049f8717-93f5-4cc3-bd62-0ed2e650d920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f00b7a-9936-4616-91c3-9c76d25f0fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6744a8d-ef45-431a-bdd3-0c4defc9d81e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f059ba-14c3-4ea9-a03f-90e20a11e9fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0134559-8a90-45da-8de2-509060f2a924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39ca613-a2df-4359-827d-c5c6143ad594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f0b341-e0d1-49db-89e0-5524727cca2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068736a7-7b44-4e5a-9d09-8aa39cebb6d0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b972dc-7723-42d1-ae0b-91fd923ccce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a738d54-14f7-4bcc-88cf-96c93af70bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b0179d-6c42-42a5-bdde-0a0de50b7358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1c1205-7945-4c1f-b57f-f7ca0e3abc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b344f728-8d1a-4d6d-86c4-fd3a4e4ad9c6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63842062-f590-46b6-8acc-a2f8f279e7e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a8973e-813f-4b77-a978-820ee4cfe147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889b353d-9b18-4f0b-9a7c-de6e4f7eb3f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f6d79c-9313-4625-97dd-09ed971dd46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f70747-d0de-4344-8b7a-05d6a6bdd3fd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdf499b-d331-4e30-af1e-0f8d60f815b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870009b0-f7a7-4729-8650-4c70d470bb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915d516-2edb-464b-84b0-21b0d6680907",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f47707-d8af-4d7c-ac9d-2c756a61874c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac263e-2baa-436f-890b-4694e46d2193",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25472f62-c62d-401c-bace-b85616f1dd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308b3050-014f-4541-8504-5550608d0963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94a2b6b-2ce6-4165-85af-0cd2092db219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47485b01-36f0-4c34-8219-a6774b0e4780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a68c035-37d8-4ad4-a55f-6d0d4fba5135",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd99c5f4-7b61-4681-b592-18a164dcfee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e503f7-be76-42cf-86d2-487a67eebb4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d62506-872d-4594-810f-956caa9087b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38e64a7-8bf9-4dba-a133-1129d09c5756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32be28f6-018b-4e0a-a1dd-e23103995389",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63c9996-ebc4-4008-bb15-c904d69e09e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce0beb1-44b1-4fce-bc38-3259309e9d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc8044c-5a33-4080-af70-010dff4e182d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5faae6-0146-4127-af54-aee91c0717e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acab1fa-1172-4516-915e-d993029987c8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c1a035-eee2-4d15-b4e6-85c82914de4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de312c7-a1c4-4bfe-b10c-97e2587d1330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d75bba-3658-44e8-a784-d7043d9c1b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f1fee8-38e1-47a2-9497-f57576f68b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d94183-d657-400f-99a2-da358e372742",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41134781-ca20-414a-a87c-afb8dda29a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bca41a2-1f70-44ec-acb5-45329f9ee518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f46d9fb-25d9-485b-bd4f-d9e5a9f3b983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ce9049-9e76-411b-9003-8636de73e0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ec4b6c-3d4c-4d8b-9b57-e423d8aca804",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a95317-f13e-44d1-9642-d6c8a8528da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f5a50e3-518a-43dc-8c34-4ac585dabe7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f1792-e30b-4d34-a0a3-a7401326022e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb1878b-628e-4ada-b902-b3436c2c5111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5c7c1a-75f7-4914-8b35-f8ab1f54f066",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f8ed8c-b622-445c-89d3-c170df913dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1b5834-7e48-42b5-bb3c-369cd298ab2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac7338f-4dcb-4732-b18f-cf1ab4729075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a8c049-334a-4ee3-a8ee-f3843482f958"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db03c8e4-0736-4ff6-9290-013e3069655f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d238938c-6a43-432b-8046-ed0ab3bdbc6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61f8de36-9fbf-41b3-ac81-7232946cd24c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "744e3ec2-24a8-4a2e-bdb4-1f183a37c9a1"
                    }
                  }
                ]
              },
              {
                "id": "3ed6b10e-d4c3-4a14-9d14-66c039a188c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6668f9a2-c96d-4807-a5ca-d1c393302e8e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdda08eb-bee2-45ba-829e-13f5828542cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "79e3cccd-e9cc-49aa-9cd9-c37529fc476c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa762840-924c-45d5-aa9b-0a3721bc8943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22542438-1a4d-4f8d-bb07-702e854da1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a92474b-2791-47cb-884a-675e1219d9c9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c08630-4c1d-4d11-adfe-439293a7cead",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8577755d-fd71-4aa7-b486-78d3734c7ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206f6e7c-8e9e-4050-aeda-0a705a241f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1124fdbf-ec67-4487-8010-4e5e63effdbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f822bd2f-37c3-43e0-afca-7693d246fdfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97aed91e-65f9-4e52-8476-526b4eb11352"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c218c7e0-cb12-4a83-9526-fb6ebf9fb5e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a804f049-5363-497f-96b5-a9ddfbcd1a26"
                    }
                  }
                ]
              },
              {
                "id": "4acfbaa2-37a4-439b-a98c-b67d3acb00b2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c5387c35-e897-4604-9d2f-b261d20cbfe1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3d1983-c288-4456-aa90-f716cdc41b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0f3a6469-b729-4a11-a78f-e1b20e22573d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265e9ee5-45f4-4553-bc8e-14b01d3625a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599a1a75-b8a8-46ed-a38c-e6d70965619a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "24ab166a-10ea-4192-91ae-ec90153b459e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "020726a8-61d4-43ec-88a7-4ea8674f3978",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dda5659b-1e78-4aed-aaec-0ebc8b8d64e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2540b609-efc8-43f6-90ad-fe731c069aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d550cc79-87b2-4ae8-9d51-a2ef36d38bb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ceb5046a-cef0-4560-9f51-e886dc4e40f2"
                    }
                  }
                ]
              },
              {
                "id": "48a6aa15-e331-4544-bb4d-d86290c38ba3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "629a7e67-5a65-47fb-9be3-cd8d9375793c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4231b690-a518-4d4c-8914-c1f5de56c1c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "128654b2-52b0-4274-8164-08578440b9ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "918d6018-6255-4e17-9e88-1d8c21f47b17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db097205-8654-48fd-b8dd-28460920b600",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3fcb261e-f5e9-430a-addf-e6911f3ccf12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd29f690-cc13-4d16-9d91-e122bd9833cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5d7f06a-4bab-4ec2-b97a-5bd1e01bd4cd"
            }
          }
        ]
      },
      {
        "id": "c4ad1ec0-d506-4cd9-8947-2dad0fdfb781",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1b02b183-48d8-41be-97d9-fe00a8349a3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36f5c643-2b9e-40ad-86eb-451d5bff175f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cf79fb-7ed1-41d5-b8a2-f6692e5b0c23",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73abc2f4-4bcd-4427-b6c7-5738e4c1bb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f127c99-248e-4de5-a633-27d2e723bddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1324cf83-e715-4fc0-9ad6-bea91e9b3095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3730526c-fe18-4a85-9eb8-a96000359f7e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55519b36-eff5-4651-b1b8-e91bbb2297eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4b0f9a9-af60-4ebd-a420-97fcf5dc6906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc61e1d7-54eb-4886-9977-8075429e133c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc4b9d44-2f92-4444-a2da-fec3b6967b23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0377b17b-177b-4860-8048-55b30edae2dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52a9c5aa-6617-4830-a5a6-ce4c064603d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30f05cda-f313-4db3-963a-fab64c222184",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a69f2b13-bb5f-4c1c-ab5f-b6bfb9d050a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f48e9bf-b5b0-4fa0-b4c3-a628820b93b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3de1f87e-70cf-469d-b538-980f13d416aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "105a7233-939e-4d50-82f1-34863702b889",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46e55dd7-c639-449d-b44d-74efa9b0ff5e"
            }
          }
        ]
      },
      {
        "id": "e3d2fdfc-bb77-4bee-92dc-eec468fccac5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "02a4d5c9-64ce-498e-81e9-d0f5d026aa9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a7196db-5035-4689-b251-e5a9db3c8d90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d33887f9-bc09-4ea8-975a-48a3c7ba11f2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446e4d76-c2b9-428c-8c9b-2c93f0bf206d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b1d10a47-1191-403b-8048-e9f16f7b0e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46a8982-b6ba-4c9f-9247-a68e0674c49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33daf735-6462-4b09-9d57-eed86bf3a4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553bc19e-8a93-4426-b66d-e3af9e3cdd98",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b3d217-d327-4ece-8c0b-369cac00269f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d080d8de-3edd-4419-b8e3-01792deae672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a54749-fae4-4ed8-b3c7-28833c3642de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a374edd-8b74-4fe5-8264-9edbefb5c286"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e8e22f1-22a9-4abe-bb9a-d098811b7239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd19dc7c-5eb2-4482-a011-61a37477dc9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91a3482e-a9d3-4fef-b541-f3f4976ce7c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30104c77-a5bd-434b-b11d-9c617fb106a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9afe00ea-ad8a-4778-9e94-069dd218742c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "349328b2-4014-4597-a9da-eee4f95efeb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa4ac582-1be6-4137-87e0-f1bc8010f0ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cd4ea9e-919f-473c-92e7-bdb4fbe077db"
            }
          }
        ]
      },
      {
        "id": "176ebf2f-25f8-4d24-b9fb-8a45fc97474d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3ca7a3af-a43b-47e4-a72a-a511206a3c04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d16c7c1-051a-4b5f-988d-aeea6cdad8e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5a844b6-9359-4698-ad9f-e1001c4c745b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d16b36-3b98-41cc-8fd5-c181822ff33e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d9fe9745-847f-4405-a16d-9d3f3bbbb841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71961894-5bc4-467c-b656-d93f637c19e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b64a138d-09c0-4692-84e8-19fa21740539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ba4ef2-798f-4e50-b34d-6eba64c15b2a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc0db96-5dac-42e7-84dd-af217b925096",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4ca688f6-5664-4626-b975-f76cf929b8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8a0ce4-5ea6-4989-9a8d-c5f9f5ff3279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2a6b9e3-8261-4808-ae95-9930e6bac215"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "841722db-21df-4d84-8bb0-fc267e24e05e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a7af5d7-e283-4bfc-9dd0-82632f17761c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a047a1d0-b390-43f8-ab90-8ed07badd5af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "692aa03c-b5d5-4140-868f-f3f4d86a2b92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4496be43-1ded-445c-8b68-13ef4dc8a191",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "810bce01-87c2-4341-8e26-defe75e6995b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2a8c1d2-7745-468c-a5df-7e0f304fb547",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb3c6115-da44-4b31-865e-4a31d5ed43cf"
            }
          }
        ]
      },
      {
        "id": "4b49dc68-d1fb-45bb-8efe-323adc3fca1c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cd686ae-910d-414f-804e-63bbe6dee8a8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5bd2f26-27fe-449c-9977-a1e06b42de4d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "79ea2a0a-c5be-4869-a7af-13bca629d460",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8799fb2-36b3-4e13-9df4-c1f06dfe209b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02d0e7fd-1c27-4e68-9d92-7a1413262d46",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 132.4885496183206,
      "responseMin": 22,
      "responseMax": 915,
      "responseSd": 171.97160987126094,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673397557344,
      "completed": 1673397602857
    },
    "executions": [
      {
        "id": "750bc034-d53b-4d6b-8d5f-4bd0be0c5fc4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3f1b570b-33ab-4cf8-a38e-4c1c2c5f9394",
          "httpRequestId": "832635e6-cac9-4f7b-ac31-5d9d4c317c08"
        },
        "item": {
          "id": "750bc034-d53b-4d6b-8d5f-4bd0be0c5fc4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b16eb0be-6f2a-4579-af77-9b0d4e7f7ae5",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "73b296f9-4cd0-4d21-b19d-02b8b4d967c9",
        "cursor": {
          "ref": "84315956-5b34-4cd7-a060-01fe6be605dd",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8d617c3a-b064-47f1-9f71-95c2751bebf2"
        },
        "item": {
          "id": "73b296f9-4cd0-4d21-b19d-02b8b4d967c9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2e1f0274-8115-4aa6-8433-22e2eb30f01c",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "e5953b3d-849a-4be8-950e-af89f1e3bfcb",
        "cursor": {
          "ref": "bb082345-6e5f-40c3-83ee-dacf2a248602",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7df0dec1-2f18-44f5-afa5-938d687970a2"
        },
        "item": {
          "id": "e5953b3d-849a-4be8-950e-af89f1e3bfcb",
          "name": "did_json"
        },
        "response": {
          "id": "c82966b8-c294-48d1-b38c-c98b789bb4a6",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8295d906-0423-418f-878d-59b4a0ebffcf",
        "cursor": {
          "ref": "3ef12bd0-b0ee-4c76-8f45-9fb49f63ba67",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "806ef98d-f81e-4f1b-9473-1d4be88977a9"
        },
        "item": {
          "id": "8295d906-0423-418f-878d-59b4a0ebffcf",
          "name": "did:invalid"
        },
        "response": {
          "id": "96fbd7a3-aaf2-4a07-92e1-7e1d24aa2368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8295d906-0423-418f-878d-59b4a0ebffcf",
        "cursor": {
          "ref": "3ef12bd0-b0ee-4c76-8f45-9fb49f63ba67",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "806ef98d-f81e-4f1b-9473-1d4be88977a9"
        },
        "item": {
          "id": "8295d906-0423-418f-878d-59b4a0ebffcf",
          "name": "did:invalid"
        },
        "response": {
          "id": "96fbd7a3-aaf2-4a07-92e1-7e1d24aa2368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abfdb88-de07-440f-80b3-73d91f489d44",
        "cursor": {
          "ref": "2aa287eb-6a08-4515-abfb-dc0b0526c964",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d4385ebb-db68-4489-8234-436129d3022d"
        },
        "item": {
          "id": "8abfdb88-de07-440f-80b3-73d91f489d44",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6ea92531-ead3-437e-97cd-872050c0a712",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01dc4da-3b3c-423b-a1b6-2a5b7ed19f0e",
        "cursor": {
          "ref": "4ad98ee0-5660-4c0c-914c-7294f986c2bd",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "000c3c1d-f753-44ee-81c5-a28acdc5df3d"
        },
        "item": {
          "id": "a01dc4da-3b3c-423b-a1b6-2a5b7ed19f0e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8ff947a8-408e-438f-85c5-6ee781b093fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fce13a-a90b-4bea-a75d-b3a71b36ebe0",
        "cursor": {
          "ref": "8f4af7c7-8c03-4bac-b16d-453d1a136aef",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17dd147f-f07f-4977-af75-d952a393277a"
        },
        "item": {
          "id": "a2fce13a-a90b-4bea-a75d-b3a71b36ebe0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6a99bf1a-8ce2-4a5f-8240-d9e71963d87f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17726c06-88b1-4f87-a571-58da7c420284",
        "cursor": {
          "ref": "696a0f0b-80fa-4e01-80cf-41b6b4af1fc4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4167e770-7bf4-4e51-ad9d-fad501845534"
        },
        "item": {
          "id": "17726c06-88b1-4f87-a571-58da7c420284",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f0cbbf96-3b6f-4122-bda5-8329c71fe5ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17726c06-88b1-4f87-a571-58da7c420284",
        "cursor": {
          "ref": "696a0f0b-80fa-4e01-80cf-41b6b4af1fc4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4167e770-7bf4-4e51-ad9d-fad501845534"
        },
        "item": {
          "id": "17726c06-88b1-4f87-a571-58da7c420284",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f0cbbf96-3b6f-4122-bda5-8329c71fe5ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337d666b-9200-4c84-9917-0f30521bcfd2",
        "cursor": {
          "ref": "58091830-50e3-4e5f-8461-e810b806e66e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2ec164b0-1210-46a9-862b-e41346c8c02b"
        },
        "item": {
          "id": "337d666b-9200-4c84-9917-0f30521bcfd2",
          "name": "identifiers"
        },
        "response": {
          "id": "ef757111-5f5c-444f-bdc0-1f6e83c06ae5",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa77d7a4-1bc4-4b55-8029-ec5c04a9c766",
        "cursor": {
          "ref": "7638c70a-b522-4816-a040-86639fae8fad",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be4c26d3-acb5-438f-8789-d626ce8d6936"
        },
        "item": {
          "id": "fa77d7a4-1bc4-4b55-8029-ec5c04a9c766",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c488d773-25a2-4e13-a155-6b2fe3fc6f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa77d7a4-1bc4-4b55-8029-ec5c04a9c766",
        "cursor": {
          "ref": "7638c70a-b522-4816-a040-86639fae8fad",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be4c26d3-acb5-438f-8789-d626ce8d6936"
        },
        "item": {
          "id": "fa77d7a4-1bc4-4b55-8029-ec5c04a9c766",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c488d773-25a2-4e13-a155-6b2fe3fc6f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a27e1e1-3727-48f0-93ee-6722973e0ad5",
        "cursor": {
          "ref": "27a92eaa-e699-4131-92ab-bad3d279d7d7",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c78c6dc0-2bbb-4050-89fb-42a88b581ecc"
        },
        "item": {
          "id": "1a27e1e1-3727-48f0-93ee-6722973e0ad5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "624aa3af-b61b-4dbd-aca7-b6f33fdb2d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6201985-70d9-4787-8b55-5332213a3802",
        "cursor": {
          "ref": "0a19d1bb-4c47-4e8d-b6eb-bb65f98a7ff4",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fa9ba4d5-1012-40e2-9b7b-493441055fa4"
        },
        "item": {
          "id": "a6201985-70d9-4787-8b55-5332213a3802",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "3898afdc-eaef-465b-b6f0-87890c528d09",
          "status": "Created",
          "code": 201,
          "responseTime": 736,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "10b0d8ec-baf1-43f7-a2e7-1617bb6bec9c",
        "cursor": {
          "ref": "fcd76eab-03e5-4174-95d5-db053cc62a75",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aff1bd9a-65bb-4e1a-b2d6-ae5fb333481a"
        },
        "item": {
          "id": "10b0d8ec-baf1-43f7-a2e7-1617bb6bec9c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5d710b89-3883-4266-9d52-9cb6f3323bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9cfe32-e469-4da1-b78b-80bc404be552",
        "cursor": {
          "ref": "77a7dd3e-f69a-4475-940d-d4d82d666bfc",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3f87ed6b-2a40-4f65-9ab6-b154d3044d51"
        },
        "item": {
          "id": "de9cfe32-e469-4da1-b78b-80bc404be552",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "180b840c-ce77-45a2-ba4f-69b08fd078ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817e118f-7360-40c8-95c4-273e165b0ead",
        "cursor": {
          "ref": "ebb2edd2-2b8b-4842-aa54-d07773b823ca",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "116a2ad9-e283-46f1-9b7b-fbef3c602dee"
        },
        "item": {
          "id": "817e118f-7360-40c8-95c4-273e165b0ead",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4dcde680-927c-4f70-a8e5-07c823afa5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d35e085-2fe5-408e-8a15-5fc9bbb170f2",
        "cursor": {
          "ref": "1e3ec5db-2645-4673-b9d8-3fd452093729",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1e51b47c-ca10-4a12-b8d6-1e2ca4bd411a"
        },
        "item": {
          "id": "8d35e085-2fe5-408e-8a15-5fc9bbb170f2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c1e3751b-06bb-4dbf-a87a-e1fcee4d8dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a39cbc-43d1-44b4-bc46-d69b27c5f385",
        "cursor": {
          "ref": "a99df8f7-8253-487e-aeae-c932444d6c5c",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "00a625e7-bf44-44f2-87eb-269f90ebb0f6"
        },
        "item": {
          "id": "25a39cbc-43d1-44b4-bc46-d69b27c5f385",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "59296f81-d35c-4776-a29f-892e669ff8bc",
          "status": "Created",
          "code": 201,
          "responseTime": 549,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0abe3245-886c-4b2d-9e03-a74ae7c02c52",
        "cursor": {
          "ref": "a58ebcde-15c7-4007-8e7b-d0f77d5ddef5",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "02e35726-e967-4dc6-965a-895f820b91e7"
        },
        "item": {
          "id": "0abe3245-886c-4b2d-9e03-a74ae7c02c52",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6ea897b7-5eb7-40b1-aec7-ec4d60d1f742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e577bb2e-1ee2-4ede-8af9-6d7f801dcf25",
        "cursor": {
          "ref": "abd5cd74-7ef7-4b70-87ab-69ffa65056c7",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f79a8c87-7722-4c8f-ab50-d71c5b0b228a"
        },
        "item": {
          "id": "e577bb2e-1ee2-4ede-8af9-6d7f801dcf25",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d1183802-9e99-454a-a62a-f9994f5b7b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4c800d-bd76-4efd-8ed8-079fea116af7",
        "cursor": {
          "ref": "f19eb20a-dbf9-40b5-972a-8553d0f10bee",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e13807cc-bbbb-435b-b391-1ee0f942d253"
        },
        "item": {
          "id": "0e4c800d-bd76-4efd-8ed8-079fea116af7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f1e8fd13-609b-471f-bb9c-832cbb668a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a52ef1c-5a77-4d0f-9058-18b39c553d09",
        "cursor": {
          "ref": "bcd3d078-348f-417e-a307-84abe663e54e",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cfe20481-660f-4a2f-9b50-24d64c6e666f"
        },
        "item": {
          "id": "2a52ef1c-5a77-4d0f-9058-18b39c553d09",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5d88b115-8b6b-4b54-9561-83fce000e938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0673a6-c635-4498-859b-a86e78bb884a",
        "cursor": {
          "ref": "93987b41-94f3-43d8-b750-64646cce89d6",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e5abf5d0-b7e4-4e23-811e-8a830d4334f6"
        },
        "item": {
          "id": "9f0673a6-c635-4498-859b-a86e78bb884a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d2d1ff93-48ad-490f-98cb-6fc485f6f9c0",
          "status": "Created",
          "code": 201,
          "responseTime": 526,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b724a7e5-7706-450e-b3eb-94a873a522a1",
        "cursor": {
          "ref": "14bb6092-716f-4e2d-bdd3-3788b28848d5",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a3ac2ff1-7ae3-447d-9d3d-0d65bcddad42"
        },
        "item": {
          "id": "b724a7e5-7706-450e-b3eb-94a873a522a1",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "fd18f905-9967-4c3f-8a2f-89cc7c4cbf2b",
          "status": "Created",
          "code": 201,
          "responseTime": 915,
          "responseSize": 670
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7b43efa1-43ac-4d17-ba95-cac1e674e468",
        "cursor": {
          "ref": "169ce44f-3cf6-4f05-a62f-4b2c913b7d49",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "727e0c62-db06-44bb-bf29-390f83a942b9"
        },
        "item": {
          "id": "7b43efa1-43ac-4d17-ba95-cac1e674e468",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8ee37c2c-a202-4290-9006-7fb8929d6c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81824e2d-94c0-48b8-8245-2fb31e5a71fe",
        "cursor": {
          "ref": "51b31e34-3475-4d10-a24b-81592e24be1a",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "53637548-008f-4515-9966-2b58b992995e"
        },
        "item": {
          "id": "81824e2d-94c0-48b8-8245-2fb31e5a71fe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dfbba8cf-668c-4ef4-987d-fdda4b92b4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5260d218-1185-4209-bad3-87db6a09544b",
        "cursor": {
          "ref": "4a26a401-1667-4a8d-a210-fbc308037725",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1cfb2be4-1375-415a-88a5-161316b25b3a"
        },
        "item": {
          "id": "5260d218-1185-4209-bad3-87db6a09544b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ad0b4809-c2f8-4684-8e37-4a8399781c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4a0216-c9cd-481d-bc5d-c0c5f95aea1a",
        "cursor": {
          "ref": "b3607fbf-64ad-4727-9d4c-768fdbf3f375",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d13ae776-aaf0-44cd-94dc-93299004af73"
        },
        "item": {
          "id": "3b4a0216-c9cd-481d-bc5d-c0c5f95aea1a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b6e5dc45-8c14-40c1-ba7c-bccaeee10dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877cae8f-57ca-495d-b9be-1e87672db664",
        "cursor": {
          "ref": "f1619852-df81-4fd7-9af2-b354f0d06660",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b5ca4d9b-df66-4ef0-a772-3a6329eb52f3"
        },
        "item": {
          "id": "877cae8f-57ca-495d-b9be-1e87672db664",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0d4f0d6e-505a-49e9-98a8-4affe275922f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c1d216-56a6-4aed-8fc7-2bd79bdca724",
        "cursor": {
          "ref": "282b236d-92e0-430e-8a9a-ca1ff1daa00c",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f9c04d6d-dc00-4d34-a3db-132cd244f35e"
        },
        "item": {
          "id": "63c1d216-56a6-4aed-8fc7-2bd79bdca724",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b5014fc8-835a-4864-b59c-84dcca9bbbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a24f89-d959-40e8-968f-0b50960d6016",
        "cursor": {
          "ref": "78c6ceb9-7227-452f-b142-83b29f0893f6",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "74482090-fb24-41df-b26d-ae047baf3d07"
        },
        "item": {
          "id": "09a24f89-d959-40e8-968f-0b50960d6016",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4002a63a-3345-4f1f-97ed-43890b423845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88c9bc7-006a-4b2f-9420-995542df683a",
        "cursor": {
          "ref": "b91357c5-f72a-4e14-8c08-c08b2ac24469",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3cdab8ad-5eb1-4b68-81e5-b34930bdce58"
        },
        "item": {
          "id": "f88c9bc7-006a-4b2f-9420-995542df683a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b0ebaa63-ce10-41b2-8359-40a6dc2856b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799c5c66-dd0d-4752-ae87-3eaceb774933",
        "cursor": {
          "ref": "53afd465-93e3-4ffa-8b77-007487bb151d",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "006742d2-eaea-4ac6-bb76-c2164834cb41"
        },
        "item": {
          "id": "799c5c66-dd0d-4752-ae87-3eaceb774933",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e38f9212-3aab-45f0-aae3-db9388f8f88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8113f740-3703-40fa-aa5e-fabb8fbcbed8",
        "cursor": {
          "ref": "f4cf2f8e-6b45-4727-b271-234373abdc50",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bdf7e496-1800-4a5e-a245-c2fc89233fff"
        },
        "item": {
          "id": "8113f740-3703-40fa-aa5e-fabb8fbcbed8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "87adeeae-b86c-4072-ba91-375e1b689702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26a0008-215d-4191-882e-333409326ec1",
        "cursor": {
          "ref": "4483b860-5a1f-4bb0-b9d2-ad389872aa58",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2794bfc0-8e6d-4872-a7d1-3cbc22a35b6e"
        },
        "item": {
          "id": "c26a0008-215d-4191-882e-333409326ec1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bbbac81e-36d0-4504-a0cc-48c491105685",
          "status": "Created",
          "code": 201,
          "responseTime": 803,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5885c8fb-2fa8-4adc-92f0-947e9658c8f8",
        "cursor": {
          "ref": "7ee12f35-0ac4-4f01-9806-6f9c147b1e8d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8de66c66-383a-4d39-bd4d-334d77cea05e"
        },
        "item": {
          "id": "5885c8fb-2fa8-4adc-92f0-947e9658c8f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "be31b371-2d07-40cf-82ed-8571fe469360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15de046c-3315-4777-81e2-fe189439d866",
        "cursor": {
          "ref": "391e392e-1f35-4ecd-b127-5e534140a1d3",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "72e9bce2-b5ae-4132-9540-917f9571f43d"
        },
        "item": {
          "id": "15de046c-3315-4777-81e2-fe189439d866",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4716f3a2-2514-4bfe-9e62-85871755e7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7c7ed3-1b04-42c7-a48c-cc26251e96b2",
        "cursor": {
          "ref": "bf1e7c63-9f08-4116-b585-95bad8c7fc6c",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7714f3fe-3077-4835-ac9c-29574d26599e"
        },
        "item": {
          "id": "4b7c7ed3-1b04-42c7-a48c-cc26251e96b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "48e6ed44-05ee-4183-a765-53b734e169f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411eace5-b2fd-43f0-b021-2ed70d09c4cf",
        "cursor": {
          "ref": "8f32cc40-331b-48fa-b371-a4ef53068c0c",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1ee8dec5-5829-4f7a-951a-6f6c58bb9192"
        },
        "item": {
          "id": "411eace5-b2fd-43f0-b021-2ed70d09c4cf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a1344efe-bd34-4f7d-8646-77f68fec7d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a95917-99ac-415a-8fa6-29fe479c6402",
        "cursor": {
          "ref": "728c63ec-0db5-40af-b9e6-94627d036e90",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6439f296-df0e-4c21-bad5-47400e498120"
        },
        "item": {
          "id": "14a95917-99ac-415a-8fa6-29fe479c6402",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8fd5b7b4-aeec-4305-b6d7-0b7deb558c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f14553-5dbf-474e-b9ea-ddd15e499f58",
        "cursor": {
          "ref": "6b438300-476c-4aba-af26-2326c10c5e10",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3a573886-08fd-4ee5-8f55-137b2cce6cea"
        },
        "item": {
          "id": "97f14553-5dbf-474e-b9ea-ddd15e499f58",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f814572f-c050-4632-b3e9-e8fee9d47f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad130f84-5869-4bf4-bd74-a38218af19ed",
        "cursor": {
          "ref": "c1d006ea-1ff5-4b30-b20d-9ef94a060e97",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3eef8d6f-d13e-46e0-b5bd-b09365f25b8a"
        },
        "item": {
          "id": "ad130f84-5869-4bf4-bd74-a38218af19ed",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e34e1e4b-2afd-4ca4-a688-19ed08b6372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999d79c6-347c-4ab8-98c1-7396a53ef67f",
        "cursor": {
          "ref": "6fa0dbe4-e953-4c0e-8746-aed3bcdd9105",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "55d872c1-a17d-41b0-b0bc-97eaae1dfe9e"
        },
        "item": {
          "id": "999d79c6-347c-4ab8-98c1-7396a53ef67f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8c9696db-1fc7-4f3e-9562-2da3fa1ecb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991c3c41-a759-421d-a4e0-12acaf6bef20",
        "cursor": {
          "ref": "da98badf-cca1-46ff-9714-03c28115c621",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "01195461-2006-4b4e-9527-a83d7577e921"
        },
        "item": {
          "id": "991c3c41-a759-421d-a4e0-12acaf6bef20",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "352c5131-b70d-478e-9148-1a2fd46d4ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a8624e-6fb9-47bf-bd6a-ca5bcb419246",
        "cursor": {
          "ref": "3b292ad1-7b83-4d51-979b-501373fcd082",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d0f9f7b3-cfff-4e54-82f5-41e92496f2e8"
        },
        "item": {
          "id": "12a8624e-6fb9-47bf-bd6a-ca5bcb419246",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "907196ad-dd5e-41ae-89b0-09cd5cc9f16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552f11c4-31a3-46ab-9737-a098eb652819",
        "cursor": {
          "ref": "0e8794ea-9015-49a1-923a-356b10632cb1",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "74c6ed99-3770-4252-8432-e7852a28be3d"
        },
        "item": {
          "id": "552f11c4-31a3-46ab-9737-a098eb652819",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5ac0d724-ce95-434a-8f89-6138bfffa5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f3d2e2-fca7-41aa-867c-298068a47cf9",
        "cursor": {
          "ref": "44582d0f-60de-48d7-97e8-b1346bfd1307",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "74fd4cb3-9b23-408d-8e59-c92a64622d47"
        },
        "item": {
          "id": "c0f3d2e2-fca7-41aa-867c-298068a47cf9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "356b916c-7b2d-41da-93f3-d9e08b17b972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e9f8b9-6c04-4c20-804f-1d22a538d4bd",
        "cursor": {
          "ref": "351541bb-ba11-48aa-859e-3cce31bb5411",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c775e9f0-2c3a-4c16-93df-86e620cd066b"
        },
        "item": {
          "id": "b7e9f8b9-6c04-4c20-804f-1d22a538d4bd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "07d92bd8-48d5-4e7c-9a6b-055ec75af4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "270b612b-ee48-4dbb-bd44-e75d7ce829ae",
        "cursor": {
          "ref": "d7383a0c-d4b7-48ef-81c2-d39c36960581",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6f9c035d-5f96-4d9e-a3a5-e601613f0cec"
        },
        "item": {
          "id": "270b612b-ee48-4dbb-bd44-e75d7ce829ae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72e1cffb-4a5b-4f1e-ab44-967620fc288b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c3e31b-0731-46ac-9f7b-842c89be409d",
        "cursor": {
          "ref": "83fde8fe-2561-4553-b4b7-ed7cbd56ec87",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "be211ea2-e361-42bc-9bc8-7ea2ceb33b5e"
        },
        "item": {
          "id": "d9c3e31b-0731-46ac-9f7b-842c89be409d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d7cb8773-741f-4589-9939-88d4f4f4c5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804a0876-b731-492d-ad07-d9f779afe7e3",
        "cursor": {
          "ref": "ce97ed29-8767-4220-bfd1-615293a07d87",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9e279611-d66c-4ed0-95d3-eefdad580f88"
        },
        "item": {
          "id": "804a0876-b731-492d-ad07-d9f779afe7e3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1220e783-a4a0-42c1-b1f9-33042dadc94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774af1b9-b93e-4fb5-a304-0afd8dadaa62",
        "cursor": {
          "ref": "0b27e51b-f2fd-4520-ae23-5fec536169d1",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "421b7bd3-254f-47dc-8ae3-51667d87ed9f"
        },
        "item": {
          "id": "774af1b9-b93e-4fb5-a304-0afd8dadaa62",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "73e8169c-a007-488b-a00c-78f903d5208f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90934ea5-b8c6-4120-8f45-f48a571f54d8",
        "cursor": {
          "ref": "9901db16-4bda-4e7f-8452-bd94ddb2aeaa",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c8100331-1421-4edc-bd82-3f6d6163cd78"
        },
        "item": {
          "id": "90934ea5-b8c6-4120-8f45-f48a571f54d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6055cd1c-168f-4fcd-bbef-dd60ea8001ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720d0cd2-00a5-4ee5-9b47-f61b7451881c",
        "cursor": {
          "ref": "c9c5b8e8-88e6-4f2d-a47d-cf4a3e7a06f7",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5bb50868-7ce9-4523-9ebd-6cefc727483d"
        },
        "item": {
          "id": "720d0cd2-00a5-4ee5-9b47-f61b7451881c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3d40a2ba-a81f-44d0-b05b-54d0dc7656ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ea6bd3-76dd-46f0-8df8-03a98860780b",
        "cursor": {
          "ref": "fc28c85c-b8e2-43e7-b096-54690a93a7ca",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ace310c2-9b10-40fd-a0d9-07a54052c68f"
        },
        "item": {
          "id": "f5ea6bd3-76dd-46f0-8df8-03a98860780b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "596f75d4-efab-436a-9c86-c0c62112c192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "11f3bf17-eddf-4c66-b3b9-823622e6e506",
        "cursor": {
          "ref": "a24dcbe9-21b1-457d-ac96-409165587e9e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "49c56674-2b34-4b26-b1bf-c3f6c773eb92"
        },
        "item": {
          "id": "11f3bf17-eddf-4c66-b3b9-823622e6e506",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "021d1433-a44c-43b8-86c4-b69ce4cfcb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caba49e6-5ca9-40f7-83b7-49f6581f6769",
        "cursor": {
          "ref": "3b6c1043-101e-4e51-8bd4-ee050a75b091",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bbe9791f-166d-4905-9576-896a52ebcdba"
        },
        "item": {
          "id": "caba49e6-5ca9-40f7-83b7-49f6581f6769",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9e2d0b4c-9301-400f-aa63-e8feedf3e549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5865c6-6482-4e80-99bf-6d1e42f069b4",
        "cursor": {
          "ref": "e3b0c911-bc0f-4e68-a0df-4d28e671288e",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "870f5761-f8e2-490c-ac81-cdddbeda6556"
        },
        "item": {
          "id": "bb5865c6-6482-4e80-99bf-6d1e42f069b4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "250a9de9-3d61-42f5-aec8-6d1e66c24f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1276921-2151-43d7-b1c8-eb9942c24e12",
        "cursor": {
          "ref": "275e5350-b261-461e-a1b2-dbc73c82f1b3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3d122b94-a094-47ab-bde6-fe8e280e5517"
        },
        "item": {
          "id": "e1276921-2151-43d7-b1c8-eb9942c24e12",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "483c3d15-da71-438b-8ff7-5ccf60339cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccec1f3-200c-486e-b889-bb100e77c4cf",
        "cursor": {
          "ref": "b9267141-5152-4a76-afb6-95d6558b7300",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "37c1013e-9f85-40d3-b583-f944455b6f6a"
        },
        "item": {
          "id": "2ccec1f3-200c-486e-b889-bb100e77c4cf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a78f2629-8a95-4a1e-8acf-d4db99af3e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f472cc5a-6d95-43eb-b82e-e4f0efc6530d",
        "cursor": {
          "ref": "38e96196-8a27-40c6-a2d6-11e236501f8d",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "376e3769-dc37-4e3b-b361-f4a3be372323"
        },
        "item": {
          "id": "f472cc5a-6d95-43eb-b82e-e4f0efc6530d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "afbfb9a2-adc1-4355-b6e3-6838a578d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee732583-ebb5-433a-8e43-76320744f703",
        "cursor": {
          "ref": "f9bc4071-6488-49e9-8fbe-857c4ed51721",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "be3f7c2e-b6f3-41ca-a8f2-2d3f6f50e022"
        },
        "item": {
          "id": "ee732583-ebb5-433a-8e43-76320744f703",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9f70cd25-87b6-47ba-8e65-624c977fb5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6271c5e3-e69d-4a24-ab86-24b81a28b216",
        "cursor": {
          "ref": "0ac02f89-2f0f-4271-8522-f9b343b20d23",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "27136aa1-bc1a-449e-a2bc-da80f5159b4f"
        },
        "item": {
          "id": "6271c5e3-e69d-4a24-ab86-24b81a28b216",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "652bb37a-fa61-4ad9-ae58-c31059b28943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184e49bb-4cae-4254-99ac-a2fb4c6303a4",
        "cursor": {
          "ref": "a8ca6f98-aa87-4807-865e-253845d354b1",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b07ba6dd-8521-40e3-9925-feb9e127e66b"
        },
        "item": {
          "id": "184e49bb-4cae-4254-99ac-a2fb4c6303a4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f35f56dd-3c2d-4593-9ae5-79e2db255895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0a593a-c99b-4d66-9742-c91423c80a35",
        "cursor": {
          "ref": "e34e7dac-2d2e-40d7-97db-33245fa1df77",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "82d622a9-4571-4a2d-8e5f-4946beb64cf4"
        },
        "item": {
          "id": "df0a593a-c99b-4d66-9742-c91423c80a35",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4248d594-329c-43e9-b2f8-e841019c28ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09eebd1b-f640-49a1-ade5-7575c2f5de91",
        "cursor": {
          "ref": "1f1c2c7a-443c-4e46-914d-4bef19bc6cbb",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4d300377-cc7d-4188-b581-f1810bca2078"
        },
        "item": {
          "id": "09eebd1b-f640-49a1-ade5-7575c2f5de91",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3e27bb1c-a363-43f4-aba7-f9e391a9f06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21885d6f-ae64-4c3b-8ef4-8fb3754a4516",
        "cursor": {
          "ref": "4887e289-db56-47ca-8e04-8a923285bffd",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bd948218-2c8e-4ec7-aa28-98b8ff8cb890"
        },
        "item": {
          "id": "21885d6f-ae64-4c3b-8ef4-8fb3754a4516",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d09f5aa7-a1b4-4c69-ab31-824b576b8fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361177ab-71b4-4ac5-8ac5-352333dd7004",
        "cursor": {
          "ref": "fcfd57d3-1af3-4d17-82db-ed0b08d68b6b",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a436c2bb-1d61-43f2-9acb-4e31174a6b66"
        },
        "item": {
          "id": "361177ab-71b4-4ac5-8ac5-352333dd7004",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "395e4ebc-7bbf-409f-a0c5-c704debd22c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea41e393-cbe1-4d4e-b655-e96ebdb5c423",
        "cursor": {
          "ref": "3dc2c4ef-e7a7-46c7-8317-0a1b00ed8edf",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1f5aa1cc-0b01-4f2d-b301-8355863db64f"
        },
        "item": {
          "id": "ea41e393-cbe1-4d4e-b655-e96ebdb5c423",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1f890a85-bdb7-41f6-af98-dd4bb0af54ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0ac912-6053-413f-800e-73cd7b492344",
        "cursor": {
          "ref": "f98774f6-3434-4d27-a1ea-d8f43541ff26",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "63a36067-a161-43ed-bcde-29c02ecfa80a"
        },
        "item": {
          "id": "3b0ac912-6053-413f-800e-73cd7b492344",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "66c2922c-0028-4bf7-a693-b08b8d46c6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f10d93e-e133-477b-9043-8fadb8862a55",
        "cursor": {
          "ref": "19561376-3b7a-4140-8e75-90474f7f7529",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6d3465e1-5152-4c75-92ec-51251c2929f5"
        },
        "item": {
          "id": "4f10d93e-e133-477b-9043-8fadb8862a55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "978924c4-4cff-4924-a3a0-5c254a95da9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617b0fb5-7db7-4559-acb5-8193777701d1",
        "cursor": {
          "ref": "d5fdee87-9956-4682-8986-1d3eb842d41d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "73e23f19-9d06-4796-a66a-e7642a86a482"
        },
        "item": {
          "id": "617b0fb5-7db7-4559-acb5-8193777701d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "42664461-b4d2-4108-ba30-ad5f29112fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d4e6ad-57d9-4012-a11a-3404d89a5685",
        "cursor": {
          "ref": "ad7aec6e-17c8-4f2a-9713-a792458b0494",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "515b024f-8389-45dc-87d8-2257ad35a0bf"
        },
        "item": {
          "id": "e3d4e6ad-57d9-4012-a11a-3404d89a5685",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "24bb9f08-d0a5-49d3-873e-f12e2acad78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fb396a-c6f6-44d1-9767-9b24aa94bd89",
        "cursor": {
          "ref": "7d173300-a10a-4b12-a19c-77058fdde9c1",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3a215b0e-d186-4fe4-b6dc-81acc8920988"
        },
        "item": {
          "id": "d2fb396a-c6f6-44d1-9767-9b24aa94bd89",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8eba81d9-7d46-4df3-824e-d013afe0740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c9d2a8-41d7-480e-a773-1a48486f99c3",
        "cursor": {
          "ref": "89706afe-8d52-469b-8725-7a30cd0f82ed",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "69164a8b-694e-4526-9d63-3f06ebce2371"
        },
        "item": {
          "id": "01c9d2a8-41d7-480e-a773-1a48486f99c3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "dcba1b2e-2a3f-42b6-9dbb-8fc1e4e55233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce7e1a1-0daa-4897-858a-a8773f71931a",
        "cursor": {
          "ref": "b01f49aa-8eb8-49e3-9edd-15757b243cce",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d7fc82c4-b7cf-442d-9ddf-0f7bbf98c423"
        },
        "item": {
          "id": "5ce7e1a1-0daa-4897-858a-a8773f71931a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "969c850c-c376-4d93-bee5-fae72de686c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9540d1-9e39-4cb7-a1bc-5c86eae8bbf3",
        "cursor": {
          "ref": "243fece1-1525-4e7d-b568-38be6df3ccae",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "251ea074-0ed7-4406-9c41-5f202562ef69"
        },
        "item": {
          "id": "ae9540d1-9e39-4cb7-a1bc-5c86eae8bbf3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "46b2a9ad-551c-46c4-8f0e-f19239abba10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac73fb65-97c7-45e0-83ab-6b492bf7651a",
        "cursor": {
          "ref": "3577789b-b072-49da-8182-07e94e0c5bff",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b60dac6a-3566-4f0b-a3e3-eb8e1b269818"
        },
        "item": {
          "id": "ac73fb65-97c7-45e0-83ab-6b492bf7651a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fb853b4c-7ed1-4da4-b88f-6bef8bcff155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cde8eb-1f89-4aab-bb1f-1db820268445",
        "cursor": {
          "ref": "f9f06df7-c9d0-4df5-939c-840e6958b0f5",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "84479dae-b77e-486e-a1cf-57d1ae43711b"
        },
        "item": {
          "id": "22cde8eb-1f89-4aab-bb1f-1db820268445",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "86a04ad4-981b-4aab-8934-4f7510076507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1134af-84cf-4513-954d-5fb13c8b3fd8",
        "cursor": {
          "ref": "dce8e905-9cc8-483c-b1f1-5ab62f8af621",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f93f567a-08ca-45d3-9bb5-98e4d4dff0cc"
        },
        "item": {
          "id": "3c1134af-84cf-4513-954d-5fb13c8b3fd8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3a9c568b-5689-4578-8711-6e73c90443be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8258edfb-558b-41d1-b338-464c92e8005d",
        "cursor": {
          "ref": "7697e36f-0841-441a-81f1-3546769a7620",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d7aceb18-a7a4-4d00-a5e1-97e84d841e2b"
        },
        "item": {
          "id": "8258edfb-558b-41d1-b338-464c92e8005d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e99cf91c-9dfa-48bf-a712-0f97cefbf1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae017fda-93b3-4691-b11b-6f6d4f4e9d8d",
        "cursor": {
          "ref": "00693599-a5b8-4749-a171-9466923bb17f",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e6377404-843f-4a77-86a0-27ea82af0bbf"
        },
        "item": {
          "id": "ae017fda-93b3-4691-b11b-6f6d4f4e9d8d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "abca6235-c607-4914-8f5c-ee1755d7783f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439478c9-173a-454a-beed-25af31b1b504",
        "cursor": {
          "ref": "1d4f2834-3783-4cf7-b266-9044fbccd860",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c5e48a72-709e-4149-b910-b3f20dd1fd06"
        },
        "item": {
          "id": "439478c9-173a-454a-beed-25af31b1b504",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d8baed81-fdb7-4953-8e61-28df9acd4be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47d6030-a41d-43fd-b8b4-2cfe8a6d8cee",
        "cursor": {
          "ref": "c9da1020-a165-4e4f-982b-9b7d0d8b3b07",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "becda5c9-bf39-47fb-abe7-c4849fa506b8"
        },
        "item": {
          "id": "f47d6030-a41d-43fd-b8b4-2cfe8a6d8cee",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9f55a37-4250-4bf6-a619-37717c202c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ea8d50-0d1e-494e-b946-7d2de2d4ff93",
        "cursor": {
          "ref": "2949e9b8-2b1c-4019-9f6f-25a467baa4f8",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f977be82-0606-4024-b961-d074323b147a"
        },
        "item": {
          "id": "28ea8d50-0d1e-494e-b946-7d2de2d4ff93",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bb072bde-3f6c-46ee-9a6e-b4dfd2f44f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058d8eb8-cf9e-4715-a3a1-fdbf391e9526",
        "cursor": {
          "ref": "08ddc1bd-7a4c-4f6f-8e36-80a469d76f4d",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cca45d91-8057-4d91-b710-d95587d505d3"
        },
        "item": {
          "id": "058d8eb8-cf9e-4715-a3a1-fdbf391e9526",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "93524397-c879-42e4-8571-cac7da62d1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee3b5e3-429d-44c4-9f1f-8a87faf3f3e9",
        "cursor": {
          "ref": "184a7f50-7da0-4590-bbc0-db5555f8bfeb",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1abae599-c27b-45da-ba9d-46b2edfa87fb"
        },
        "item": {
          "id": "4ee3b5e3-429d-44c4-9f1f-8a87faf3f3e9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d860936d-fa99-47f7-bb86-5a5a1963858f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b64f43-5fcf-4bff-b1c5-12ab1206a0ac",
        "cursor": {
          "ref": "b4529f29-8599-4aad-aed1-9da9340596e5",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "32ac8949-42a5-4479-b10e-4c0dcb56a702"
        },
        "item": {
          "id": "65b64f43-5fcf-4bff-b1c5-12ab1206a0ac",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cdee3581-0c93-4ba3-ab0e-51646fe2eace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22afecef-5644-4b62-b18d-7df69f096c7a",
        "cursor": {
          "ref": "f6991f8f-53ba-4a76-8e7e-f3577f8f911b",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f842f828-9630-4115-a8e6-6df1be78173c"
        },
        "item": {
          "id": "22afecef-5644-4b62-b18d-7df69f096c7a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ead5790b-50b8-492a-b1c3-04bb3b69615c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4fcca1-78fe-4058-849c-f5c306e0670b",
        "cursor": {
          "ref": "3e7eddda-c9bf-4c9b-a7f3-d016565cff12",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca2d0ba6-c20f-46ec-a94f-8a4b52930939"
        },
        "item": {
          "id": "ec4fcca1-78fe-4058-849c-f5c306e0670b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c29f9048-9da9-4e67-9270-27f07435ad6c",
          "status": "Created",
          "code": 201,
          "responseTime": 702,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "690e6b2f-d76b-4cdd-b4cd-f80a2014316d",
        "cursor": {
          "ref": "9be31eb0-0bc2-428b-9a0c-5e507c2c52b3",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f9654c25-40c6-4185-8308-b7707ac5816f"
        },
        "item": {
          "id": "690e6b2f-d76b-4cdd-b4cd-f80a2014316d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a129de5b-76f5-448a-a233-bc496177a696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a95c18-de01-43d1-ac03-a0fe7c690d85",
        "cursor": {
          "ref": "d02d78f1-2152-42e3-9d2b-f75fd581faa9",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3f7648b5-487f-4023-9aeb-c1f9cad1c3da"
        },
        "item": {
          "id": "f9a95c18-de01-43d1-ac03-a0fe7c690d85",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a77241a6-5260-4e3f-aedd-efff7326c00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56453213-1455-4eb3-853d-1a5cd4540dce",
        "cursor": {
          "ref": "40851bf8-f02b-4f46-9593-0158e5fd01c3",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6f30999a-9842-47c7-badb-dbc820f82644"
        },
        "item": {
          "id": "56453213-1455-4eb3-853d-1a5cd4540dce",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dfef08e8-3daa-4d8f-8805-0b8916558ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863fdc1c-3a01-4cd4-a4ef-93f1633dfed4",
        "cursor": {
          "ref": "2c03d2b4-f60b-449f-ad7d-49d61e772309",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "49b7a9d2-1d52-47e3-bffc-e6b0a5fa8b6f"
        },
        "item": {
          "id": "863fdc1c-3a01-4cd4-a4ef-93f1633dfed4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "53175d37-c997-4834-a404-d14eb61184f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de66cff7-b778-40c6-b9eb-092bf0e2bbed",
        "cursor": {
          "ref": "0d2eb949-50de-4fad-a5ef-71e161818a5f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5fbad248-2bac-4027-99db-fcb6fd445a84"
        },
        "item": {
          "id": "de66cff7-b778-40c6-b9eb-092bf0e2bbed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ffa7b602-55b1-4f51-bef1-2a0df36e89c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ae0359-e0ea-4e87-820a-75a282153821",
        "cursor": {
          "ref": "f81cc851-d891-4f90-89e7-d8eb3ac71ccc",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2aa046a1-d8d7-41ea-bc5d-a581e3ff3b88"
        },
        "item": {
          "id": "71ae0359-e0ea-4e87-820a-75a282153821",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "db49eed8-117c-4449-ad65-42f97799d68d",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "d9f9755e-0e6c-4183-ac53-104dee6b8726",
        "cursor": {
          "ref": "b82d50b2-fab0-4cde-ac13-bf28a95da933",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "57b60b97-67ac-41a2-a757-07fd5717a8cc"
        },
        "item": {
          "id": "d9f9755e-0e6c-4183-ac53-104dee6b8726",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0e63eced-9e28-4f1f-a0b5-1f410d4d5d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd054eb-7d39-4efe-86b6-b5718f65d17c",
        "cursor": {
          "ref": "3946d972-7030-424e-a6c1-75d4cd54435f",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6087069a-4b2c-44a7-825e-4e43c5c30df3"
        },
        "item": {
          "id": "3bd054eb-7d39-4efe-86b6-b5718f65d17c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "192cbffa-e6a6-4885-9d8d-3798fa05d51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebabc12-94d9-400c-820b-d3aee65c2c21",
        "cursor": {
          "ref": "c8481c19-7282-4b21-ac0a-7c2357218af8",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fe9e570b-03bf-46a7-aafe-af6c2e1f73b6"
        },
        "item": {
          "id": "3ebabc12-94d9-400c-820b-d3aee65c2c21",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "17b8ce76-9d28-4426-9030-808b1c6fbd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cd10af-e73d-45d9-b658-0229a1cb7fc1",
        "cursor": {
          "ref": "4141689d-38e9-4b85-8a49-d44cbf31ef6c",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "28665d39-6677-45e5-b821-f5e0fd7c5cfe"
        },
        "item": {
          "id": "27cd10af-e73d-45d9-b658-0229a1cb7fc1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ea79af38-b202-4ce2-b6eb-2e09e596f578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ed5e03-5eae-46ca-b02c-23006996e903",
        "cursor": {
          "ref": "d38105eb-dca6-47a7-b8c5-ebec29f56d17",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0ec8bedc-854e-498b-afd5-ec08c29795bb"
        },
        "item": {
          "id": "27ed5e03-5eae-46ca-b02c-23006996e903",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6ebe3c08-5979-43ec-b491-7ae99e8b379e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616f9c02-0133-449d-a1ab-28d822c7f894",
        "cursor": {
          "ref": "6b8d94f0-b083-4c43-a1ad-3a735fdbe7d5",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba905653-887d-4b1b-b46a-ad0d664fa9c9"
        },
        "item": {
          "id": "616f9c02-0133-449d-a1ab-28d822c7f894",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "56ba0e3a-761a-4aad-bcdf-4b19d8738691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30be719-0b08-420c-87a6-8a37af612940",
        "cursor": {
          "ref": "d0b2fa4a-0873-4b2a-b9df-f89550fd1a6d",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dc302bb3-8a42-4f38-b967-9d1126692319"
        },
        "item": {
          "id": "f30be719-0b08-420c-87a6-8a37af612940",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0eb87736-d4af-4bff-ac2b-c41c468e85ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e9b2ed-0cfd-4c4f-9f3e-56524a058b0e",
        "cursor": {
          "ref": "9f42d9b7-3788-4d0a-bf1d-335d2c93a91f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "80e981ed-c656-4014-9094-96281cde6fa0"
        },
        "item": {
          "id": "62e9b2ed-0cfd-4c4f-9f3e-56524a058b0e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "44eb7973-ac3a-442f-9c03-408cd7c47630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e30c60-f34a-41c0-bb81-414ea12dbebe",
        "cursor": {
          "ref": "c62ef755-6d0c-4c29-869d-fe721e98274a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3fce3483-c494-4335-b35b-20c8eefc3b2a"
        },
        "item": {
          "id": "65e30c60-f34a-41c0-bb81-414ea12dbebe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dc049e23-fd50-4432-b839-4a67ffda534d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "08b965c9-a31f-4d27-8384-a8ff368173e9",
        "cursor": {
          "ref": "5eb86435-615f-4718-96aa-06a10724f0f0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "80a8456b-1eb6-4b7d-bae0-bb5688e4a038"
        },
        "item": {
          "id": "08b965c9-a31f-4d27-8384-a8ff368173e9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "aae02966-8f2c-4558-872b-23fc3ed6ff6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "5d5eb736-ee94-4614-b56c-899d65f480fb",
        "cursor": {
          "ref": "2475d7fb-3f18-4410-8be7-cd1ad5198739",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "89cc2270-78c6-45ef-a213-a870cbd3da75"
        },
        "item": {
          "id": "5d5eb736-ee94-4614-b56c-899d65f480fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e6cefa51-87a1-402d-a34f-be03b3c41e9c",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "081155f6-6ea0-4c12-99a1-d4d7b2aec9b7",
        "cursor": {
          "ref": "12edbd4c-7aa3-4e96-a1bc-d15d78c90cc7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "303b3bbe-d365-4666-934a-0fb5b1f98266"
        },
        "item": {
          "id": "081155f6-6ea0-4c12-99a1-d4d7b2aec9b7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "006ff060-7ab3-4374-9557-43b8d1e690a0",
          "status": "Created",
          "code": 201,
          "responseTime": 694,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6793bb9-03c4-45c9-86c2-a9825735fb42",
        "cursor": {
          "ref": "4bdf3de3-ff8a-439d-a4a1-ef8cf15bd520",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8988285d-2a59-4d1e-af93-a36ab99fd04f"
        },
        "item": {
          "id": "b6793bb9-03c4-45c9-86c2-a9825735fb42",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "99a2f201-8b5e-47ff-8ae4-3fad327834aa",
          "status": "Created",
          "code": 201,
          "responseTime": 721,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa514f6-9e4c-4604-b975-0263e0daf4f9",
        "cursor": {
          "ref": "02966c50-e5c0-4e7e-93c8-3441831e3425",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7de91f16-3d19-4b4e-988a-b38a0cdacacb"
        },
        "item": {
          "id": "7fa514f6-9e4c-4604-b975-0263e0daf4f9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "97ff3fef-302d-4a1f-9fc1-8fc9119a5ca3",
          "status": "Created",
          "code": 201,
          "responseTime": 698,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fb0ef6-b0b6-43e5-8caa-d9e0b9136cb0",
        "cursor": {
          "ref": "371833f8-ca8e-4bad-9271-37a172d96971",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5f689cd-398b-4c43-b087-f93c4e35b2cc"
        },
        "item": {
          "id": "f7fb0ef6-b0b6-43e5-8caa-d9e0b9136cb0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1eb1fe51-530f-4e96-9a45-290156510f63",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e28482-9fdb-4776-bdb0-ebe569a6a14e",
        "cursor": {
          "ref": "3ed405bc-1b95-474c-89e4-3dec952b22ed",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a68b18b1-7110-4e59-8ef4-1e4d6efada6d"
        },
        "item": {
          "id": "71e28482-9fdb-4776-bdb0-ebe569a6a14e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7a46e22d-3a59-466c-b8ca-55c6267a3fc3",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "71e28482-9fdb-4776-bdb0-ebe569a6a14e",
        "cursor": {
          "ref": "3ed405bc-1b95-474c-89e4-3dec952b22ed",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a68b18b1-7110-4e59-8ef4-1e4d6efada6d"
        },
        "item": {
          "id": "71e28482-9fdb-4776-bdb0-ebe569a6a14e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7a46e22d-3a59-466c-b8ca-55c6267a3fc3",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5c6afd42-d44c-4daa-95e8-1aaf139f6508",
        "cursor": {
          "ref": "a36e0920-63b0-41cd-85a4-5ad83539f4c4",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b673cd29-bf1e-4f28-a57d-8e5f2c122285"
        },
        "item": {
          "id": "5c6afd42-d44c-4daa-95e8-1aaf139f6508",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4bd8b78-fabd-4483-a99c-0e226d98cdc6",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "afa0d886-7a3f-4bd9-b776-a05615cc397d",
        "cursor": {
          "ref": "2734f74a-f084-4fe1-a60b-4f4767be9ca3",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9cc43ab2-b354-451f-91ec-82c9f0add19e"
        },
        "item": {
          "id": "afa0d886-7a3f-4bd9-b776-a05615cc397d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cc079f44-f781-45e1-b34b-cf12f3b7fab0",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "62cd4a8d-09ab-4227-96c0-852162face8a",
        "cursor": {
          "ref": "9652ebbc-fdf5-432e-910f-7c7331422a90",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0b86765c-954b-4794-ac2a-2917eb8521ee"
        },
        "item": {
          "id": "62cd4a8d-09ab-4227-96c0-852162face8a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c96c32eb-2f0e-4184-9199-901440733525",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0be7e3a9-50e3-453b-9141-7ec0dfd8600c",
        "cursor": {
          "ref": "720f0d15-ccfb-4160-ae97-ac8f4eb2b87d",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1ddc18a8-ca93-411d-bec1-feab9c3dab5f"
        },
        "item": {
          "id": "0be7e3a9-50e3-453b-9141-7ec0dfd8600c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1f3c8171-ea38-4a3a-be74-491daf002563",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "15191c33-e0aa-4de0-a991-590389560c76",
        "cursor": {
          "ref": "bb561f36-9e44-4ccb-b57c-d394ace1b279",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e43eb01d-2836-4fc7-b3b8-1261608fe3ca"
        },
        "item": {
          "id": "15191c33-e0aa-4de0-a991-590389560c76",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "375e26ba-beb2-49f3-9d7d-534e664dfca8",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b6f42085-9ef8-4ba1-9adf-668f799a0963",
        "cursor": {
          "ref": "1e375aeb-79f3-41dc-bfb4-9587e3cb15ed",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7d50a9ee-c4f0-4128-99dd-20528ef59463"
        },
        "item": {
          "id": "b6f42085-9ef8-4ba1-9adf-668f799a0963",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d42fd90c-ece8-47ba-bb52-1427d2e91732",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "adc1884e-9801-4f27-a0e5-afb6da701158",
        "cursor": {
          "ref": "ed6c3332-7f23-40e0-9478-c12ff75251f8",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1dd4ee7a-ae2d-4cfa-a7dc-8bf9a0be97f3"
        },
        "item": {
          "id": "adc1884e-9801-4f27-a0e5-afb6da701158",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2376ce90-d14d-480d-bfc7-53a63a483f09",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "426bbea7-d0ba-4de5-a50a-96dfa533d0e5",
        "cursor": {
          "ref": "278629f6-e25b-40a6-981d-adae598b2922",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ea869ca9-7361-4fa5-88cf-753d5fdb767d"
        },
        "item": {
          "id": "426bbea7-d0ba-4de5-a50a-96dfa533d0e5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "241dfe47-2320-4b7e-a47f-fa87f454d08f",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "45659889-a2fe-4ce8-8876-2dd4aadff14a",
        "cursor": {
          "ref": "abe68597-2986-43e1-b12b-7ec2c96c1e84",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0c8fd3a7-2dec-415e-a7a4-c53a5a86ec86"
        },
        "item": {
          "id": "45659889-a2fe-4ce8-8876-2dd4aadff14a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8036b2da-b42b-45cf-98ec-e3a98faa8782",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7849a435-7663-4017-a075-10f1efe420b2",
        "cursor": {
          "ref": "31432014-105a-40b6-b37a-29116467c404",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8d4257ca-bbb3-407f-8c91-41aada6a248e"
        },
        "item": {
          "id": "7849a435-7663-4017-a075-10f1efe420b2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ca6ca43f-1ec9-441e-ac4b-a74c0c352369",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "09325cc2-e52e-488f-8dd6-e8d340db7d07",
        "cursor": {
          "ref": "b1160bab-5704-4db1-b2a8-a7dbb141de15",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "526b65b7-adc0-49ed-b731-e99a96bdd229"
        },
        "item": {
          "id": "09325cc2-e52e-488f-8dd6-e8d340db7d07",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c6fa873d-a0bb-42c6-9384-6ce3d3c36b50",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "47450345-1fff-48c7-9e79-3259a0f65ae8",
        "cursor": {
          "ref": "dad11b59-7c75-41e8-ab11-f8b58b5465a5",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b10fa5fe-9426-4338-9642-e98474ed8da5"
        },
        "item": {
          "id": "47450345-1fff-48c7-9e79-3259a0f65ae8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0510fde6-7c8e-4f57-ac87-5098a7582a67",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ceb75cbd-9f8b-4f20-b05d-6c6f5d1afae8",
        "cursor": {
          "ref": "8d896b7f-d537-4eb9-b161-f4266da64d2d",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8033faca-b02f-4015-b0b3-905691e887fa"
        },
        "item": {
          "id": "ceb75cbd-9f8b-4f20-b05d-6c6f5d1afae8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c700b08d-7d1e-41fe-839d-ec0094e8ab77",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "51d2fea7-b19f-4fd3-86c0-d2a48f354827",
        "cursor": {
          "ref": "f8e39f54-f51e-4dbe-b48b-09e4d3b7d41f",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b5339d86-db52-4a24-8d5a-82a239653c04"
        },
        "item": {
          "id": "51d2fea7-b19f-4fd3-86c0-d2a48f354827",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "727abb3c-64b8-4514-9a64-5ee42857465b",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1c20015c-1b48-4cc1-9c30-a69af725cf78",
        "cursor": {
          "ref": "44b6d860-6a50-4ba4-821f-d845f2431cd7",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "55bbf6f7-4392-45a1-b268-c155890024d0"
        },
        "item": {
          "id": "1c20015c-1b48-4cc1-9c30-a69af725cf78",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6dbdb006-ac0a-4e92-aefe-91ef94d3002d",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9b70a78f-e899-4fbd-9441-e00d694a6af7",
        "cursor": {
          "ref": "9fe77eaa-3ddb-4530-84af-1c4c01a18f6e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "56dcb1d3-c0c7-4771-b875-78e066bb5c9d"
        },
        "item": {
          "id": "9b70a78f-e899-4fbd-9441-e00d694a6af7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "83a84a52-46bd-4c27-887d-a7eb1fbe4a1d",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c807f882-e101-4e02-9978-590321f1702b",
        "cursor": {
          "ref": "106f0847-4c88-49d1-badc-f22b00de6d91",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cc7e3588-b8bc-49e6-8781-439895706acd"
        },
        "item": {
          "id": "c807f882-e101-4e02-9978-590321f1702b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f9f62995-05f8-4978-b5a5-ff17e0659a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d2324b27-9486-4d3d-a58d-519211e43c27",
        "cursor": {
          "ref": "bfa7a514-ae61-4ee6-ab6b-585d61c23678",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bb9bf7dc-e1b9-44c3-8555-38ce029b12b3"
        },
        "item": {
          "id": "d2324b27-9486-4d3d-a58d-519211e43c27",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "93d3bcde-fe1d-42d4-95ba-e18fba71117f",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "0ccef1e2-9793-41c6-b87d-350cab3f55e3",
        "cursor": {
          "ref": "b391ba1e-5f8a-428b-aae3-37b5ba0b592a",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c7b6cd97-7853-410f-be63-a6820c58315c"
        },
        "item": {
          "id": "0ccef1e2-9793-41c6-b87d-350cab3f55e3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8fdf4c71-15bd-468f-b4a9-7d14dda5804c",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "57dedaf8-ea25-4222-970c-3aa566f07d5f",
        "cursor": {
          "ref": "54f28025-5d70-49b3-b66c-4e1253ac4d7a",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3ed76973-fadf-4692-948e-592cc7dcc5c6"
        },
        "item": {
          "id": "57dedaf8-ea25-4222-970c-3aa566f07d5f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aedaa249-270f-4afa-bd9a-8d27193baa1b",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "9198e458-1144-4d5a-8292-a1fe3aef7605",
        "cursor": {
          "ref": "f64cdd42-692d-41b7-b8a6-3a99860bc0b5",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8b22bbb9-9437-41c1-b018-8d10c93dbe9b"
        },
        "item": {
          "id": "9198e458-1144-4d5a-8292-a1fe3aef7605",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6dd8cd0d-ce34-4619-a65a-786cba385559",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6b9badaf-2dc7-491f-b5b5-8b686391301e",
        "cursor": {
          "ref": "e11f6e7f-cd6d-499c-aafe-fd06eeab51ff",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0def67bf-7058-4658-b66b-6aca1a2592e2"
        },
        "item": {
          "id": "6b9badaf-2dc7-491f-b5b5-8b686391301e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "810f414b-20b7-4a9e-983d-104e2f080f26",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fe4216b0-5353-49d9-9361-e81cfb607b34",
        "cursor": {
          "ref": "2fd0d5e4-9e78-4c5a-9700-4f37330c1788",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1ce730c5-2688-48af-b8da-edb4c26880ee"
        },
        "item": {
          "id": "fe4216b0-5353-49d9-9361-e81cfb607b34",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3976d2ee-9d2a-41ae-a08d-5e374ab0caca",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e26ae5bb-6774-4886-8aeb-952cda577efe",
        "cursor": {
          "ref": "f11ba063-d13e-47fb-aca2-08d6a1eeca69",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3b55d74e-b4fe-4945-9431-f7ea8bcec8d1"
        },
        "item": {
          "id": "e26ae5bb-6774-4886-8aeb-952cda577efe",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e021e81e-9261-40aa-bb2f-09c263dc1704",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1ecb4e53-2e75-45ab-8116-76dbca0ac0ce",
        "cursor": {
          "ref": "d6d9107e-2caf-495a-82d1-b86bd4a6726f",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "61d2ee1f-eab5-4807-9243-0b1769f817e6"
        },
        "item": {
          "id": "1ecb4e53-2e75-45ab-8116-76dbca0ac0ce",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bae54d09-8cd4-4151-8928-f5ecc20dd071",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d31566df-7452-4d7b-8e2f-6a4e5eac2794",
        "cursor": {
          "ref": "bcebe6ec-6ce7-4cb0-9f97-63c3e69e5f27",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e24c0469-6177-4574-a53d-2c7ccba1a4f9"
        },
        "item": {
          "id": "d31566df-7452-4d7b-8e2f-6a4e5eac2794",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1a2036aa-8e09-45a0-a715-f5ed07f0e02d",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "89299f0a-5181-484f-9496-e7fa5679a1df",
        "cursor": {
          "ref": "4a52a238-9052-4e4c-89ab-2fd14fee3651",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0362a510-8df3-4ec7-8c54-41065da532df"
        },
        "item": {
          "id": "89299f0a-5181-484f-9496-e7fa5679a1df",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "59c5a281-8e63-4edb-9af0-5704b1df9d09",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2b411594-a6ce-486e-9ce3-1eac761a60d9",
        "cursor": {
          "ref": "0d3aca08-ba08-4efd-bfbe-528b60740a6b",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "898adde8-f18e-4391-b4e9-873dddfae38a"
        },
        "item": {
          "id": "2b411594-a6ce-486e-9ce3-1eac761a60d9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "64f94b5f-a2f7-4eaf-a90c-305914690933",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c5f32288-81f3-4274-a911-87c312b42b78",
        "cursor": {
          "ref": "0fbe84c6-6b26-47d1-858c-eba55a57085b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "218fbf86-3091-42a2-97aa-c01a837f7668"
        },
        "item": {
          "id": "c5f32288-81f3-4274-a911-87c312b42b78",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3a0ae6aa-b61f-4a1a-ae1f-94e2044ff929",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9aaa95b7-f00b-4301-a962-ac223125d6fd",
        "cursor": {
          "ref": "6a38e5fd-4d64-45f8-b216-f071301aba0d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "04e775d9-c2d1-44e5-931a-8e56de1cc546"
        },
        "item": {
          "id": "9aaa95b7-f00b-4301-a962-ac223125d6fd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "921fb0c9-154f-4385-9e83-c92421380f05",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6ce40039-f560-40de-aed7-82b6956b4816",
        "cursor": {
          "ref": "f7c7a2a1-6109-4297-b8fc-08b57d263ac2",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "725bcd9c-f9b6-4bec-93ed-d56c27f0bb3a"
        },
        "item": {
          "id": "6ce40039-f560-40de-aed7-82b6956b4816",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e80ec84e-b803-4bbe-8eb7-c765e9bb0c55",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "da6bfc63-229a-4f7f-bcc4-d2076d1b86fe",
        "cursor": {
          "ref": "b142c171-085e-4ab8-8e84-88fdc67746de",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5b1c3c2b-2f95-4f18-a66c-083c8b5eb8fe"
        },
        "item": {
          "id": "da6bfc63-229a-4f7f-bcc4-d2076d1b86fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ccc4a6ca-37b4-44b1-aae2-68548107fa4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5677c957-5f84-4253-aad7-33defb504924",
        "cursor": {
          "ref": "9234b8bf-9aba-49c3-a9b5-23985bb1f181",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6dfcb129-1f8c-41bc-a0c9-9ab93478a2c2"
        },
        "item": {
          "id": "5677c957-5f84-4253-aad7-33defb504924",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "034b3f94-7810-4233-9ea2-347e48fb437d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509a1c1c-26ed-4853-be53-5b7b3e8ff886",
        "cursor": {
          "ref": "277e574f-5774-48ef-be35-ff4e3454da97",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cf68f72b-eed8-4cfc-b3b5-e6ad0ec900b2"
        },
        "item": {
          "id": "509a1c1c-26ed-4853-be53-5b7b3e8ff886",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad53a7f0-6a53-41f3-9021-3422b1cc973c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509a1c1c-26ed-4853-be53-5b7b3e8ff886",
        "cursor": {
          "ref": "277e574f-5774-48ef-be35-ff4e3454da97",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cf68f72b-eed8-4cfc-b3b5-e6ad0ec900b2"
        },
        "item": {
          "id": "509a1c1c-26ed-4853-be53-5b7b3e8ff886",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad53a7f0-6a53-41f3-9021-3422b1cc973c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade9a9ab-a411-4a3c-b7fa-7d8716f3578d",
        "cursor": {
          "ref": "2afd839e-9ccb-4aaf-ab44-7caf32e947c6",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "94ff43ed-90b0-4d16-81a1-3f125d7f8709"
        },
        "item": {
          "id": "ade9a9ab-a411-4a3c-b7fa-7d8716f3578d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "68f6288b-0320-400c-81f3-aa19383d8ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c138873-9117-4222-ad37-18e1225647d5",
        "cursor": {
          "ref": "4333babd-e033-494f-b742-00ed8e3e06f7",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b9225702-d3c3-4d18-9eef-41e4d598cee4"
        },
        "item": {
          "id": "6c138873-9117-4222-ad37-18e1225647d5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "121a0aa3-dc34-4b42-bc48-b4b083ef6b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2a3d54-9e31-4201-b2d2-6b8ff4540467",
        "cursor": {
          "ref": "9739b84d-9f51-4c4b-9cb4-b19a8deb9fe4",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e8b8080c-84e2-4d46-af03-3c7c13719049"
        },
        "item": {
          "id": "4a2a3d54-9e31-4201-b2d2-6b8ff4540467",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dbb2a08b-b93c-4aee-b237-eda90a17437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d1588f-727a-41ea-a0c8-c3f6fd91505c",
        "cursor": {
          "ref": "b00d91d8-d22f-4af0-a66f-ff4f268b04f5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e5367867-3bcf-4b5f-a845-0adca5c7f9d4"
        },
        "item": {
          "id": "c2d1588f-727a-41ea-a0c8-c3f6fd91505c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8bf2dca1-5346-40b0-886c-f175736f8166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55aee013-101b-4dc3-943c-c888ad67ae49",
        "cursor": {
          "ref": "d5aa7761-6063-4e2f-87a5-518245263c80",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "24c29b62-7def-4eef-a1f9-44733705353a"
        },
        "item": {
          "id": "55aee013-101b-4dc3-943c-c888ad67ae49",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "46e62157-58b0-4487-8159-e0c70a56e589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76126ce1-9aee-418a-8ceb-4cce0ec863ea",
        "cursor": {
          "ref": "937b3d1b-a8b9-435b-b19f-0f480c5960db",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7d174992-a67e-4b91-be1d-f3c66f8a8263"
        },
        "item": {
          "id": "76126ce1-9aee-418a-8ceb-4cce0ec863ea",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "76460a7d-5ed4-493f-b774-6d2803457e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68d7df1-9b01-440d-b94c-ef514be4132e",
        "cursor": {
          "ref": "ec3e5905-ff08-4713-aae8-66a8fcfeb9f5",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ffbf154c-8ebc-4279-a627-2cf90e3fa085"
        },
        "item": {
          "id": "e68d7df1-9b01-440d-b94c-ef514be4132e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b1fe4afa-99c0-48a9-b063-2fc1b737cff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820deb1b-b829-4717-9ba9-9c70e4aec6d3",
        "cursor": {
          "ref": "b96dbbaa-ea66-4dac-9789-0b2e1cfdb4bb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ff9f9de9-2e3a-4524-9610-aa6c4c9ed49f"
        },
        "item": {
          "id": "820deb1b-b829-4717-9ba9-9c70e4aec6d3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fa5eaa02-01dc-4871-aded-2853d26bcc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bec0fb7-fe93-4efb-9022-4a6d6bf95a97",
        "cursor": {
          "ref": "810ce70a-14a5-4f01-a3e1-a121436f4931",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d25d9866-031b-4f97-91df-59aedaca8ef7"
        },
        "item": {
          "id": "1bec0fb7-fe93-4efb-9022-4a6d6bf95a97",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8f40a8e5-22bc-498c-8e46-043c9696ee2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574adead-ce28-452c-8bd3-77a834bde541",
        "cursor": {
          "ref": "16cf50aa-aea4-448e-b026-714ce8a2b538",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0b552a99-341d-4322-bbb0-a6d85027f274"
        },
        "item": {
          "id": "574adead-ce28-452c-8bd3-77a834bde541",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e75e039a-e1e6-462f-b9bc-f313988bee66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed9ad94-5e52-46a4-9a80-03752213d73c",
        "cursor": {
          "ref": "f7ba2d2a-090c-4889-940e-4e409929065c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "634375be-1ef1-4766-adcf-aeafb8aff563"
        },
        "item": {
          "id": "4ed9ad94-5e52-46a4-9a80-03752213d73c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3a0f760b-3222-4ce9-8e52-461d3e58012a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ddcd8b-a369-4832-b693-619686d571e2",
        "cursor": {
          "ref": "17f69ce6-239e-49ab-b864-21c4ebb76bf5",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "704f40f9-c8d6-4e90-9e9d-98ad40ddbdfe"
        },
        "item": {
          "id": "74ddcd8b-a369-4832-b693-619686d571e2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7e87b912-1113-4a29-82b1-f501f6c843ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4823f6-f64b-4cee-a353-3044474e9b35",
        "cursor": {
          "ref": "b908e72f-0d90-4328-94e8-73cabe702bbc",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c90dcd9c-09ec-4c04-a424-a6fda9cfb606"
        },
        "item": {
          "id": "3c4823f6-f64b-4cee-a353-3044474e9b35",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7d8b2a2b-e7ab-440b-8a3f-88a34d24dec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225b3534-c9ad-4f72-ac70-1213215c3f3a",
        "cursor": {
          "ref": "0ef5e931-7d02-41a1-bdd7-7b1cf730f58b",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "34f58f2d-2e9c-4bed-b917-ee8c8167bd00"
        },
        "item": {
          "id": "225b3534-c9ad-4f72-ac70-1213215c3f3a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c248fcf2-5317-4cea-9822-74137e66ac84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87e69b3-7e8b-4c9a-a5fb-9bbff0bac5ae",
        "cursor": {
          "ref": "65d124b9-9494-49ff-b892-7f5d16d6ba73",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "778bbcf6-06e6-4385-8cd1-41e52e196a8a"
        },
        "item": {
          "id": "a87e69b3-7e8b-4c9a-a5fb-9bbff0bac5ae",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c6e96320-e03c-4ffa-98a0-fcd5bc1e3024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ece28c3-3a45-48c2-9548-a63a3ce211c0",
        "cursor": {
          "ref": "4165db17-417d-447f-a8ba-c80f23d72e3c",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4716dec5-d0d7-42e5-b974-4abee4e45e85"
        },
        "item": {
          "id": "2ece28c3-3a45-48c2-9548-a63a3ce211c0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "30a2a1de-4e4e-4b98-aab4-7aebc4fc52ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00e0cc4-41db-4611-b986-d31477bb8384",
        "cursor": {
          "ref": "62574ccb-0d5f-4c21-90fd-94cbda77b56a",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c529ab2d-c241-4283-86cf-fab522c68123"
        },
        "item": {
          "id": "b00e0cc4-41db-4611-b986-d31477bb8384",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "81f53831-a566-4d70-aa90-c233149574e4",
          "status": "OK",
          "code": 200,
          "responseTime": 657,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8f89bb50-ca0d-4008-8914-ce7f62f67b5f",
        "cursor": {
          "ref": "7d16c45d-2fae-4518-ab12-7278e074688d",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3177dd4f-aa31-4061-88f0-bbd12786ea61"
        },
        "item": {
          "id": "8f89bb50-ca0d-4008-8914-ce7f62f67b5f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6bf37b58-f050-4ffb-875e-14b5e23b28e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502a5153-555b-452e-acd1-c82aca05bb82",
        "cursor": {
          "ref": "568415f9-767f-40f9-8e49-e120107c6f20",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0df42d96-8480-42fa-8435-94d0c80f6ac1"
        },
        "item": {
          "id": "502a5153-555b-452e-acd1-c82aca05bb82",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1aec0e7a-d00e-472f-aaea-153904934c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b35c7c-8d39-47ac-af24-35ee661ff76a",
        "cursor": {
          "ref": "288ec882-2415-4714-8a3f-71bc7273b076",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9100dade-6f6a-45ba-b2d4-6fa54ca86f7e"
        },
        "item": {
          "id": "f6b35c7c-8d39-47ac-af24-35ee661ff76a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ffec6113-f74e-449d-8906-9281de80e9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ebd0d7-5542-4188-b53b-df8bc19b30f8",
        "cursor": {
          "ref": "3142cea9-581a-4ca2-a5af-4cee92c4771b",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3e86b6b8-36ea-478f-a430-b040abda1745"
        },
        "item": {
          "id": "a0ebd0d7-5542-4188-b53b-df8bc19b30f8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "36190bb0-15a2-4667-9c2d-fb9fb0ec85b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b920752e-0b02-439d-9216-e135f708a15b",
        "cursor": {
          "ref": "edeabcc4-e29a-4b77-a9e1-c7884c0435a6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8501415d-553f-4c11-960c-3f65a2e81ee6"
        },
        "item": {
          "id": "b920752e-0b02-439d-9216-e135f708a15b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f0c52e69-dff3-43e9-a846-709fa9f9fca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d22b44-b158-41ab-a319-b301d9a73ba6",
        "cursor": {
          "ref": "70695e75-9f27-4b4f-acbe-77b4e96cbf3a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c08900f7-a56d-4dd3-a52d-f2421e7642b7"
        },
        "item": {
          "id": "c8d22b44-b158-41ab-a319-b301d9a73ba6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f445a462-1b21-4581-958b-4f430dff0211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830aa2d2-30ab-4f3f-ab8d-fc2cfaa08c96",
        "cursor": {
          "ref": "3cc933c7-8332-4834-a236-6c546e78c9f9",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c4f24b9d-1a7d-4f4e-ab1a-3a647529b77e"
        },
        "item": {
          "id": "830aa2d2-30ab-4f3f-ab8d-fc2cfaa08c96",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41f6f1e4-e602-44f6-a01c-b7ff328f5f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ad3501-0a0d-47da-b39d-3269fcb9e5ee",
        "cursor": {
          "ref": "de5543ac-7a9c-4efa-987f-481f68efdcbc",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dae442cd-cdee-409c-a912-0299a0fe4133"
        },
        "item": {
          "id": "87ad3501-0a0d-47da-b39d-3269fcb9e5ee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87ee982f-8fc6-4691-b6a6-417c0a51e455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073b4a3e-51d5-4d2e-8d6b-e7c1436a1bf4",
        "cursor": {
          "ref": "88ef0ea4-4638-4b2b-af9c-ccf14d975c03",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "053f536f-9029-47eb-bed5-9cd894ee0d21"
        },
        "item": {
          "id": "073b4a3e-51d5-4d2e-8d6b-e7c1436a1bf4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4f4e2a42-769c-46d5-88f7-756e5e808b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fce529-6f23-4b04-b165-23656859efb7",
        "cursor": {
          "ref": "c6906cf3-c8b3-4439-becd-49b50771590f",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8faa614a-40c9-4233-be17-9c408d818869"
        },
        "item": {
          "id": "57fce529-6f23-4b04-b165-23656859efb7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1ef3fe50-7c01-4205-b07f-358e980958d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05356aab-436e-4dea-8fe6-5fa8d715f75b",
        "cursor": {
          "ref": "a40340ea-5701-4ac4-abbc-9011f42af054",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "30342683-af6d-48d9-8d87-ffdc1cf06e90"
        },
        "item": {
          "id": "05356aab-436e-4dea-8fe6-5fa8d715f75b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "288f7636-ce18-4399-b087-db122343ae52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1807bf3a-706d-4c9c-8e9e-a7c7e3fc46ed",
        "cursor": {
          "ref": "5ad52faf-6973-469b-b627-578ed9a96fcd",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "74ff4c8b-0e97-4575-b165-a66576ea7dc8"
        },
        "item": {
          "id": "1807bf3a-706d-4c9c-8e9e-a7c7e3fc46ed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dcfcd476-4486-400b-afa7-46fdb16aa79c",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "06b3a250-12ce-4fc8-a49f-d4a6d0f95002",
        "cursor": {
          "ref": "026f4adf-bed9-43ee-88ba-18327e035772",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "20848ac3-d2b4-4eaf-bf48-7fdeb607fda7"
        },
        "item": {
          "id": "06b3a250-12ce-4fc8-a49f-d4a6d0f95002",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "41107aa5-cf6b-447a-b2e2-c537f7423cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c61e5-8cbc-4d91-b6a7-750f3baa3427",
        "cursor": {
          "ref": "99258042-b5e8-427f-a795-aa441d68869d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e9f7772c-a327-46a2-9494-5354b8064084"
        },
        "item": {
          "id": "8c8c61e5-8cbc-4d91-b6a7-750f3baa3427",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c7d4ceb5-30e7-4b8f-bf1d-a6f38d6a2250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0284bc0e-09ff-4c4f-8250-799e61fc0f06",
        "cursor": {
          "ref": "bfd31d13-956b-449d-a122-c0d3ef06e026",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d34716f5-8829-40dc-bc4b-2bcb26bd407b"
        },
        "item": {
          "id": "0284bc0e-09ff-4c4f-8250-799e61fc0f06",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "03dc35c4-4aa8-4e74-9984-a23635f7fc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cc76b2-2f4c-4c62-91af-00fa10fe9d8a",
        "cursor": {
          "ref": "c04ff0bb-f230-4b2d-a5f3-858ef977eefb",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "864c40c9-7e52-45cc-87dd-41c6433cbcda"
        },
        "item": {
          "id": "72cc76b2-2f4c-4c62-91af-00fa10fe9d8a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dd2278c1-a967-4f74-84e8-4c334119489f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ce4134-5165-4dfd-a056-2447c647c412",
        "cursor": {
          "ref": "88e73ffe-2f16-4036-bb82-f7941bad1638",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "17703a72-8a46-4c97-9d0a-c2085026d619"
        },
        "item": {
          "id": "e1ce4134-5165-4dfd-a056-2447c647c412",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4ed5f3ef-7824-4bca-abbd-d14d9c4963d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42f6e09-16c5-4be0-a2ef-37caa2d4d4e3",
        "cursor": {
          "ref": "de5778e8-e521-436d-95d3-bbd24b053f77",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f1bbc20a-cabe-40c4-a016-367bb1f0682b"
        },
        "item": {
          "id": "f42f6e09-16c5-4be0-a2ef-37caa2d4d4e3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b90f2ec3-e926-4ccd-90f4-1a5133941e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bd9b92-d2ed-4108-a063-2861ad6d8049",
        "cursor": {
          "ref": "28e1dc72-bd98-4b90-9628-b99d75fffbc9",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e99f2f1c-3ecd-4735-ba6f-96972a480c99"
        },
        "item": {
          "id": "58bd9b92-d2ed-4108-a063-2861ad6d8049",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9a67fee6-38ce-4c21-911a-ed2eff791dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9de34c1-2ae7-481d-8c01-e5f2becc6a23",
        "cursor": {
          "ref": "055cca21-6c20-4f5b-8ffd-9cb486cc0996",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ff649f92-6646-4767-86b0-b677e1e8ba7d"
        },
        "item": {
          "id": "b9de34c1-2ae7-481d-8c01-e5f2becc6a23",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bf365d67-2b00-439e-a60c-aad6da4242d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89a16e5-559e-45b9-b446-56692646d366",
        "cursor": {
          "ref": "82402caa-8f5d-45dd-acf6-2d64b4ae403a",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "41f515b8-f168-477e-a319-b22dcdc9ee12"
        },
        "item": {
          "id": "c89a16e5-559e-45b9-b446-56692646d366",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91639cdd-91ea-4a20-8bd1-61fe73013e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d85b92e-b3eb-4370-9d12-0d38eee45bc1",
        "cursor": {
          "ref": "8abd5815-0791-4a95-be2d-628d655d633d",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3e6143f5-1a2e-4f5c-8096-47d6f23013f7"
        },
        "item": {
          "id": "9d85b92e-b3eb-4370-9d12-0d38eee45bc1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "21ed0b05-d78b-4975-9c5a-a1023410cc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 503,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bc92e5-ca5d-44db-8b60-1735739f3819",
        "cursor": {
          "ref": "cb1d8fc8-1281-41bb-b420-b313972ec2c3",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5beb468d-ace6-4c7d-8f85-52fbb6bf9c07"
        },
        "item": {
          "id": "76bc92e5-ca5d-44db-8b60-1735739f3819",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a8b4344c-2b6e-4a8a-bb67-50af432c7bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e96613-9dce-4c14-9245-8609ab3f45c6",
        "cursor": {
          "ref": "e8237386-21a8-482c-969c-4d01ec239c06",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9e8af06-7ab4-4691-b322-fbd6f81b83d5"
        },
        "item": {
          "id": "c5e96613-9dce-4c14-9245-8609ab3f45c6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db4bf85e-b626-4bc5-8ff9-cf4dd1d8ee1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4186813-8dca-4b3b-8e5e-f1efce70ec69",
        "cursor": {
          "ref": "491b3c1e-b982-4db5-a369-606e6b965e4d",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fa15d5b4-cb5c-49da-9443-7a7d6749c928"
        },
        "item": {
          "id": "b4186813-8dca-4b3b-8e5e-f1efce70ec69",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0b7ea2d9-9440-4e66-b5f0-3b7f8df7c8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9a39e2-b5c4-40b8-bfb8-26ffb9ae6f1b",
        "cursor": {
          "ref": "83f3d7df-58e2-46f2-bf1c-ba47bc2f8b9e",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2fb2a0fb-5848-462c-b4ee-28fb1dd8d422"
        },
        "item": {
          "id": "6e9a39e2-b5c4-40b8-bfb8-26ffb9ae6f1b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "52fd6a41-3f6b-44a5-9c64-aff9b9d87060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9586a845-c33f-47bd-8fd2-4c0bb4e543b5",
        "cursor": {
          "ref": "7c281c35-f3c1-48eb-afe4-82c9a9fc13ee",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1cad2e8f-c4cc-4cca-a999-493ad178b1c2"
        },
        "item": {
          "id": "9586a845-c33f-47bd-8fd2-4c0bb4e543b5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4be9890d-0524-4c21-b9d7-afd7c992c056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cf8fc6-640b-41d1-9b1a-fbcd4cf336f9",
        "cursor": {
          "ref": "053cc410-4317-4752-a7e4-6fe963b45b9c",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c7943621-99c1-4744-8217-379ac56d9438"
        },
        "item": {
          "id": "c2cf8fc6-640b-41d1-9b1a-fbcd4cf336f9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a628e695-7f1e-466d-af99-87fe82033da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6887d41-8847-42b3-b8b5-6942e5ff877c",
        "cursor": {
          "ref": "97f5334a-eb36-4929-b6f9-f336af17d2b2",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4d61d0d9-89c9-42b5-91a0-8aefadbd0d54"
        },
        "item": {
          "id": "b6887d41-8847-42b3-b8b5-6942e5ff877c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ef51d4ff-e7dd-4626-a304-774bf981b243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea62895-6dd5-4a96-84d2-18fe877b7d16",
        "cursor": {
          "ref": "31880013-a230-4949-b945-83b5af914741",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7fc8a0db-4020-4025-b4cf-fef91fef01ac"
        },
        "item": {
          "id": "7ea62895-6dd5-4a96-84d2-18fe877b7d16",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c3049a06-39fc-4185-bc62-bea157aff544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a037001-9cad-4cc5-990a-d4bc8e780c54",
        "cursor": {
          "ref": "9cae8f37-563f-4a91-96f2-d4210282ee92",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cedb8352-b29e-4671-acae-1b0d8f0cac60"
        },
        "item": {
          "id": "0a037001-9cad-4cc5-990a-d4bc8e780c54",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "70966cac-0e5c-460b-8800-a7b78308d5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82d6f59-3cdc-4c92-af18-6468f276d2ee",
        "cursor": {
          "ref": "8cc0d88e-fc7d-4cdf-96f3-8e21aefa5896",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1f0b1cbe-899a-4f95-a54e-d429f1fd163f"
        },
        "item": {
          "id": "d82d6f59-3cdc-4c92-af18-6468f276d2ee",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66317291-f89b-4e2d-ab69-57009d8d27cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fcbed2-270c-470a-9cdc-a81dffc95829",
        "cursor": {
          "ref": "1e71daaa-210b-4e76-9161-b4ebbf568d0b",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b73eaed8-bc85-4de9-89f1-85b0dfb8ae4f"
        },
        "item": {
          "id": "61fcbed2-270c-470a-9cdc-a81dffc95829",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b562ea43-a780-459a-8dda-16b34b8335e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd273328-0262-414e-8d48-795ab65314a5",
        "cursor": {
          "ref": "8896a36a-ad01-44c7-b0b0-704fc20c54c1",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "75c7cefa-e8c2-40ed-b0b5-2811eb69430d"
        },
        "item": {
          "id": "cd273328-0262-414e-8d48-795ab65314a5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2edf66c8-8f16-40a9-be58-3f0e6536bc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15439cda-cd40-402e-8a79-3aba53f7185f",
        "cursor": {
          "ref": "25dd7fe9-530e-43f4-aa1c-210a196d1e3c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9f514a9e-2bc0-49a7-8e82-61c8a67e0b0d"
        },
        "item": {
          "id": "15439cda-cd40-402e-8a79-3aba53f7185f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "272971f7-111f-4dbe-aec6-ce41d77b086e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230b79a8-2559-4f86-9fff-46f516d33627",
        "cursor": {
          "ref": "1f5740f0-4caf-4be4-8b4c-830d00bd8abf",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "49e0a2a4-185a-46c5-acc0-de72c9bcc32d"
        },
        "item": {
          "id": "230b79a8-2559-4f86-9fff-46f516d33627",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "72d7ef37-742e-47e1-8b5f-669fdc932e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03300f8-418b-41c6-aef9-3ce8d7b02615",
        "cursor": {
          "ref": "f89e0e8f-caf9-4ecf-b7cb-ed69434d53ee",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "18da78c9-fdca-47c8-8a53-fefefb9f234b"
        },
        "item": {
          "id": "d03300f8-418b-41c6-aef9-3ce8d7b02615",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a8b35488-6ce1-4d81-a996-a9c5330f3a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba507d7-6a2f-4640-8c2b-1b4ba7863a53",
        "cursor": {
          "ref": "4ac6314c-f72b-4f0f-bda1-478f8c7eb14a",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9fec9f51-85c1-437e-9837-e933fe14e56e"
        },
        "item": {
          "id": "fba507d7-6a2f-4640-8c2b-1b4ba7863a53",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "67e9b102-5dd5-440a-8a54-5bb073514d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff8299d-7250-4f67-a7e7-0a5a1d843da5",
        "cursor": {
          "ref": "cd149fa9-52b8-4af2-80b3-8783332077ab",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e05061ba-a6e6-43b2-9b8c-c22c6f95fe11"
        },
        "item": {
          "id": "7ff8299d-7250-4f67-a7e7-0a5a1d843da5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e1d57c68-d8f0-473a-a74f-7b8edc582abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee430b5e-a817-46b1-9b20-5f454e389578",
        "cursor": {
          "ref": "62662ab6-e43b-44d5-8354-a87b09af831b",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "953c6237-0ce8-454d-abda-6c3f49c97f46"
        },
        "item": {
          "id": "ee430b5e-a817-46b1-9b20-5f454e389578",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "aaa70a3c-3697-47c0-9741-26553544958d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555f99e0-c19c-46d9-b1a9-8fe80e88e7ee",
        "cursor": {
          "ref": "eb9e1b84-8d29-4a2d-a774-d847c62db8d5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5f77c39-ebf9-4c93-bafb-c04d89799af1"
        },
        "item": {
          "id": "555f99e0-c19c-46d9-b1a9-8fe80e88e7ee",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cd3d0188-b1a7-49ad-8735-0cc97bbe3caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c21d17e-39b2-4d00-80b9-ddeb7dcbfa4d",
        "cursor": {
          "ref": "68f8a6be-bbca-4217-aca3-f697b17511a3",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4e59e007-a463-43cd-94e5-383e0e2a504d"
        },
        "item": {
          "id": "1c21d17e-39b2-4d00-80b9-ddeb7dcbfa4d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "815f448e-69ec-4356-adf5-01e1d881cd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df91874-8cbe-4b1b-b47d-3e20b214533d",
        "cursor": {
          "ref": "d08ee49c-3a30-435e-95e2-33ff50869baf",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "05dfd6d7-9e4e-42cc-80ce-8e512494dd94"
        },
        "item": {
          "id": "2df91874-8cbe-4b1b-b47d-3e20b214533d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5d0c45b2-ae89-42f7-81da-6aeef8370fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbff1c98-25ef-4f75-8cfb-b077fe9fde8d",
        "cursor": {
          "ref": "1b4618b4-624b-48e1-9931-6e760d08354c",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5df130aa-045f-4aab-8b9b-0a62938a32fe"
        },
        "item": {
          "id": "bbff1c98-25ef-4f75-8cfb-b077fe9fde8d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "35154aa7-7261-45bb-b12e-2550151b67e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27733b31-d3e0-42c3-8bf8-a1eff0edadde",
        "cursor": {
          "ref": "7d0220a3-e1f8-4237-8956-714194631367",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "03f32c89-42b6-49f9-b7f7-93078f037b68"
        },
        "item": {
          "id": "27733b31-d3e0-42c3-8bf8-a1eff0edadde",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d5b3c5d0-9618-4ddf-8d4e-78f7a6ae35fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cfa717-f5be-471f-b9c1-24f3b6eebf1c",
        "cursor": {
          "ref": "6da4f3ac-ed17-4451-92ac-9a9c2fed3b3b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5ffd53ec-644c-4d37-8f4f-a3961fc10da5"
        },
        "item": {
          "id": "b1cfa717-f5be-471f-b9c1-24f3b6eebf1c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3fcb79d3-b54d-4e5d-8e20-59f8fb8f2eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7a20ed-731a-49a7-8ba1-b407220d3861",
        "cursor": {
          "ref": "324d7596-285b-414d-ba55-3f08e031803b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3e4621de-2320-4ad7-9857-3e3ec9c67404"
        },
        "item": {
          "id": "9a7a20ed-731a-49a7-8ba1-b407220d3861",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "afc3b3bb-5fe7-4fad-b667-24fed0ecb02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9d9ae9-a4bb-4274-b462-02c9483faa5e",
        "cursor": {
          "ref": "d6760983-5c23-41f5-8012-74b3c9877d99",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4f575063-c096-4d3e-81f6-32b3da918b89"
        },
        "item": {
          "id": "0a9d9ae9-a4bb-4274-b462-02c9483faa5e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8bed4a0f-8cc4-4376-bcd1-580f132bf4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2df50d7-3ea4-434b-9f6f-0c46d5ae4616",
        "cursor": {
          "ref": "08f19edb-33ef-47aa-9ce3-378731df18ee",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "39ce3848-23a4-4cc9-8efa-9191c29a354a"
        },
        "item": {
          "id": "a2df50d7-3ea4-434b-9f6f-0c46d5ae4616",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1c7fd89d-0a19-4215-b0e6-af5a41fa0884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257cbc10-cb1e-445b-9c48-f382f6244f38",
        "cursor": {
          "ref": "a5e42a6c-76ed-4008-96bb-3779e7280444",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "875b7f4b-3dd6-4e43-a69d-157646029ae3"
        },
        "item": {
          "id": "257cbc10-cb1e-445b-9c48-f382f6244f38",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "782009a0-55a8-4a12-8863-ab5ad55d2056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b9115c-1ad7-4a05-aa3d-f78e40a3f407",
        "cursor": {
          "ref": "ab36a76f-cbc2-4e25-a8c4-7ff6b792c691",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4def5761-8a95-4e39-8ac0-040c44c6c83c"
        },
        "item": {
          "id": "64b9115c-1ad7-4a05-aa3d-f78e40a3f407",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "41b58246-d72f-4c5e-9821-4cdd9e50a21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94f6ae5-707e-4a70-8cd0-d0754a5b0133",
        "cursor": {
          "ref": "f4ea3b39-f618-4fe2-9cbd-31e84d02fcbf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "aef5fa04-3522-4a8f-9b89-ca71354ad3bc"
        },
        "item": {
          "id": "e94f6ae5-707e-4a70-8cd0-d0754a5b0133",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ae0cae68-7bee-4042-b374-c98605f768b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec98f564-8096-4622-9f44-d6a6fad820a8",
        "cursor": {
          "ref": "85039603-6347-4022-b74c-d93d253a5097",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d90fa69b-e96a-4231-a505-38d204b29478"
        },
        "item": {
          "id": "ec98f564-8096-4622-9f44-d6a6fad820a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "34da4af2-ef63-4ac2-99d7-29b3003b0fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e5b768-df4f-43c9-834f-0f69ec955a2e",
        "cursor": {
          "ref": "9f2c4d36-9afc-4382-84ce-06f824d47e10",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d4f48195-d51a-4735-bf70-554150093f06"
        },
        "item": {
          "id": "22e5b768-df4f-43c9-834f-0f69ec955a2e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "95b73145-7643-4ce0-8150-befb7d072ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b91fed-164c-4d17-b019-dd404ce4048b",
        "cursor": {
          "ref": "1f788b96-2ca3-496f-a683-fbf4637fae0b",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c86a88b6-9a7c-4080-abc7-f82cff15611b"
        },
        "item": {
          "id": "18b91fed-164c-4d17-b019-dd404ce4048b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dd281fc8-de7d-4e79-96ca-099e1013cabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a7daf7-7eb9-41c5-93c5-17b90c389971",
        "cursor": {
          "ref": "09b815ff-54d8-4ab4-b6f1-196955a39d33",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "71e03c86-991d-46e6-a17b-374566b53c59"
        },
        "item": {
          "id": "50a7daf7-7eb9-41c5-93c5-17b90c389971",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0aa06a90-822a-40b2-b870-315245690d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b247b6b-2d29-4e6f-9a63-c8048aec24ab",
        "cursor": {
          "ref": "c3f5411d-69fa-47f7-a92a-b81419ad51bc",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f745c887-0a56-4b4d-af7b-1980e0ceed37"
        },
        "item": {
          "id": "6b247b6b-2d29-4e6f-9a63-c8048aec24ab",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "39470451-2460-4761-939e-75267f223c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12661b6-ac94-4584-af3d-b770a2ac82d3",
        "cursor": {
          "ref": "05db64fe-5d6b-4ecc-ace2-1997d18edc13",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c1d48318-c408-43e5-8c80-766dfe938a30"
        },
        "item": {
          "id": "b12661b6-ac94-4584-af3d-b770a2ac82d3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2de934f4-353e-4854-b202-b606968edab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5855d964-e450-4409-9450-768ae7a0a338",
        "cursor": {
          "ref": "b0c454e9-5605-4ef3-809f-5c201655f77b",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cc0b7196-f044-435e-9e64-8fd4c71f626a"
        },
        "item": {
          "id": "5855d964-e450-4409-9450-768ae7a0a338",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "93d1d6af-d3ab-4425-8860-f9fbf5d81a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8b6b69-0557-466d-b94d-ec4c6adaf67d",
        "cursor": {
          "ref": "283bce3a-d838-435a-a055-66c7241b99a1",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aa49a71f-7e1e-4ba3-88e0-c5e3affd0bc1"
        },
        "item": {
          "id": "ae8b6b69-0557-466d-b94d-ec4c6adaf67d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c901dcba-e890-4439-89b3-71a28ce1b368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdf894f-0833-40eb-a816-db1714fcedf1",
        "cursor": {
          "ref": "d5cac27e-554b-443c-be5f-e65fb62ec5ce",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "448fd827-1601-4889-ba46-51ced9c31a55"
        },
        "item": {
          "id": "dfdf894f-0833-40eb-a816-db1714fcedf1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3388f4bb-9f9d-4b4b-ab00-a8cc1b6005de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2bea8e-f73c-4a5d-a6d4-c4eec7b086f9",
        "cursor": {
          "ref": "a106e71f-acc5-4b1a-a70c-b80448e54489",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "323d2dfb-7da0-4350-89ca-0cd84ecd2f2c"
        },
        "item": {
          "id": "1f2bea8e-f73c-4a5d-a6d4-c4eec7b086f9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "47db0755-cbe8-4c43-85e8-693a68c9434d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebb4479-ad53-4e42-a591-7ff87cc9c976",
        "cursor": {
          "ref": "814fe9e9-718f-40ae-af85-9b532ebf1309",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "293f4b00-7879-4110-89bc-cc0438dbd19f"
        },
        "item": {
          "id": "3ebb4479-ad53-4e42-a591-7ff87cc9c976",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b1465023-4963-486d-9403-d300d5262c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153d300f-26b6-4587-a6c4-2b07633b06f0",
        "cursor": {
          "ref": "9c7081ff-3e26-4596-b830-4cd4e1853a40",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e870bd10-f5e0-4c62-8970-e7bee02e30b9"
        },
        "item": {
          "id": "153d300f-26b6-4587-a6c4-2b07633b06f0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "46b13322-4ed5-4336-9ea8-af42d3f09007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13fa569-1adc-4853-9c3b-76e6f15494da",
        "cursor": {
          "ref": "34e439ed-bcff-4609-92be-d8820191270e",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fe1aac43-ed97-40f0-9e89-fa90c3878957"
        },
        "item": {
          "id": "b13fa569-1adc-4853-9c3b-76e6f15494da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4a553abe-e5fc-4d5a-9bf7-b9f8f6cd0643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64950f96-772c-4d2c-b725-d30722e2f5a4",
        "cursor": {
          "ref": "b0400b6a-a4c6-4eff-a9a9-a8e78537eb95",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "35bc8445-f403-4cca-b116-e86c47f301b0"
        },
        "item": {
          "id": "64950f96-772c-4d2c-b725-d30722e2f5a4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d80e9367-a91f-435f-a98c-e787755084f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4ef80e-0d97-4020-8780-e59beae00a9f",
        "cursor": {
          "ref": "c1b4c6ef-d89d-45b9-8a35-7c57cf25e85c",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fa3a4933-23dd-42a8-97e1-df54b0ae7ccf"
        },
        "item": {
          "id": "dc4ef80e-0d97-4020-8780-e59beae00a9f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ac164978-ecb3-48dc-bac3-3df82f16e57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06806f03-1610-4c83-aa6e-e1d5476f27f1",
        "cursor": {
          "ref": "feb9f453-095c-4e81-b675-addaa3488728",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7b6665c6-e406-494e-acd4-94e4bb8426a4"
        },
        "item": {
          "id": "06806f03-1610-4c83-aa6e-e1d5476f27f1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2411cf5d-8b34-47ef-8434-9d9e29ec5b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac12ae2-ea7c-49a3-a2fe-38a29a6c886d",
        "cursor": {
          "ref": "62dfa6b6-e007-4e5a-9663-cf46a181aec7",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b116cbbc-7568-4f59-8ad2-f4da2bae58cd"
        },
        "item": {
          "id": "3ac12ae2-ea7c-49a3-a2fe-38a29a6c886d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "81d0049a-ef6c-4954-8f34-d6dd5d5cc69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6744a8d-ef45-431a-bdd3-0c4defc9d81e",
        "cursor": {
          "ref": "215641b1-e1a2-4c53-a97d-c6d7c9e8b1fb",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "41e4af21-fbe7-4e9a-90e6-039ed65178e5"
        },
        "item": {
          "id": "b6744a8d-ef45-431a-bdd3-0c4defc9d81e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c2c67f2b-c996-4892-81f2-178699e948d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068736a7-7b44-4e5a-9d09-8aa39cebb6d0",
        "cursor": {
          "ref": "35363c56-b559-4af2-91d5-93488c4f0e84",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2ebf4014-7274-421d-8e1a-8c7ded3d0d57"
        },
        "item": {
          "id": "068736a7-7b44-4e5a-9d09-8aa39cebb6d0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9bfd298d-cdfa-4f95-a363-1debb396b898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b344f728-8d1a-4d6d-86c4-fd3a4e4ad9c6",
        "cursor": {
          "ref": "039f688b-a109-4871-bd6d-30e74f2d7b65",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4afd12ce-cbbb-4107-a822-bbc74af57ddd"
        },
        "item": {
          "id": "b344f728-8d1a-4d6d-86c4-fd3a4e4ad9c6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "381cb36c-bc1b-4bbd-8246-e20406cf4cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f70747-d0de-4344-8b7a-05d6a6bdd3fd",
        "cursor": {
          "ref": "439089e6-757f-485e-b494-0508b8a3991a",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d84392c4-454a-4ca6-8990-4811caf47078"
        },
        "item": {
          "id": "59f70747-d0de-4344-8b7a-05d6a6bdd3fd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9d014d7-ab62-4802-86bc-208d2ade53c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac263e-2baa-436f-890b-4694e46d2193",
        "cursor": {
          "ref": "ce004809-faf3-4395-ae42-5622efdec5e4",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c133ea3d-3088-4185-9cda-426bd758d18c"
        },
        "item": {
          "id": "4bac263e-2baa-436f-890b-4694e46d2193",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ce44d0c-297d-4a09-b67b-34525fb18155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a68c035-37d8-4ad4-a55f-6d0d4fba5135",
        "cursor": {
          "ref": "8c832f29-9508-429e-b039-6d5fc05fcffd",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9523bdb6-9b9b-4921-a8ce-bb0d832fca2e"
        },
        "item": {
          "id": "3a68c035-37d8-4ad4-a55f-6d0d4fba5135",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b1a529fe-f46a-47dd-9eb1-86f4a5454d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32be28f6-018b-4e0a-a1dd-e23103995389",
        "cursor": {
          "ref": "9fc9f49f-b563-4289-817f-df0a3e9d8323",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fbeab302-cfa1-4ff5-9e01-119b2afc630b"
        },
        "item": {
          "id": "32be28f6-018b-4e0a-a1dd-e23103995389",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "25cc524b-c3dd-40f6-adae-a5adcf266801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acab1fa-1172-4516-915e-d993029987c8",
        "cursor": {
          "ref": "351b1d09-783c-4579-93ed-7d8953f1506d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e10bf515-62d8-4dad-8576-59053ae1187e"
        },
        "item": {
          "id": "0acab1fa-1172-4516-915e-d993029987c8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bfd6a3a0-104e-476b-8b69-aeb51f5f33f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d94183-d657-400f-99a2-da358e372742",
        "cursor": {
          "ref": "fce22018-b61d-4df6-94bb-9df650156a40",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f3ce42fc-266c-4c4a-9c4d-12c7312242a7"
        },
        "item": {
          "id": "02d94183-d657-400f-99a2-da358e372742",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7428fcd2-8807-4e17-adfd-069d6ae0c2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ec4b6c-3d4c-4d8b-9b57-e423d8aca804",
        "cursor": {
          "ref": "133ddefe-863d-41b3-aaf8-a059fbaaccc6",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d0ae54ec-0615-4193-867e-3aa680d5f384"
        },
        "item": {
          "id": "06ec4b6c-3d4c-4d8b-9b57-e423d8aca804",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2ef1e18d-ea3b-426c-a0c0-06e720d44ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5c7c1a-75f7-4914-8b35-f8ab1f54f066",
        "cursor": {
          "ref": "42fff846-e53f-4e1e-af1d-2e7d0110647a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d0a72181-e175-4e5f-beac-02af43f33470"
        },
        "item": {
          "id": "4c5c7c1a-75f7-4914-8b35-f8ab1f54f066",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ec803929-83a3-4852-83d3-8bc399a0545a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6668f9a2-c96d-4807-a5ca-d1c393302e8e",
        "cursor": {
          "ref": "7bf8022f-c0fa-4636-bfb3-51f9addc2098",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "76b2b5f6-3f21-4336-b3ff-27451e6908e5"
        },
        "item": {
          "id": "6668f9a2-c96d-4807-a5ca-d1c393302e8e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1582dd8c-5a32-413d-b011-6618b4790283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a92474b-2791-47cb-884a-675e1219d9c9",
        "cursor": {
          "ref": "f5629b43-ec0c-4b7e-ad6d-13ed909f217f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "89fad5df-b4e5-4c20-a4d3-014ed37be08d"
        },
        "item": {
          "id": "3a92474b-2791-47cb-884a-675e1219d9c9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ee135fa8-0feb-4110-8fa9-e97a749eb3f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5387c35-e897-4604-9d2f-b261d20cbfe1",
        "cursor": {
          "ref": "297d7040-b987-4a21-b978-8b53c96a4d68",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9afb39dd-aac2-4576-98b4-6f0c998075bb"
        },
        "item": {
          "id": "c5387c35-e897-4604-9d2f-b261d20cbfe1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b29a2fac-438d-4efa-a5d4-3cf2960cb67b",
          "status": "OK",
          "code": 200,
          "responseTime": 289,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "020726a8-61d4-43ec-88a7-4ea8674f3978",
        "cursor": {
          "ref": "910c40f6-e817-4d8f-8aa6-be54e96bab5f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ab569873-e567-49be-ba99-33b56d9bbd88"
        },
        "item": {
          "id": "020726a8-61d4-43ec-88a7-4ea8674f3978",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4ff23747-8a76-4db9-a85a-1197f1254142",
          "status": "OK",
          "code": 200,
          "responseTime": 655,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a6aa15-e331-4544-bb4d-d86290c38ba3",
        "cursor": {
          "ref": "5e1c1556-8b23-46a0-88b6-af3e919e976d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec8668ba-864c-49e2-89a6-f288fe14a3af"
        },
        "item": {
          "id": "48a6aa15-e331-4544-bb4d-d86290c38ba3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6bbd8c5d-d144-4552-a752-0767dc16c6d5",
          "status": "OK",
          "code": 200,
          "responseTime": 657,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
        "cursor": {
          "ref": "103f8a5a-f1af-4d99-b5ab-36b0943e81aa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e865f385-b729-4cae-870e-1656d50f530b"
        },
        "item": {
          "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38e5b472-7711-476d-8dde-60c11dac6960",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
        "cursor": {
          "ref": "103f8a5a-f1af-4d99-b5ab-36b0943e81aa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e865f385-b729-4cae-870e-1656d50f530b"
        },
        "item": {
          "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38e5b472-7711-476d-8dde-60c11dac6960",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
        "cursor": {
          "ref": "103f8a5a-f1af-4d99-b5ab-36b0943e81aa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e865f385-b729-4cae-870e-1656d50f530b"
        },
        "item": {
          "id": "c03c90b3-816a-42dc-a953-439adec5ad75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38e5b472-7711-476d-8dde-60c11dac6960",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3730526c-fe18-4a85-9eb8-a96000359f7e",
        "cursor": {
          "ref": "ed967600-3749-452c-b975-0f014cfc24de",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e4655f6e-c1ad-4d76-890a-26f4470c79ad"
        },
        "item": {
          "id": "3730526c-fe18-4a85-9eb8-a96000359f7e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "135351dc-89a9-4749-835a-367269a55d2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33887f9-bc09-4ea8-975a-48a3c7ba11f2",
        "cursor": {
          "ref": "e5ba7d27-68e6-4c49-873b-a4503dd4b579",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4fd543b5-a690-4482-b079-3cee192e67d7"
        },
        "item": {
          "id": "d33887f9-bc09-4ea8-975a-48a3c7ba11f2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ba3c5a6a-f676-487d-95ae-73579928c95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d33887f9-bc09-4ea8-975a-48a3c7ba11f2",
        "cursor": {
          "ref": "e5ba7d27-68e6-4c49-873b-a4503dd4b579",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4fd543b5-a690-4482-b079-3cee192e67d7"
        },
        "item": {
          "id": "d33887f9-bc09-4ea8-975a-48a3c7ba11f2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ba3c5a6a-f676-487d-95ae-73579928c95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "553bc19e-8a93-4426-b66d-e3af9e3cdd98",
        "cursor": {
          "ref": "52c48e48-faaf-4692-8823-c8350ae43920",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d3523b80-c9c2-4786-982a-1adfb0e27805"
        },
        "item": {
          "id": "553bc19e-8a93-4426-b66d-e3af9e3cdd98",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "93995a61-4439-4292-a3c7-b2defd01b360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f5a844b6-9359-4698-ad9f-e1001c4c745b",
        "cursor": {
          "ref": "427b3c40-369c-4bc4-8fc1-dad3db532cea",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9f9a4440-ea63-49f6-b831-ddfe2fc6c361"
        },
        "item": {
          "id": "f5a844b6-9359-4698-ad9f-e1001c4c745b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "97eb2e7e-2abe-44d5-88cb-c234c0622413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f5a844b6-9359-4698-ad9f-e1001c4c745b",
        "cursor": {
          "ref": "427b3c40-369c-4bc4-8fc1-dad3db532cea",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9f9a4440-ea63-49f6-b831-ddfe2fc6c361"
        },
        "item": {
          "id": "f5a844b6-9359-4698-ad9f-e1001c4c745b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "97eb2e7e-2abe-44d5-88cb-c234c0622413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "90ba4ef2-798f-4e50-b34d-6eba64c15b2a",
        "cursor": {
          "ref": "1b8d325a-d03f-4b5e-b269-3c9dd504912a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "49ede6d4-f43b-47ad-af9e-794eb7bc94fb"
        },
        "item": {
          "id": "90ba4ef2-798f-4e50-b34d-6eba64c15b2a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "912a04a0-9a53-4c1a-ba52-5e06356c5e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}