{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a9eec5ad-2f46-4517-88bc-e599320e2279",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1c608770-a1b1-45c4-8f4b-bdeb7abeb7ae",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a411fea8-bcd4-48c1-9a96-ab711e00fa79",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1430c866-c58f-4b15-909b-c689fffdb8e2"
                }
              }
            ]
          },
          {
            "id": "1744ee46-5c8e-40bb-85e9-64f9bea37b9a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d2eda1e-026a-4eed-afa4-85c23c61932d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c6c8f4b-2a83-4ab1-9462-42b21b3654d0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c511e825-0cc4-497d-80e3-43730e6bdcb1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0b631d66-6c3a-491c-bfe2-63c12dfbe3a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d44c071d-c3cd-4d49-8115-b623eda6cb5e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d304bca5-f1cc-4622-9b15-fc15b968ea9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1af3146-d95d-4ba2-b42f-09813351b1cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5c4c383-aa93-405c-9766-d4d384b19720",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5d91a85-12ed-4fde-9692-7bded9a040fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "15b7944d-3799-4ef0-946b-5bd1e8adddfa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64f2a7fc-ee5c-4200-bd9d-3f7cd73138f5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ea9a6b9-9f33-47bc-8cc6-123a5179a0a5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1829a3d9-3285-46a2-bbd9-41f751e46144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4dc42f7b-de8e-498d-87e9-ba87abfcf86c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9e73c86-ec32-4c54-97fd-a80c8e18deef"
            }
          }
        ]
      },
      {
        "id": "9549f165-7541-43bd-a8d4-115054513257",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b749e782-2244-4446-9f55-1fb808b63db7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ec4d7a5-5ad9-42fa-bb69-a20dca31377a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "baca2428-de4d-486c-b49f-2df5c48e5e19",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514308cf-03db-4d16-8e9e-052bb5f14642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4eb1c83-9a95-4bed-953e-d5803c9f612f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49745b27-0063-444a-9259-74b5d31c3b2e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac5b8d4-7f59-4561-acae-f76ccddb78ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efead16a-5fea-4857-9ad8-58c2897d40cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa2d0c5-3f74-46f5-a976-52df89311911",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b983a3-ba50-4d0d-97b1-a8c5818067db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aac04f6b-911c-4404-98d0-e877cd4ce42d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89028b9a-7d2a-4327-8df9-e30011e72916",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7edd57e5-459d-46e6-aaed-f969a2785b9f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e7f582-223b-41f3-b0e0-bcaf81a4863b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbacdbe2-8d2f-43a3-a76c-f7b1a32844ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb362bbf-ebbb-4df6-bba7-6214a02e9fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a54d809-31e2-4d1c-a0ea-2a55a78bcbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f698a81-cc12-4f90-9471-e2e637b6abe4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c33cd51-5567-4a84-b0a5-9503d4b8b0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bfb1540-73a1-47db-98e2-4bc7586aaca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ed3566-def7-4ea5-8c37-9746c031d813",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "72d56b1d-f416-4ebd-9952-656f51eee9a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "abcdcb40-1276-47d7-bc7b-60e699265653",
            "name": "Positive Testing",
            "item": [
              {
                "id": "518a3b71-4c3c-4db8-b40e-7c74182cd084",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0656fff5-bc1a-4dbe-a5fc-67170156edaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3dfbdb5b-b5a9-4d2b-8584-1b8317a141be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a276f292-957f-41d7-983e-987c6ce1241f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e80a20e6-6609-4e77-b888-2b634b936e5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec4f3d34-57a2-4986-bc6b-6a922ab83550",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1afcc96f-9b83-4d19-9f03-20421e93e2b5"
            }
          }
        ]
      },
      {
        "id": "7ced99eb-6c25-4973-9a86-1656e80892f9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a6a83226-3fdf-46f2-aa30-510d7d4a10c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f12ef5f0-9684-4a04-aefd-6831dafde68a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4d6abed2-fc9a-4286-a2b4-c5ee71fa9479",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43461138-d34c-44ad-9f97-4785eb6f1697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf16c0c-4ac7-45e7-aba3-793bcbca2900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c18be4-c108-4cfb-8e57-8c0f071406ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e29f7ca-d372-49c1-be25-f44339e9df03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d275e00-17c3-4284-9227-fa305ace7eca",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f7075e-6aef-41dc-8255-47cdeb8cf22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94d8774-73d4-413a-b66f-3bcec8c477a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189b66e0-69fa-4d5f-9744-60a96a387c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86c92517-3f28-4885-828a-17e9fc6faea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df2f268-63b6-4929-b1fc-be6d420703c6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b785d110-c30e-43e4-8344-96794e6f1569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3d6404-2f82-4150-95d8-682361a8d67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77411d5-512e-4994-a2f9-0d9c042d3905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fb1c783-5ae5-474a-9e44-312e5418c0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf9de63-5d43-4b18-a73d-ab8a7a15237a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4e71a0-2a5b-4ca6-93d7-e0f2345cb835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffb13b3-90b4-4ad3-a7aa-2890084f3690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7696ef-0515-48ec-9c6a-1bcfff130fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "181240f9-0bae-4f1a-9491-89deaac84ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39816d98-1831-4328-ac1f-587146c65533",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6621151-4e39-4298-a760-417d96aac6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c580f775-931c-4dc0-a1f0-334fb03d703f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eb9e6c-cc17-419b-afaa-9027ce81bda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49296a63-677c-4064-8e07-2baa6b684593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a041b04-5a3b-45c6-8e82-29ad9091dbb2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6957224-a4ca-43c3-bac7-b7101f95c1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d3f47c-75e9-43dc-a5bb-512d6341d34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7242fe2-9410-40ba-80c0-7852914d06b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46edcbac-9918-49a5-851e-f3e1ca9d465f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a651a07-4a7c-47a9-985d-f0ba88c64500",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5177e5ad-edd2-47f7-b40c-52ec22156726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d879aba9-f7f4-4163-b615-a6a230cf3072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d246670e-adc9-4924-8c84-097638619b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e115ba6f-82e4-414e-8297-079b65de7392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4837dd68-75bc-4a31-a7a0-c3c1e4680ce5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c90176-5ae8-4c06-8471-eb0ed3860381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5be410-1e43-4ce0-97f5-69034413b1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eee6860-0b13-4a61-9bc9-960033aa04b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa12dad2-6190-4148-be31-73df7f7298e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c8e1f8-d1eb-4115-b2e3-46952ceba584",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9a1a74-5101-4438-9099-d69bfb43fd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e10084-dc8a-4f22-bc6b-7da5815152f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8a5149-b3c6-409f-9b90-0faca9805af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbc5b0d9-c227-4ec0-83ee-344d47923bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18e5d6f-c503-4ba4-b672-7fd699a40675",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbeb839-f700-4ebc-bd53-d5d3fcfaa997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d91e267-5c5c-4196-b884-6cc484946cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5965a5e5-bef7-450f-b74f-372a3b6a23ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32ee917a-bb2e-4019-8947-64ac9a01a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8705c817-ad55-4ad3-8167-2e6dff34ecb4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a81db2-aff1-4dfc-bc7f-48e01aa6000d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e9186a-15e1-4de4-8180-45d3909a5272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2d840c-871a-4fdf-9cfd-c278eb4b2bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a365a68f-fab4-47eb-9c29-f2deed4e7914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3907ee53-ef06-423f-ab54-277db16c5a19",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d43c8a8-0bd3-45cc-982a-f64195897367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b0f2c1-46cc-4234-853a-ce9f7f29f090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9818915e-422c-4934-b749-3745b41f2c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acfa9cb6-361a-41fe-8101-cb3bab2c6b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3376a963-ea8e-401d-877c-0c06abf1db5c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955a7fdd-8b20-4938-9394-487e45c7ea78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0424541d-de92-477c-828d-fd9bd6e475bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cced9883-005d-4b7b-b7e9-dc1167b4386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "607a6438-d0b3-47b1-8171-68d2de249ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0930da1a-65fd-4d86-8d70-74c71d11023e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a75baed-a0f2-45fb-bfd5-b19f6889cf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec732e0-b7aa-43ba-b95f-121783dce412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f2dbb2-bb5a-44a2-98bc-1a285ba864e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e82abb8-1990-4fb9-aba2-21bbd49b7509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fad62e3-c14e-4a41-ae85-4977b324990a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8abedd2-194e-466e-a888-39ab8263a6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09706a1-2dec-403b-80fb-fc1f6ee0e1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7745dc05-693e-47a6-83f0-7cce72d37710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "105a3873-7e31-4d69-9426-7473bd164919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69367a47-4dab-49f6-b60d-1ccdbdcc33a8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7109bd6-f631-4b4c-ba30-b209c6ec94bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c987f755-d86d-4f5b-acf2-0da5d472f358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8ac0c3-d252-4960-90d7-9e034237fd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a0764d8-102c-4a7a-982e-6d93e4179c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4dd929-117f-4abe-ab2a-6867d02fd790",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38f136a-adbd-4fc1-8c0a-412a325c65f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f5d7e9-0221-407f-9774-f85971815317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7ce865-1278-4267-acd0-3de155f03105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "817dc002-8412-4318-b023-a422befead8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d42cd1-9b15-4d0d-a03f-d2739f0b9abe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1944973e-0faf-46f5-938b-9021f8e32670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f814ef37-c605-427d-a18b-e6cc53a0b01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf8a1fb-3c15-4bda-a4b3-96f2aaf5aa2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2258207d-fc99-404e-8855-d906d28c8847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f676a262-4ab8-49da-8127-c187b5588950",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd7c223-7e0a-4c29-9818-ca8b90df8039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0954e5-8d7f-4737-b822-bfce81cff9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebea0447-8828-48eb-811f-e38b0935ee12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34b9fb83-490e-4ca7-84db-695516f75f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f942583-9272-48bf-9fe7-a93cb8b4f338",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc29d98-0f5a-41c2-aa8d-1d798a0eda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a55a05-4481-453b-a05b-153adda11c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8299e4-8b02-469e-bc1d-1db9a734dfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9c7e9e-5af1-4b98-b7f2-c04a5b70080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c3ac78-3996-40ca-ba26-556112996091",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ec945b-3771-4093-af93-4ef6aae6c70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c93759a-3379-4a19-bb03-e3d65adc8f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99cb5eb-6aec-4141-aaad-eb7f46079bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7918fd5e-47cf-4d77-8766-2c7c889cd90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc642bb-ab64-45a5-9c50-5f6b21fc4077",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebaba60-7cf3-4ec0-bbf2-01d43f56f732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d232c90-932c-44dc-a71a-10b7cb9c5ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45113118-0df1-4016-b213-43abe88e9562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be1cb9df-2a81-4216-96b5-2a6028784cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc87cf7-8535-48e9-9618-17998fa59f4a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab9456d-f5c3-4d0e-b4ac-395eadde9d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db736247-1720-4e91-a5f0-119560eb990c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0feaaf-ec33-46cd-8b48-a286dff92f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41ad0c38-c6de-4266-9ee7-947a4d4f205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677697f8-ca40-4a46-92a1-ad44d7b479d9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd634f21-8b6e-4fe9-8dd5-cd901b257dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb4bd8b-bb57-42f5-8b16-9989edeb6de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac371cf3-3b06-4ecf-9dfe-2f5be229cc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5470555e-3589-43eb-bf44-45355b2a7a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdf5d53-ed6f-4177-8393-d4dee3d26919",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6d202d-9174-49f7-a85e-c17736212179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4c5c8a-c920-475b-90d8-a8a30ece926e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5af5f5-8b20-4b11-8572-4e8869e7624e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5daa06ad-28b9-44fd-b0b1-67314b80fbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bffd5e-7a09-4e0b-a32c-ec11775fc998",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0010ae16-2b50-41a0-8447-23b384cab268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce90fe68-7e3b-40a9-a1d3-681079e6d0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78aec8af-0770-4d14-a82e-9fc5e61521bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca6f6f2-6dc0-4196-817c-bd32555602e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277041fb-1590-4563-b0d1-b237edf4ca09",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d26d3f-7631-4281-81ab-7a6daea6c20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581665f0-33cf-4934-952f-9db074218b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a63ad22-a942-4e61-ba31-1b57869ce69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d202ebd-e407-4bae-b2a1-89176a5b23d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b247e5-af26-43a2-8d66-d5e46486ebcc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b04b9d4-954d-491c-926f-2f150cfb737e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d74097-ca7a-4db3-9415-c28b37cb37ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ab3af5-6342-4d26-8caf-61ba4c19a88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d374633-8e46-4809-b6a4-8e918aedaf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7ad6c4-fb07-4433-b58b-dec80c881db9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ac9884-cb89-4a26-8336-12933ad5c339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a9598b-51aa-4713-9fc6-f34b5363a187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e00de0-7ba3-47e6-b4dd-4a02db21f775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9fa052-97c4-4d21-9d7b-e20b03eb4c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cefd9e-8518-46bc-8e9f-3c15cd8cb885",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1837d173-a5e9-498d-bf2d-6cd001252e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f802a02-9a1a-4af4-bb3d-132d2abcaf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b0440c-59a9-461f-a4b9-6990a265f248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "747995dd-3264-4a2a-9d9e-524712573375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b766474-be70-465e-baa5-2d809fdf01e2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212cbdf5-002a-46be-aad8-9ca9171c4918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc6bb8e-9822-4ab9-8454-ef72a9d08a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f66f02-1d1d-4a8a-9b59-5cf60b6779e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e0c7db-84ed-42b0-83aa-9065ffed51dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cd39fd-4f13-4c47-a50a-0c210a2ca429",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3da5c98-10e1-421f-9fe7-1e71d625ce22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef33ef72-ce28-406e-a37e-abf5d9779eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8346cc-6d9c-47af-9e5a-1a0801412e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eaf839a-8d00-4807-8432-66e17e3ce16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7224c055-b5dd-4177-9f67-7385704fbee6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e09ffac-1842-4f02-a46d-9e8d60d576f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ba5265-1ded-43c5-a42a-1d5844b40ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1f981d-f860-4298-86ff-e8b67f823825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8442db6f-3bdb-4d12-9cb8-a9c36f8ec530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d57b53f-bf78-4561-9318-159f6b1dbd0e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adadafb3-78eb-40af-90b9-2f3d7032c8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4545ec3-63a7-45b5-beb2-80aec30f9303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f792c221-3276-4a85-92f2-45d7fe817d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d5f212-0cd1-4476-a2ce-21aeeb26297a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5703339-5d6c-4c82-9afe-f527efb38405",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17b692a-c754-4c7e-bfaa-6269e5001298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aaae0b8-d09d-4d15-b3a9-1fa9d5d7b08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9be395f-4de7-4e8c-9332-31c0d2f3460d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5c9983-d316-4bac-9699-2c3b8c26299c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ad24a2-0e9b-4787-9f08-976c2a5972c8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40196f4-c6d5-4fbc-9088-bfd735aee879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef0ef451-c3c4-4704-a62f-70109fa6448a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f5adfb-b7d4-48e6-a204-805effbcbcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17f53b55-ffc1-46e0-949b-5d1809b7aa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c95ac05-44e5-41ac-ac27-a752b525ce85",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8b3a14-895d-44a4-8197-7f3472fa0527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88fecbe-d58c-4ad5-887d-7df2ecff2941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0369fa26-4c82-49db-a177-0ffcb58456dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85a776b0-aec1-4bea-8091-f3e1b5618e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83012a49-4634-453d-9a83-7cbf7f064d23",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50a5d87-eedf-401c-a63a-5f6a11fbf713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442ff9eb-dc03-4c36-b4a1-fbc74b625ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c01ff18-d6df-4a03-86ea-d0b1358433cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "79a04f38-b392-4b44-b0af-0f4ff6ef6224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385970c8-3f2a-48c2-8f77-c78e77f0ab0a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10901eb7-2ba2-4858-8b8f-d73863e7f84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb0ff06-24af-4b8f-882b-1f76d34d6170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63a17da-2917-4b47-b75d-66c5e22ad329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "355364f3-b999-4f00-b5a0-efbb5ad029c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aede44d9-c943-4710-bb8e-44b233168d1b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fc9e2b-1007-42b5-b889-dd405ba976cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66c5124-f204-48b2-9672-620cf8a37100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2383efcc-08a5-47b5-941b-0c5cf6ba501a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffd82ea-96f4-4a93-890c-c238cc1aa42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f07f12-d7e8-42b6-8338-ed5f6d224d58",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ba5b0d-1638-4765-8f6a-e8a35c9bb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916a8c57-89b8-48a1-815d-01506ded2b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20212766-071a-476c-b351-c8ec9073d074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ff0990-b17b-4cc5-880f-e1d43788a07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329c8691-9838-4701-9551-6b163d6c538f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec44ea5-73ae-42d1-adaf-1c7daf57ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b2d097-f2c7-4ca1-896b-eb96db386e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12976fad-27a9-41e4-9e4b-154af84e4446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "41208252-3359-411c-9d50-f6b711792721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52162fa-f476-4ed1-9f89-3e45a949ddcf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bea9f2-e55b-4ac6-a393-21ddb1c71eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbc6af8-aa03-4e2f-bbfb-e24f7e36742d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e7eec2-4de9-4cc8-bd22-ece5d815c552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e62de6-34ca-42e4-a0ed-2d69f194b16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e285bf-c733-4837-9dfd-5c1767f91405",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1395f5a-4031-43e7-aec1-23d2120220a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2778f5-38e0-4382-bc32-9f30626ac8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d9b29b-72bf-4049-bb7b-c8f1910ba382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "efd4182b-702e-4e37-9a95-1a212e6a35e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8628d59d-7532-4eeb-8680-0536e4d563c8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cfcd90-0fb5-46de-816f-f0acac4c56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a697908c-1dc1-40fd-af07-0352346208aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc7fe9f-0bfd-4375-8394-f9d55da26a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe137f9b-f597-426c-833b-d0cbc793b90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbdda6a-084f-4fa9-becd-7fac90f2c760",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55f6d47-b78f-4483-be1f-87b1a6642e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a94521-9734-49e3-9e22-cf1b770372f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc12d9c-b0ac-43ed-aeda-f6bf2a4ade80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7852c7-86a0-4854-8cd1-618c1f096c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0669e2f-410b-4eb0-836f-28816a79aa48",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5c742e-cbb7-4016-a901-7d3fdd792c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b182f739-affe-4998-823d-7a01b3acbb61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fa9e13-f355-4456-a000-04f7a63733d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f049b90-c988-4221-9448-ba9bbfe8f611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5643d23f-c6e2-44e2-8033-ff2622de3325",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0257ed4f-0e96-4264-8b81-702ab1372b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2467c1fe-6e35-4e5a-b9f5-d1ee375cf89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdbce26-13db-4d9e-8528-5046744672e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa1f72e-acc6-47e9-aec5-1cbcc959772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494a5fbc-d048-49af-a277-086867b8f876",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5cdc8c-cc1c-4141-8a14-d715cc7b0bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1605fff9-e870-4bd5-be18-c93c73c2a982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209787f0-5237-4703-b605-d6c928d127f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "15459fec-b666-482f-88b2-82460f994f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4a9c73-6d49-4034-8611-565169feaa28",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5533ab7-b303-4f7a-8877-216cd517cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a2ac69-a007-4bd1-ae75-e78fd1920aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deadde4d-8941-4af9-9520-4350c8e67fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d715e07-1fb2-4f0f-8891-965fd2f4be11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b57b7a2-1cde-45b3-ba78-1de4016952a4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedf4117-869d-4b2b-ad63-15728ced4c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dec532-54a6-4bcd-8cb8-57c155c93371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16339473-6a6d-4184-a5e1-cfbb60d694e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "54cb5a62-0059-44a3-91a9-4114afbcd5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256a56e4-ca12-4342-b9e6-72e7a2c2f412",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f95260-11a5-46cf-9579-1e3d59d683a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12ec90d-0eff-4bd7-8bc1-cfebc2e216c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077f6625-6dcd-4282-a3d5-c49d50468f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d86a7da8-2014-458b-8af5-0975cace5437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d5c31c-e724-45fe-91b1-4eed4eb92377",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36456e88-d7ff-4f4e-bd08-cd0cbfb29407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e028a86-0089-4685-8e1c-952d021ade0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df57c54c-a987-43b8-ada6-72ef9883ca4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "605f9325-264c-4981-8c72-53037c53fbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01a3a86-b376-496f-993f-ed7e584394f4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce64539e-3dd5-4acd-bbf7-372f3e6e3e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c0fd4d-b7d2-4a07-83a6-b093bdf006b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a351f13a-c2f6-493a-8fcd-e5a0855ee858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e6a5be-33b9-48be-a3b5-3997ce231f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9ac46c-66ee-4eec-a63f-5d083b881fbf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fd8ef8-7c05-4439-8f42-f29d4984b9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1176ea-9f5e-4de9-b354-f283738bac42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99de62b-081c-4dbb-b9d5-d5878cde0715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4c26e4-a316-45e0-bab8-a8787ffb9952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c88cc4b-f190-48ed-8989-a633b2e12aba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ed16f1-3994-4734-ab78-a194b67d806f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da69069-803d-4221-8233-5e2a4d2aa4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acfb8ad-5dc0-4926-98aa-1db3888b4d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0e3a9a-6e43-41f4-9486-6995ceee75ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9d2bd9-2f20-4d8e-805e-4338b800d752",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379a76f2-7c6e-433f-b61c-536003f6be36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99c0a96-c65c-4d72-b964-49296e6decee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beac8a2b-ba6d-46f9-9e50-8870c4dda3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28336924-8537-43ef-8b2a-47de0c0a1b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504910b9-c685-4a28-a5b8-19ea29e057aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68917b8b-a41f-487c-b73f-7713553263c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8642c25d-e87c-404f-af7b-cf2b2eaa514e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7beab2de-802f-48cb-a307-90d4d4d16637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8258c495-76ea-4383-a5bf-4a88e588765b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57ea735-cc17-4d15-9ba8-60f0b769831a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09fdd79-3393-49e9-95a9-4ec1ddc669c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c920f3-0df4-4d7b-943e-62b3e53999f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353c9282-065e-4158-b980-fbbdd1d404e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d22635c3-a8e2-4efc-be22-8552ba0c69b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c555873b-9000-4c0c-bc09-364d2d98aded",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec77d7f-7ea2-48a3-b1d2-0c407bf225d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5843ea13-a2b8-46b2-9f44-70309333d50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63ccb22-3367-4bf1-9136-600c239091c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef99274-534d-4f43-bbee-54fa76286b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608a837c-8afc-4097-8f54-d34c6a2157eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3a3f08-bf6c-4fbb-babc-2d75a5e127fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd994632-7f70-487a-95e6-80825106165c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1461f5-173c-4ce7-aa19-a9b491264577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b85b2fef-b157-4935-9c58-013cdce0ac4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae86abc-d639-4351-a34b-c96c032ce8f7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c3b597-c327-414f-a02d-ba92ba70a730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c609f5-8308-49a1-810e-a6e072cc355d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a06d36b-7123-4856-976c-179b117e9155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf67c89a-1bf6-402b-9daa-0bf69b956196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642222de-faea-4ebf-bd1c-972649974aaf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5052b5-9f0a-46a4-9520-2b77dd79b107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53ac52d-a0b9-4dce-a711-931feee6d4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea115c11-dafc-4b79-b170-01766870a47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bec1bd4e-7752-4e2d-8d1b-dd80ccaaf6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a756966-f4c6-43a2-8e04-44006a2f455d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264e4923-0768-46f0-9cd0-7dd845a09e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8c3f81-a414-437e-abbe-bb292ec874e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c82231-da54-42f2-a96c-7290d53b30a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60d82a86-ccdc-41e0-99e4-84f559a8e7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925751d1-c3d9-4f8e-96c5-4814d3185155",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ea6c7f-24fb-4127-b7da-31c2c38ad88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a15728-a5d2-4366-8dc3-53be0798db06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2d02e0-2218-406d-bafb-d5ed09626ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6463f8-d632-4623-a693-8c06de6288fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb9335d-7c3a-4e06-88d0-f2808178cee8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea59ddd-e0a0-48d2-82be-c4b8505bd13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff5e05d-6fdc-440c-9419-c1844b2ab07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803eadc8-627d-4302-9b60-2da0ece60a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de07a962-31aa-4d4e-a969-9803c580a0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8830ef78-4d5c-4be6-a39c-34b89c9d6d8e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a13a15-a073-4ef1-ab3d-96761b4c067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f7c66d-32f8-48c4-a060-58172510852c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e475b30-f94c-4fdd-a40e-f3877c7a5fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b00cf27-f804-4c4b-a01e-b7fede4dec11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64cd468-cb77-4020-b706-fba7676df5d6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b9de0-4282-404c-9a38-a0b448865676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad993f7-34d7-45be-878c-b9c9ea6a3b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f088f6-6c53-49f4-8b65-ce148e12943e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e40ffaa1-4847-4927-8259-59d8e7305efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1237325-77ae-42d0-a72f-8e877f4c6218",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e05ccf-7124-4392-bda4-dd55fd813d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d03c16c-bb41-44ca-b0cb-0ce38eb636e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c22ef6-b988-4ed9-b6fa-aec957181b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb988004-2976-4f8c-9a64-3c3d1218da77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af4106b-b149-4124-819e-fc86d6ddcd22",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca9b389-60b8-416c-80aa-7c4930a74a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4232df9c-8eb8-409e-a53b-02c344fb3096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafb5c00-2743-4e30-8dab-f59b9e9b9e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c74a3d6d-ca9f-47ff-9c6a-b0769657b390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2789b0cd-661c-4f14-980f-94f25f534216",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc5bc7a-ec41-434b-8c82-574eac871bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481b7862-48f5-49c1-9aff-c9212a18d7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99559ad-4f7d-4a3b-aafc-b4ea6179069a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2083ce-5e19-4655-81c8-72d8b86b20b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf76a008-788d-4383-a778-cbb87d39c29f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf30365-b810-49fa-81cd-461e77f1e328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06a2c53-d24d-4218-8fd7-372fc92f2197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a74dca-4595-44fd-af53-c0f20911e0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc965e8-9fc1-4716-a3d7-7066442ceaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ea96a0-b3eb-4644-835b-5c5ace7654b1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020a467b-a853-43ce-bce2-66661e58c321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041a5d8a-33b7-4b12-bd2c-baaa6e0547a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8287de20-d19f-41df-94a8-9a8ee6f0d9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ab031b-f0fd-40a8-b6bb-5b9e196152e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5b1357-b269-4ca6-891f-af717c846eef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a122d0ee-5cb6-42c5-9431-a8abbd9252a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c1e4de-ea00-4f9d-a6f2-6199a2eb1e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8f616e-6f63-4001-9f45-c42360a4b272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0ff70d-e4fb-4cd7-9d4a-02ff8ddfde75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195e42ed-ec45-43cb-941b-cb73d491cbd7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc52a5-81a9-4bbc-b7fd-c4e694489eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237333bd-3b39-4f69-a0f4-2ddb89d6d333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033813e2-d87b-491f-b63b-199c1e809ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d01b679d-5b1a-4e4b-83bc-106c8495d265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f59d012-2d68-45b7-8415-5f03fa111e7f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cd1214-5eed-4cec-a02b-1bd22da0b90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9f8cb3-b9fd-4789-9967-16812c84c12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b91a7e-497d-4f4a-8dec-09955c1ed022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf423ed-c903-4794-bb18-8a3d75d2172c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c743a8a5-8f3f-4726-bcf6-eeded764fb2f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bb6965-81a5-4a2b-bbc6-da09eadf4520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff15d86-d770-432d-8aef-033256746da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd482789-369f-4c8f-815d-7e5a3c3e5a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb2e86f-2850-4f5b-b248-768b387ed235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb52ce1-ea5f-4293-93c6-3aa5baf78525",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2111b0-45f9-4312-a70f-82178b929da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fba692-a44c-41f2-bda2-a9dde2e9f905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e275a868-af30-493a-b649-035c6ae81af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a851f4d-1bf3-4a93-9f5e-5895d441cee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f00a8a-388f-4d2b-ae45-faf8d9d96d47",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921517a0-59eb-44d8-b4d8-f2dfc36da941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ed2b0b-c2fb-47cc-824b-fed07c743d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba70ca11-7e42-439e-a62f-88444eb5392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afe9f508-c132-4d25-a281-8c8abe2f1033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b55d80e-f692-46ec-bd0f-76007b07b20a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccec4ada-4992-4877-bffd-be1edf809f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990527d8-7e37-4ea3-a2d7-75c5cb6c3232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c426a966-6fe0-42f4-b9aa-6d62e55ed323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46053621-bd34-4bbe-bd79-b20072fca0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8faf6a-8af2-4c58-b59d-0413600a22d8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e4a219-2ef9-4e6c-9893-0f8bf74d8463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f13857f-a630-4e6c-9840-4a8c4f30efed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab3e4c0-5329-4059-b146-77029f002b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e511621a-7492-40e8-963f-7207966f9240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4ba756-0c2a-430c-922d-c862979ea343",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd13def5-59b5-4b6a-a2c2-140d64f23574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60eb4b0-2a29-4a30-b154-db50b8307aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80838f0-4b0c-4a5f-85c4-8a7bc5e020a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d9228a-8665-4415-a7f6-62702f931287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a7f006-177c-4ab9-8ad6-25deadade530",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eeb44cf-92f0-4281-94c6-b94c14872b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c97269-ba41-46b2-b28c-dfbf31315778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d23955-64ca-4de5-a61f-073d22300069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2544e2-9b41-41c3-badd-0dae012e61b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd240551-a8bd-45f2-a4a9-d8a052cdacb7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4d4df1-9d06-4dba-8e5a-5de8edb177e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3e2be1-2028-4e95-b7bc-9d13f4dfe0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c3a227-2a63-414f-976f-1a23b1c02e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2ad9c8-754d-484c-bfd0-fc62e4d103e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a20d27-c818-4c07-ac53-05b666e5adea",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bb17c4-93c8-4667-b351-c17717dfff00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c581c5a-82e8-467c-877e-5e0a5dddbc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268140dd-ff1f-4c8d-82cf-86e325bdae5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f727c57c-39b5-4cab-bdab-0ff6fc4e3585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa082319-a1d3-42ed-b797-0f2476f4bca5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3729a3-7b2b-45eb-936c-7162ddbd75aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5563aec3-b020-4102-b079-ca4bb6a54e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aada23d-3d07-40f0-ba64-0a67b0027b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "146623d1-bfde-4d13-9c19-a4b263b27467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79f6dc5-03ca-4b46-a71e-dba9a752769d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82df3f6b-fbb6-4ab0-b232-517d9c4643c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fa67a2-0307-43d7-afb5-0180b38873fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf9def1-3d8c-4635-a88b-f707f20ebb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25af971c-d532-447a-b498-04ed5e4075ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e404c14-8571-47a4-b0e6-f9ec466f0010",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fc05e9-236c-49e5-b438-8de95de3b85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226aff19-ada9-466a-b25a-9c8ff3b39325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc69db1-5f53-4218-97c3-d79ef4a832d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dbebb48-6c1d-4407-a1b3-75aef517ed75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ee9f3b-d027-4c96-81ce-2f8f66028cb8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445501c2-1b4b-4162-925b-12f37062c775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5826ca-dd34-4e3d-8d86-339d5c1023f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db90bedc-d594-41d7-999d-57a1a453dd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c049edf-22e5-4cab-9924-0ec2e32633f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9eb260-27b0-4c14-85fc-f8ad4486c401",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0563e119-b830-4a83-a389-39286a2e72d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3cd05a-2ee2-41cb-81a4-3e2823b99431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f31c40-7cd1-4505-aa32-63c65b1f462f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e237829-fa05-4da7-95a1-0ca6257b3075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30066f8-db08-4bc8-8d40-07ae6bcd987e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e60f61e-fad4-46d8-8039-8adbed5b90c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c472e72-65a4-4586-bba9-ba90f3b20df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d092b54-7688-4507-83f9-8713125d3a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4032d19c-82ac-4412-a170-b1b54db75cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ac3e89-79c8-4664-9030-fb564804074f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353c6eea-dff4-46f4-bf72-b2d6d7840f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b07b9610-aad0-42ca-8060-d59b42e3ce5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6759666-54a6-4e50-862a-dc85187f6a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b4991a8-00ab-48ff-a6c9-20fb2471063f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7457d867-380b-4dec-a367-83f295858335",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db3eed8c-43b4-4d23-b3ad-85f294f86bad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb9f4e4-e8d4-4098-ad32-03052791ba97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32925751-f001-4c5c-a62d-34c6276a054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56de404d-02ff-47a7-8b50-72c23e23bd2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1c3039b-84ef-41be-8c3f-881cc01bace4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f0ee6d-236f-4359-8672-ba1e1c81529c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139c1d5a-732d-4ac4-8a85-f327073e38f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "379672f3-e05c-46d7-abf3-98ddaaa19ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a51628-da03-42f3-a57c-e376b11ac720",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a290747-290b-4198-a391-5fe39666ecb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30bdbf08-19e8-455b-a01b-7b2faf48be79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed288510-25ac-4dee-8774-60a364de8dd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96057411-26ec-41b0-9be2-e8c39cc94c27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba227611-e2b4-40c6-99cd-7f5ef6fc57fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd9d302c-945f-4548-ae06-f5cdf586008a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3be0b8a3-f451-4ae7-990a-672e15214475"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "47119a73-f8dd-4ba4-a27f-427bd3a32bd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8331c5bc-75f4-4285-aa3f-dde8305f89b1"
                }
              }
            ]
          },
          {
            "id": "65d0112f-4e51-45bc-8330-82f461c16cad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a8527cf-7f65-4410-8fac-5d0cea560a68",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe5791d0-5a72-4608-870d-59382acee3eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5321da60-7bcc-4d57-9f2d-b7e016d9357b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9a14fd8-b557-4205-8cce-cfa1135c4a2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29bd67f7-9059-42bf-85c5-aadf13be8a7a"
                    }
                  }
                ]
              },
              {
                "id": "53d3a314-9151-450a-9cae-2b71a1964a94",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d832d623-6361-4288-bb68-56f8e46963f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce34566c-65dd-4e59-a1f8-6007ded53251"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d010616a-bf1d-492b-9e14-d5b5517f23d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e1c9e69-542b-463c-8810-a5e17005899d"
                    }
                  }
                ]
              },
              {
                "id": "b90fd494-75ce-478b-a9ce-e1c5f46dde33",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d651c38-cc52-4143-8779-69d80cf2b678",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bddb208-04ed-4c24-9d74-7260dfbe3292"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28b59d7c-335e-4671-8144-34e525ce6b9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b8f7c54-4b09-4c1f-8de5-594c5f2730ad"
                    }
                  }
                ]
              },
              {
                "id": "17e302f1-73ff-486d-bb83-537f064599b7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d18d8d-add7-443d-8ec0-52bdf713c8ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65548125-7d36-4f55-9459-ba6c90147043"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1246d6e1-c257-4bc3-9b47-ceb58559f4fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "79cb3a32-2dfb-4866-8f76-15318ede3adc"
                    }
                  }
                ]
              },
              {
                "id": "2cfebb86-ed24-4a27-b38c-92024d85b1da",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86495836-a319-47e8-89b6-4de31ea6056a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cdfad26-f5b3-4b85-a70f-10b5f9678f62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30bd9068-1bae-4e29-a3a7-b383f0321531",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7a64b5c9-774f-482c-9aa0-907d4812df9e"
                    }
                  }
                ]
              },
              {
                "id": "338c66d3-85cf-41c6-b4ee-7f8049e24bcd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecf2fd77-f95d-45d7-a94a-9506a19008de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13ee1da5-fb84-45f4-88cd-957602ad6ac0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f55c54f5-5045-489c-a2f9-7f6666354b12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ab18865-9864-4aee-ab15-d767f519bfdc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd76c0d1-2ced-4f7a-9696-81b952231b88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e10a9a76-078a-4d86-857b-5b4a60e82b2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a996d63-5f11-4c64-8bbc-40b85aa11be5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8674205-b824-4809-a03f-ae1f378db156"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52b840d9-f826-4091-9229-e23e43dd3f67",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b7e38764-5c77-451d-a111-5b91594f7080"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84b3b559-e9a2-42f0-a0bb-2d64b9ebe3dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eab4bdcd-d09f-4bba-8559-3e0e0a41e31c"
            }
          }
        ]
      },
      {
        "id": "e8dbb6d1-86bd-420c-95ad-25accfeacbf2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9709e7c6-b43c-41b4-b8cf-e9e93fded21e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e5a761e-09fc-491d-813b-4e69790b1f15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a5fc527-c6b9-40da-91ed-ccbd25ea8815",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249223bf-3d48-4710-b4fe-a4019324a8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cb31cc-b5e7-4852-8607-07a176f0583e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f01a101-34ca-4557-8b90-e0a2c6982239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da1ea8b-dd8a-42e7-a090-88b9ca843bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892e4464-8e0a-4495-90a3-da19df695a83",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579c4c63-2eb0-4002-b2d3-cf4d294acabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd43cca-6c52-48f4-aad1-517ebedb9590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5f804b-a967-4695-a3f7-17c5a4d63a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e0be82-f932-4351-bfb9-9b8173434f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7aeea7-25a8-4c77-9101-858d8a93851c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b556631-156d-40a9-adb0-6dbb717ea186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7378205-1092-4e10-9fab-9bac1cd29c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b50402d-9232-498d-bbf1-6621788b5215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fbfe34-a855-41e4-92fd-24c62424b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d931f2f4-172c-47d5-9908-1e0ba5bf88d1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3485d30-63d9-4c85-a3d2-b6580ee4e7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b53af92-01c7-47fa-b96d-965bd0b19d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aefa65-a706-41cc-afa7-a99bf75c27f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2300c550-b1ab-485a-a840-42fdf30c6b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc771a0-f898-4207-b96c-67a106d26aee",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed2798d-1902-43c9-a2ec-d1db5339a738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce62120-0a98-4267-89c4-007afac0df70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e02272-1e88-4840-ad51-8c5bb62dcd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5cd4e4-39b8-44b2-a11c-f232e3823454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d923d52-8d7f-4b27-ba0f-49de82cdc2b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1c9c79-dbc8-4e28-bf74-4b2ddcfb7c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7ec37a-e960-4ed3-9c1b-88230fa55cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69950a55-f791-44e3-8e66-78c56941823c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "251484e7-d852-42b4-af94-09d52fb5a1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d5163a-d45e-4a26-bc30-db5ebff0e482",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8785e-4702-4aab-b499-ad23bb6f1dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1914ba-5cd6-487d-9588-17f023448301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69be1658-5af0-443c-8d5a-7e8c58c848d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d697aabe-8e3d-4c6e-93ca-8ae06772f246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2460dd95-6f64-498b-b329-a07698acd504",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac00476-4439-4e4d-aa5a-701166f801b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627cf16f-cdba-4e8b-8444-1f293f099411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ebda43-a55c-40b5-b6ca-06a7398cc955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0f52d8-294e-4f22-a4c1-123123e25deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc75b7f5-2290-4478-9145-cd6548290c57",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282b0086-774d-478d-8556-84a4f7be6bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fee6112-ee3c-4309-8bfa-164b220e352c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2791f978-a9c1-476c-bf1f-c54dae0a9cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "580431fd-3088-4870-bfe1-9e8017ca9f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c09124-f3ec-4146-b937-b0907ff8bc68",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611b4f77-d360-4cf5-86c1-25cf11d9f07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b5413e-d3d3-4a0c-8e5f-2bcf39915f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39fb5ec-c8c4-4749-aa63-76a4100038fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f452665b-1572-4996-aac5-81957af5a0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c14c36-8d01-481f-af19-87d91a4fe471",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2d7306-29a4-4a51-be2f-b04c9258723f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534cbf24-ba20-41fe-a035-1c6b9c5b5d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a2367b-88d0-4a6d-95f8-fe0f2f426d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4d527e-6e6a-4c87-b3db-5259cb3a9264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e92a50-3ddc-431f-8750-6768de95cb1f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d815fd-9064-4bea-86ae-ece85fa8d6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d3b210-686f-425d-a404-78b69ff24bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60862cce-32ae-4c64-aa03-50bbecceb2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b59f80-316f-4f25-af94-144940ce2400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365f1c42-bdbb-412f-9a8c-79a743048095",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793f4e55-818f-4db1-a169-3ce41f20f5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660585b0-ca31-4ae1-8a15-29c0ca68b6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce64323-ebfc-47fe-a334-d0ec55a786d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd26bc09-84c6-4f9e-81cf-81d95da5ee4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4d715f-1ca6-4ad1-85a2-4f1331632f20",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abc986d-cf3e-4b74-ac0f-eef4181a7ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf41902-99e3-4aa2-a1be-756234c3fbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c0e1e7-9d06-4886-be57-8badd06ab375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "555e21d4-713b-4e9f-b741-f2ae4aca0543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c41aa2-0d30-4c06-9afd-7cdef01bb529",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a176d20-3882-4382-9a2c-cbac5f87b2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14131b85-acb9-4cd1-8b17-1e278f1f364c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b45810-2ab3-47df-ab2e-09e6d177657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d702ed9-f9ce-4616-bb51-d2e2e41cd75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163023e4-7a59-4a24-9c6b-d8697a17c46b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b58aa9a-f4d2-482f-ad28-7fed6d1b6c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cec9d8-23cc-422c-957f-27a3bd5c7fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d830bb-a464-4c65-b344-b1c7ef9720f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "df81f3be-8fed-48e3-8981-5e4ed957cef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99711710-49a9-4676-8a7d-bccb1f7a46e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c051fa76-d642-4cf2-9c67-5bb681b2472d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfceb58-0713-41a1-829d-e0f05a3c368d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee2b620-92d1-4ab3-87b6-8cd0c4086771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5560b34-16c8-4287-b759-97fee2dcc932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da74e6b-20f1-4971-885f-e501f5d048f9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb4e0c1-fa8a-47b0-adce-17139c201b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f14f94-8592-4181-ad28-cb60dcef1220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34578f62-abac-4d4c-b47b-d76a9d666c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f6b8bd-1b1a-437c-a85c-a572ddf0233d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4788079c-f8fb-4863-b1ca-5a234dd3172d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2f51c9-9548-44f9-b223-a386ec76c195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00174bc5-ea0e-4897-82d0-5da8fb60271d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad90b925-2aa9-45b9-b5cf-ae4e9865317e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4a6a3c-51e1-422b-8e24-4765991fe0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9028d9a3-ac40-41fc-a66a-a4c1c6b41b28",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ec8d5-5201-4f14-a9e3-585e3321a0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ae5d09-d5b9-4f31-b49a-9e9f2ba38079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99be9f11-44b8-4327-bf7c-70938bdad984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17bc7d04-53bf-4be5-adc5-65bd8bb4a34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7648cae-a338-4cf3-a2fe-26b6e95657cd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e741b2d5-6f49-4f52-85ea-812d59e34111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6453dd-e439-439b-998c-9b96f7505237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d6f512-bfa9-4e18-84ef-080b54dcdc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "967b52a7-85a8-4a15-9c2a-0b8765b07531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64acf49-c0d1-4abf-91c6-50d0851463e0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa3dfd4-4f74-412d-8c99-e9b9a3e256f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25022d53-b47e-4ef2-b9f7-0da133eb5d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad77e5dd-3b40-4933-9088-81e75c4663a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2646c760-f64a-4b40-a1f9-915fdee1dcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb66e08c-382b-4afd-b1df-29053686b8c4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcd413c-3b4c-4def-ae91-8703f51f8316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef97a85f-6c33-429f-95a1-515bd6f24748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba5af59-748c-4f59-807f-174569f3aabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d618065-d75b-4354-86a7-932a7a47ca3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011c697f-1127-4a7b-a3fd-719756589fd4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135952cb-4a4e-4491-ba20-186c6f7849ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339358ed-e473-4617-899e-1ffab4d37d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7613247-6134-4ba5-94e7-c6da1deee2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce13bac5-1521-4cc1-a21d-af6cc8169d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45460ae4-d182-4d1d-ac40-8766a38bf5df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c446b9-b419-4b00-ad4a-e9cb63f3937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d287e39-8489-4d32-9533-02474d13ccbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2360c9-e4a9-40af-bf16-268b4f0bb09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38d6b8f-d5ec-43a4-9d30-825d8fa85f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35387eb4-2aa8-488c-818a-5565d44c82f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c51ccae-50ce-4a1b-b049-089217647023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf801a3-4dbd-40b6-9766-d27df480e9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523fefbc-831e-4a2f-9a13-740361e5c399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3750db28-ea19-4189-8a80-1b70c4ee1d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a20a68-40a7-491e-b780-c69f8999c1c0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7490e7-4923-4c46-8bb0-8f6e5b4d0edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10790c6e-a76f-404f-bdb1-4388b86301e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1609354-7aba-4e1b-9fad-2a92884b281a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11d1ccd8-21a1-4193-812f-8aca69c0dda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9708287-ed45-495e-bce6-082eb78b6192",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e54bc-01a8-4413-8b51-9fdd82745af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4ed426-ea87-4084-8945-4325df784432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a574ee-58d8-498f-bc61-ebcb56c75b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c939a0fe-3d90-4f94-935b-2954a1497323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07692ff-9b5f-4028-b7ad-c89adba5c946",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b629fb-5462-4adc-a3bf-ba1da07aab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b092d1c-8bab-494e-88f4-bd3a6cf7280a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5327bd-c0df-419c-8889-3142a84683b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a80ece-a813-4bce-9b2c-cfada3414ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e7a613-2145-42d2-891a-7cee41e73300",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd04c62-80d9-4016-ae3c-2d66468ea128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a778e09-c594-4aa4-8f2e-241ff6e8144b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4345c09e-918f-4320-8f36-01d4f8fdcfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eca7b37-0ea6-45cf-b1d1-46b5cb098ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a41672-f91a-4d00-8ffa-12e1adeecafb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cedb06-6879-4dcd-b1c8-93b7985119a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd59aeb1-49c0-472e-b543-fc5e22f86fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963b19c1-d714-4b0c-b74b-69f16b4c1829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a46654-9bc5-495a-a3e2-5db7de76dcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938fc621-85e2-4ab2-bda9-373b61afcb4e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdde8b7-3641-498c-bfbe-437cbb2edb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfe1d1a-60f2-4209-8aab-1bc3b10c9774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5124e02-1203-4e48-8f4d-bd0ddc6cb5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbc4f3c-87d5-473a-9e7b-d26c92edc0cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e13d7b7-c09e-4056-83b8-5c8648b8e4d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c6c4ca1-9b67-47af-99e9-ac5b6b2032ad",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364c0b94-2a8c-4ed8-8334-ebcec51be561",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac32bfc-d585-45dc-8fea-6e038a9bafc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199752c7-7148-41f7-af7f-01cff83dd8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89d59973-19eb-4e80-a044-f43b08a4f728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dfa9fe-fa21-4692-87c0-f8fc6b27b4ba",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ff0312-0b7c-45bc-ae07-f45483791fab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a0895ad3-6970-4c70-bd52-ee6e8fb76a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdf5502-38d0-4b9e-b70e-71452c6b7e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e886792-e10b-4d60-8ad8-694bbc1a6039"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a84505f0-d5fc-4c27-b974-6794783dae30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89155c14-48b0-48f4-beb9-c9e5077546a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfdf282f-12fd-405d-a662-fec9f94461fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7649203-b5cd-4b79-9408-b182c1690f6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86781d7e-1d1c-4088-96af-01472089bf36",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc86fc37-8615-4d22-ae4d-c4bcc81ceee9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3d0ac43-e745-4c84-865b-0e1b2a46f26c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bc7d639-d336-45fa-a9f5-b9af4100693d"
            }
          }
        ]
      },
      {
        "id": "49148c5a-5eb7-48c1-92e5-63c314f6b5bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2e56c656-6f0a-4061-a627-2397dabf08e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e80c6a93-01f3-46d4-ac21-401517cfbdce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "21341ad3-1931-47b9-b887-f82f5dd3e860",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ebf6a5-b2ee-41f2-92f6-1dafa403ee6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdacfba-a58a-4186-aa18-75f05f93116e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beda11f4-e15f-4f82-97a7-eaac9ac730ed",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c60d49-7829-4943-9e9e-3837c6d4207f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a586b7c6-b3b2-40f6-9f05-bf222f544ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af4ef25-dabd-41cb-bf1d-5378175ac7b3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836a195a-dd06-4e56-b50c-9b77b31f2ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e18e35e-53bb-4d62-bcfd-00406d4d2045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bc8ffe-385d-4d4a-8588-0d9b314eb86a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2a92be-0e86-420f-aed4-fa817597100c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d28f7c8-162f-4573-916c-767079ebcdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b71e6cf-963f-434e-8637-b36f468d23bd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bf2801-450a-46b3-9f83-53fda69eba97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69d0427-7bb7-4a57-b1fe-d1101c50a687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ed96e4-1ce2-446e-899b-1f1162bb39c5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e1b386-cf5e-4496-a8aa-296aa1f25d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286dab70-592f-4fa9-9a65-501182693cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9896eec-5bdd-4ea8-b5c4-d555fa473ba4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828975fd-575b-4eb1-be8d-8ca83fa99115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a9785e-9b58-425f-80b9-5388f01620a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980a305b-26a3-469b-8502-e3e91f268952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5512512c-e20c-4d58-a7a3-f0ef7be721a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4907e9ba-067a-41c4-8ee8-e8bd4ddec435",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98a9c34-2bfc-4297-8df4-2c8fed251bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9e55e1-0102-4d49-ab0a-3651d6514caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af33a91c-d118-482d-887b-e0773d45669c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03498be5-1d2c-4191-9c23-a4df801fa586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9452e0-3422-4606-a7b8-490796ff49ac",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41ab420-93d8-4aab-bdd2-7c5ce322617b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca8302af-600b-400b-857f-299094b7497d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a0110a-63a2-42ab-880d-837c79a547fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3826d9a-0b5b-4a53-8a31-5ae6d2900dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eea22b1-0fd9-44f5-b079-c8444d6863d8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efe7249-d206-416f-8cb6-c975e3c4f74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e34dc01-f1b9-497d-b5c3-b6fd78874b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1d0054-fed2-47b7-9010-d7828c20ab7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4cf5d8-0dcb-4842-b958-cc80e568278b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f8efe6-006b-4815-8b33-de201b5eb803",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b896d0-4341-49a4-81f9-fcb4abbe1c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cfb491-5414-4669-9a29-0a0e5c8532b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e44b1ac-7add-4b88-a4b2-fdbb8c4712be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262c7a7f-57fc-4801-b7b3-e06ca7a53ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f3ec75-c909-4a86-a4f8-991d961b2769",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b34422b-d62e-49fb-b784-f6db6fcbb582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c14ddd-9666-47c7-ab90-ccbd95f2bc46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8479aa-aed1-4c50-9bdc-54f133c1aca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016fc4cf-880d-4753-85cc-cfd1e925642c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fc4872-28cb-4617-bcdf-522fe9f584ef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd78a7a5-d1ff-4876-828f-7bf41819d1e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b3102b-7bad-4949-b341-8a850eeebe29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d90146-946e-49fe-bc83-27ad11aa575c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26a295c-1459-4f92-ac20-8ee03071170c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daef8616-4c44-434a-bcef-46f44ee0cf9b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0e2838-8145-488c-95cf-22dc35708a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43837cb5-48ad-4013-8070-abe6cba44bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cf9d2c-b1aa-4526-a3af-d9095dc77ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c88d12-0ee1-4464-84b0-c13e68775657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c309228-3f2a-445a-bea9-213d24c1491a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaa67c5-c4c3-4170-b657-4c85de66011d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0d58131-0f65-402e-8c8f-3b436eb02693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f89742-c541-47d1-87fe-636f26701a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a96c3f-9cb0-4734-b5c5-52711b1f6c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a096ba-e4bf-4c40-afd4-bf817b812f18",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f62127b-de3c-4cc7-adf2-eb9844344dd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ac89d1-ba39-44cc-a388-3a96d4b70d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc7731e-248b-4231-bf2c-5f73459a7534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f359a762-2ebd-4137-9865-7433dc1292ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0f4319-b874-42d9-bad0-86954c765555",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c968f6-b8c3-4c58-9352-99f67c21af21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e32ec3d-74b9-4553-aaa6-2d3c2e129297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bfd6fc-5b55-471a-b3dd-415e25124a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27103833-92d8-433d-bcd9-e3546ee3c7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abcf104-78f5-4d91-b7d0-55c5c53734aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ed344a-c3bf-4b27-9b6b-40518b9393c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2dabfb-b828-45eb-b1bc-7a342ae08d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061f4cc1-ab50-46d9-852b-88bf5e1e86d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fcef3e-2c8e-409f-936f-a5d5c4f39833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af154a11-ebbd-47ff-9ceb-233cc1feab95",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd1fd5a-a43d-443e-aa45-645cc7bb89d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b446268-78b6-4c47-90e5-154903d25708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f55f4c3-6b7d-4b4e-946e-a48b06de40be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f66136-9d2c-46fe-ae5d-aa08df2464e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f09b264-3cf5-49a6-a1d9-c94468340696",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67cf859-35a0-424c-b145-0b1d5d373ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a4dcf9-fdbd-4e6e-9b10-131f127472d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec85bd5-852a-4890-b9ae-23b763c0918e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecee102-c6e0-40be-9928-0ef5e6000668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0f4cae-319a-4634-9336-72410d57b5f3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eca429c-911e-4710-9e8b-306afa944b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e092f938-e757-470f-8f94-51f0f0e3fc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c559ff12-6120-412b-a5e2-50afde7dad51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8998601-1791-4a07-a048-64ce44c149af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbceaf43-006e-4d8d-ba1a-5ab6f916dc7c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584379b9-d639-48eb-9bba-b90803ceea96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05daa3d-1dd0-45bb-bc9e-2e6d02650da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed93c9e-cc0a-4264-9ccc-e53763e4855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69134dea-88a6-4c03-bbe5-de65f103b953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de75aec7-ccab-4b0d-abe7-c91903e91667",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33378e1-d727-46c6-912f-32cccf359d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89c81f1-c7b8-4283-92c1-80daeae6f42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5f9f98-a7f0-4a27-9452-54fc0c4eeb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9789b650-7c4c-40f4-966b-dd9a13d59f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d668fbc4-53d7-4cd9-99e6-329993b802da",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab59f07-4724-49a9-9037-0ce7efaac207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a22ab6-dfed-43ea-9680-471883b72889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96fc894-1998-430c-a1d1-5c7a3994fa2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afae7dd-f453-41d4-b67f-d9753158a361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902aca0a-b104-474d-9425-691d9fc9f902",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6115d05b-9e86-47dc-bd67-5db18dd37572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a82b11-f007-47eb-a457-b03c00e07bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a6243d-5351-49e2-a066-c4cebcc296ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de60fc0-85ba-4ddd-930f-f489a2c4c1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59eb259c-ed75-4d57-9397-b3c5c9d809a9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0874d5-a9a0-4689-8800-b0bf7361585b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53466fec-ef79-41f6-8f5e-f0ea7ae59f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa05400-fb8d-4747-8197-c61bb4512c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2538de1b-33d5-41fa-8d3a-ae5c918ab7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caebcc8-7bb1-475b-b1ee-8b9d40990b80",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d38a7cf-397d-480a-9b6b-0842c6d6acf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfc746ac-d7a3-4fdb-a376-aa71221784eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e07b064-7797-47d0-8ddf-04ccef7cd450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b86dbd-8255-47ca-8f36-33e47bc7b02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf8dcf3-66d6-4256-a819-439bfb1df3bc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dc8f52-18da-4fb3-a36e-ff8d019b6ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727ba9e6-851c-446e-ac00-a28fc1e8aa1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280a295a-2a0f-4e22-992e-a0f718f2385e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3409699c-d491-42a6-8f0b-225f68e141f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd92314-f3b7-4a93-bbab-c04fb23c4a83",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9fbc97-6c17-4756-bbdc-2b7e1b165146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "798db970-c6ac-4287-ba42-07f8d138d127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ded51de-c505-42b7-9dd8-c7aeb6efb232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fb723a-f75d-4b8e-8305-de11b0cf4f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e696643c-7693-448f-a903-d2b0ce5b825c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11400d88-69f0-403e-9592-68e30bf5b819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e5de08d-09d5-4682-b484-546e37b95945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f67c0-3c7c-404b-8783-70fcc17d5629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f50189-21e8-4ce8-9641-517713776f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b407337b-2099-4e67-85b0-f6095bd34160",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7c42e-f29a-4f86-8c1f-098d1bdb6e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01789a48-b0f1-40e7-8367-bdf478083748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b346f06-4a9f-4790-832e-124b50475622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864a63ef-79fa-443f-9a06-f774ca20ee15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8e2f50-6bc3-4425-8898-3244bcfbe0bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42f5a90-3207-4af9-9c83-7d3aa27212d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce1afd7-3fdf-45d5-828d-ff349fdc1207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09278c0-c017-48ac-aef4-3b837afa872f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c8b3e1-34b2-4f9c-a98b-fe74ee9b44c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b02911e-49a3-4679-aec6-383e4eb511b0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f27d7b2-6bb3-4c09-9035-d3d1e6377fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "114a24c9-809f-431a-8b10-89c3c30ff4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a7f593-0b23-41d4-8431-57e74d48514d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878acf31-2b0c-4c53-b9dd-127d021f0be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173c82d3-e8d4-4afe-a6c1-5bb3a0f3df1f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695ce825-b163-46c5-9dfc-02c70226de05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94fc6056-69e3-49e6-b938-45400aa7a23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b3a8a4-7a5e-489d-b455-444b255cf936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac198ea-2229-4f96-9a64-23123a029689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8939894a-d8d6-4c47-911a-a8c9ae4bfd16",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1563f87e-da17-44f1-a91a-78699e4e9908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fd13ec-1d6d-4219-813e-3b8a9db847e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd3678e-1dfb-42ae-b570-9a7e4982eccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a6b3d7-c83e-4c30-a5d0-b00dfcd0c062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630da55b-d654-4e14-a9cd-580e6a3cdf93",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd99125-efb9-4064-af45-e86fa9157fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79b28ad-a853-4eca-94b6-3879f429e5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5517b89f-5f53-48e8-84a8-af7ef25b707e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70891c8a-8bd1-4519-adff-569efe720b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3da5b59-bc1c-4208-91e1-812c5035d1a1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215b3bc7-f885-43f1-9f30-75b9bc5fdb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9f9c31-850e-4fd1-9a13-f16d9273a403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2516481-ffea-4be8-9f26-c07bf0ce4843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43869ce3-3ec2-4a36-80cc-332da17f8041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a810a2-95d7-4823-88bc-b210e6219560",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6005c835-0f5d-4140-8f7c-a8058d506d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3c9523-e10d-4054-a142-9a464ecf3485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109fee77-3ed2-44dc-8225-ae2bde36db30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e397c6fd-e099-4808-8a74-407a1265076e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c991d20d-e3ef-49b0-955a-95c3f4fecf87",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb50be9b-83be-46b5-b71d-0844d766105d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a7aeb0-3355-4e0d-9b90-14c0211ae073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318d8c52-359c-4b99-888a-47172b0af5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80502715-5e95-49ee-a699-b36fa2fb9aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395c556a-a97a-4017-bb39-9cf9b9b6d60b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2d6d7b-8da8-4902-b7e1-f6a6a4126602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0801e6-a83b-49c2-9bfe-f358b77ae9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5010480c-b006-4783-830c-2a56d94b7d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47077f90-e2b0-4d44-a8b2-fbfcf18e0c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a01f013-7bcf-4984-be64-93ea07f3d50e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fe9785-c362-48fd-9e80-cdd23cd9332a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b6dea0-8f34-4231-b3f7-94ee66e9c3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0834ecb3-fce1-45c1-a8ca-13777fc66084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b567eb88-86e5-4517-8d27-29d1c9b05fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f597aa9-f046-496f-8297-41bd1e6af8e0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87868872-d163-4bf5-bf4b-5efc2a7bac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00458615-d09d-4bb3-92de-33b9a1420509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b0a521-492d-4dcb-8e30-dba46ae169dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6200ee59-a4b4-4c13-a603-1888e9a66d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a00cef8-0866-433e-9e73-78ef04d8fc2c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7695232-a9a4-4201-b677-8114240be572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156e38b4-df69-453c-9972-e42424841eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18182589-aa27-4ac3-bcd8-18a42a1e6c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510f6429-57ad-44e9-a6df-c99ef21d4ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cc1f53-a1f8-4f5b-ae98-18f621bb9f40",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe68efbe-e312-4e65-95f3-cc887fb3ee91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb37db3-e96a-4039-8b80-7813e4653608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e671f9-40e7-4b56-a167-25403c942e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41768469-4625-4be0-9be8-d7ca30deab4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e78e630-9214-4493-a346-cdbd6b2d74f2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe422e32-c2d1-4831-8626-99b7fb0fcd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a21566f-6943-41e9-a12e-6fdde8f4c9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a30b9b-3f38-43b8-a7e0-160b038bd8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b3f3ac-00ba-46d4-82c5-9fe98252c508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65acabbe-8aae-4a09-a3ff-ca9fa134a923",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60025d07-aaea-403f-8b71-dd24ec106999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b009b667-c76c-458e-9e2d-8498800fc097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fbd410-e793-4229-96fb-3411fcbcc4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc8c09f-2746-4f46-b660-09f974acc43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2284634-c3ee-43b5-9b91-23f0b99e0eab",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a5e9ca-5042-43af-ab79-a0489efec8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42e226f-3ba5-4b0d-aaa0-7e18a3eecf9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cd07d3-06cc-4bac-a028-559009366ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff6e21c-f0d6-4616-93fc-72925b1c0c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d77ea12-27e3-451e-ac7e-770dd50bc1b3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f736af60-1a8f-4b3b-bd25-a3a653ce027a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ee39af-d8fb-4c5c-9330-0f00a302f5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fa479e-a0d5-404e-b4b3-45fd53c65dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7390d81-858e-42af-9c6c-fc1d5525a97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf913f0-e380-4bd4-8470-09435399abbe",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6152ee2-40b4-4f7f-a728-78fe27f184e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc248be2-5bb3-4d55-9917-7bbb61be905d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "059503ce-03e3-433f-9edc-92490b484df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da8001f-73a2-4e32-b65a-4624842456ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5941edc8-82d5-4314-9e14-d6fd147fb337",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb107aa-b29b-492c-bd61-f4ee44024883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2230267-cf9d-4a0a-9027-6fea0b211864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93932e44-2085-4c51-96bb-73702899fa9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db8421a-1c8c-4602-9f66-7ba9497e51a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa25b6a7-3265-466a-8ee3-ed15ef3104a1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146e3d0f-61f0-459e-81d8-ee432d0330ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cfacaf-3a62-40a0-aa0d-e848525d8a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537a940b-c282-4a2e-a9e5-59f89fe752ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298aed7c-710d-4c97-83ad-94b79d8ea1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb1b04b-a4a4-45ba-83e6-b3b877d29d9a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0f3fba-dcf5-4eb9-b0d1-67fbeb3529f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fe5cfd-e1f8-476b-abbe-00f555f237d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615f3fd5-9754-4f20-ae9f-cd4ed0f70763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d97a65-45b1-4064-bb20-64257b4b7bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c338e71-1c74-49d7-b574-47b3294510a5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f81313a-6f7e-4e83-b2af-cc570b468c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de26986-4321-4a7a-ba9f-df53c0bc4b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "770b71d0-9525-4427-b513-76d6fe05d61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea3c43b-e46c-4b8e-bb53-dbc275e3898a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7460e5d4-f7cc-41a2-8f87-8977eee7a953",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91d646c-d605-42aa-899f-47c6ff543578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e064bc1c-0391-4799-848e-3678f54efc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a8f011-dc84-4b41-881f-be81ebe45fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bb7a72-c7c1-467e-b54c-e078a22c5964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352935ec-a950-494f-9b9e-3323824826c2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a9f668-9488-41a2-a2cd-9f0ed2b272a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23c3d9b-58ed-4736-a601-3890ff62152a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d45769c-6f97-4cb3-ae11-1a34f50b29a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c696ddf9-d5a8-46b9-a7e5-3b63116b44b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9ff18c-7085-4ee0-bf56-15ef4505c21b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8bfa9d-8166-4328-b9dc-ae793df30be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1abb0fe-aee8-4cf7-bba9-d544154ab232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983eb491-f76b-4bee-95da-63c613d8770f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23be74ba-887d-48d1-8a4b-efbc755f2621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccb4a5d-8f2b-4763-bb62-60120345d0de",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47519c0-bb91-499b-b39e-cc2ac21facd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82854dfe-3bfe-4a05-8dbc-4bd41b0fa0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311bc3a8-cbeb-45c6-9953-eee3f2a4ab27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7f36d3-ca74-4397-ac90-49949f68a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc42233d-0cfc-4d19-8077-c3b758bb453a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74933486-660c-45e7-967b-28f55cb7362b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0051de-261f-412a-b74c-087fb0d232f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0020ff02-c1c9-4f6e-b57e-007b6b59fca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ba740d-ac32-4129-9982-31b0c5cdea31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623b1928-e3d1-4c3b-bf60-2c2aa7d80317",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b018e728-6349-43e0-8b83-fe109b52d779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7fbd76-8c2b-4af9-9fa8-83790b5cb737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d4b1f-b367-4433-8cf6-c28349375059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2087599-048a-4594-adf2-f3924c22e125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f242be-5c93-474f-a73a-a136ab99cc04",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41d6eb8-6bf6-4b8e-ad5e-8acb6c75b15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f95ca60-896d-448c-9e10-44dd66abbe5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331d6201-be8c-4f32-ae05-ea1afde3891b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f84448-690c-40d2-9df8-74ff269795bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b742c052-0011-4314-8b6b-5b008fbb759a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd7208e-713a-43dc-bf95-dadff9c736f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a83bc2-0cb0-45c4-98a4-e3546060838c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d50895-188e-4af4-a2a6-d7504c50b7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82eb82c1-59d0-4571-9753-2527fce9520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20388bf7-c403-4be5-ac31-274ecdd6d80d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045b65b9-6594-426e-b05b-525c05b1b8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca543914-3f6a-4180-82a0-0234fd8b21e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca474ee-64e7-401b-b9d4-60e12e06e25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059b21b0-e3ba-46f3-800c-a4643bee3228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabcf706-fe0a-476a-8e7d-8478276ff869",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ac6fba-14ae-4680-a1d6-d54d5d9e6e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc4f47b-164f-4a25-9f76-f7f6daa2f51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d313fe-2393-404d-817e-5cedc6ce3fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a93018b-1644-4f62-8f07-e382f40bd2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0f035e-ddac-4474-940c-29df32a21348",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb932d8-9508-4269-acf6-6431660ec45a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90734875-b037-4162-8216-9b1f7b620aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fe785b-3b5e-475b-940a-c2bdb20bbcc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a3e44f-c9af-4844-a7e7-0ec66de22a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4850e9e2-b0f4-4a25-b5be-c5fe62527ad3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9193a27-6db3-4bd2-b7fc-9e8b401bc94a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c0a91de-f120-4558-8eb6-62f2a32ebb3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a070a30c-2b45-4a35-a661-a91e0853b4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c29c53-e1f5-41d7-af55-fd6dc6c770de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86e0d3a-d548-476d-bc9c-2caa8797f846",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d9738c-ffa8-4b39-8f7e-622c6a6cd75a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3775b1d8-e507-4686-a2a9-51fcca2fe0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0ecaa1-c6b3-4b5d-9ed9-77c9aad90292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47052a05-1bd4-4e6a-913f-8c5685b3a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f846d490-f985-4493-864b-a43a1243ea34",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcd91a6-cae6-48cc-b514-a695f19df313",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9afd9cc-7eb4-432f-a9eb-e08b4108e247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e690ea17-717e-48cd-af35-ae41b7b87b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8731d05-97ba-4ea3-bf45-1e375443f39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef94d958-cde0-4adc-81ed-28792f40afb9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7111f15c-c9f6-4808-bbe6-a36aa872b171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673447f2-c6db-4e23-a5ca-a5663ef12dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d59051-3fde-4755-a889-b0a1329dd1b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c85d0ba-4301-4a36-b6fa-cd5b5d84bdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22191b2-d92a-415d-be21-2d050042f305",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ff10ad-4085-4a3e-af07-4d8522725922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3458cd90-0304-4b51-a4e3-0ffe924b2070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0480ff-fcd1-421f-9a79-a56abf8ac07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b742c14-98cd-4bc6-970a-134d0856dad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf506c5-400d-4fc0-bbe2-9d749d177bb7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a33fbdd-0f60-49a1-91a7-a5e4ea6c690c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505faf56-afa1-4ac3-87d5-32eaf19efe5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c78c9c-c52b-437b-a8da-057908ea845b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9be4cc9-9486-4ff8-b164-18674647b785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca26ce7-ddb0-4e13-a4dc-1763b9cc8561",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6779868c-a344-4aae-b61d-98134cd8fa17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93550e95-4fb3-4547-93f4-a90daed5db4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca53cb4-97f2-4270-92de-c01651ceeab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43006aa1-54a0-4bd0-aa6e-de6d0fd30518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43e977e-c54a-4aa5-a22a-069c3db88b66",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd537f6-52ce-4a3a-a22e-c1c239392e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5db4b45-c7f3-477a-b426-38e81f80fdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d036393b-38ea-4714-991a-6710fba3bb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6159ba0e-58f7-46e9-afb9-5a6e2d35fdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487072cc-4a03-42cf-8714-89d614c0c545",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207857e1-329e-4999-b046-13dd33ef628d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ffab227-e228-43ea-9c8f-cc296734af6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d84304-4e38-4f9b-99c8-7fed53c5db9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8188b667-2a04-42f0-986c-30d65d604eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86dd879b-3f3e-470c-85de-040df91ffa64",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04221daf-850d-4918-bd28-d168c9872ac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7fe8b5c-69fd-46c8-9839-dd1e8022d41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf16c34-ffb6-4aef-85e1-731c885882b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787f72cc-816a-4b2b-844f-1b487be63cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a92810-5c6f-44db-a06c-b904cb862fe0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473a18ff-511f-47cf-b7be-43d97c21ff8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "186319fe-32a9-4ecd-8918-fc336be3990f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab38940-2c07-4f1d-a6d4-00afb1db4c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3afc7a2-69db-4bb2-8508-883a2b360ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9a32bc-2d34-4ffd-9a58-90b611c95919",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77f78f9-bcf9-497e-9fc9-b88173da2850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "736e20c5-2547-408c-966c-c52be1c5dd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022391fe-7f02-4dee-8bd9-c04a0d2b3276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc311897-9f08-40c8-afd1-0d4555fa814a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b1af2b-6e65-43fd-9d86-9149fa22b9ec",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f17a439-cabf-418d-9bb1-f4b06ba0cb78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd96625e-1553-457b-8307-3ba1a444ecb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d225648-552d-4606-809b-5703c1d8e5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d982847-ed3c-424b-a173-d4792dc9f9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d124c56d-c682-4e0f-b9fc-6d1da9039583",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cba980-3b39-470e-a75b-ef98d4412c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2160e1-edcd-4bc4-bcad-fddd2d592ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb93244f-9fd4-43d6-b9e6-4fa5350ef8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb533d3-9f3b-4d95-a395-06ea589d85c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17f25f2-bf85-48dc-8cb5-0c7074d712a4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d454d49-f01e-4932-94b9-90ea4407d31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f4ae00-726d-4939-a975-37abdb0a48c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2595c051-fb11-40f3-86ee-a6bf88d3a73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45967151-8409-4b6d-bfed-2673ed179119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2f5baa-e760-4b3f-af21-1c7e5ee61437",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e97e7c3-b9b2-456e-9217-b3f2431fc52e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c4a4c1-6b93-4b6d-9d53-97bdfb7dc5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65df5be-477c-4c0d-9ab8-5ebc349cf371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fff67a8-88d7-4adf-8ca1-a22970fec18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a1e095-8ac0-422b-9f4b-282bf4cb2a6a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab14e845-17c4-4d67-a3dd-d3e4d3876974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf7d9bb-5b54-463c-bdff-1ffe024187de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938f8c7f-9f5c-4bf7-a1d1-0f16f9501e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc0119f-ffe0-4d91-8b3b-962be2a240c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2b4803-8174-45e6-b641-b174c83491d1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22c6a63-d8b8-45cb-9ec3-474ea001a74d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b638d9-40cc-4b6c-b3b0-b8be887114b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa806704-22fb-4265-8983-7645d9138b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457862ac-e14f-4c9d-b9b5-ed78c54ffad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e63c9e-6b7c-41cd-aad8-ae761dedaf0c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0954ce-a05b-4aca-af36-0bc01be2ae0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf44cf9-0782-413d-b82d-151f8fcdc419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6f56dd-9a20-481a-9be7-5d7857fb2c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1b4490-208c-446a-8596-b25c199945b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8081727a-8035-4bb3-a2db-8a6aa232cf7c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e789d984-2cf8-49ed-b232-cf9e08ab512c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66db79cf-55b2-4deb-80af-793bbd72eed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7850a716-674e-4cea-81c9-7951ac123d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f4a2a8-caea-406c-9636-7935816d9aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6787746a-8da9-4cba-8604-94bb79f704f2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab759686-68bb-489b-83b7-1fba5649998d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff64883-61d9-48c3-8a7e-c2fa6ba499ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd6834a-8eac-40ef-9683-cf1343f6db91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a7ba2e-24e2-420a-822b-d2fee57d871f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa369480-d38b-4bc0-96f4-d625c7b5d48b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e305a5-d2f1-41d9-b22d-1ac50133b31c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6757a12-36d6-42be-961b-77ec6e990f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8299dee7-e85d-49b3-97d1-2df04bdbf1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3444ef-33e2-4e1b-854e-45cfc7db7ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d4c008-9ec9-440e-b592-2e7edab96e12",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e985ee78-027b-4ec4-861a-11e0ccf782f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c98ee06b-05c7-44f4-92f4-d63d97eb5a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43566c1-bc74-4bf9-9881-901f3fbf0e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba4f571-3f1f-4f3f-999f-95af437ca95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b02c12-ba48-4c25-9da0-66cd8ed9f949",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90ff335-208d-40dd-a7e2-6f12fbc165b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1962aa3f-eae8-411e-88a5-b53d4b4ec062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76f9265-6307-4f34-b65d-23f16d51f8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b784e13e-754b-4e30-b7bc-42e38645802f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4888ce53-7263-4b62-88fe-3037380996e5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8ac4a4-0ce5-4af0-8a2c-8285a8c524dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5024f64-12a9-47f1-8c87-bb8791060711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1124b8b8-3f3f-477a-b7e8-6ffef7c9a04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf5b659-ac6a-4ee3-b1f1-56f8e065f43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a235f65-88ee-43fd-9d93-850d2b42b90b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55fe5a1-838c-4bb5-89b1-f53e43a828ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d82d7bc7-86f1-45e6-8cb6-88ba6f6f7916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a877b20-2411-4805-8654-904776aba2b7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f96f85-71d8-43b1-9477-7ee8282bb8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d79d21f-930f-4b5c-a4b4-72400e2f73c4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631facb6-d97b-40a8-95e6-be8fe92e32dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787d10ae-42c4-451d-b3c7-03a25fd939b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b823dfe2-aa89-470f-a6f5-eecca4c3da6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589a56b7-7dd6-47c4-a9b3-3bac294846af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0494eea2-4a7b-47b0-ab48-16922a2b465c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6b4fde-70dd-488c-81e0-7d510baca715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e8ff4c1-664b-4808-9e68-e737b2d2e3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896cbc4c-dedc-47f1-a982-db986259c262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f45c5-35af-4416-b79d-564c5491cb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992671f4-00c3-47ed-8830-add7d3a127ce",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c502cd9-9340-494a-b721-7437362f7ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b585b9-a72c-4ae9-aa46-2721955e3edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830f8fd7-ddc3-4c75-bcc9-8fd7e05af686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f262fb-74e1-48bb-9a63-77b1b1222dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e9c804-bbe9-4221-91ef-cdc6c2a1419b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cab6207-acb5-43ca-b98e-0afc15637b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bcb6835-9aaf-4504-a1c1-2d5500dc7e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1510ba11-e476-4f38-9ea7-fcdd5c9cc94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8552fa01-4fec-464d-be01-990eec1525b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e903c4da-36d8-4ffd-aa4d-8bc73879d6a0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c875457-c995-46b7-8ee8-c563345da064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eece4124-fbb3-4948-af0d-66a8614dbb3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ec6c98-6732-4600-a8d8-cded685a33d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904383e4-06f3-40ae-b22c-a3d456e69299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b476768-a4c0-442d-9d37-4f82a8b598f5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b585f679-a5ac-485a-9946-92a2733b8d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b3170d-c881-4440-96c4-64ce55bd8ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6a638a-8262-46a5-89c5-b0654bf5c42f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beedd55f-8718-44fa-87fe-4b645b89f418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a311741b-797c-4c69-bcc3-91f32f335d5f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ed7c85-d9c9-47e0-ab77-17c750bd10d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9314046-fea4-4d72-8c31-1c2207c680cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6a772d-6dc5-4647-a462-9d8bf96ea103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13756f75-6f0a-49cd-86d6-e03ee0bdb65c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "531242b4-b0df-4d1f-997d-4e78246c7034",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a381735e-0a0b-4735-9273-76b56eda642b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cac4d4bd-73fd-4a65-9c48-575b3a8edb3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f21b4224-03a7-4e5b-b7b3-3a68f957e84c"
                    }
                  }
                ]
              },
              {
                "id": "4cb8825a-6cbb-4ffc-950b-be014d7f8f6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cbbd283-d13b-4aef-8c28-7595a5b4a609",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acefb5b4-125e-4267-916b-d2d303e5d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f9b749ae-8aed-42b8-96d3-2170f8f71a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc988138-003a-48c9-84b7-71da4a25d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aafecfbc-a494-4d44-9262-70c973bfa0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958f3e2e-b523-4a21-adcf-395a56568b36",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f21f957-5645-4284-8b67-aec805956117",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b22bab7f-1be3-4946-b0f1-b05919dd46a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d682f4e8-4d9d-451c-8e41-7d07f8d1ae2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "938d11cd-e877-4783-a5ca-c865ba283d87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0372532b-e70a-4f44-b9c1-bc39f638e32d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6eed1644-49db-4261-8263-bb8181ffd806"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa429e0e-aa07-448a-ad51-b2ac59ed1693",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b7b0502-1a4a-43f7-b3ec-0639005bd274"
                    }
                  }
                ]
              },
              {
                "id": "dc25988f-04e2-4c1c-8824-1098bc51648c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "65c8c6f3-3805-415b-a687-1ff941c4f4b9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ae17eb-82d8-443d-8448-2dee039913b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9dcc11a8-f7db-44e4-b7fc-efb93c018a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b502ec-0fe0-44c2-860f-96be76e7f307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e03464-7d56-4d87-a33e-2107fa77bdcc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f93b3b7-518b-47c7-840b-b30a016d84e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b6e771c-025b-4277-b606-ae122e9c3cb1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d027c99b-2e74-47e2-8774-b578d50c102d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ff59c3e2-826a-49ba-acd6-681de44c3c3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cd1fa3b-e1db-4e85-b4ab-d7a20f6f0862",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf25c1b9-ece5-4d1b-b555-0465c8be22f1"
                    }
                  }
                ]
              },
              {
                "id": "27de3b00-a581-4a9f-b895-cd8fc7534978",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3443988f-79fb-498e-b32a-37fc5263e4f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7d0664eb-bf4b-4aac-bf2f-4d07dccb0828"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e841c41f-8d51-4ceb-99a9-5fe18ba78552",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6bf3697-3b4b-4348-bc1a-c10ba69642c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30f8fe61-da6f-41f8-ac8d-d608833f3b79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f5748608-aa0e-4180-a1b2-784f546e40e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b053893-7d3e-4c80-aaa4-493e5840a3cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd112f6f-2c08-4054-b968-18e756a0234a"
            }
          }
        ]
      },
      {
        "id": "bd6fdf9a-988f-45c6-a6da-180889b2984d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "96fe1315-4f98-4fe3-8b91-cefcb7bae7fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30bcab2a-e1de-49fe-8025-06b64c10420c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb6e43f-01ca-4030-a8c0-15ed3d4d9e4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42461eaf-7c72-44be-988f-6032e420b35e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17c9d1a-57b9-45ea-8ee8-0f61f876bec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9945648-1e2a-4d99-900f-e76699073bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fddb7b1-64e8-4b19-bb7e-6bfc64b9b821",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e46ddcf-1664-41cc-9bc6-5cc2b8b34dec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c33981da-600c-45c8-95b8-92f2ea44b11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc8460-bac6-4c29-a643-4bb7415c28cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0424ce87-66b4-4bfe-813b-52ad695b187d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc2f7a2b-c050-4e33-a7aa-2e3548c3b7b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbe0370e-c5ac-4534-8aba-6a59ec1166d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "579b7dd0-f812-4d5b-8262-eaac6ac34800",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05381203-f557-4556-a4b1-1df2f5b54269"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0ad9cc8-3fd9-4db6-9dc8-fe8c2b523338",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a602be28-2bd8-405c-bdf0-cd2e19620adf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "668589ea-664e-45a5-b9db-bb44242ff71f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7429f1f-561e-4aed-b651-937d67c32589"
            }
          }
        ]
      },
      {
        "id": "5ccc207f-a0ee-4ec5-bb23-7025415e134a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2e61e511-fca3-491c-9e76-9a786c0571cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43e955b2-c120-4e11-808e-10bfe19ade6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53b274f7-5722-4d36-b297-0f4742b12dcf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d9421d-4aeb-4669-a772-6d5d68c1a864",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e88b4acc-bde3-4bb6-a0ac-e32ff9355769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3c4351-58e2-48da-9450-74d81a53975f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26a0217b-b1bf-493c-a2a3-40ae10a6623c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d186104e-0493-4f1d-ae32-9ec76b1c5d4d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e788e1e-62bc-49b3-8415-aae4c76d8f4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "776c66b9-4457-495e-a768-aa0c99d0e7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abaedb0-7e9c-4ed4-b973-d9c8a936d53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89963bed-7c86-4db4-a5a6-8e57d860de9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17bd76a4-14af-483f-8361-10fa1e61eea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a06ea55d-c8f6-4eb1-a174-098f2034d1fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c73cbd94-1c96-47b0-a5a2-a9fa94b6e380",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a03af33-4354-4787-a734-110245c92a6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24abf16b-cc82-4f8a-9ded-a1a481ad8a6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c2cc745-eeda-4c16-a398-d9a5fba3627d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33bf2ab1-9f1a-41ad-9601-8fc4fa83d875",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c726110-3739-4934-9f33-edd21bfe5497"
            }
          }
        ]
      },
      {
        "id": "74e485f1-af7e-45ba-8869-b5ee410f3365",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fb347af5-aeb8-48c6-ac69-302d393f79c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be22898a-7148-45e7-aadc-345b42781137",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d0e3652-894e-4771-9d0d-efa2c4abd2ba",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a337e27-519d-48b1-b6f6-f54853495fec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0bdb952-3ec5-424d-a055-e2154752effe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c26db8-d5c0-4b85-855f-96020e4d1489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1983e4bc-47b4-4264-95f9-70409c6bc663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971bbe61-002d-4035-a64e-1fc7f76374dd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7002f22f-e577-4e21-9fa0-4f70c856721f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "77c2c489-0d22-4f53-807f-e061a71d4074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a63c0d9-488e-47a7-9cad-f066229e82c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8d60f1-35fd-434f-a0d8-ace971d98a5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c28797f8-7521-499a-9e61-f60a2441896d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18ebb6b5-8fea-418b-857a-f2bc808137fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdc625be-e0f1-4b10-b47d-7367ef36f359",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6888d94d-4b29-481e-bc57-765800aea705"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09679150-d9c7-4f7e-b0e4-ec2663214150",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42d99318-e076-4ac0-b09c-f260629fbe5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0077dce5-1879-49ab-9c60-69c37e4a95ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "952720d7-1f5e-46ff-b632-14d9e83b2f6e"
            }
          }
        ]
      },
      {
        "id": "2247f57f-eecc-4837-ab96-0602f0eefa8b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71c002ea-2c8b-421d-b396-7e4dd58c56ba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99ae295d-437b-4620-aeb3-64aaa103f2a2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7fe32eed-6008-4579-b4e9-a1ba4e842487",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d615b42-503d-4b79-8a5c-cdd650ce00c1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "849eff48-fe23-42c5-b74e-58b7961388ba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.7538461538459,
      "responseMin": 21,
      "responseMax": 4843,
      "responseSd": 701.8324921949618,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679877445173,
      "completed": 1679877525733
    },
    "executions": [
      {
        "id": "1c608770-a1b1-45c4-8f4b-bdeb7abeb7ae",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f6b60bb6-cec8-4bcd-9ca5-444c4938a969",
          "httpRequestId": "babdc552-c38e-4ccf-b81d-b6c90333fefe"
        },
        "item": {
          "id": "1c608770-a1b1-45c4-8f4b-bdeb7abeb7ae",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "091b257e-2403-4beb-8ae5-e64e43643858",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "1744ee46-5c8e-40bb-85e9-64f9bea37b9a",
        "cursor": {
          "ref": "d0a4e0f0-bdce-4b2b-a2a1-b2f36da8a3af",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "264092bb-e69c-47cf-a61e-6ef0fcd729a9"
        },
        "item": {
          "id": "1744ee46-5c8e-40bb-85e9-64f9bea37b9a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dcc9e16c-8790-4757-815b-be2946a66e40",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "d44c071d-c3cd-4d49-8115-b623eda6cb5e",
        "cursor": {
          "ref": "0b22704a-bcfb-439b-8fe1-0de417d2ee26",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c274e901-b673-4cd3-9296-379df4314012"
        },
        "item": {
          "id": "d44c071d-c3cd-4d49-8115-b623eda6cb5e",
          "name": "did_json"
        },
        "response": {
          "id": "5601b76f-a41a-4d65-96fd-4c3e346d3092",
          "status": "OK",
          "code": 200,
          "responseTime": 388,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baca2428-de4d-486c-b49f-2df5c48e5e19",
        "cursor": {
          "ref": "dd4e0e01-c645-417f-aeba-95d6aee0b347",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c9cd2e40-19a2-4ce3-bb9f-7a10e46e91fb"
        },
        "item": {
          "id": "baca2428-de4d-486c-b49f-2df5c48e5e19",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6c196f7-0197-459d-8056-137749e30934",
          "status": "Not Found",
          "code": 404,
          "responseTime": 764,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "baca2428-de4d-486c-b49f-2df5c48e5e19",
        "cursor": {
          "ref": "dd4e0e01-c645-417f-aeba-95d6aee0b347",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c9cd2e40-19a2-4ce3-bb9f-7a10e46e91fb"
        },
        "item": {
          "id": "baca2428-de4d-486c-b49f-2df5c48e5e19",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6c196f7-0197-459d-8056-137749e30934",
          "status": "Not Found",
          "code": 404,
          "responseTime": 764,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "49745b27-0063-444a-9259-74b5d31c3b2e",
        "cursor": {
          "ref": "65c979e7-64aa-4ecf-b3d4-2e451774bb05",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3cd78a5c-a920-477e-83d4-006ad2fc5985"
        },
        "item": {
          "id": "49745b27-0063-444a-9259-74b5d31c3b2e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0a990b31-8a11-46c4-b402-78cebf986ef0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa2d0c5-3f74-46f5-a976-52df89311911",
        "cursor": {
          "ref": "0340da9c-9dd0-41d7-a62b-e236730f211d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57ad65d5-27a0-4f28-bf8c-67f56cdb95ea"
        },
        "item": {
          "id": "caa2d0c5-3f74-46f5-a976-52df89311911",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d53cf328-f189-4bf5-8531-51913a60a9de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edd57e5-459d-46e6-aaed-f969a2785b9f",
        "cursor": {
          "ref": "eb21e654-c13a-4619-942b-1582b8934eb0",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56eb6260-40d5-4295-9759-bd97c4b26f08"
        },
        "item": {
          "id": "7edd57e5-459d-46e6-aaed-f969a2785b9f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b1bc4e6f-25d3-45b8-9c3a-1df3a2277347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4f698a81-cc12-4f90-9471-e2e637b6abe4",
        "cursor": {
          "ref": "f5b0871c-ceeb-45c3-885d-5373c6a9e2f0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73fb75f7-7ebc-42d9-bb3a-90cb5bc0908e"
        },
        "item": {
          "id": "4f698a81-cc12-4f90-9471-e2e637b6abe4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f2626b68-1f5a-4d86-901d-bbd6ec67c10f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4f698a81-cc12-4f90-9471-e2e637b6abe4",
        "cursor": {
          "ref": "f5b0871c-ceeb-45c3-885d-5373c6a9e2f0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73fb75f7-7ebc-42d9-bb3a-90cb5bc0908e"
        },
        "item": {
          "id": "4f698a81-cc12-4f90-9471-e2e637b6abe4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f2626b68-1f5a-4d86-901d-bbd6ec67c10f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "518a3b71-4c3c-4db8-b40e-7c74182cd084",
        "cursor": {
          "ref": "fa1a21fc-41b8-4756-8bf7-c2b8413b8aa2",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c85cabcb-7472-4385-b467-73b4caa7d6f2"
        },
        "item": {
          "id": "518a3b71-4c3c-4db8-b40e-7c74182cd084",
          "name": "identifiers"
        },
        "response": {
          "id": "0b5323ae-7ce8-4649-89ca-d44ad0a89d2d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6abed2-fc9a-4286-a2b4-c5ee71fa9479",
        "cursor": {
          "ref": "cc3bc37a-32bc-4c13-af90-c92ce35d944a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ecc021c-af02-4b89-abc5-2fafa776fa46"
        },
        "item": {
          "id": "4d6abed2-fc9a-4286-a2b4-c5ee71fa9479",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c2de346-bba6-4f70-8b7b-05ce7af48e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6abed2-fc9a-4286-a2b4-c5ee71fa9479",
        "cursor": {
          "ref": "cc3bc37a-32bc-4c13-af90-c92ce35d944a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ecc021c-af02-4b89-abc5-2fafa776fa46"
        },
        "item": {
          "id": "4d6abed2-fc9a-4286-a2b4-c5ee71fa9479",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c2de346-bba6-4f70-8b7b-05ce7af48e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d275e00-17c3-4284-9227-fa305ace7eca",
        "cursor": {
          "ref": "64e29e19-966d-4284-857d-5cedf9b9d65d",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4a1d2a41-14ec-44f4-bffe-8f8d742ff0a3"
        },
        "item": {
          "id": "1d275e00-17c3-4284-9227-fa305ace7eca",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5cf87156-475c-4dd2-ae86-4b6356c0b56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df2f268-63b6-4929-b1fc-be6d420703c6",
        "cursor": {
          "ref": "c4a004e4-2637-4cd3-af3a-d702da4c9b0a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3c523d16-06a3-474a-b0aa-f9a4c368055c"
        },
        "item": {
          "id": "8df2f268-63b6-4929-b1fc-be6d420703c6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fcc5b447-1375-48a6-8bbc-c1d1ea960210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf9de63-5d43-4b18-a73d-ab8a7a15237a",
        "cursor": {
          "ref": "d6be1b07-c71e-48a9-86d4-1f9eae51c4cc",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9d6a8654-33a0-45a8-821e-44676fe2fe94"
        },
        "item": {
          "id": "caf9de63-5d43-4b18-a73d-ab8a7a15237a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "59dea25c-27ce-468d-99d6-75442e883f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39816d98-1831-4328-ac1f-587146c65533",
        "cursor": {
          "ref": "1004a33d-b361-4380-9fab-73e462084868",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c9879a1a-f15b-404d-9707-9b45fff3985e"
        },
        "item": {
          "id": "39816d98-1831-4328-ac1f-587146c65533",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6a8b7176-f37f-4786-be45-d1bb9021649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a041b04-5a3b-45c6-8e82-29ad9091dbb2",
        "cursor": {
          "ref": "c51ca78c-6685-48a6-bfc7-9b50aae0edc0",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "952a3761-bc13-4e91-994e-64643e3b6695"
        },
        "item": {
          "id": "4a041b04-5a3b-45c6-8e82-29ad9091dbb2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "aa2689bb-1383-4dda-8d29-ab611d2765da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a651a07-4a7c-47a9-985d-f0ba88c64500",
        "cursor": {
          "ref": "8de75ff9-d83d-402b-bbf1-cba44e9dc379",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7b5b6726-db46-4097-a5a5-53a09316b651"
        },
        "item": {
          "id": "0a651a07-4a7c-47a9-985d-f0ba88c64500",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8ed9baa9-d93e-4eb1-8bdf-8c92b706c4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4837dd68-75bc-4a31-a7a0-c3c1e4680ce5",
        "cursor": {
          "ref": "65bb3e7d-d35c-4721-ae0c-8b628d0c69ba",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9ae4bd7e-77d4-4523-a3cf-0b1fb2b3541a"
        },
        "item": {
          "id": "4837dd68-75bc-4a31-a7a0-c3c1e4680ce5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "12ab52aa-bf2a-4e75-88de-eef696073d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c8e1f8-d1eb-4115-b2e3-46952ceba584",
        "cursor": {
          "ref": "ea7d9df2-b0b4-4498-9970-f21570abbae6",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "28760e42-3ab1-4308-89e5-863b08646317"
        },
        "item": {
          "id": "d8c8e1f8-d1eb-4115-b2e3-46952ceba584",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df17e5c6-475a-4f5e-932b-80026e186f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18e5d6f-c503-4ba4-b672-7fd699a40675",
        "cursor": {
          "ref": "63210f58-a3e3-4f1c-804f-340c797f3fab",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c87ee85a-c6c8-4277-9c02-55862771c1c7"
        },
        "item": {
          "id": "e18e5d6f-c503-4ba4-b672-7fd699a40675",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a71fa7c3-2c5b-4668-b98c-4e705db8a040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8705c817-ad55-4ad3-8167-2e6dff34ecb4",
        "cursor": {
          "ref": "4322f13f-d061-45db-bd3a-366437db6cd3",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f656f5c8-6aea-449c-bd84-9a538ccd6d74"
        },
        "item": {
          "id": "8705c817-ad55-4ad3-8167-2e6dff34ecb4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cceb1fbc-e1aa-4989-9ef2-f6e30000a67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3907ee53-ef06-423f-ab54-277db16c5a19",
        "cursor": {
          "ref": "53886090-f25a-4541-97b0-0ad5f1337044",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "abfdf358-3967-4797-b0ec-b4a40b02eb61"
        },
        "item": {
          "id": "3907ee53-ef06-423f-ab54-277db16c5a19",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "80ac111a-af09-4188-82cd-35dee6a22ad3",
          "status": "Created",
          "code": 201,
          "responseTime": 996,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3376a963-ea8e-401d-877c-0c06abf1db5c",
        "cursor": {
          "ref": "67cae0bd-fd70-4963-a896-45893445bf16",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "15fdb478-32cf-440f-a562-9bbe1ca67980"
        },
        "item": {
          "id": "3376a963-ea8e-401d-877c-0c06abf1db5c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "869d09d3-c1f7-4860-bc45-b2f4356000a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0930da1a-65fd-4d86-8d70-74c71d11023e",
        "cursor": {
          "ref": "f1bf36e6-2683-40a9-86b5-d3f3d5846b79",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5e374b06-2070-4775-b793-e9f16925567d"
        },
        "item": {
          "id": "0930da1a-65fd-4d86-8d70-74c71d11023e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d29853cf-8de4-49d4-8bc7-5a932820a4f8",
          "status": "Created",
          "code": 201,
          "responseTime": 4843,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5fad62e3-c14e-4a41-ae85-4977b324990a",
        "cursor": {
          "ref": "f8fdd107-a8e4-416b-ac98-5e6d6016a100",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "05da83f3-de8c-4e4d-9d79-5930360b5e5f"
        },
        "item": {
          "id": "5fad62e3-c14e-4a41-ae85-4977b324990a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1c346f1a-4bb0-4ac8-b42e-9e87a7f21ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69367a47-4dab-49f6-b60d-1ccdbdcc33a8",
        "cursor": {
          "ref": "e63d6f81-c697-46d1-ab45-b69983447ba6",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fc875a41-464a-42d7-bce8-000d312b5ba7"
        },
        "item": {
          "id": "69367a47-4dab-49f6-b60d-1ccdbdcc33a8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "90268c20-0cb4-474b-87ed-e3227d3f5cfa",
          "status": "Created",
          "code": 201,
          "responseTime": 4752,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6e4dd929-117f-4abe-ab2a-6867d02fd790",
        "cursor": {
          "ref": "8aedc6ae-1f08-46b1-8e54-1422844c592a",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8ecb1aeb-8d68-40d1-8f12-f563cd637d03"
        },
        "item": {
          "id": "6e4dd929-117f-4abe-ab2a-6867d02fd790",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2841803a-69de-4bc7-9d89-f2a028b1d3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d42cd1-9b15-4d0d-a03f-d2739f0b9abe",
        "cursor": {
          "ref": "a7b6a166-d55a-47db-bc8d-107283f80637",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d7aa304-c2ae-4030-b8b2-59a61ead2a6f"
        },
        "item": {
          "id": "78d42cd1-9b15-4d0d-a03f-d2739f0b9abe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b5e88925-6ebf-4060-8943-10e80c23f7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f676a262-4ab8-49da-8127-c187b5588950",
        "cursor": {
          "ref": "f82c21b6-fe1e-436b-8dc5-d35024e40591",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "525aedff-c451-482a-9ab6-4fa8b305ded9"
        },
        "item": {
          "id": "f676a262-4ab8-49da-8127-c187b5588950",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dfc9af72-3a4d-4543-aa22-233790db5a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f942583-9272-48bf-9fe7-a93cb8b4f338",
        "cursor": {
          "ref": "13cffc1b-1646-4377-8843-61c442d74468",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "af97affc-e89d-4d4b-84d2-48ae1a3b68d8"
        },
        "item": {
          "id": "2f942583-9272-48bf-9fe7-a93cb8b4f338",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a0817ff5-cdc8-4458-8017-72fda81c176e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c3ac78-3996-40ca-ba26-556112996091",
        "cursor": {
          "ref": "4f068275-5131-4cef-ba0f-0824a9081b11",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6953d521-f26f-48a0-b33d-192be54472fd"
        },
        "item": {
          "id": "80c3ac78-3996-40ca-ba26-556112996091",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "21972660-8245-4f39-a53c-448c0fc479cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc642bb-ab64-45a5-9c50-5f6b21fc4077",
        "cursor": {
          "ref": "4340eba5-4914-4fbb-9559-d312b532f5e3",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3d38fa21-bbb3-4f89-847f-6fb73c9f8b75"
        },
        "item": {
          "id": "1cc642bb-ab64-45a5-9c50-5f6b21fc4077",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4e2c7e23-c5c7-464e-95d5-1cff24b115fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc87cf7-8535-48e9-9618-17998fa59f4a",
        "cursor": {
          "ref": "587ea6fc-a88f-4ebd-9628-c1926ac86fa6",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cbf4f5ae-29aa-45f9-9f21-a919042e64c7"
        },
        "item": {
          "id": "2cc87cf7-8535-48e9-9618-17998fa59f4a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "21ec3cb6-7bdc-4a58-897d-01ba1789ddd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677697f8-ca40-4a46-92a1-ad44d7b479d9",
        "cursor": {
          "ref": "d5df71d1-658c-43f8-92ef-1f356e354d9a",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e2fb8755-be14-4a55-a7ce-45f42c8e9443"
        },
        "item": {
          "id": "677697f8-ca40-4a46-92a1-ad44d7b479d9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "56216c41-4e1f-4f21-a9bc-b63bf5267d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdf5d53-ed6f-4177-8393-d4dee3d26919",
        "cursor": {
          "ref": "2f63510a-3b10-477a-a854-3b3c7d31a46e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8f311796-072b-4418-9d80-6c8030003ab2"
        },
        "item": {
          "id": "fcdf5d53-ed6f-4177-8393-d4dee3d26919",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8a02db0c-b845-4140-b3c2-32fa6ac059e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bffd5e-7a09-4e0b-a32c-ec11775fc998",
        "cursor": {
          "ref": "bafca5db-2e80-4079-9108-7d0304a61427",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35c1ff1f-0fd2-461f-aaf8-14a7ff5fcdb1"
        },
        "item": {
          "id": "e0bffd5e-7a09-4e0b-a32c-ec11775fc998",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f7910aca-9f34-4795-a7cb-71f5bd8cf411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277041fb-1590-4563-b0d1-b237edf4ca09",
        "cursor": {
          "ref": "43e6c942-5aa5-425b-847d-615b5edf1a62",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2e42a716-8893-4e6a-ad0f-d1832fb5ad60"
        },
        "item": {
          "id": "277041fb-1590-4563-b0d1-b237edf4ca09",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2b7ddcae-fe00-4737-8020-e95e70cdb5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b247e5-af26-43a2-8d66-d5e46486ebcc",
        "cursor": {
          "ref": "e3df8cf6-0f92-4438-b2f9-eead13e60a98",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a91a7ca5-48e6-48f0-94d5-9680201c4a71"
        },
        "item": {
          "id": "46b247e5-af26-43a2-8d66-d5e46486ebcc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6bc02449-a3be-4aa4-b841-b1aaeaeedff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7ad6c4-fb07-4433-b58b-dec80c881db9",
        "cursor": {
          "ref": "a18bf746-5f95-4285-9c84-00f6e35f9796",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2890b267-06d6-4696-adb4-10d8a57e25ed"
        },
        "item": {
          "id": "0b7ad6c4-fb07-4433-b58b-dec80c881db9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "931a6873-7b92-4df3-9aef-c7c50b969bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cefd9e-8518-46bc-8e9f-3c15cd8cb885",
        "cursor": {
          "ref": "68b713fe-a301-4ca8-9838-7683b8352bc6",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c74af34c-4780-4c34-b0a1-1e947e5c9f83"
        },
        "item": {
          "id": "a0cefd9e-8518-46bc-8e9f-3c15cd8cb885",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "060a7e18-f2d2-4644-b8a8-3609a6d2ea95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b766474-be70-465e-baa5-2d809fdf01e2",
        "cursor": {
          "ref": "b1c841ce-b630-4b3e-af95-e636f33f1fd0",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b153e7b5-6272-48ce-9b51-2ad1a2f85cab"
        },
        "item": {
          "id": "8b766474-be70-465e-baa5-2d809fdf01e2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3f0bc459-fce9-4177-80cb-41b0672473f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cd39fd-4f13-4c47-a50a-0c210a2ca429",
        "cursor": {
          "ref": "5d21b2c3-16d0-4ab1-8392-5be2488d5357",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "34eb4c8c-2dd7-4011-9dfc-a4df1dd070f2"
        },
        "item": {
          "id": "a4cd39fd-4f13-4c47-a50a-0c210a2ca429",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a18024a3-65bd-4e44-a897-60ba6dd6bec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7224c055-b5dd-4177-9f67-7385704fbee6",
        "cursor": {
          "ref": "befa5203-7263-4d08-9e87-f705082ffc23",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9979e764-5215-4926-8f9b-ada3be6dcf90"
        },
        "item": {
          "id": "7224c055-b5dd-4177-9f67-7385704fbee6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f9665dc1-6f87-4faa-9458-31522401fbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d57b53f-bf78-4561-9318-159f6b1dbd0e",
        "cursor": {
          "ref": "a1f8b193-31cc-4353-8943-1178d45beb8e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "db157a50-1c78-48db-9b52-b76732053efa"
        },
        "item": {
          "id": "1d57b53f-bf78-4561-9318-159f6b1dbd0e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "70db7d35-3925-41bd-828c-67247f72ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5703339-5d6c-4c82-9afe-f527efb38405",
        "cursor": {
          "ref": "43961944-d057-4570-8392-2bc82269ce7c",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "65808778-b56b-42ae-8360-ddcd17b397d6"
        },
        "item": {
          "id": "b5703339-5d6c-4c82-9afe-f527efb38405",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e6d8a6dd-9802-445d-873c-3e0676700729",
          "status": "Created",
          "code": 201,
          "responseTime": 2837,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a2ad24a2-0e9b-4787-9f08-976c2a5972c8",
        "cursor": {
          "ref": "5acfb458-41aa-4b1d-a054-4ef33ff8bb0e",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c20b5069-6f5f-49ca-aa96-8b399be5c8d7"
        },
        "item": {
          "id": "a2ad24a2-0e9b-4787-9f08-976c2a5972c8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f72c773d-bfb9-4638-a4a6-3885829a9c62",
          "status": "Created",
          "code": 201,
          "responseTime": 2686,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0c95ac05-44e5-41ac-ac27-a752b525ce85",
        "cursor": {
          "ref": "596f14f8-c9b6-4cf1-acf7-f10fcd2d0d35",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e4ca83bf-b62e-4ae0-bc4e-ccc8e711fb2c"
        },
        "item": {
          "id": "0c95ac05-44e5-41ac-ac27-a752b525ce85",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2356a7f8-3706-40ff-880e-67190eb10434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83012a49-4634-453d-9a83-7cbf7f064d23",
        "cursor": {
          "ref": "22180946-0736-4b85-bae2-6f7772a12944",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "513da5d5-c683-470b-9743-862f4167447e"
        },
        "item": {
          "id": "83012a49-4634-453d-9a83-7cbf7f064d23",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2a59bb26-3697-45bf-9c2d-f3cae681c64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385970c8-3f2a-48c2-8f77-c78e77f0ab0a",
        "cursor": {
          "ref": "09d436f8-f2a9-4563-bc68-0cf3186905f5",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bf832619-eb0a-48d8-bc62-b26a0e08c63e"
        },
        "item": {
          "id": "385970c8-3f2a-48c2-8f77-c78e77f0ab0a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "04317ccd-17e0-48b3-a3ab-34f855991bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aede44d9-c943-4710-bb8e-44b233168d1b",
        "cursor": {
          "ref": "23d91be7-064b-40be-909e-d3d1d4701efa",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6eeb1562-21f0-4d6b-89b5-093cbf8b5175"
        },
        "item": {
          "id": "aede44d9-c943-4710-bb8e-44b233168d1b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "93b0fe2f-5b76-421b-b68a-02234670ece6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f07f12-d7e8-42b6-8338-ed5f6d224d58",
        "cursor": {
          "ref": "dc461087-752c-43ca-8791-04d484d3e231",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a4bbff69-30e6-414c-b4f2-27b980e35281"
        },
        "item": {
          "id": "75f07f12-d7e8-42b6-8338-ed5f6d224d58",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fe81f7ba-388e-43d8-9622-16490dd399a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329c8691-9838-4701-9551-6b163d6c538f",
        "cursor": {
          "ref": "ca7720fa-8686-40c6-b4c2-ad6c2a31479c",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bbd0134d-8e55-4694-98ba-866b62b73d01"
        },
        "item": {
          "id": "329c8691-9838-4701-9551-6b163d6c538f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dc2a06b8-27a3-418b-9b4b-0c8db07a3d08",
          "status": "Created",
          "code": 201,
          "responseTime": 2632,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d52162fa-f476-4ed1-9f89-3e45a949ddcf",
        "cursor": {
          "ref": "8260612c-a44d-4b81-bdef-1d78b904d566",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4e08dba2-5712-496f-b53b-8e4427ab0129"
        },
        "item": {
          "id": "d52162fa-f476-4ed1-9f89-3e45a949ddcf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3c5bb23-8638-4dde-a119-0957089ce89a",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "83e285bf-c733-4837-9dfd-5c1767f91405",
        "cursor": {
          "ref": "1f5df710-a8d9-4811-8d8e-2539bfed0d56",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e99a355b-2848-427f-a896-741841ca3358"
        },
        "item": {
          "id": "83e285bf-c733-4837-9dfd-5c1767f91405",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "60ce81be-86e8-42fb-abb6-f8d32d909190",
          "status": "Created",
          "code": 201,
          "responseTime": 2248,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8628d59d-7532-4eeb-8680-0536e4d563c8",
        "cursor": {
          "ref": "6cca95f9-8a47-4da3-8aa4-9c420c649d35",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a484d86e-65f4-4211-a31a-3f7ec90bd58c"
        },
        "item": {
          "id": "8628d59d-7532-4eeb-8680-0536e4d563c8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "98939197-a94d-4a25-bc3f-cd7798eaf0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbdda6a-084f-4fa9-becd-7fac90f2c760",
        "cursor": {
          "ref": "9877911d-3f90-4566-9a45-e984f17d757b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "23ce5301-81a1-4c62-88fd-0e17aace09ca"
        },
        "item": {
          "id": "adbdda6a-084f-4fa9-becd-7fac90f2c760",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1a0be717-e4f1-4fd7-90a4-d0fd9029c980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0669e2f-410b-4eb0-836f-28816a79aa48",
        "cursor": {
          "ref": "2415ea40-4acc-496b-90ee-0d8f6479e9b3",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ceb215af-d52d-46d6-b276-ab835d2ec6af"
        },
        "item": {
          "id": "d0669e2f-410b-4eb0-836f-28816a79aa48",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6e003d24-57af-4b45-8208-016de3448b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5643d23f-c6e2-44e2-8033-ff2622de3325",
        "cursor": {
          "ref": "542a4913-a774-4ad5-8cb2-c7f7c4122668",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0eb15ee0-1db3-4c30-b36a-4af96342e248"
        },
        "item": {
          "id": "5643d23f-c6e2-44e2-8033-ff2622de3325",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2b293534-1e9e-43cf-9e33-09802cd56985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494a5fbc-d048-49af-a277-086867b8f876",
        "cursor": {
          "ref": "b63b4446-f01a-4cf4-87a0-0ff5008e6a8a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "06bf9a24-9d2e-4d4c-a3ff-47186f74a63b"
        },
        "item": {
          "id": "494a5fbc-d048-49af-a277-086867b8f876",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "86fa01ef-20b9-43b6-85d2-5ce3b0f037c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4a9c73-6d49-4034-8611-565169feaa28",
        "cursor": {
          "ref": "9552c28c-4d17-473b-a7ab-9aa8f924e39a",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "98ae38b1-c8ee-464e-9aa5-ed2ff6465a86"
        },
        "item": {
          "id": "bb4a9c73-6d49-4034-8611-565169feaa28",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b347d42a-68f2-40cb-9c45-bcd9032766d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b57b7a2-1cde-45b3-ba78-1de4016952a4",
        "cursor": {
          "ref": "a39d22bc-5e2c-4893-ae6d-9572928aa736",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e29cade5-b626-4c7b-be43-e36064ac4694"
        },
        "item": {
          "id": "0b57b7a2-1cde-45b3-ba78-1de4016952a4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f8d42d76-d739-46ac-a325-2211490c6591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256a56e4-ca12-4342-b9e6-72e7a2c2f412",
        "cursor": {
          "ref": "bcd5604c-7b68-444b-a3cd-32de13dac462",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2ef94eec-75ce-4288-8df3-096a87879d71"
        },
        "item": {
          "id": "256a56e4-ca12-4342-b9e6-72e7a2c2f412",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "96ed8738-e142-41f9-835c-d280bd98742f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d5c31c-e724-45fe-91b1-4eed4eb92377",
        "cursor": {
          "ref": "4165d4a2-82f9-4054-977b-ca7121fcaa80",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7a983aae-afbd-477d-af06-d96eaa69d403"
        },
        "item": {
          "id": "a5d5c31c-e724-45fe-91b1-4eed4eb92377",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c4d7784c-2e0f-424c-ae96-128ceda4aec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01a3a86-b376-496f-993f-ed7e584394f4",
        "cursor": {
          "ref": "18ef1be9-6ffb-4d49-9df3-1d0c6ae6e2f1",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dd1b66aa-fca3-4544-912c-367f3b9cee81"
        },
        "item": {
          "id": "e01a3a86-b376-496f-993f-ed7e584394f4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1d09422b-e239-44d5-801c-a8ed9ac28cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9ac46c-66ee-4eec-a63f-5d083b881fbf",
        "cursor": {
          "ref": "1e389242-286f-4702-a886-6090e69b0e76",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a838cbde-1714-4251-8cfd-41cd6743343b"
        },
        "item": {
          "id": "2a9ac46c-66ee-4eec-a63f-5d083b881fbf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2962694d-c0fa-484c-993d-5ca2c47d3c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c88cc4b-f190-48ed-8989-a633b2e12aba",
        "cursor": {
          "ref": "fa2f6327-bc66-497d-81df-c889e969d5dc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7629c1de-ac46-4592-b43b-8f5054c390a5"
        },
        "item": {
          "id": "0c88cc4b-f190-48ed-8989-a633b2e12aba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cc3da25f-5641-4ff8-9ba4-ac269d2a7734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9d2bd9-2f20-4d8e-805e-4338b800d752",
        "cursor": {
          "ref": "814f5843-5c00-4dc1-8d23-4e935cafa72c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fb04a48c-5bd8-4294-81b2-0e2a5131df4c"
        },
        "item": {
          "id": "5b9d2bd9-2f20-4d8e-805e-4338b800d752",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "50159238-9b87-44b5-8e3e-98a120c2afca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504910b9-c685-4a28-a5b8-19ea29e057aa",
        "cursor": {
          "ref": "97f2122d-8d84-41df-9b8b-b58933cdba12",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fa365d34-bb6a-499c-8966-63f1d4bc423e"
        },
        "item": {
          "id": "504910b9-c685-4a28-a5b8-19ea29e057aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0c6fff67-f2eb-4334-afdc-c5982e9ceccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57ea735-cc17-4d15-9ba8-60f0b769831a",
        "cursor": {
          "ref": "e7467fcc-965e-43ba-8c4b-caf68711011a",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fec7728d-2a3a-457e-8126-6d4ceb1c068e"
        },
        "item": {
          "id": "e57ea735-cc17-4d15-9ba8-60f0b769831a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ebf20033-45c8-424f-8d52-b1ee1732c28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c555873b-9000-4c0c-bc09-364d2d98aded",
        "cursor": {
          "ref": "d1f3058b-1b96-48d1-8f85-973a0ff8b0ca",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5a21ea5a-d945-483d-89a6-ed6a4d43fd6e"
        },
        "item": {
          "id": "c555873b-9000-4c0c-bc09-364d2d98aded",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ebdd8909-fef6-4c92-9404-bb8344f8356b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608a837c-8afc-4097-8f54-d34c6a2157eb",
        "cursor": {
          "ref": "259b329c-1fbf-4909-aaa2-a4a7666fb268",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3fe5e738-b265-476c-8677-6ed4582db3d7"
        },
        "item": {
          "id": "608a837c-8afc-4097-8f54-d34c6a2157eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fac74ffa-5998-4239-b860-57a8bcd185b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae86abc-d639-4351-a34b-c96c032ce8f7",
        "cursor": {
          "ref": "40de5c97-257b-429e-887c-80b5c217a7bf",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7add4e24-93eb-49cf-a29a-105453485ea0"
        },
        "item": {
          "id": "3ae86abc-d639-4351-a34b-c96c032ce8f7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "aa9ad1f8-7ad6-47e6-881d-838ef5899f22",
          "status": "Created",
          "code": 201,
          "responseTime": 2752,
          "responseSize": 979
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "642222de-faea-4ebf-bd1c-972649974aaf",
        "cursor": {
          "ref": "cc9c8c52-6daa-4bba-9497-a3664550c1af",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a7a99ffe-add0-48a1-8477-d8dd16957564"
        },
        "item": {
          "id": "642222de-faea-4ebf-bd1c-972649974aaf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "62d4868d-9376-472d-bdb1-6a69afb35bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a756966-f4c6-43a2-8e04-44006a2f455d",
        "cursor": {
          "ref": "3330ca85-d6f0-464f-9947-d3741fa26e68",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ff411dab-837a-477c-815e-f0ae5aa62e2c"
        },
        "item": {
          "id": "7a756966-f4c6-43a2-8e04-44006a2f455d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3d235aab-b100-4175-9047-24c5b12db009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925751d1-c3d9-4f8e-96c5-4814d3185155",
        "cursor": {
          "ref": "9b15a2f3-2ee9-44ee-83b1-e07d15b4d88f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "49f037f5-0880-4a1f-9e74-5d22d9507fe8"
        },
        "item": {
          "id": "925751d1-c3d9-4f8e-96c5-4814d3185155",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "064453a3-4879-4c66-b9e1-bc6688359771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb9335d-7c3a-4e06-88d0-f2808178cee8",
        "cursor": {
          "ref": "0d7c98d7-d6c1-4c67-98b2-5e6e31a43a1f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "41c1898f-afac-40df-b8c4-8f3c8968f5c0"
        },
        "item": {
          "id": "9cb9335d-7c3a-4e06-88d0-f2808178cee8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6167c523-ca8c-4807-9351-406af59df865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8830ef78-4d5c-4be6-a39c-34b89c9d6d8e",
        "cursor": {
          "ref": "ec2aabb2-575d-485f-9662-a0161460d1c9",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3aca7c2d-ccaf-43ac-be40-fd65a2d9400a"
        },
        "item": {
          "id": "8830ef78-4d5c-4be6-a39c-34b89c9d6d8e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "201c9862-e35e-46c1-b24e-b87047fe0803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64cd468-cb77-4020-b706-fba7676df5d6",
        "cursor": {
          "ref": "a3e46774-f46b-4ffd-8ed5-efc946a66f0c",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dcf31b3b-7949-4a50-bebd-4d0d276d150f"
        },
        "item": {
          "id": "d64cd468-cb77-4020-b706-fba7676df5d6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c7dd4f03-ae36-42e2-a539-fdf723c9dca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1237325-77ae-42d0-a72f-8e877f4c6218",
        "cursor": {
          "ref": "fbcdecf5-a401-493c-9a19-78c8efe98d0b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "94bf3a58-0f1d-4899-b52e-951775c5a30f"
        },
        "item": {
          "id": "a1237325-77ae-42d0-a72f-8e877f4c6218",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "35f60eff-2479-430c-8fec-ea8fd3acb7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af4106b-b149-4124-819e-fc86d6ddcd22",
        "cursor": {
          "ref": "19616a81-0b21-4bb8-ae4d-0d400a67fe90",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a9a5e407-d90c-4604-83de-ab2fc7ab14f0"
        },
        "item": {
          "id": "2af4106b-b149-4124-819e-fc86d6ddcd22",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "25d0d1e8-6579-454a-bddb-ef8947acf6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2789b0cd-661c-4f14-980f-94f25f534216",
        "cursor": {
          "ref": "9a8f73be-705b-4f4b-baac-c78bed6d5c07",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d02e3acc-6e6a-4426-be3e-ce98e5590b19"
        },
        "item": {
          "id": "2789b0cd-661c-4f14-980f-94f25f534216",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a61e5a53-4c04-4b7d-8664-5101688c0b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf76a008-788d-4383-a778-cbb87d39c29f",
        "cursor": {
          "ref": "6449d2db-7f48-4b89-9948-7e4da5756d9e",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8be51a2d-4848-4790-85e5-429302a5251c"
        },
        "item": {
          "id": "cf76a008-788d-4383-a778-cbb87d39c29f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1f824135-c593-40cc-8f5e-b747f3facd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ea96a0-b3eb-4644-835b-5c5ace7654b1",
        "cursor": {
          "ref": "001707d2-d86e-4fed-9d81-2031553fc8bd",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5afe46d2-2676-40c7-be55-e3e9bcac5642"
        },
        "item": {
          "id": "a9ea96a0-b3eb-4644-835b-5c5ace7654b1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b608182b-2b18-49c3-8acb-e6524cb970d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5b1357-b269-4ca6-891f-af717c846eef",
        "cursor": {
          "ref": "b042a6b1-546d-4c30-b93f-d2eee128105b",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4f867e46-61fa-426f-a169-adfa4d1c2c38"
        },
        "item": {
          "id": "ed5b1357-b269-4ca6-891f-af717c846eef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1b0a49c5-4aed-43d6-81e6-7aeafa3ce326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195e42ed-ec45-43cb-941b-cb73d491cbd7",
        "cursor": {
          "ref": "fa39729d-dc90-45b2-8200-ca0513c10ea6",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "22f12b5f-243e-4185-ade2-728c780c8071"
        },
        "item": {
          "id": "195e42ed-ec45-43cb-941b-cb73d491cbd7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fac7c973-fdbd-4ac8-a993-7c952d8708ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f59d012-2d68-45b7-8415-5f03fa111e7f",
        "cursor": {
          "ref": "72772955-ede0-44df-a0fc-91b4d762b982",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "26620cf1-1453-43cc-a890-677c50ebf1b0"
        },
        "item": {
          "id": "9f59d012-2d68-45b7-8415-5f03fa111e7f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d3833a09-ef59-4cba-81a9-a39e8b4d95a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c743a8a5-8f3f-4726-bcf6-eeded764fb2f",
        "cursor": {
          "ref": "2779e7df-d9e4-417e-998b-ddfb61de3e83",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "81bf362a-41b2-43a9-9410-003f34249471"
        },
        "item": {
          "id": "c743a8a5-8f3f-4726-bcf6-eeded764fb2f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c39fe3a0-19c5-4726-b19f-85e7c321eefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb52ce1-ea5f-4293-93c6-3aa5baf78525",
        "cursor": {
          "ref": "8f215b4e-c296-4c34-98a1-f05ea9349415",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3fd89e9a-d18a-471e-bab0-c27601feddc8"
        },
        "item": {
          "id": "7fb52ce1-ea5f-4293-93c6-3aa5baf78525",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "537072b7-c4d7-4bd0-a4b4-ee63cd9e7895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f00a8a-388f-4d2b-ae45-faf8d9d96d47",
        "cursor": {
          "ref": "65cd2413-f611-4cd6-badc-f8411d78971c",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ae36606e-c3a6-4b4d-b51c-4089f89e36d7"
        },
        "item": {
          "id": "c2f00a8a-388f-4d2b-ae45-faf8d9d96d47",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4b8c30b9-9338-4e50-ad87-12fdb3557957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b55d80e-f692-46ec-bd0f-76007b07b20a",
        "cursor": {
          "ref": "10d91c61-663b-4ab9-8e65-511d943a3988",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "28a86b51-31a2-499b-bd81-a04cbd9c4ca5"
        },
        "item": {
          "id": "9b55d80e-f692-46ec-bd0f-76007b07b20a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6ffd4a0f-ab39-4c76-af64-841f05525c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8faf6a-8af2-4c58-b59d-0413600a22d8",
        "cursor": {
          "ref": "39fecb00-f8d2-46a8-b767-884cc501b802",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "95286757-18ff-45fe-95be-abdaa3675ded"
        },
        "item": {
          "id": "6e8faf6a-8af2-4c58-b59d-0413600a22d8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "48ec1f42-f4c0-4448-9247-1ec0c8ca25a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4ba756-0c2a-430c-922d-c862979ea343",
        "cursor": {
          "ref": "2ba930bb-07c3-436b-b047-bb2a392c72fa",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "00065f61-2caa-430a-be5c-6217b92ee899"
        },
        "item": {
          "id": "ff4ba756-0c2a-430c-922d-c862979ea343",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bd168dc2-b647-499b-a54b-078f6145af35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a7f006-177c-4ab9-8ad6-25deadade530",
        "cursor": {
          "ref": "1d950a5b-7f41-4f25-9300-9a7edf675917",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "46fea65e-1032-4a20-9a5f-44d9da01f7f9"
        },
        "item": {
          "id": "06a7f006-177c-4ab9-8ad6-25deadade530",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ab5951f5-7891-487d-90e3-205f8f303666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd240551-a8bd-45f2-a4a9-d8a052cdacb7",
        "cursor": {
          "ref": "80629f84-ca8c-4db0-b8ca-6382e3969429",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "222c556f-c6d5-41ba-8d4a-5a123a6b4498"
        },
        "item": {
          "id": "dd240551-a8bd-45f2-a4a9-d8a052cdacb7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "deff16b3-ce51-4a3d-8f8f-fb43f99a0327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a20d27-c818-4c07-ac53-05b666e5adea",
        "cursor": {
          "ref": "35c129eb-8ebb-44a8-950e-ac5196ebefed",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6ffecfb9-1e24-411f-af56-0a2ceeb18e89"
        },
        "item": {
          "id": "d0a20d27-c818-4c07-ac53-05b666e5adea",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3c173832-dc38-4130-8470-6732b79bf499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa082319-a1d3-42ed-b797-0f2476f4bca5",
        "cursor": {
          "ref": "e9237c31-1a4a-4f02-a942-283d3d75845e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b3c0ea89-e04b-4b1f-818d-435f2130006a"
        },
        "item": {
          "id": "fa082319-a1d3-42ed-b797-0f2476f4bca5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cff3960b-216f-4b65-a0fa-ad8b43f3782e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79f6dc5-03ca-4b46-a71e-dba9a752769d",
        "cursor": {
          "ref": "7b8b706e-879a-4774-a0ad-b1ae47da97d2",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c959389b-68f9-4d90-82fc-e1c9f7cfb76c"
        },
        "item": {
          "id": "c79f6dc5-03ca-4b46-a71e-dba9a752769d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "eb676715-232c-445a-81ea-fe7832d7f527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e404c14-8571-47a4-b0e6-f9ec466f0010",
        "cursor": {
          "ref": "eaa691bf-ac9c-4059-b631-48d384c7e9d7",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ffe1f864-d9d1-4251-8e75-18f336d442ac"
        },
        "item": {
          "id": "4e404c14-8571-47a4-b0e6-f9ec466f0010",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d4a70118-82d4-439d-b51b-9704733d5018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ee9f3b-d027-4c96-81ce-2f8f66028cb8",
        "cursor": {
          "ref": "c26f4548-10b7-448a-b84d-5a9853d04e0b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2220fcec-6c92-47dd-a52b-0e6372ac228e"
        },
        "item": {
          "id": "a0ee9f3b-d027-4c96-81ce-2f8f66028cb8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "21de2b1b-4668-4dc5-aefc-b8f65c107bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9eb260-27b0-4c14-85fc-f8ad4486c401",
        "cursor": {
          "ref": "d35b61bb-f64c-47af-bf0c-e3c74c3b2b4a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2b673276-4f89-4a2a-9a96-495a53688999"
        },
        "item": {
          "id": "7d9eb260-27b0-4c14-85fc-f8ad4486c401",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "61af5aec-d344-4d02-a228-bb020ce383fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30066f8-db08-4bc8-8d40-07ae6bcd987e",
        "cursor": {
          "ref": "69b08f64-cc4d-4b12-92a5-9bd0d9075e5b",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "54f296d0-0c17-4d76-a876-76a215e86650"
        },
        "item": {
          "id": "c30066f8-db08-4bc8-8d40-07ae6bcd987e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1262375e-37c8-4392-a606-b61d3f1527e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ac3e89-79c8-4664-9030-fb564804074f",
        "cursor": {
          "ref": "20e8dba4-6b97-4bc3-969f-1b035fcfbac8",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7b90e55b-6409-43b6-8b50-89693f421bc0"
        },
        "item": {
          "id": "06ac3e89-79c8-4664-9030-fb564804074f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "aea50743-11ac-4ba0-b3ad-fd1441484045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3eed8c-43b4-4d23-b3ad-85f294f86bad",
        "cursor": {
          "ref": "3b60c7f8-f367-4d24-aca5-7ba8f2d10329",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e8a8e7f5-bedd-4c9a-914f-0a02e4eaea98"
        },
        "item": {
          "id": "db3eed8c-43b4-4d23-b3ad-85f294f86bad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "45d7147e-0afa-464e-bd6e-6db372c6b3ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "13f0ee6d-236f-4359-8672-ba1e1c81529c",
        "cursor": {
          "ref": "dc83d67e-ae8e-4a11-9d01-aac48a3d15e6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e59283f1-4dbc-4a03-ba65-b1680b95afb5"
        },
        "item": {
          "id": "13f0ee6d-236f-4359-8672-ba1e1c81529c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f6ea364f-b0c1-4356-b0e8-e957caa4467e",
          "status": "Created",
          "code": 201,
          "responseTime": 2061,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9a8527cf-7f65-4410-8fac-5d0cea560a68",
        "cursor": {
          "ref": "4b652742-a551-4649-9212-e3bfbbe848e3",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "490e6858-c815-4b8e-871d-21e67a0756c5"
        },
        "item": {
          "id": "9a8527cf-7f65-4410-8fac-5d0cea560a68",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0c4d91aa-75a6-4207-b639-b6f920452a85",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d3a314-9151-450a-9cae-2b71a1964a94",
        "cursor": {
          "ref": "b5ba747e-805f-4eed-8bb5-19f882945c49",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "431e0a6d-4a8f-4242-b685-5256b78798be"
        },
        "item": {
          "id": "53d3a314-9151-450a-9cae-2b71a1964a94",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fa5101e9-73f6-46d6-a280-c7256afa108a",
          "status": "Created",
          "code": 201,
          "responseTime": 2741,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90fd494-75ce-478b-a9ce-e1c5f46dde33",
        "cursor": {
          "ref": "8facc946-b7a1-41e4-ba09-de8c542a6e06",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fa5d8b78-2433-4952-8101-9cf1f4492f15"
        },
        "item": {
          "id": "b90fd494-75ce-478b-a9ce-e1c5f46dde33",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "44e2b712-a5e5-4bcf-b6f6-094d09a7c30b",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e302f1-73ff-486d-bb83-537f064599b7",
        "cursor": {
          "ref": "bdf6a72a-4667-4a1d-8f17-11efc0b62311",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ba1c7143-737c-4ba6-8e98-26f5b3ba3227"
        },
        "item": {
          "id": "17e302f1-73ff-486d-bb83-537f064599b7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f2c80cdc-7560-47ac-9c01-ac5a6c653c0c",
          "status": "Created",
          "code": 201,
          "responseTime": 2779,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfebb86-ed24-4a27-b38c-92024d85b1da",
        "cursor": {
          "ref": "9d7b744a-2df8-4a78-b610-5ad249b81412",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af837838-3dd0-4c90-82ca-4894e37ea5ab"
        },
        "item": {
          "id": "2cfebb86-ed24-4a27-b38c-92024d85b1da",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8d663334-5df1-4de3-bdbf-263cb3c8c4cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2315,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-27T00:38:19Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-27T00:38:19Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "338c66d3-85cf-41c6-b4ee-7f8049e24bcd",
        "cursor": {
          "ref": "1f69c347-18d8-4123-bf24-0989e7a1c115",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8af2b53f-21af-4cab-afb3-b676f2a10ffe"
        },
        "item": {
          "id": "338c66d3-85cf-41c6-b4ee-7f8049e24bcd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5463006d-8548-49aa-8e1a-458b672f6965",
          "status": "Created",
          "code": 201,
          "responseTime": 2236,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5fc527-c6b9-40da-91ed-ccbd25ea8815",
        "cursor": {
          "ref": "9e68c40c-6d90-488b-befa-b673d4c1e73a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "59d4ee92-af6f-43fd-9856-02c3482d438b"
        },
        "item": {
          "id": "3a5fc527-c6b9-40da-91ed-ccbd25ea8815",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fcd39e5b-bfbf-4be8-81f2-8b5ff7c92c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5fc527-c6b9-40da-91ed-ccbd25ea8815",
        "cursor": {
          "ref": "9e68c40c-6d90-488b-befa-b673d4c1e73a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "59d4ee92-af6f-43fd-9856-02c3482d438b"
        },
        "item": {
          "id": "3a5fc527-c6b9-40da-91ed-ccbd25ea8815",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fcd39e5b-bfbf-4be8-81f2-8b5ff7c92c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892e4464-8e0a-4495-90a3-da19df695a83",
        "cursor": {
          "ref": "9763d84d-b6ea-4c69-852c-3413531021f1",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "aafd15e0-ea8e-472e-8356-72e65bfd91a1"
        },
        "item": {
          "id": "892e4464-8e0a-4495-90a3-da19df695a83",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "91da4112-1f83-45f5-a4e4-b1ab06c90c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7aeea7-25a8-4c77-9101-858d8a93851c",
        "cursor": {
          "ref": "47af8808-1963-4bca-811c-2a78cff90b09",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "29619bb7-3ba4-4b45-9140-26e3f14baabb"
        },
        "item": {
          "id": "ca7aeea7-25a8-4c77-9101-858d8a93851c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8acf7945-f113-4544-bcc5-b233ff7e3592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d931f2f4-172c-47d5-9908-1e0ba5bf88d1",
        "cursor": {
          "ref": "6522e9b0-4f9e-4f0d-bfce-e8be0c0636f2",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "752746b4-c095-4ee3-9168-77610a28a5d6"
        },
        "item": {
          "id": "d931f2f4-172c-47d5-9908-1e0ba5bf88d1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "82bc77da-3ca8-461f-9e89-8e6239570add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc771a0-f898-4207-b96c-67a106d26aee",
        "cursor": {
          "ref": "3957bd82-9ab0-4122-b2b2-c5d12f27a137",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "669bb1a8-3455-41b1-910d-929a17db73c3"
        },
        "item": {
          "id": "abc771a0-f898-4207-b96c-67a106d26aee",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a78bed22-bd5f-4910-8bb0-04f6ecd253df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d923d52-8d7f-4b27-ba0f-49de82cdc2b5",
        "cursor": {
          "ref": "23725cfa-dca2-4921-ae69-89ca97fe50e7",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2c9accda-b4f8-4c5e-8f71-0e4f8e67bb1b"
        },
        "item": {
          "id": "9d923d52-8d7f-4b27-ba0f-49de82cdc2b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9e738338-02f7-48b2-aa6f-9c8dc1860cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d5163a-d45e-4a26-bc30-db5ebff0e482",
        "cursor": {
          "ref": "0a1a1141-7df2-4949-8288-d84e9874403a",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7b66ec47-4bae-4b72-abc5-eab1ed023a1b"
        },
        "item": {
          "id": "c8d5163a-d45e-4a26-bc30-db5ebff0e482",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "91a2f25b-05c7-4539-8332-7285bec61583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2460dd95-6f64-498b-b329-a07698acd504",
        "cursor": {
          "ref": "2aa31dfa-74f2-4f2e-abfc-7bc321c1cdec",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a9decdd8-f8df-468b-8f90-ea14d4c458a2"
        },
        "item": {
          "id": "2460dd95-6f64-498b-b329-a07698acd504",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6da02e31-1cbb-4994-8ce0-7cc748d085d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc75b7f5-2290-4478-9145-cd6548290c57",
        "cursor": {
          "ref": "58ad3b9f-7424-40f2-922e-f7885ac3a273",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e9125e79-2cf2-4c3f-9d01-be9aedbc32bf"
        },
        "item": {
          "id": "bc75b7f5-2290-4478-9145-cd6548290c57",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "80755a4f-76b0-488b-a1a1-59fb78ca1ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c09124-f3ec-4146-b937-b0907ff8bc68",
        "cursor": {
          "ref": "f7820cd8-88f1-472d-a5e2-0eecd6844155",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a4ef06e5-aaaa-4fc9-bc05-434e1319a1e8"
        },
        "item": {
          "id": "b9c09124-f3ec-4146-b937-b0907ff8bc68",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b43aae16-8017-4287-b3bd-afb7e146e720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c14c36-8d01-481f-af19-87d91a4fe471",
        "cursor": {
          "ref": "9564cff0-e6fa-4bd2-8707-15e36fd11109",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d5c2f43-0e7f-4af7-9b9c-353332797dd3"
        },
        "item": {
          "id": "b4c14c36-8d01-481f-af19-87d91a4fe471",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "390789fc-f70a-4ce7-8469-7e801b0553d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e92a50-3ddc-431f-8750-6768de95cb1f",
        "cursor": {
          "ref": "7e46bd1c-3b10-4159-9744-383c76f18b67",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9fa78215-b5e6-40fc-8d98-c896e492bf38"
        },
        "item": {
          "id": "55e92a50-3ddc-431f-8750-6768de95cb1f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b5e95873-0fac-40a3-a8ad-afde6dfddef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365f1c42-bdbb-412f-9a8c-79a743048095",
        "cursor": {
          "ref": "e79c3c78-5604-47b7-8ed3-21b51803a8fc",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cc0391da-5ff5-4b40-937a-0702788aab2e"
        },
        "item": {
          "id": "365f1c42-bdbb-412f-9a8c-79a743048095",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "874ec751-ace7-4ed7-88c1-d8467d9a7aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4d715f-1ca6-4ad1-85a2-4f1331632f20",
        "cursor": {
          "ref": "f6cdac77-ee68-48f1-92d7-c863ebdab711",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "96f57e5e-84bc-4439-96dd-67059aafd935"
        },
        "item": {
          "id": "7d4d715f-1ca6-4ad1-85a2-4f1331632f20",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7dbac289-89d9-4bae-b5cf-d11d954df802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c41aa2-0d30-4c06-9afd-7cdef01bb529",
        "cursor": {
          "ref": "1d6557d5-9dde-4366-a58c-8c5fe4797eab",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d53ac58a-ed3b-4bab-9f10-65b18024bdb7"
        },
        "item": {
          "id": "a6c41aa2-0d30-4c06-9afd-7cdef01bb529",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4d218685-37bf-45c6-8fa4-bd3597c82594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163023e4-7a59-4a24-9c6b-d8697a17c46b",
        "cursor": {
          "ref": "b345764b-42ce-470a-84f8-cdfa502c7c44",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7679f57e-f255-4d0d-89c6-f40a744227ee"
        },
        "item": {
          "id": "163023e4-7a59-4a24-9c6b-d8697a17c46b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eb6238ee-5420-4bc6-96ab-9b4feab9b327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99711710-49a9-4676-8a7d-bccb1f7a46e4",
        "cursor": {
          "ref": "12087697-f77c-42c2-b118-397f1775f307",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8e197222-c312-4dcf-9d5f-178a791bc9ad"
        },
        "item": {
          "id": "99711710-49a9-4676-8a7d-bccb1f7a46e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8cfbc913-1b46-45f1-9b85-4002c55ac868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da74e6b-20f1-4971-885f-e501f5d048f9",
        "cursor": {
          "ref": "8af27b0e-d686-47de-a98a-895cea76d8a1",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a4a8f45a-3f0e-40af-bd24-54cf18f8334e"
        },
        "item": {
          "id": "2da74e6b-20f1-4971-885f-e501f5d048f9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6ac6dbd7-829c-4286-b205-d2793fe5143c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4788079c-f8fb-4863-b1ca-5a234dd3172d",
        "cursor": {
          "ref": "94df2050-7d18-4b04-a556-39b8d1876f01",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4e4a4e7d-fadd-4175-9e14-f299c57f58a0"
        },
        "item": {
          "id": "4788079c-f8fb-4863-b1ca-5a234dd3172d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0d8bd199-d0e3-4ee8-a182-d77ba9632d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9028d9a3-ac40-41fc-a66a-a4c1c6b41b28",
        "cursor": {
          "ref": "b199cbc6-07b8-4dde-b97b-3d7e8ac008dc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "21353ce5-e395-4291-af13-567bceef7bf7"
        },
        "item": {
          "id": "9028d9a3-ac40-41fc-a66a-a4c1c6b41b28",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1956475-caa8-4c28-b2f4-688d891e1eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7648cae-a338-4cf3-a2fe-26b6e95657cd",
        "cursor": {
          "ref": "f38bea05-3cc9-42a5-b34e-a03ab6f73205",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a44af64e-ee50-4e96-8c9e-d68c595a681f"
        },
        "item": {
          "id": "c7648cae-a338-4cf3-a2fe-26b6e95657cd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "efcc9e35-bcda-4349-a4f3-d4cadd8e3423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64acf49-c0d1-4abf-91c6-50d0851463e0",
        "cursor": {
          "ref": "12245c16-f9a2-4489-8386-f14ceafd306c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7623b53f-22a7-4181-8e5f-7153ea7906f9"
        },
        "item": {
          "id": "e64acf49-c0d1-4abf-91c6-50d0851463e0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3efaba67-a2f1-4998-b56c-388f479f6eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb66e08c-382b-4afd-b1df-29053686b8c4",
        "cursor": {
          "ref": "f911529d-95d7-41fd-8722-f8bc4342b736",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5931e7b4-2a03-429b-9faf-34b58942eb01"
        },
        "item": {
          "id": "eb66e08c-382b-4afd-b1df-29053686b8c4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8144ca37-9b3d-4e17-97a3-593a9982c7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011c697f-1127-4a7b-a3fd-719756589fd4",
        "cursor": {
          "ref": "9926ccb2-1899-4131-b93b-2adbd817753f",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a8ae0373-5b16-4f68-9ece-57a7f783f843"
        },
        "item": {
          "id": "011c697f-1127-4a7b-a3fd-719756589fd4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3d0a5adc-cb3c-412c-bac1-9a7984b0263b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45460ae4-d182-4d1d-ac40-8766a38bf5df",
        "cursor": {
          "ref": "afd300f5-757d-4328-9c58-9c97c7c83680",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "03393e07-419e-40fd-8340-cb785929f9e2"
        },
        "item": {
          "id": "45460ae4-d182-4d1d-ac40-8766a38bf5df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3b446bb0-a5e9-46a8-9d26-6cd5a80284d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35387eb4-2aa8-488c-818a-5565d44c82f8",
        "cursor": {
          "ref": "e459575a-2326-4621-af23-9df93f2551eb",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "99b7b2e7-e200-4695-afc4-530674627738"
        },
        "item": {
          "id": "35387eb4-2aa8-488c-818a-5565d44c82f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4014a64c-ebc3-49c1-a9f2-1a11223f8aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a20a68-40a7-491e-b780-c69f8999c1c0",
        "cursor": {
          "ref": "0b264909-6732-42f0-94bf-af64272124cd",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1bb40d7c-a481-4142-845b-eacc2e84375e"
        },
        "item": {
          "id": "63a20a68-40a7-491e-b780-c69f8999c1c0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "52273236-0ef6-4d38-baae-8322dc25a08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9708287-ed45-495e-bce6-082eb78b6192",
        "cursor": {
          "ref": "e0945037-5a2b-44f6-adfa-969ae4fc477d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6ef52dfd-7559-420a-89c2-0e67d6fd5539"
        },
        "item": {
          "id": "c9708287-ed45-495e-bce6-082eb78b6192",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "da2b14fa-4cec-4915-ae2f-8f6f1dcb72e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07692ff-9b5f-4028-b7ad-c89adba5c946",
        "cursor": {
          "ref": "9f9e5baf-d64f-4a13-af79-742c8cb44e5a",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2d000658-aa71-41e7-b474-f25e2984b0a9"
        },
        "item": {
          "id": "c07692ff-9b5f-4028-b7ad-c89adba5c946",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "087145a5-a2ca-40ff-8873-b2a298852ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e7a613-2145-42d2-891a-7cee41e73300",
        "cursor": {
          "ref": "59f35cd4-15d2-4c44-bd96-569e5a24ca87",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4dcc56ce-80a9-4552-b1c0-2951ed35dc88"
        },
        "item": {
          "id": "f3e7a613-2145-42d2-891a-7cee41e73300",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "261936d8-1c52-4305-b47b-bbb6557385c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a41672-f91a-4d00-8ffa-12e1adeecafb",
        "cursor": {
          "ref": "739acfe0-1039-4858-85f7-582a38c7142e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a9d7dc60-f663-4926-adb9-e09038800172"
        },
        "item": {
          "id": "b2a41672-f91a-4d00-8ffa-12e1adeecafb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "59412936-9a39-4189-9d78-4d2e5c71e6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938fc621-85e2-4ab2-bda9-373b61afcb4e",
        "cursor": {
          "ref": "06b1e8d5-abf5-41b4-9e13-082aee317d9a",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5ff706ed-c710-40aa-a3eb-5cd440fc6e33"
        },
        "item": {
          "id": "938fc621-85e2-4ab2-bda9-373b61afcb4e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "318bbeb3-462c-4a43-9430-4bcaf4101e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6c4ca1-9b67-47af-99e9-ac5b6b2032ad",
        "cursor": {
          "ref": "9e018894-8ae2-4a11-be51-6a1239e66976",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d9c61a22-8dbe-43a7-bf8a-28d2243af95b"
        },
        "item": {
          "id": "1c6c4ca1-9b67-47af-99e9-ac5b6b2032ad",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0ce2fc7e-7e12-4b7f-8d7d-ae6eeb027908",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "21dfa9fe-fa21-4692-87c0-f8fc6b27b4ba",
        "cursor": {
          "ref": "af43ae45-8897-4c4a-8d39-2e0521e2c311",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7b1bc097-5de5-4f78-9d76-4a830f90f0b7"
        },
        "item": {
          "id": "21dfa9fe-fa21-4692-87c0-f8fc6b27b4ba",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fecf4124-cee9-41d9-bb83-bfec9f5ebfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "21341ad3-1931-47b9-b887-f82f5dd3e860",
        "cursor": {
          "ref": "bc002a46-7474-45f7-9f14-1350e0008989",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "533551b7-e09a-40b5-b5cd-3adba4314043"
        },
        "item": {
          "id": "21341ad3-1931-47b9-b887-f82f5dd3e860",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2915fca-02d3-422c-ac31-38a60e7bcbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21341ad3-1931-47b9-b887-f82f5dd3e860",
        "cursor": {
          "ref": "bc002a46-7474-45f7-9f14-1350e0008989",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "533551b7-e09a-40b5-b5cd-3adba4314043"
        },
        "item": {
          "id": "21341ad3-1931-47b9-b887-f82f5dd3e860",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2915fca-02d3-422c-ac31-38a60e7bcbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beda11f4-e15f-4f82-97a7-eaac9ac730ed",
        "cursor": {
          "ref": "70383783-c755-4bc5-ae25-ebc78e829a8e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b2c3ce01-8f9d-44e3-83cd-8db3800532ef"
        },
        "item": {
          "id": "beda11f4-e15f-4f82-97a7-eaac9ac730ed",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "08e4ff67-c122-41f4-bb9b-167845ef1775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af4ef25-dabd-41cb-bf1d-5378175ac7b3",
        "cursor": {
          "ref": "139a54ff-e353-4712-b924-8558abb9e2dd",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4bdcf4e3-3f32-4988-b5fd-462bc90a7f2f"
        },
        "item": {
          "id": "8af4ef25-dabd-41cb-bf1d-5378175ac7b3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e418d88c-31d3-4283-9401-a223299316fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bc8ffe-385d-4d4a-8588-0d9b314eb86a",
        "cursor": {
          "ref": "03ee400e-d98b-49fd-8c5f-c57a3c462fbd",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "147c8338-480a-487d-a343-bd964e3fe00a"
        },
        "item": {
          "id": "14bc8ffe-385d-4d4a-8588-0d9b314eb86a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a39433f6-df13-4094-8426-abb99fb0c730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b71e6cf-963f-434e-8637-b36f468d23bd",
        "cursor": {
          "ref": "7a05e4f0-fd91-4792-8b03-3b86c7c9e4a3",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bb05026f-50c1-4314-af84-427238334920"
        },
        "item": {
          "id": "6b71e6cf-963f-434e-8637-b36f468d23bd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b8a9c6c8-28be-4e7b-b68e-33c9f0d0bdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ed96e4-1ce2-446e-899b-1f1162bb39c5",
        "cursor": {
          "ref": "aab907bc-7d33-4b15-9df0-99093cd9f481",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "415b761b-8f08-4aec-86d8-84bd188cbc00"
        },
        "item": {
          "id": "73ed96e4-1ce2-446e-899b-1f1162bb39c5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "51566bda-5d21-4348-8773-ec83f33be1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9896eec-5bdd-4ea8-b5c4-d555fa473ba4",
        "cursor": {
          "ref": "ae3556fb-773f-44cc-8145-d28ffb58049e",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5e8559d1-c77f-4e22-812c-b2d30c8a8794"
        },
        "item": {
          "id": "b9896eec-5bdd-4ea8-b5c4-d555fa473ba4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "473a998f-bab5-491f-bea8-3eec8ee9fd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4907e9ba-067a-41c4-8ee8-e8bd4ddec435",
        "cursor": {
          "ref": "53116114-1c83-486b-809f-102a75153a1d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e6997c33-e73e-4aad-a302-4753f1e0804f"
        },
        "item": {
          "id": "4907e9ba-067a-41c4-8ee8-e8bd4ddec435",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "76d31666-7838-4608-a57d-4dbccc20db2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9452e0-3422-4606-a7b8-490796ff49ac",
        "cursor": {
          "ref": "d0b537aa-3bc9-4bcb-927d-47734728868b",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0990e8a5-c510-4180-9a10-dc869f811303"
        },
        "item": {
          "id": "cd9452e0-3422-4606-a7b8-490796ff49ac",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b36c58aa-2d7a-452f-a6b7-36f4d656cdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eea22b1-0fd9-44f5-b079-c8444d6863d8",
        "cursor": {
          "ref": "77d820f8-7d96-40f1-9862-a9a5a98fdee5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "23ea62a4-dc9c-4b72-a57a-caa1d58ac5b1"
        },
        "item": {
          "id": "6eea22b1-0fd9-44f5-b079-c8444d6863d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a0e2b9f2-a7e9-4054-b84c-ece55e4cb7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f8efe6-006b-4815-8b33-de201b5eb803",
        "cursor": {
          "ref": "ff301ec1-d5b8-4df0-a7b6-49e5c10a98f8",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0e827eeb-bfb8-440e-b069-2fa2589643d5"
        },
        "item": {
          "id": "06f8efe6-006b-4815-8b33-de201b5eb803",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b2053491-e183-4a85-a880-dbc8681f95f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f3ec75-c909-4a86-a4f8-991d961b2769",
        "cursor": {
          "ref": "6aae8d4f-ffd8-4b2f-bd2a-42286a14cb1e",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7724261b-5b9a-4329-aaf9-d94ef3105b62"
        },
        "item": {
          "id": "b5f3ec75-c909-4a86-a4f8-991d961b2769",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "355d7e67-8ff4-4856-8e6e-df80177b09ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fc4872-28cb-4617-bcdf-522fe9f584ef",
        "cursor": {
          "ref": "ecdc9bb7-2d81-49ca-9129-f27aaa396281",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a40a5f84-2fd1-4e3c-a4e6-c42029b69e0b"
        },
        "item": {
          "id": "e7fc4872-28cb-4617-bcdf-522fe9f584ef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d0498605-687d-4a06-9e3e-80af4c6430eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daef8616-4c44-434a-bcef-46f44ee0cf9b",
        "cursor": {
          "ref": "8be38c86-2cd4-4cf1-b6ee-d3093232fcbc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "91effa2d-33a0-4c38-8e86-37e7f9ef0d92"
        },
        "item": {
          "id": "daef8616-4c44-434a-bcef-46f44ee0cf9b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3caac1ca-1765-427a-9dc9-e604ff77de2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c309228-3f2a-445a-bea9-213d24c1491a",
        "cursor": {
          "ref": "9726984d-efc5-4a8c-be08-6818a062105a",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7f8b35f0-f5a7-4680-81fe-c3862da1ed2e"
        },
        "item": {
          "id": "8c309228-3f2a-445a-bea9-213d24c1491a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a84c07ee-5cc1-4ea4-a263-46a25ea103c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a096ba-e4bf-4c40-afd4-bf817b812f18",
        "cursor": {
          "ref": "5b88c44d-f670-41e4-925a-5566d6af1b1e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e7ccc58a-c50c-49ef-a521-ea61a043c53b"
        },
        "item": {
          "id": "b0a096ba-e4bf-4c40-afd4-bf817b812f18",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "efd8112d-9546-4b69-a362-7314290b1145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0f4319-b874-42d9-bad0-86954c765555",
        "cursor": {
          "ref": "8b78f40d-e5b5-49f5-8749-cca693dca539",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7026b90d-7355-449b-a97a-5b8a54e38af4"
        },
        "item": {
          "id": "2e0f4319-b874-42d9-bad0-86954c765555",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9fa3e017-9991-48d3-8c5e-2e83f62eefeb",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7abcf104-78f5-4d91-b7d0-55c5c53734aa",
        "cursor": {
          "ref": "01bb26ea-7583-4c0b-9455-5a3e41e70cf6",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "574beee0-0d1b-4c45-94d0-c504c6ddf15d"
        },
        "item": {
          "id": "7abcf104-78f5-4d91-b7d0-55c5c53734aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "44c47dab-91d3-4384-96d8-997f69a9f831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af154a11-ebbd-47ff-9ceb-233cc1feab95",
        "cursor": {
          "ref": "ac304926-4fb3-4b31-ae90-86dc4f53fae8",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1885d97c-a6ea-4314-9e9c-2eed822de078"
        },
        "item": {
          "id": "af154a11-ebbd-47ff-9ceb-233cc1feab95",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ba5c0160-17a0-4d00-b13e-bc36f7d55b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f09b264-3cf5-49a6-a1d9-c94468340696",
        "cursor": {
          "ref": "62850f89-5679-45a3-a9e8-e9393ec8d5ac",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "feb406c3-2cd0-40b3-a90b-8d55be6e1a3f"
        },
        "item": {
          "id": "3f09b264-3cf5-49a6-a1d9-c94468340696",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3361c47-043a-4370-bf2d-04a2fb373151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0f4cae-319a-4634-9336-72410d57b5f3",
        "cursor": {
          "ref": "a87768f3-d7f1-48ca-a794-d5cc3f2ead57",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ac100bd4-ab10-4caf-9864-fd9ad49907e5"
        },
        "item": {
          "id": "aa0f4cae-319a-4634-9336-72410d57b5f3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e7786065-be4b-4d3e-84f1-e363d2653f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbceaf43-006e-4d8d-ba1a-5ab6f916dc7c",
        "cursor": {
          "ref": "a5e81511-51b2-4da0-ae12-85d357571d7d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c897d1f0-63d0-4034-9e2a-cdf9c9b18761"
        },
        "item": {
          "id": "dbceaf43-006e-4d8d-ba1a-5ab6f916dc7c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5b8aabf8-a3cb-414a-b31d-32a02d62d1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de75aec7-ccab-4b0d-abe7-c91903e91667",
        "cursor": {
          "ref": "5d205320-9be9-4ee3-ab14-beb6ecb04f20",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "205ed21e-1c0b-49d7-bbfa-6c0687ac6eae"
        },
        "item": {
          "id": "de75aec7-ccab-4b0d-abe7-c91903e91667",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ce091f28-df71-456d-ac3d-0fe5b1c0e95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d668fbc4-53d7-4cd9-99e6-329993b802da",
        "cursor": {
          "ref": "a4a1a300-a9eb-4d38-a518-8834b597010a",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f8a38a9c-9678-491b-96dd-fa3877afd00f"
        },
        "item": {
          "id": "d668fbc4-53d7-4cd9-99e6-329993b802da",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "25ebf89c-37a0-4bfe-af1f-db659d387e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902aca0a-b104-474d-9425-691d9fc9f902",
        "cursor": {
          "ref": "6d2c162f-f1c2-48fe-9892-252aad446991",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6d5d4db0-3bcc-4f74-9ed6-c611fe03e1b1"
        },
        "item": {
          "id": "902aca0a-b104-474d-9425-691d9fc9f902",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "324c8ae0-9c0d-4cd6-8089-8e9b313daa35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59eb259c-ed75-4d57-9397-b3c5c9d809a9",
        "cursor": {
          "ref": "3d715e47-6bcd-44c2-b89c-89eae431a05a",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9c2e3b8f-330f-4e79-98f0-45c8ab7eb4ae"
        },
        "item": {
          "id": "59eb259c-ed75-4d57-9397-b3c5c9d809a9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7d0b3665-288f-414e-a5b2-82a76337456b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caebcc8-7bb1-475b-b1ee-8b9d40990b80",
        "cursor": {
          "ref": "7567ee4d-e45c-4b5b-ab6d-1af2e56fc12b",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7f9cb5b4-b8bb-43ff-9f9c-8fbe26e9bb28"
        },
        "item": {
          "id": "2caebcc8-7bb1-475b-b1ee-8b9d40990b80",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d04c1b34-ab85-48b6-b08e-93459934b9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf8dcf3-66d6-4256-a819-439bfb1df3bc",
        "cursor": {
          "ref": "adc0eca3-7393-4271-b449-6e3c3f367a9d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "676af043-9ef6-4221-bc5d-30461ce7a58b"
        },
        "item": {
          "id": "acf8dcf3-66d6-4256-a819-439bfb1df3bc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cef2fe92-a223-406b-b4cb-fe34afcff615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd92314-f3b7-4a93-bbab-c04fb23c4a83",
        "cursor": {
          "ref": "149ef937-7724-442d-9e9a-939eba76e9a1",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dafeca22-a64a-4fa0-a566-5893933baa27"
        },
        "item": {
          "id": "fcd92314-f3b7-4a93-bbab-c04fb23c4a83",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20b0dc4d-c2da-41d9-9cce-406c91898a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e696643c-7693-448f-a903-d2b0ce5b825c",
        "cursor": {
          "ref": "84161934-aad5-456a-a91f-2620ab755e47",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "44d0e84f-d9ae-4007-9c80-6002cec1d2b6"
        },
        "item": {
          "id": "e696643c-7693-448f-a903-d2b0ce5b825c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ce579f2b-4a3d-40b8-9253-7371b904c896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b407337b-2099-4e67-85b0-f6095bd34160",
        "cursor": {
          "ref": "b14f15b5-2513-4baf-bfbe-dfb396e1d26f",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d5074ebc-7b1e-40a8-99de-6a15137304e5"
        },
        "item": {
          "id": "b407337b-2099-4e67-85b0-f6095bd34160",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3e27a5f8-5c92-4108-9e65-8d5a37857cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8e2f50-6bc3-4425-8898-3244bcfbe0bf",
        "cursor": {
          "ref": "5cd959fc-d03d-418a-9056-dbc7acbbf1f5",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "14b6dbe3-6b69-4cc2-9433-008911fa36a8"
        },
        "item": {
          "id": "bf8e2f50-6bc3-4425-8898-3244bcfbe0bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9d8247e5-00db-496e-a6b3-59e3ab794cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b02911e-49a3-4679-aec6-383e4eb511b0",
        "cursor": {
          "ref": "24c7bcba-640b-4d81-95bc-25c5f72c4957",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b3bd9a96-2f5d-4abd-9046-c804f615eba9"
        },
        "item": {
          "id": "8b02911e-49a3-4679-aec6-383e4eb511b0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "094fe241-0dfd-4386-a0f2-0be23ba4e27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173c82d3-e8d4-4afe-a6c1-5bb3a0f3df1f",
        "cursor": {
          "ref": "8a1d070f-ef9f-426f-bfc5-454041ccb677",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bbee6f1c-a43d-4198-bbb9-217ef26cba5e"
        },
        "item": {
          "id": "173c82d3-e8d4-4afe-a6c1-5bb3a0f3df1f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "495ce92e-1b1d-4634-a184-16efde504b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8939894a-d8d6-4c47-911a-a8c9ae4bfd16",
        "cursor": {
          "ref": "9268f33b-0ab2-464d-a93a-3cd15c943f71",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "39209319-5c49-44c7-94a1-dded533f563d"
        },
        "item": {
          "id": "8939894a-d8d6-4c47-911a-a8c9ae4bfd16",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a3c85ccd-760a-4229-8e3e-dd6edb88c858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630da55b-d654-4e14-a9cd-580e6a3cdf93",
        "cursor": {
          "ref": "1695e421-2411-4c02-8ada-b980a926bf02",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a5089c47-0b0e-4527-aaba-62c21cfdd18b"
        },
        "item": {
          "id": "630da55b-d654-4e14-a9cd-580e6a3cdf93",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "69f3e6e5-1593-450b-9146-0e571a7d02dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3da5b59-bc1c-4208-91e1-812c5035d1a1",
        "cursor": {
          "ref": "586461eb-af1b-4de5-881d-301c84688dee",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "320047ff-533e-4699-9e6c-aff96a257db5"
        },
        "item": {
          "id": "e3da5b59-bc1c-4208-91e1-812c5035d1a1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c772ff64-0ba1-4967-affb-3401cfbc0fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a810a2-95d7-4823-88bc-b210e6219560",
        "cursor": {
          "ref": "a7341de6-2239-4dc4-84e2-be4b183845f2",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6b185207-3a9b-4942-b95c-c0dda8af471e"
        },
        "item": {
          "id": "73a810a2-95d7-4823-88bc-b210e6219560",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0f170fb-c1d3-40be-a6f9-af10d7002e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c991d20d-e3ef-49b0-955a-95c3f4fecf87",
        "cursor": {
          "ref": "231d17cf-27cf-4dd9-88c1-3c890e8e7e7b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "01ecb70e-0664-4505-b112-2fc26c47a188"
        },
        "item": {
          "id": "c991d20d-e3ef-49b0-955a-95c3f4fecf87",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c1bd8e20-997c-46cb-baf3-66e4a337b697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395c556a-a97a-4017-bb39-9cf9b9b6d60b",
        "cursor": {
          "ref": "ebe1744a-2b0f-41d9-8013-8f35c30fca93",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0cabb5b7-eb8f-4a48-bda9-2411abd55736"
        },
        "item": {
          "id": "395c556a-a97a-4017-bb39-9cf9b9b6d60b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "09749a2d-8617-40db-841a-51343f311f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a01f013-7bcf-4984-be64-93ea07f3d50e",
        "cursor": {
          "ref": "309f2378-7af3-43c1-b9af-82574fb11211",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5d00fc48-49c8-48f7-8c01-1c4fbec666fc"
        },
        "item": {
          "id": "0a01f013-7bcf-4984-be64-93ea07f3d50e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e185f74d-c2df-40c6-9c4c-134c3a536cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f597aa9-f046-496f-8297-41bd1e6af8e0",
        "cursor": {
          "ref": "e1e8ca3c-c51e-4b26-9551-c8f6768147e7",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1b8d8573-bb9b-4c53-a1f3-8b4cc28a585b"
        },
        "item": {
          "id": "1f597aa9-f046-496f-8297-41bd1e6af8e0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "64ced5e9-4c65-4a47-b120-ec59ad266db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a00cef8-0866-433e-9e73-78ef04d8fc2c",
        "cursor": {
          "ref": "9e2c47ee-e35d-445f-9b26-f0cee3dc1243",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "510d332a-e2b1-44cc-92bc-859be0fd1fcb"
        },
        "item": {
          "id": "3a00cef8-0866-433e-9e73-78ef04d8fc2c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d659b903-0af6-4672-b463-7fa7a7210f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cc1f53-a1f8-4f5b-ae98-18f621bb9f40",
        "cursor": {
          "ref": "40734713-b833-40ba-96ff-8d3c1405e95e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a64d8940-4c5c-4400-8194-d107549f0504"
        },
        "item": {
          "id": "a5cc1f53-a1f8-4f5b-ae98-18f621bb9f40",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec2b3331-b12f-4869-b18d-3f4b153ce9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e78e630-9214-4493-a346-cdbd6b2d74f2",
        "cursor": {
          "ref": "7e311a5a-4917-4e2a-ba1a-6d999fe59d6c",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a9685ec8-f085-4f8e-8304-910c6b1d9e60"
        },
        "item": {
          "id": "3e78e630-9214-4493-a346-cdbd6b2d74f2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "91d9ab42-8cc2-452f-a72b-0d401b3cce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65acabbe-8aae-4a09-a3ff-ca9fa134a923",
        "cursor": {
          "ref": "e7b127bd-34fc-4cfc-a1c3-d6ac782eee4c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d7d7e85e-e4fb-4364-a78f-67a7dc9686dd"
        },
        "item": {
          "id": "65acabbe-8aae-4a09-a3ff-ca9fa134a923",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "359a1378-be81-489d-a225-ab78f54f5c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2284634-c3ee-43b5-9b91-23f0b99e0eab",
        "cursor": {
          "ref": "9d279b53-2810-4916-b34d-4ffec71c2241",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6e5f9b39-e711-4dc3-b3ae-cc2d739a73ef"
        },
        "item": {
          "id": "b2284634-c3ee-43b5-9b91-23f0b99e0eab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "09a27a50-e08c-4f10-b7b6-f6a0e4037861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d77ea12-27e3-451e-ac7e-770dd50bc1b3",
        "cursor": {
          "ref": "358c0b07-1456-4874-9114-63386ec82353",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "005116a6-c491-4eb1-97b8-4cd5790cb73c"
        },
        "item": {
          "id": "2d77ea12-27e3-451e-ac7e-770dd50bc1b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8569bbf2-303e-46d6-93a9-73113e591473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf913f0-e380-4bd4-8470-09435399abbe",
        "cursor": {
          "ref": "c063a19b-d14a-40ca-8f26-5e18fa363b10",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "610bbce1-0cae-4339-a776-5ae7eb07ae84"
        },
        "item": {
          "id": "baf913f0-e380-4bd4-8470-09435399abbe",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a178738e-8ff8-494c-9b44-0443dd2adbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5941edc8-82d5-4314-9e14-d6fd147fb337",
        "cursor": {
          "ref": "94705dc9-4d84-4e43-b6ae-6c47a321f341",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "300418ea-5f45-4e13-b553-b4b5103adcc0"
        },
        "item": {
          "id": "5941edc8-82d5-4314-9e14-d6fd147fb337",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "320e289f-b4d4-4e31-aac3-9c13b8b1871b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa25b6a7-3265-466a-8ee3-ed15ef3104a1",
        "cursor": {
          "ref": "103fb820-5cc3-49e5-bf4a-07ea957ccb69",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c8772bd9-7fb5-4fe6-999b-52f70958d592"
        },
        "item": {
          "id": "aa25b6a7-3265-466a-8ee3-ed15ef3104a1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5ba8cbc2-fdf7-4177-a2eb-604d5645aa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb1b04b-a4a4-45ba-83e6-b3b877d29d9a",
        "cursor": {
          "ref": "7062788e-49b5-40fd-abe9-d70edc74a4d4",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "68e72ed0-6773-480e-8bf2-10a7b845782f"
        },
        "item": {
          "id": "dcb1b04b-a4a4-45ba-83e6-b3b877d29d9a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "53124a33-3dfd-44c4-a9be-05adf9b199eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c338e71-1c74-49d7-b574-47b3294510a5",
        "cursor": {
          "ref": "19f8f3d4-f3fe-4fdc-b1e9-140e9854fa92",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "89001be8-21e1-48e3-be02-794e3cd8a678"
        },
        "item": {
          "id": "3c338e71-1c74-49d7-b574-47b3294510a5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "849bae93-01d2-4b47-a6ec-897e5d00937c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7460e5d4-f7cc-41a2-8f87-8977eee7a953",
        "cursor": {
          "ref": "8f784d1b-6797-4f36-b98c-ee4bfd64aa54",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4282b5c8-b85b-4cc6-bbc2-f3f4f4eb47d1"
        },
        "item": {
          "id": "7460e5d4-f7cc-41a2-8f87-8977eee7a953",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "23956c7a-f584-4378-b3a3-57e4799348ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352935ec-a950-494f-9b9e-3323824826c2",
        "cursor": {
          "ref": "837d55ed-70fd-4e34-8f37-b453cbbe5b79",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a877006d-0afb-4658-9740-b005592bf0af"
        },
        "item": {
          "id": "352935ec-a950-494f-9b9e-3323824826c2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1545fa96-7f34-43a7-9b9a-a89ce0fded04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9ff18c-7085-4ee0-bf56-15ef4505c21b",
        "cursor": {
          "ref": "81d426a4-5ef2-4172-8e7e-89fe0325326e",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0207e203-339c-4617-a12f-7567821e4216"
        },
        "item": {
          "id": "8c9ff18c-7085-4ee0-bf56-15ef4505c21b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3b234149-996e-4c15-84df-cc4bcb1748b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccb4a5d-8f2b-4763-bb62-60120345d0de",
        "cursor": {
          "ref": "1f6ed738-8891-4b46-9a15-135c4ab937e4",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "98770c4e-ac0e-4c6e-afda-303ea01dd7b1"
        },
        "item": {
          "id": "bccb4a5d-8f2b-4763-bb62-60120345d0de",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "532e4c39-ebfe-4d04-884f-572790de273b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc42233d-0cfc-4d19-8077-c3b758bb453a",
        "cursor": {
          "ref": "9f181790-fd28-4e1c-bbf9-1af1a46c8ebb",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "322a6f4f-86e7-47bb-afd7-da38866df00a"
        },
        "item": {
          "id": "fc42233d-0cfc-4d19-8077-c3b758bb453a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "02c77d2c-90ca-42b6-a100-498825074744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623b1928-e3d1-4c3b-bf60-2c2aa7d80317",
        "cursor": {
          "ref": "b57585fa-f112-4c98-9629-8f01d5cce927",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d7a481d2-9385-49b9-977c-191bc2fae2d9"
        },
        "item": {
          "id": "623b1928-e3d1-4c3b-bf60-2c2aa7d80317",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ff19cbc2-fdf4-49b5-9153-969bbb91c460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f242be-5c93-474f-a73a-a136ab99cc04",
        "cursor": {
          "ref": "0cf0c0a4-85ff-441c-b4a3-cb29f4f0a3df",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "54afca22-ca63-45a9-a691-19311c53afbe"
        },
        "item": {
          "id": "f2f242be-5c93-474f-a73a-a136ab99cc04",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0f0d6a11-b3fb-4299-8254-be82615f8eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b742c052-0011-4314-8b6b-5b008fbb759a",
        "cursor": {
          "ref": "6a5ed25b-4a49-47b2-8e84-fd1d876b8261",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f18e8b0e-ebf5-40f1-96d0-8287836ff1ab"
        },
        "item": {
          "id": "b742c052-0011-4314-8b6b-5b008fbb759a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bf7d5fac-8b99-4e3e-88e7-97cc0315da8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20388bf7-c403-4be5-ac31-274ecdd6d80d",
        "cursor": {
          "ref": "2fad89e9-39e2-427f-a0dc-985a500df887",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fcfa6ade-194b-4072-8cb5-aa350503cdb0"
        },
        "item": {
          "id": "20388bf7-c403-4be5-ac31-274ecdd6d80d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "14d49fa3-b93f-48b0-8ebb-826d9a48dea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabcf706-fe0a-476a-8e7d-8478276ff869",
        "cursor": {
          "ref": "c085395b-1b23-439e-a0e6-ca027c799dad",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "84231a7a-2f57-405a-be6f-6577a6a09b57"
        },
        "item": {
          "id": "aabcf706-fe0a-476a-8e7d-8478276ff869",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "18066d7d-5206-4829-b0fc-85ecb0b21598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0f035e-ddac-4474-940c-29df32a21348",
        "cursor": {
          "ref": "35957b47-6832-4784-9152-ca6b6c4658e1",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2072d6dc-c6a8-4f57-be94-318ec9897986"
        },
        "item": {
          "id": "0c0f035e-ddac-4474-940c-29df32a21348",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8a499dd1-fad9-40a3-95bf-ed3eaa504f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4850e9e2-b0f4-4a25-b5be-c5fe62527ad3",
        "cursor": {
          "ref": "4f1e5f42-503f-4030-9506-2fb569bcb40f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ce9de794-0966-4cbc-b5e8-5c58528a9882"
        },
        "item": {
          "id": "4850e9e2-b0f4-4a25-b5be-c5fe62527ad3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "714bceb5-2d82-4b54-abe2-f6bee5baa426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86e0d3a-d548-476d-bc9c-2caa8797f846",
        "cursor": {
          "ref": "4499aeb2-8c63-498f-b6d2-24060de9e7d6",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5adf3608-7e1f-4a83-8e80-f2b0359a9193"
        },
        "item": {
          "id": "e86e0d3a-d548-476d-bc9c-2caa8797f846",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "acaf2dad-0903-463a-b6c0-cb61d3e8ec97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f846d490-f985-4493-864b-a43a1243ea34",
        "cursor": {
          "ref": "e4714fcb-c193-46f5-8a6b-a997e140f66b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "073aba2f-5bb8-4cf9-baee-fcbd9a1ded03"
        },
        "item": {
          "id": "f846d490-f985-4493-864b-a43a1243ea34",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c0afc36d-2da6-4a33-ab6f-a8fcb5878c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef94d958-cde0-4adc-81ed-28792f40afb9",
        "cursor": {
          "ref": "548a3fdf-e92a-445a-8a95-8c57f0f6eba6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e31273d2-b499-41c6-9fd0-66c4de202143"
        },
        "item": {
          "id": "ef94d958-cde0-4adc-81ed-28792f40afb9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a682ed2b-21b3-455b-a83f-c8ef78d8938e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22191b2-d92a-415d-be21-2d050042f305",
        "cursor": {
          "ref": "a8f16404-924e-44b6-9114-55d6a119bab1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "269e6f92-a06d-4043-8d47-f9b5543f88f3"
        },
        "item": {
          "id": "b22191b2-d92a-415d-be21-2d050042f305",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b33cb783-5699-48f4-a6e4-c544c12f7fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf506c5-400d-4fc0-bbe2-9d749d177bb7",
        "cursor": {
          "ref": "c4c7c183-3b18-4624-b205-67abb916b2aa",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "85f95ad6-04f9-440d-90e1-f46c88893f62"
        },
        "item": {
          "id": "fdf506c5-400d-4fc0-bbe2-9d749d177bb7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1b9b4eee-6f27-4f3e-a980-008cfa8a2abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca26ce7-ddb0-4e13-a4dc-1763b9cc8561",
        "cursor": {
          "ref": "a38ae9d2-4573-4252-87e4-3e06306480da",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6ccfa66a-aee0-410a-93fe-65503b6573bc"
        },
        "item": {
          "id": "4ca26ce7-ddb0-4e13-a4dc-1763b9cc8561",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "aa9fbc4d-17c6-4367-ae88-3c1d91eb9ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43e977e-c54a-4aa5-a22a-069c3db88b66",
        "cursor": {
          "ref": "735653fd-7f75-4f5f-9dd1-8e761e8a04ab",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8efddab9-a9cb-4320-8215-544a8e22969b"
        },
        "item": {
          "id": "b43e977e-c54a-4aa5-a22a-069c3db88b66",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e1c30756-f063-4b6a-af6f-7c95007ac102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487072cc-4a03-42cf-8714-89d614c0c545",
        "cursor": {
          "ref": "e4b31ff3-c479-4ceb-916c-a621804aaa21",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "88407cad-dbdb-48c7-a595-5ee0c8b283fa"
        },
        "item": {
          "id": "487072cc-4a03-42cf-8714-89d614c0c545",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8fbbbeac-f80c-4251-9b7b-f0a9152efd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86dd879b-3f3e-470c-85de-040df91ffa64",
        "cursor": {
          "ref": "726ff7c9-c466-4af9-a2dc-4f27cf6389d3",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "91dcbfc0-7463-43f4-9fef-5693991275b8"
        },
        "item": {
          "id": "86dd879b-3f3e-470c-85de-040df91ffa64",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "33d06d3c-d1c6-43e3-b64f-d069d848be39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a92810-5c6f-44db-a06c-b904cb862fe0",
        "cursor": {
          "ref": "b60736ad-4cc0-4ab8-9338-4f631afaf6f1",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "922b1d5c-19ef-4a4b-a989-1e141c58664c"
        },
        "item": {
          "id": "55a92810-5c6f-44db-a06c-b904cb862fe0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ebe21b22-48e0-4327-9751-a323994820df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9a32bc-2d34-4ffd-9a58-90b611c95919",
        "cursor": {
          "ref": "54782ca8-1eec-4c77-8712-ca3afae6db62",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0166ab15-5949-43cd-978e-1e4d987b53a9"
        },
        "item": {
          "id": "dd9a32bc-2d34-4ffd-9a58-90b611c95919",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "92d0ebd0-96dc-47f7-8c26-014cd0dcc212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b1af2b-6e65-43fd-9d86-9149fa22b9ec",
        "cursor": {
          "ref": "34b5337f-0059-4be9-a8f9-56f9d3f8f7cd",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "58bc2311-c541-4ab8-a6a7-19e4a47ba11c"
        },
        "item": {
          "id": "95b1af2b-6e65-43fd-9d86-9149fa22b9ec",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0da4b434-2efd-49d3-a6b5-a695dcf55399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d124c56d-c682-4e0f-b9fc-6d1da9039583",
        "cursor": {
          "ref": "3195653a-09a0-4ea4-a705-bb0ceefcc9a2",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9c79eb97-079e-4da6-b7a6-a351ab199a12"
        },
        "item": {
          "id": "d124c56d-c682-4e0f-b9fc-6d1da9039583",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0847121d-ce7e-4032-8642-a2c6536b29dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17f25f2-bf85-48dc-8cb5-0c7074d712a4",
        "cursor": {
          "ref": "3ca5aed9-088e-40c5-a7b6-f125be7eb994",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5845ad9b-ef0b-4e0d-80a9-8313c9bcc84b"
        },
        "item": {
          "id": "e17f25f2-bf85-48dc-8cb5-0c7074d712a4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bfbbca13-fbca-4c93-9b70-268608c0316c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2f5baa-e760-4b3f-af21-1c7e5ee61437",
        "cursor": {
          "ref": "1c3bb58a-16d3-4ec4-a26c-00b4c9b7daa1",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3d2c177d-92ee-4e2d-90c1-7a8eccdebdc9"
        },
        "item": {
          "id": "be2f5baa-e760-4b3f-af21-1c7e5ee61437",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "da5bd78e-1885-4c32-a4e1-b7e4d2acbebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a1e095-8ac0-422b-9f4b-282bf4cb2a6a",
        "cursor": {
          "ref": "fd8828f9-dd1a-47b2-a02d-86321e69761c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cc58f7a5-c58d-4969-a733-bb2f7d7763f0"
        },
        "item": {
          "id": "66a1e095-8ac0-422b-9f4b-282bf4cb2a6a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "37b76125-e9c9-4dff-bc4b-3440c3727978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2b4803-8174-45e6-b641-b174c83491d1",
        "cursor": {
          "ref": "9db27f9a-ac9f-43c2-87d3-82facc852410",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "38576ae2-6e9f-43be-8d37-4b02bd03c8b9"
        },
        "item": {
          "id": "cc2b4803-8174-45e6-b641-b174c83491d1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "83fe36f1-42cb-41fe-a5ed-79efb305bfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e63c9e-6b7c-41cd-aad8-ae761dedaf0c",
        "cursor": {
          "ref": "d4b40ef5-5625-4a5e-a0b6-76b1ef141a60",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2108a1ea-f5a7-47e5-be0d-f666955df67a"
        },
        "item": {
          "id": "a9e63c9e-6b7c-41cd-aad8-ae761dedaf0c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "01432531-9076-4411-9dd2-b7324a7889ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8081727a-8035-4bb3-a2db-8a6aa232cf7c",
        "cursor": {
          "ref": "76ef45de-ca69-4366-beb1-a9f3d84afcb2",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f40fc506-63f4-4303-b99a-7130ee53071d"
        },
        "item": {
          "id": "8081727a-8035-4bb3-a2db-8a6aa232cf7c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "35a14f78-81f6-4575-a8f5-9096bd20ffa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6787746a-8da9-4cba-8604-94bb79f704f2",
        "cursor": {
          "ref": "4528fe81-6b4a-4d7c-b905-9c8f2fcff7c7",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "64d59171-bafa-43a2-a6c7-c8aba57b9c2a"
        },
        "item": {
          "id": "6787746a-8da9-4cba-8604-94bb79f704f2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "59e65728-7459-4714-8d85-8c58d98cd751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa369480-d38b-4bc0-96f4-d625c7b5d48b",
        "cursor": {
          "ref": "bf9c6177-8fb2-49ca-b942-0a2dad8164f7",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f0f87792-ecb3-4b8f-9106-8e7720d4ae03"
        },
        "item": {
          "id": "aa369480-d38b-4bc0-96f4-d625c7b5d48b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "60e8e6f1-80e8-4e34-83c1-1ceebc0a2342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d4c008-9ec9-440e-b592-2e7edab96e12",
        "cursor": {
          "ref": "5de31042-3a2f-4d67-a925-271964aacfc8",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "189780f1-8bec-41f5-8e47-f93a90d167f5"
        },
        "item": {
          "id": "80d4c008-9ec9-440e-b592-2e7edab96e12",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "952f0d76-79b1-422d-8888-3dc21bbb5603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b02c12-ba48-4c25-9da0-66cd8ed9f949",
        "cursor": {
          "ref": "282da8c6-3ce8-46f2-888e-861d882ab3f8",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ab88e1ba-7774-4f4e-ab1e-84e944c405e2"
        },
        "item": {
          "id": "45b02c12-ba48-4c25-9da0-66cd8ed9f949",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7dbd5cd-f994-45f8-8a7d-c0ca5d97da42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4888ce53-7263-4b62-88fe-3037380996e5",
        "cursor": {
          "ref": "7019adc3-a92b-4308-8ef5-a460669a3795",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef84cee6-4b98-48a1-8612-8f8d205ee468"
        },
        "item": {
          "id": "4888ce53-7263-4b62-88fe-3037380996e5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1cb7d529-c6df-4939-88db-6641b2033052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a235f65-88ee-43fd-9d93-850d2b42b90b",
        "cursor": {
          "ref": "ed8a68dd-0edd-484d-9efa-c476f7aa153b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0d94f830-f332-4508-9332-ae995f984a42"
        },
        "item": {
          "id": "3a235f65-88ee-43fd-9d93-850d2b42b90b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fb5df7f6-0e24-4246-906d-d4143888a3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d79d21f-930f-4b5c-a4b4-72400e2f73c4",
        "cursor": {
          "ref": "16aea1fb-5495-488a-b222-bfb96f1c4c18",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cc3be15b-819e-4ece-9d65-ce73ab38e74b"
        },
        "item": {
          "id": "8d79d21f-930f-4b5c-a4b4-72400e2f73c4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "67534243-cf8f-41be-9e68-50e3942af80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0494eea2-4a7b-47b0-ab48-16922a2b465c",
        "cursor": {
          "ref": "74ad85a1-e445-492e-8f85-508420ed99c2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "eb6d5e96-d363-47bb-8d38-447b891276c2"
        },
        "item": {
          "id": "0494eea2-4a7b-47b0-ab48-16922a2b465c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "de16d102-2ca8-4f25-9b05-0309fe63881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992671f4-00c3-47ed-8830-add7d3a127ce",
        "cursor": {
          "ref": "18ee6c52-928e-418a-a7c4-bb9935920e5e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "69b9e114-dbc1-4a83-b9d6-17592a0d32d9"
        },
        "item": {
          "id": "992671f4-00c3-47ed-8830-add7d3a127ce",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3d224f0d-0a0b-4fc8-ba70-19b58c958eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e9c804-bbe9-4221-91ef-cdc6c2a1419b",
        "cursor": {
          "ref": "08dac4ec-6535-40d3-a698-6619e988c36d",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "04479c62-aa76-4917-8ae8-af0c0b601882"
        },
        "item": {
          "id": "e6e9c804-bbe9-4221-91ef-cdc6c2a1419b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "15beb93d-2e89-4bac-90d4-889821f01308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e903c4da-36d8-4ffd-aa4d-8bc73879d6a0",
        "cursor": {
          "ref": "4f313aff-5cd9-43f4-bc72-85c89158f3e8",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9262f6c-b7ac-46b8-918c-7bc5aadff4aa"
        },
        "item": {
          "id": "e903c4da-36d8-4ffd-aa4d-8bc73879d6a0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bce0693c-439f-4b30-801f-9ca6f5da9929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b476768-a4c0-442d-9d37-4f82a8b598f5",
        "cursor": {
          "ref": "2cf1809e-3773-4c90-9178-4b7129c6793b",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "54330e0a-a630-44e2-84aa-365e739c0876"
        },
        "item": {
          "id": "5b476768-a4c0-442d-9d37-4f82a8b598f5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea35ad39-e041-4853-864a-6a7ef62df1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a311741b-797c-4c69-bcc3-91f32f335d5f",
        "cursor": {
          "ref": "ddfad298-0798-4552-a73b-00c98604c312",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5d8619aa-f8b2-4d9b-a07f-ce024f1cfe6b"
        },
        "item": {
          "id": "a311741b-797c-4c69-bcc3-91f32f335d5f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7178071e-1048-454d-9728-bf65034f4b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbbd283-d13b-4aef-8c28-7595a5b4a609",
        "cursor": {
          "ref": "d9250272-42a8-46e8-9ae2-3f188ad25c3c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "58b21688-92a3-4305-81f3-0310392e0c65"
        },
        "item": {
          "id": "4cbbd283-d13b-4aef-8c28-7595a5b4a609",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b95d9692-37d1-41e1-8add-8c23d7b04715",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "958f3e2e-b523-4a21-adcf-395a56568b36",
        "cursor": {
          "ref": "14b04875-cc84-4f84-9d56-2e07001950aa",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e21cefdf-ce4c-489f-bee1-a59e755cb958"
        },
        "item": {
          "id": "958f3e2e-b523-4a21-adcf-395a56568b36",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f6b7062d-0972-4e89-b739-56a4e759bf3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "65c8c6f3-3805-415b-a687-1ff941c4f4b9",
        "cursor": {
          "ref": "7652af0e-f81c-435c-93de-6c8c8537fc48",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "588ed7e2-fd07-4897-a68a-f05131f68309"
        },
        "item": {
          "id": "65c8c6f3-3805-415b-a687-1ff941c4f4b9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "adc8bfc2-8212-49f4-958f-6401ddbdfeb5",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6e771c-025b-4277-b606-ae122e9c3cb1",
        "cursor": {
          "ref": "38eb118b-dd71-432c-b58d-54430f7a1a4e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "819d9cfc-b5c6-4566-8529-a65be1ddf8ab"
        },
        "item": {
          "id": "4b6e771c-025b-4277-b606-ae122e9c3cb1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e6cfff58-d11e-4bbf-9ead-a1ed43c83b29",
          "status": "OK",
          "code": 200,
          "responseTime": 2466,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "27de3b00-a581-4a9f-b895-cd8fc7534978",
        "cursor": {
          "ref": "015bdfe3-d152-417a-8497-f31a9b7f52fb",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a8529e7c-d2dd-443b-8efe-b27bc00ae3c8"
        },
        "item": {
          "id": "27de3b00-a581-4a9f-b895-cd8fc7534978",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e23002df-1911-4bd5-a766-274b0f80d2ca",
          "status": "OK",
          "code": 200,
          "responseTime": 2527,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
        "cursor": {
          "ref": "678af9da-8483-47a3-a66b-a3619a81710b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "34ddf709-a8bb-4b0d-9ab7-4c3e50280c94"
        },
        "item": {
          "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dbda9521-49d8-483e-81c2-79e9fa61fabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
        "cursor": {
          "ref": "678af9da-8483-47a3-a66b-a3619a81710b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "34ddf709-a8bb-4b0d-9ab7-4c3e50280c94"
        },
        "item": {
          "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dbda9521-49d8-483e-81c2-79e9fa61fabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
        "cursor": {
          "ref": "678af9da-8483-47a3-a66b-a3619a81710b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "34ddf709-a8bb-4b0d-9ab7-4c3e50280c94"
        },
        "item": {
          "id": "911d51a9-9069-47eb-b130-96ba7101eaf7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dbda9521-49d8-483e-81c2-79e9fa61fabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1fddb7b1-64e8-4b19-bb7e-6bfc64b9b821",
        "cursor": {
          "ref": "865aa0be-20ab-44ca-8ec0-87470fca34f1",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3d5ba248-8755-4257-95bb-849acc6d5e29"
        },
        "item": {
          "id": "1fddb7b1-64e8-4b19-bb7e-6bfc64b9b821",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1029ab05-5c63-45ed-8a57-6d768d59987f",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "53b274f7-5722-4d36-b297-0f4742b12dcf",
        "cursor": {
          "ref": "592214b2-8fba-4eb4-bac3-466930fc5062",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "de8a99f4-6cc0-440a-b26d-4b4ce3e783c0"
        },
        "item": {
          "id": "53b274f7-5722-4d36-b297-0f4742b12dcf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1d7fe6f6-17ad-4685-94a3-1b9bce3a031e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "53b274f7-5722-4d36-b297-0f4742b12dcf",
        "cursor": {
          "ref": "592214b2-8fba-4eb4-bac3-466930fc5062",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "de8a99f4-6cc0-440a-b26d-4b4ce3e783c0"
        },
        "item": {
          "id": "53b274f7-5722-4d36-b297-0f4742b12dcf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1d7fe6f6-17ad-4685-94a3-1b9bce3a031e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d186104e-0493-4f1d-ae32-9ec76b1c5d4d",
        "cursor": {
          "ref": "aca7f079-c07e-4790-b178-745a99993c86",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9c90d534-f722-484e-aa1e-ff37357ad303"
        },
        "item": {
          "id": "d186104e-0493-4f1d-ae32-9ec76b1c5d4d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "aa1d7d65-c765-4155-bdf6-757c5c0d83b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 250,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3d0e3652-894e-4771-9d0d-efa2c4abd2ba",
        "cursor": {
          "ref": "f52262e2-ab6b-4683-a54c-6655522431b6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6cee8743-9436-45a5-8bc6-24f33c3f10f6"
        },
        "item": {
          "id": "3d0e3652-894e-4771-9d0d-efa2c4abd2ba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2ed8a9a8-34d2-4510-98f8-8441c59a97e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3d0e3652-894e-4771-9d0d-efa2c4abd2ba",
        "cursor": {
          "ref": "f52262e2-ab6b-4683-a54c-6655522431b6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6cee8743-9436-45a5-8bc6-24f33c3f10f6"
        },
        "item": {
          "id": "3d0e3652-894e-4771-9d0d-efa2c4abd2ba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2ed8a9a8-34d2-4510-98f8-8441c59a97e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "971bbe61-002d-4035-a64e-1fc7f76374dd",
        "cursor": {
          "ref": "f1187d30-6e97-422c-b811-2ba1ecd42d75",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e1ba098c-d28e-4bb8-a7e1-06bf049316c2"
        },
        "item": {
          "id": "971bbe61-002d-4035-a64e-1fc7f76374dd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cd37d5c1-218b-494b-a250-28db8a06828f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}