{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9c268805-6eb5-4ac1-a43d-0c4be168e45c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "34177ff5-928a-458e-b140-54f92cb3a597",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aae31f52-ca3f-4037-ac40-9344304ccc6e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9074bab6-e2fc-4310-9235-07f340fa673b"
                }
              }
            ]
          },
          {
            "id": "c179fba9-6c60-4770-8fb8-30e0088dde1d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87d2b207-02c7-425c-834e-476e7f9ce10d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8baa478c-aca5-4c1f-9a86-bf99a9494e16"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a3ab3b24-7ea0-4d8f-ade8-310540943b53",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "710996ff-be59-4d67-bebc-1cd43efb95e1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50fa151e-6e12-4656-9ef9-3cc6a1f7f169",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48448fc6-1e7b-4983-ba33-540a625a3c65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9c42fc7-76a5-4eb0-9a65-e4f29ed0db36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "908276a0-5da0-4c3e-9ded-015982dcbe3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2cddf70-4268-4b7f-be73-8ff72bc765b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c33801e4-40fe-4c2a-ad21-035150a6b84a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "568de903-a926-43f7-9e8c-ed24350f2df2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bccb633-3e22-4d47-bcd9-68b716f93c18",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "34a942fd-c6a0-4491-86d7-47e4136c0a26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84830c18-1cd3-4adf-b77f-fd4b953eea11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edc9c39b-ea65-4501-97e1-504d625905ca"
            }
          }
        ]
      },
      {
        "id": "7a4be8a8-bc66-4346-839d-757c42405e8b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7b86760e-c999-4528-a199-fe310149f142",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45df4055-6be9-4f87-852a-759d2b55a9aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ffbb949-e308-48db-a04a-9709947e9d9e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dfbdde-60f8-4799-8bba-40d5517730d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ab1d87d-81c5-47d6-bd7b-7ddf81371241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cce620-01e9-4424-a3cc-b632ef824a08",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec73f61-fe14-4d89-92a2-08d57c77d63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8ca8c00-01bd-489e-98d3-81ddf61f0d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192441d6-f8c3-4170-9fbb-242d458403b9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5874c88a-4445-4d5c-9a34-1dbab0fc0ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00ee7978-b11b-4a7a-9152-618a5c9c0a2b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1aa1d026-c960-4ac8-a3db-3522302e1e8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fde551b-38b4-4822-88f3-7d0863a06940",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741bfba3-bee0-4d3e-9a10-8c35b85166ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21b3605d-f0d7-4d39-bdec-3e34dc78901b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e20cae9-cb6f-4690-b772-c95773d68d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0545dccc-8d76-4a5e-89b4-9b01f3bc111e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e31e023-037f-4c3f-9362-4b1201d96873",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f146c8dc-33f4-43d5-85e4-c89843b7846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c885628f-681d-44c8-a2aa-a66751143bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582fb114-021e-44d9-a95a-41bc23834e64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f33036c6-88c3-4783-afac-81efcfcdc577"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ff80c753-78f8-4d52-94a3-1d2dcb352075",
            "name": "Positive Testing",
            "item": [
              {
                "id": "459d8b56-bd1f-45ee-804b-8446dcb231c6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71cc8f9d-0f5b-47c2-829a-c460f173c703",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "808dac21-4629-464d-b288-5d4d3f62016f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5fa90cf-d49f-4496-90e7-d8bac2b14ed4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a274f450-11bb-47c3-98c6-ac3daaf74f63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afc22239-da19-4db4-b532-2bb4be387a44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c01389e-8005-4685-ac21-b71b38cf3700"
            }
          }
        ]
      },
      {
        "id": "68e2a592-ba4a-40dc-bc69-61856072cd0e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "557bc3ca-0919-4a5a-b1d9-b6c62dbe00a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bb0b4f2-1fa9-44a0-88cb-e70651dfc2d9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3ebf1b86-32ef-4e15-bd66-e430c05497fd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71c2d19-db88-4167-8124-fd97e1783398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a833d9-2be9-4fa2-b5fb-01f6d5aa3172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a40082e-d7b6-4948-a853-50dfeb396eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5db7a921-b007-4d7f-8819-8e83aa147202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548a7183-4eba-4a93-b780-ee2f3c808e8a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b2a46f-cd27-4cce-b315-372aba5bae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79714d47-40de-4e2e-826c-af6afc28c47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6ea0a3-9936-4100-b5b4-822d2f75665f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f6f2fb5-30aa-4834-a502-30a74e0dd1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7709b3bb-8e46-49f1-a35c-e1777c2d9bff",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8c7fa3-45f4-440d-a615-9f6f2ed919c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f7ef23-2c76-490c-b74e-277e9c510be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7eb373-18a3-40f5-9e26-8ebd2b79e7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c521c57-9581-4135-b520-c374b11747e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2270bbb3-514f-41c9-9325-a60eb5952119",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d458ba7d-f2bd-42ea-ac21-bc534b308360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056b8d2e-ac0b-43f4-a129-41930074d6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48afdb0c-9ec7-4579-b7e8-3f0d8a135c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f9302bf-b9de-4acb-99aa-145d36c02539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bfbfc9-0239-4dbb-91c6-9f7b9f9ef8ca",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19e088f-6fbe-4d28-954b-1551cb86045f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4532a52c-6feb-46c7-b52e-56b39dd5428e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b704c57-e351-4527-9c69-34fd478b1cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eff22cf-b7e4-481b-aacf-a86447f57282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc61cbb1-f04e-4025-88a3-1f4dcb382e4e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d26264-bee0-4054-b5ca-b953bd9f3e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d6fc1f-2afc-458d-85b9-b796cc02489b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f21a0f2-49bd-4a2f-9d8f-2867ac9bd9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de641978-4815-4811-9d5f-ce33707550b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8388dac-559a-40eb-a3f6-e0251413e5ac",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbc6d7b-f03c-4195-8d8c-0761397e6796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aefb782-544d-49c9-83c7-56aad585a807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48916462-34b3-4aaf-8e1b-239c4686469a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a919a05c-baf7-41d2-a50d-971ae667a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf504a-6820-4f0f-af91-f5716ae039a4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028ed835-397f-4b1b-9402-cd6807e7767b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b4b5e7-9314-4a0e-ac9b-9ee7fdf113c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ccedcd-92b2-40ed-a4e6-c0067ea5e4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0419b5af-b6c3-4cda-8486-f350eda77f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a7a2d8-cfac-493c-a750-54e422573875",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6e8d90-83a9-4912-9845-e8e2f8949d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612f4ba0-2786-437a-ba85-9df34aa1dd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1209904b-5db6-42f2-82f1-e7297ef07b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7116a4a4-190a-4713-b41a-6f4046b1013f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5b0adf-5867-4f3c-99ba-5fb16a8676f8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258ac070-29a4-4d66-92a8-8cb5b2e114c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6176fc-a9ba-4082-b78f-1393a222b8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eafac16-0ef2-43b1-9949-7f66663b0c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "354a140b-bcea-49d6-8d53-721c9ce5b7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba50743a-2e84-4f56-91ea-042db6cd906e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657e5510-1fc5-4b21-9ecc-f73e62d4155e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3088bc21-d427-4dc5-9fe4-de5956342265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1de7a8-eeb7-42fd-8fae-f3cb87b8ae4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5b7d237-ca6f-41a3-92ae-8a96c4b1d7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9317c998-a55a-4bef-9b43-67656f2f4cf3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cd6491-283c-4f61-9f9f-87e1351b3001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af67bc7c-16e9-4a1e-8c89-8107dff435b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3890f5fa-f43b-4fad-bd4f-f4617e878955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a365330e-839e-4b1e-bdf5-d2da89f435a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b9439d-2d28-4759-8799-39603290de0d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f594c312-4913-41b5-9d39-910f40771209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3c9285-e31a-48f4-b53d-680db49ee04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf81875c-9a2f-4af1-b308-213625f3c7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c37796a-61d7-4651-ad1e-6ccdec709447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db6c631-6719-44aa-aa01-a70092e3f7b0",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11d3dff-414c-4b13-a86a-c328933dfa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9cae00-8ee4-440d-8ec7-f20d72f85e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593a3e5e-8781-4aa5-8a3b-5da67159364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af81675-29b2-464d-a5d0-c4e385c30ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1564db9-6ae7-4fb0-9f25-286087b3bffd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d0a78f-fec3-4fbb-b182-986320b3c574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f29743d-887a-42ab-acdc-e82524c90752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab294ce4-9934-498e-b1a8-5499aff6f8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87104239-70f3-476a-8ccb-98d7f564bf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc63fec1-4ab8-4ec5-aee4-5b8a228aace1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee22e5e-f676-4a75-ac1f-c03297924645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb3b576-08b7-4bd8-9d39-28890f4c0be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfecea2e-2eaf-4d77-85e7-dd8b29940be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c28cfdf-7c71-4cd1-b315-61062cdc033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f53c1-e704-4ab0-b08f-d3894ca291e3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e33dab1-c48e-4cfd-99c8-887689714436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985d75b7-9047-4a58-a7c2-417ab7082f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22c557b-f7a3-471e-a4fc-1d07bb75a472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc575080-4001-4e08-bc1f-0b1674a263d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5506d4b1-65a0-4a28-b4f6-9b5e0ccc2502",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca3f2dd-3460-4f77-92e3-0940468efed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7bd31e-96a3-4ef1-9956-fa919bca8b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f539796d-83b0-4fbd-b009-4e96a8436fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47d0a482-3d3a-4b53-a1cd-de4a50bd345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c2c245-ecc2-4803-8eae-88fbaf3b1fa3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2140bfe-2826-456a-ad53-b8a0b758a532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a274ffb-5f2d-4ae3-ac1b-e75db441b43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c87109-08e8-4863-8723-8c47836d5669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84183d19-4567-4745-b54b-a250dd7c76e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa47e06-2c4d-493b-a7c8-0e4770813196",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438c89ed-1837-4fe5-bd54-05187621ba65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f10c91c-703f-4248-8542-467a1b4d208b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25164883-4107-4baa-8eeb-e308efd0c213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c006ac-6d97-40d4-8ea2-8b7ae570ef07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bab6b09-3e92-4579-bf3f-69b101a17c45",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a4a792-69be-46ac-a48c-d630b5a533e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5805be99-e0c9-4f65-b9f1-6d0e21b3f71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71300611-ebaa-440a-a5ce-311da3700299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d18a56a-31fb-4f1e-a9b8-dd8d15ce68b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd252db-506f-4a15-95fc-8954bcad366d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b3ad4-c141-4f00-891d-5e950bda82b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f17cb2-7f21-42b9-81da-3b5f589cabcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5329d9b-5778-4771-8bc4-f419de68271e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bc06ad-c763-4d3c-9911-0b4709d045f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc12519-b7cc-4fbe-a88b-8c6e3094c4a6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6edf1d4-37ac-4a2f-8d88-4f346b12bbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379a8406-a953-44e4-a59b-06dc25e33b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf121f34-b040-4e5c-a816-8bda4e753212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03199564-feb3-4119-9629-f133d9ee43df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267c7355-2619-4031-8890-8fc136ae0308",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa91fc4e-7686-471c-8e59-c73d11ae3687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebb30e9-0deb-4b8e-ac39-4da273a68dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff057e3-2587-4f2c-95be-d088ee4cd897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7be58a9-d69e-4c2c-ba2d-e9627f8f02a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014ea4ae-7857-4f05-bb05-af4e2eac3ab9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb80f8e0-a5b2-43c5-8442-fe3461408176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b763f5e-0ab6-44d5-989e-a03dd51503f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ae3924-aa88-4671-bb7e-7b0cf109918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52fd2492-6350-4e4c-ab7d-f5ea31ba7343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19690fc2-9a29-4c34-baa2-b05df7f461be",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d5bf62-de7a-43d8-95fa-a16142c02074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb4ceb5-3096-4488-9613-02ac37b3c679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8635f6c-b158-4c46-9434-5cca529e84f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbf9a7e-31b0-487a-9e64-42aaf60afe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf75c025-67aa-4060-8fac-bb01051eb0d6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779d3c83-558c-46e2-9899-c36a57b7e5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b1b021-e2e0-49a5-aa63-2451fb8cb274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea087985-4679-4d65-b07a-833f4d3c7237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e5e735-9ff0-4e4a-a5ff-cad747390376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea0c24a-e76c-41d7-b6b9-e013c9020316",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f156214-5062-421a-8148-9d7960c5c5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e500ade5-0d20-4161-8a95-dbf9a0ee083e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e26777e-535a-4f96-92ab-3bf5bb9d87fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f34e00-25c8-4304-9c20-d9ca422dae4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6089da8-6073-4fb8-bbe6-e15f0a824d12",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf78b6e1-e111-47ee-9ec2-a56b64e9c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e37510f-cf67-4551-8dc1-ba94bc93c6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbee16a-c068-450d-aa83-a458f3627059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8150db21-0b42-4482-b050-e169cefd3e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9badeaeb-95c2-4c07-85a2-f3b63ced8fdb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36764e43-0ce7-402d-847d-c9d3f0931328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b93d12-75ea-42ff-bfc4-959b54204865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0612923-d339-48fc-be0b-c08e599bf684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85aa83ff-9996-49d9-bfe7-460ac937f903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb693e98-c84e-4e28-a747-3adc115b6ca9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bc52b5-5e97-4495-8f4a-3e855f10ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a390d2-63b5-4c57-9ac4-0a99aa3f1371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b0897f-437f-4d0f-9379-6b515e20b58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0568a2d2-5197-4485-b835-6dd4ca1502dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb45afe-c482-4457-90e1-4358a9b77a7f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e801869a-327f-4b80-9f9c-3c759f5c7cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159ad58f-ab81-46ac-b2a1-45a3b3fc2cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c1dc7f-0470-43dc-8a20-705f04ae4194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ace66eb-bb93-46b2-8cd3-1ac260ea1694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4af9453-1a0b-43c9-95e4-7532c79ca771",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82d0399-033c-46c8-b239-9ed1ba8f86ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d046b944-326a-4376-b5c5-acb17e68a5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82173b7a-58b3-492c-8fe3-39943f834a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e22b59cc-e05a-40bf-b524-bae07e559340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f2c6ef-226a-423f-8e39-72771c58f280",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420b6b5a-e57a-4c8c-a75a-5440a2509848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9366a0c1-dc14-4719-b860-a406e8b160ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a35aef4-4ece-4090-aef5-19eeb346b93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "526b174f-5677-470a-b4ae-328e1c234369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb1520b-8e8e-4b6d-a711-30c024f047dc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d92f02-de1d-4731-ad5d-db2182e90c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc61ec7-04d9-4357-a40e-4a7e6e88737d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56590cdf-8b40-4781-9c1a-62286cd1c9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f114dc9-4b0a-400f-b8f3-814ed72bf714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1035cbd3-27da-4c15-b851-c4cc9c05f93a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b55fef3-93bd-49c9-bf90-642b7c9c1db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae96acf-6e80-4bb9-ac0d-f864219c94fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d764c160-933f-4f9c-9f4b-6c722027e2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac69f273-ae58-408f-847e-2a88991b902c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775f000e-9f2f-469a-b31d-33aa8792de50",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d657ed58-b5e0-4961-b53e-8f3cd8c889a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b459908d-2ea3-49a4-a326-80edf6cdd1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757cd2e4-a982-4368-9536-4fde8ebef33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62be7d86-4103-4f49-855f-26ff60231eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b29b49b-29e8-4fad-8b87-52e0fa3f57bd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a067c51c-ff9b-4495-9c8e-c3552ef2c303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f19c04-0d95-40d9-87d0-937248f57cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b881294-8606-4d05-980d-c67a37defde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ff08d8-2eba-4f4a-91c1-1a3fca3f0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3600c89-f1e3-475a-a137-9f99a13cc97d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f113feb7-902c-414d-acbd-8ec6e4c91d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e06f3d0-b39f-4290-82cf-ab1e7b18bd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2edf4e7-081b-4288-810b-cdfd0c1a3a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2646bc-077a-4864-9c3c-55d940f293ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc50c4b6-8c72-4756-a619-8c00bc172206",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baa9e1b-2bd1-43da-a3c9-c71ac93ebf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252abaff-12f3-4ac7-9cb4-17cb459ef20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c166ccdb-17e5-4e3f-bcf3-36628e553b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5709f87e-a3b3-4088-8771-59dc0a07f579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0c76aa-e40b-490e-9540-8c3691cc7ce9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eb6166-03fa-4afb-9275-674633ce585c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbd975e-cb35-443c-ba3d-db6a76e3ac81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f70113-f4ae-467b-99f9-4ce1ae17eb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5c516b-7081-43f8-97d7-8db160a894d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eadb2b8-6bcc-4e19-8829-2f1c542edcb6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa551889-852c-49a2-9bcc-24aa5a66d20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40758d4-6e4b-4af9-b68a-594c4ad65d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dc4854-2e6d-4759-8aaa-3c856a7163a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1558f8c-17e8-4817-a4e3-388e67b91c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a033201-0b91-4f73-aeb6-21c8ff7c006e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d41983a-0a63-4129-b54c-42e27df863a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3667948-fc8e-4ee7-8ad7-9b5dfa624fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d4b20e-8fed-486e-b9f3-7f3dbcc9000f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72203738-763c-436a-8143-a91da131a59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9105b94-f787-4e84-b3c4-36f2e08c0ccf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b3bc0e-b1c7-452e-b04f-3549ba618d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14dd6d04-eff4-4854-9912-a93f1fd200a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efc5323-3bdb-4658-97eb-90587145fa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f081310f-f8c5-42ef-bcb7-a8dfc6db500f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bf902c-e642-4e24-b2a8-d7f6e911303e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7843057f-6897-46cf-bdd0-40b1dfc687e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620307cd-aa4d-48de-bc1b-6529a994c7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529b8b83-104d-496b-8788-d85a18c8d632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9be0e710-7629-4b79-81df-972c8743de3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35aa463-8423-40a9-97dc-6a5acb214383",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f4fc1-3e29-4d4d-ad77-94aa08c2b766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52382660-6656-441e-b8bc-1af5967306fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c09dc0-48d4-4103-9fe7-f77f2b33f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "27cecdb9-6884-4f84-996f-cd21bf0db3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82ec651-398d-41f8-9af0-5e5444e8b336",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17b1d99-0829-47fa-8698-771f4556d924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb8a21d-3f7f-4c10-b327-36ac506c4f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3849d800-c266-4eee-8c2c-821aa6553943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7a0f24-d8bf-4852-a3c2-2743d758a90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2139b2c-d857-4ae4-8b52-617bac47c8f8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86109c7-8de7-4178-bd18-3039657cc6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f5ffe0-2e3e-48c4-8272-a469c8ba2a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9827114-1a60-4ba1-9f0b-2544d8f90be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23890d9b-db54-4207-a984-b18c267acea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95896708-ce87-4ebd-88b2-a70c29a7b1af",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead09c84-2adf-4da0-81ad-23a8722865f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe1e2f5-6342-4f16-b30d-00db90c497cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4679c1-84e5-4241-b971-d34a4274b44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e103390a-44be-4f01-ab17-88c1dbc336e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa30f52-41ed-4e2c-8d57-3dd44b63828a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e347a6-3192-4585-aa31-82cb1dfcf0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9a1f63-e592-400b-82e1-fe1387c11208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2505fd29-fc83-4568-ad4e-df535eb227df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef03b44d-479d-4f1f-9675-a91f83c3c5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e086d0-b941-4cb7-812a-f840d8d529dd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5daff13-7db3-40e7-8780-93fcb6c6f537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77cd214-98ed-48b7-9af4-ae7869f4270b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dae68cd-717e-4c12-a2cb-6c5cd9038640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dce0ab9a-e184-4a08-a2dd-284830e7f63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03b926a-0840-4ad9-8f16-af438757ca0a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2ddc5c-c1b7-494c-acda-a35e04d194bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a20b0d9-7a56-4a2a-ae4f-16379e1aac0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25604ef-9bf9-422c-a649-e3bede810f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b666fb4-e461-4603-a055-46d4590bae9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7369a38-fa46-448d-9232-3ccdfedad05a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaf4e7f-0655-4e13-af14-65528cf46cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53599d1-528d-4de4-88c6-e09f9d675301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d99572-abc5-400b-80dc-9a1fcece5d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba17de6-209d-4c4c-9645-67c764ec0c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e43edf-51b7-40d7-a634-7c924edd307c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe390fc-7071-4cfa-95d7-e40b15cb25f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca26fa9b-8f04-46d4-b1d5-0064f87d7864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e9649b-0a6a-477e-844c-6d87ccd436c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29155ea1-0ddb-4d24-baed-f3d64002bbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0ef865-ba26-4c6c-abc3-a9e80382ec8f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e43f68c-5bbf-4e90-bbc1-5f1cfaa0a824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ee66f8-f7a5-44b9-aa98-d12ec5c34098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e3c579-3fb4-4c3f-babc-f7ede49ead92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e80c23-5217-4287-b8b3-a7406f0a2fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe822e49-3c71-4799-a340-ba4f379aef97",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab6cc61-68b6-4340-b730-a0540654e9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d849460-0922-4ca7-b9b3-faf5435caea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491b43d9-f12b-4a18-a6d6-dda543c90aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f0c997-a3d8-4fdb-9dc5-5669e4ef35c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d0787-f097-420e-9bfd-9e931c7ab001",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f1aad2-aa7c-4d02-9f67-11e20df03252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098bac70-e912-4433-88ce-d3e607eb59d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f767cffb-2c67-4ff7-b085-0e8255761c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e630753-17a1-4fee-888e-dfe03ab5477e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e5716e-a2cc-4dfb-a4e3-906a7b5cedce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d7d258-f91a-4eeb-baa2-a9e7d835568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c7e503-97ac-4332-8bf3-60b4c62dbb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa44d64a-3205-4091-8d34-8a83afa1f8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b277d76f-c222-43aa-ad12-a38f81a175a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d01dbf-58b2-49e4-ab57-7db8caa31bcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcf37f8-e327-4ff1-9007-7c6bf4d13ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5446b5a9-97eb-41ef-b1f9-7b676798489a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59ff052-f83c-4002-9949-1d8ea1e4243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71d5de71-5922-4616-9730-9490745f3141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9132fcb0-21ee-4caa-8f1d-e0bbf9a88b93",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b41f479-8fdb-40f6-9caa-29d6c7743854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f657481e-dfd3-4a55-9836-9afdea25a5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84c2702-e2aa-46d5-8d7c-0deb62a2f838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fee3db8-ac46-4a70-8226-181de3ab017b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6fb836-c24c-4bf0-8858-cedc72c9cbcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b294d7-dfed-4be3-975d-66ad49e891de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab221827-489d-4b8f-b54e-fbd3263ec5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2ca32e-ad1c-4d95-ae6b-8f02705bad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9da3c3-0cd9-44eb-b8d8-4200b29acada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098d00c9-22f3-44c9-a1a1-b5e5a02d486b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d8a7db-c3a3-47d7-9a55-d4b26c634b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cc7b0e-4b26-4cdb-abd3-b3163ea65a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ff9387-6103-4910-99cf-d8819ee35890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5474d0-7164-4a4c-81a7-ba3b5b671ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0110b124-f8ab-4a7e-bd74-09fd4370eb00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d778d0e-a013-4114-a893-06b637d33e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded3a994-304f-4027-9a55-01253a8d360c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0bafec-fd93-4ac2-9416-b7b883b42d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b5358a-e869-4856-8b98-b5a5564c8005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480d3c7d-2a9d-4251-ad44-26e71d322f72",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a489a36-bfa3-4545-9cf4-a034dbd034f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e30b200-e9bc-4f0e-bf3f-f5182650af53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cbb503-0e0d-4981-9225-6f62cde17b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72af5b9-2398-44b3-914d-761247ad5416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3544a060-baa5-40a8-ab3d-c1f6cf0b800e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3431e8d4-1655-428f-bdb3-c186a4fe3a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7de519-01d1-456e-ab3a-22fcdfbe9a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b094552-678e-45ac-8118-52ba462c7307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fb4ad6-e630-41e0-b9e4-df8172851d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dc7144-2df7-4f64-ab33-2f05f73b47b7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabca940-49f2-4acc-b3bc-d8dc543f0560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3394c1a1-292a-47e4-9036-e9f0998aa996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dfccf2-ccbc-41a3-a0cb-9ba2f2973260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77ce2bb6-03b1-4e1c-a5a1-0545c3464856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b809d703-0836-468c-a806-76f9de282a77",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f796ffba-7115-4db8-a781-75e2d51817a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca536bf5-698f-4feb-85a1-5203237588f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f59d030-5a02-4b7a-b15b-594e6b3b44fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "414a5efb-e6fc-4624-aee4-07edc183d697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c400d1-423c-46d9-b149-a125c05d77e9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6fc071-7559-4e03-aa10-a9149687982e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9270755-2a2d-4c78-8b48-fd4c2dce9d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bc925f-48e7-4569-9cb0-5b917c3ed96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e463e33-b394-4bc5-bb0d-f8ed379516de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b2ed26-9550-44df-81de-e04cc6c46fb2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173f95ec-cae4-4e82-ad3d-40c367cbc804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d47c3a-3922-439e-b995-959a36b59af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0716834-a074-4e53-a679-4fded01264b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92af2be5-4873-476c-8948-04ac420de330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95139d02-6b3f-41e0-aaaf-2ca2e66df0fe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25664ee3-6cbc-48bd-8328-2353a8eca769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b456a8e-7fac-4c2d-a313-085e043f95b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a33bb2-af0c-414f-b1cd-86ecdcd6bf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc872a14-1205-4a50-b72e-72c4b87b9a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8db604f-df0c-49e5-bc36-4b3827515505",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1e967a-1db1-463d-b78d-215fe4f3d44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c351c8-2ad4-47d2-8278-8e5f82d09061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e74df8-b46f-4922-b18f-f8786f303f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b64c977-bd5e-49d8-a6a1-a2f50b9c02c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc4f455-db5f-45be-92ff-60ab62e6c9d9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0d318a-7308-46a5-a051-ac5162bfbb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a6ee34-1809-4018-9e6c-8f6e00022f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f29b8f7-b9e9-4de9-b87d-1381716c14d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24623aba-e580-4851-9002-04d2952c04ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50116ce9-67e0-40ab-a358-b4e89bcf7bbe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac203b87-0b12-43a9-92af-5338ca181377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6015ab70-7083-472c-b4d9-71b4dc9ec4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de498b4a-9cd8-4208-995c-46032f5e7f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6851469-a0a3-49a1-82ac-093228a37365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7b861e-557e-4313-97f3-4d6fb502448d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c4c18f-7b49-42f1-8a1f-c2c49f483973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5687a40f-b01f-4856-8477-caa64902ad65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1255f262-63df-4a3e-80d8-44a469824e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "928dee45-a47b-4e10-a0ac-3e91f99a9a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4da0c3d-770e-4cda-9b17-ae57c5b70809",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77145ba8-1365-4177-bed3-dab7dd26f03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7a2b72-18b5-4c21-a07c-fe9c254e8c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6c05c4-c067-4bc9-8264-d378a2475c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af455199-7689-4cda-a173-c8cb2c23917a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258a495c-f4b3-4704-a8d3-593b35dd20c2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1204f9-034d-468e-b35f-bd8bc7122d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e88241f-ff6e-4511-adde-ef774abdf9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c931ef-42bf-4157-af86-b670365b5fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78c4a56c-6710-4969-96e1-4f15579c84de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b748ce-24a0-4a8f-b549-b61c772dead7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f560c4d3-5558-45f5-8804-dc3d851ca0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e283ac-7e07-45c6-9d37-1f03abe28cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d15c26-4d9e-4639-bf00-a5c80777a1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5555c394-dd3f-418f-8baa-bd9e2fbe4c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747f60a1-eef3-4236-9915-d77721bdb675",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336962ee-3c1f-49a7-9253-01f0d9332c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72654f3d-a050-47f6-98ad-73aca331c816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87a8599-549e-4e4b-b4cf-614980ca373f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cc07da-1faf-4c60-b3e2-dc1579cb322c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121ac92f-3d92-4773-a39c-cc89cc88c27f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6290e44c-c3c3-4482-9ebf-7115d1fc18ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c823b0b3-0c03-4f9d-b8f1-24f944e674f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6278247-b71e-43c6-a2c0-7e2d474d34e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4b5a62-4e6f-4e91-a6fe-49df085d1a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875fc5de-7461-4368-82f5-fa6428663b8e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0d9ed7-8d52-43e3-bad8-e4ec179914c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6a1fb3-9c3c-4e9f-a55d-9f86621cc29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33418fcd-fc7b-4e20-81a8-4ea65c5a4605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1621401d-9c21-4710-a175-87b29ccb80bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf983a1-e782-4fbe-8d26-dfa018e27635",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a465e003-4585-41fc-8bf7-0d0d02f26373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7657aac-bae2-4bbb-895b-d6dabce532a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a68321-8817-439b-8930-0dded49e6821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "413d3f5e-f41d-425e-b3f9-b3485955182c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c861e25b-dd77-40b4-a1db-5116b2237614",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f8d82f-6cbe-47ed-8c64-c076bd4a789d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb444a7-fddb-4510-b30a-7f80d158a614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c152f4-a221-4df7-8374-8dda004af1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1e96a2-7ff8-4a44-b005-b98d68cf4796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721d52b5-9de8-4952-803b-c2997eaffaa2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fc1d6e-01bc-4cb6-8c58-d0944f1f38da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fe8d4c-21e4-4f0f-b847-c45c5e205aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca162ac-ce0a-46b4-baf8-12c5f925bb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e95dc14-3c35-4f33-ae13-b213ea0d1e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51205f7d-cdfa-4eab-b2e8-3f52d0ee809a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099a8905-9dbc-4797-a9b1-6204d4580719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4dde1f-39b6-4453-9a88-d3bdafc863a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41404c0-4d5f-4a6f-abe3-9afb765e686e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5c238d-1faa-4b11-8df3-31c7f7383212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa60afd5-d8f6-43be-8d18-4fdc9f59c8d3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3955a2-04c0-4e3d-aa9a-f4442d368c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14ed10c-ca3e-4178-851e-ad69c4c3dc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47023b1a-8aaf-4848-a62b-98f6c420da8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d759253c-5e2a-4f31-b236-9cfca69d420b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee77bf0-96d0-4dc4-b205-7221905c0a8e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc46b60-9752-449e-b961-27424e200814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8b08c5-2c17-4216-a329-ed839e44898b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cb634c-f789-4a18-99dc-749a5ee13a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1e706b-5e1a-4c30-abbc-e26722b73b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abf43a3-c69c-4564-967b-582e356ebf76",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94de242-058b-4117-896c-b83e6d59dba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9130f361-c5d9-4be1-9157-fb770909cb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90796e3a-c120-44cc-965a-0eecfaa90cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce967e8-0dee-40a5-9926-9667495456ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2205b2-d1a4-49ba-a813-aed5612f901b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dc26ce-d66b-4ca9-9eab-21a9c3f957c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647578fe-3728-4d03-b126-2902ead94575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8df5b4c-d560-44f1-86c4-d424f45c152c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ca8273-aeca-41a3-94e6-39a04ecc8aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3323699-3099-40a3-93ac-cb560fffcb1d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a7953d-bebb-4e9a-962b-2f13afde39e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1209b044-b261-4c86-a77a-1786e4813b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adbd2b2-43dc-418b-8d1c-4e48511d36ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7015873-6fbf-4295-83e7-ef42c8a1dc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bda526b-e66d-4444-8147-89e13a2fefda",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971a53e2-48f2-4099-bc43-c27d11548c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cf34e6-8537-4536-81eb-acea0cf16dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d46fc6-fb37-4de6-8be5-22590b896bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ddfff11-ebf5-43ae-9ca6-d70b1840869d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d972a95-9600-41de-a61f-33d29bcab1bf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74275195-6511-4497-8f9c-cc90013087aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3d03b8-11c6-47ef-ae5b-0cb6cad2ab49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d334621-a109-4cae-b46a-3b7757e2d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7917ef4f-423b-46a2-bbed-e511c8433278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddff50c2-41bf-4c94-9005-d315aaa51ad7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd796d4-4c7b-49c3-b130-cae58a353491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73189ffa-ea04-4180-ace2-0e26e9f2fa8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445776a4-9e55-4211-ac27-292e4551e604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6df58578-a763-44ec-9230-0dad57cc101a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e5e2fd-2bcc-456a-b405-5ed73bd08ab8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccce6c4-4415-4d0d-b3bc-5c978e6f7dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f691d88-c87a-49ff-a465-ac1458e520ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb00886-5859-4452-9589-6ef9d924e68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e76a95e-34df-4462-9c9d-a1360f82d521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7b6e88-6885-4292-bf51-d16756892f9a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c017f87f-c6a5-4d0b-8236-e63ee2841441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1623ad1b-ef82-4a45-abcc-92b6ca25dd69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f319bc76-8fdc-47a6-964c-068872eef554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c1efdf-e8f6-4201-9e90-844196d7056b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3d8c52d-85d7-48d4-be4c-e3cd55a3c2d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21fb6732-0046-4b11-838b-864b0e4751c5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94990061-29d9-4b2c-ada8-277565bcabb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3048ac7-61b3-4835-8edf-5a463aa15308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7fec2e-ea1e-4ca0-a8b6-c984b92d4d54",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4f3db5c1-dfd9-4703-8192-db1ea2e60725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aca8568-86ee-427d-96a1-ccb4241ac8ac",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9585a421-012a-4b7f-901f-14b0f29dcc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0e51b77-e302-43e7-aa64-88ef4bcdcdfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c664eb-04e2-4ed7-b1d2-985d964e4f7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "17d8ddbc-898c-4c21-877b-abf22d130576"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccd87f6e-83f4-4d45-8892-3edee2a0bd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "025c5ae9-2cb7-411b-ac37-03b946320025"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d381e359-30f0-47c7-a3cb-8180d96ea9f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc6b5128-ee6a-4ac7-8974-5a40464342fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07a4fdb9-f35a-4104-917c-dd089cee599b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4d399c7-fb0b-4e9d-835a-b3857a0eb220"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2679cc0e-f5ad-480d-b1cf-17a5a8164fa3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecebbb20-30cd-46d6-be9b-564f44e23905"
                }
              }
            ]
          },
          {
            "id": "2772f258-2a8d-4c04-835c-aef139da5033",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b192fba4-9a2b-4e03-83f4-e430a062a30f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeb299d5-031b-4d84-9297-2d9abd21420e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45f5d107-c5d0-4e07-80f0-1c683cb015b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40a74ae4-edb9-466d-a9ea-650c3708430f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48340856-bd23-4ead-83f0-9ada1c80d30f"
                    }
                  }
                ]
              },
              {
                "id": "f22dc559-a71c-42fb-b485-823437b5df12",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf38495-a163-488b-bf37-8291d6dcf2d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da2b4206-1ea6-4350-b149-945ddee9a976"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75f410db-0362-405b-a997-f61ded8fb1e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77244135-7bc6-4edf-a56c-fc1be27da741"
                    }
                  }
                ]
              },
              {
                "id": "5854d8e7-bb90-4964-9086-e75673af9b74",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64935d7b-b09e-4b21-9b2e-b182adc1f4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbb6d57d-c94e-4e6e-8b6f-aaa5d913c82e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0be75416-0297-4f6d-bd13-f2761522cfcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f0f07160-6e2e-4373-b799-c451408c125a"
                    }
                  }
                ]
              },
              {
                "id": "91098ab6-b42a-4ec7-bf7e-3e612f0ac6ee",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2d8e83c-be34-4937-9175-5b4c1936682e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "246acc5a-009c-45d4-9340-c642d4e27459"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdb140c2-bc5a-4e0b-83d5-649aee104165",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7e381539-56de-4531-a88c-45f17462c181"
                    }
                  }
                ]
              },
              {
                "id": "f6743da2-6698-4753-ba8a-0a46730e406b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bb57415-206b-4997-9d63-98e9c1939231",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "deceb2a0-3f35-437e-87a8-bb5ae23ce12d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16f2fcd8-b558-433e-95ff-ab81a07ff010",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5edbd0fd-b5fe-4ed6-808e-5e948e060868"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c7d594b6-653a-45cf-9a1f-8a4d38624d9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2305ec7e-7185-4eaf-8384-c5675f5debc6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5592d110-5ec4-4658-b507-c437d5ea2ebe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7caab1e4-3775-4c4e-bf23-0063de4ae33c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24b28ad4-9474-495a-ba5c-7569df48d55e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "092ea59d-3943-463d-9f90-57279063f739"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e411740-0486-41e6-8ce5-df0a2c31a7f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f0e3441-2684-4fc6-b0ee-b3346540df8e"
            }
          }
        ]
      },
      {
        "id": "6f6a0efe-0181-40da-a25f-34772bee3582",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "20482f92-269d-4b56-a913-63733f2382f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f24531fa-ee04-45cf-ac92-cfc5ff0dc99a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "443eb67f-302f-4db8-9b98-1bb3aac0ed8c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e75d41-868f-4579-a7da-8ce5fcd38953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09d00ee-8363-4566-bcb1-a23a5d5fea3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c8275a-0063-4910-8a65-d443699bb044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6769f315-e5b3-4ffc-8c47-ccc3551dbd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5925971b-af7a-46ca-a904-5c3e75c9e9a8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6555ccb5-9eae-4eb2-ade4-64abfcfb45c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25d4fd4-f302-4cda-b2f2-7ee70a7abd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e46c9a4-7a62-42f8-871b-517c06292f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7903e3-bcac-455c-8072-d571be9a91cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ee438d-116c-4002-b4ac-98ed0ec1b5c6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57850e23-c367-4635-adc4-306b5f46d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738f1baf-24c6-4870-84bd-105abc5d2c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a881af-fd31-4ddb-8213-c0460e2ab8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85e78cd3-8de1-481a-b039-a04b24858576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f6456a-adf8-4040-a263-2a1171cdbd14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd89bbb2-8b2f-4265-a083-7b9dcd69a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1594df04-b199-43b7-a5f0-098e5af7540b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bb29d1-9c52-4f1d-8e30-fa8e3b3e2c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15f3592-5a6a-4d52-a348-9fffc905c430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b3f753-c0d4-4902-986f-167b80750862",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d08c04d-4338-484a-9cb9-ba7d0f0bda59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff617627-9b4f-44a7-a1e9-693c3a914844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165481f5-3569-44ad-b0e3-b61f36d765d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5021918-2be7-4eff-8260-02a939ea463f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d1079e-bbdd-448a-9cc5-b313d08e4ef5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708272d5-5062-49aa-8117-d533df4d1143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf8ef08-cf18-42e0-a4e8-652dcf9409dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e4a04c-3d05-4945-bc3a-b46f1fdf7a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "086cb275-d3f0-4e81-b605-f934c6a5196c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb43f7b-2566-4361-9cd1-216aa0d36856",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02b1ca2-b19b-4256-b019-17bc2d547937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d258700b-9774-4af5-bff5-afa6aa3ace9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48795c5-bdc3-4783-b52a-07d3ee1af1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f051d747-ff77-4828-b0a9-c30a5566717e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e0f66f-7ea0-4d84-b4df-bd7023b5bf74",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27a558f-ae2c-470d-8e08-588384387cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30767ead-c7d6-4214-b4ca-a4aca9139140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336d7bbb-700e-4f28-ad67-537981289637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6267b9cc-5d30-46e0-b4d8-65d0ee25ff06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9accca3c-8dc8-4713-9ea3-999cdf9c9143",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1cbfce-547e-4ac5-825d-80010cfbc6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8456ac3d-c93d-4ae0-bd5c-e8d13eb8c9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff9d226-1b7a-4fa1-b9ea-f063b4e5b73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc094db-f4b4-45f6-a5ad-59c4e73cd20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbfcdba-f483-40f7-83fa-c8de84742673",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a90767c-b85a-4dcc-a28d-f12fdab5854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb8bfd7-8bea-4db2-96fd-8c047451c59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9271a76a-26a6-4bba-a12c-fc2d51f2bbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a793b74-ae87-4456-950a-fae7c2eeaf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfae0bd-df38-4f68-8379-025031a1d30b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a525daf-e81d-48a2-a001-bfc91dc85f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5309ee5d-ca3a-4ecc-bbb4-97ec05ea681c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a216e321-566f-4284-a72d-12740cd50705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "78684dc8-c248-4e58-bb3d-5889d66627f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fcd003-e101-4c3a-ac09-77563f2aac98",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20acc735-0322-4b94-8bfc-39f98b677887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356befba-bd8b-4f5d-83c4-b0b9329fd7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f256b11-d1fe-47ea-bb6e-2b3a87e4c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5276278a-1a68-4ed9-b120-320a8dac03b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c79749-0f20-4183-ac46-e02379a52066",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90b2bec-d8f2-43c8-9399-a1b9f583b770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e557a2-4362-4dcb-9057-855b8bc707d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67840639-521f-4c58-96f0-fedb41123612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7120c00c-f496-4449-9cbe-11d45d6e25b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8ea781-47f2-4bb1-be4d-b8bd7c4cf013",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276ae7ce-1faf-4638-a444-d0cc06c3c0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3726ff9-fe7e-4b8a-83ec-c910d6df287a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f56bd2e-a35a-418f-8ab2-35071b87fc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "76fde9ad-01da-4dd5-9e42-8c4cd1e6b718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f969fba1-952b-4024-8245-a697e707b584",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c941b5b6-f828-4ff3-af6d-2fe76ff8d165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a63ad9-4e01-4b57-b39f-f3bb6ea4babe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c261aa3-ab42-4aa9-846c-cf12e202f556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "955b019e-dbb6-40be-94d3-f9859436524a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b627def3-e3cf-4f01-8446-8394b84eb1e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f955fd-3e1f-4590-a920-5fe5b079be23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee21247-6929-4003-8349-1221bbc9d7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b1fb8b-a838-4d9c-9480-5e39d55e5505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3ad541-d604-4416-b6de-99983462c1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f40da8b-8670-4d2a-9c16-1c81ea67deba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc01da-340f-4b5a-842c-9b0f33c54540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac305dc4-0398-4a0a-924b-66ffa504c37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f25917-30ba-43e8-9298-363e4662d03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3664d12-f4d2-4f62-9480-a5d48a91bb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba563c0d-38fa-445b-b536-1338cea71973",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a08be8-56d2-4fae-b039-fa4b5d6e76c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db9ea6a-6597-4888-b9e3-0be817058156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b497b0-65ad-4b0d-85c6-be99aa3beee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c240a895-bc87-4b0d-b3b6-4871d39ec4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bfdcee-3862-4cce-82c1-36421135597f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37428cb7-c2f5-4b3a-b96e-ffdefa0d0a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3393ac16-4465-45bc-93fb-f3af5c00918b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ed6804-9b8e-4dc8-955d-6b204bf9f048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c06c08-b94b-4f6a-b8e6-a78b5b1a283a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bec6c5-5330-4a2e-9aa5-cfead31a34e4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1373e5-0459-4233-9ee6-f59f5de833bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2752f9-75d0-4369-92ba-e2a21f69cb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ce18c0-dd4a-4f3b-8afa-fcb18dcdeec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b231a9-e3d0-403c-8a94-a699076f3942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa665660-b7e1-4d83-85a6-b3d705f20de1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f81a3b-f531-4945-a193-d7f85ceb69c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc917db-d3c3-4130-b0c0-bee2f1119a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec366ca-e370-4feb-95fd-a14a2b01a7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2028f5-ca25-4667-a318-c16bb882a523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40330059-4dee-4bef-a585-a87a0aded3de",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6f644a-29d0-4598-8b9b-49fdd65ba35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7976202-ef6b-447e-9c05-bc7818ba065d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3665ec-f8ec-491f-8ab5-d86fd12d398f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87824448-ec36-4f1d-8c99-0154c783c63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f101fd-bd7d-4c12-b109-382f5418d020",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4ae68b-ddda-4e2e-8c6a-d78ad6951d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58943fe3-e1b2-4d29-bf6d-5b88f7b93bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf3bd66-2450-43fb-b43a-71838d8489b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f64b1055-fc36-4488-a71c-62e129b5307b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5935f3b6-4ae5-4434-949e-0a4f0b445c9c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b20968f-4f26-4e15-9f6d-477a4dcff957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4e9adf-ddce-43db-baf4-0578bbc6cdff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29daf63-3867-4651-b1ec-c897654dae7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8265b6-4b38-4b36-84d4-32761e30064c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b569c8b-3869-4c1a-857e-9ff36edcb253",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7617f2b-3d9f-48cb-b240-04ce905c1ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78be53a-59e4-413a-b188-3bfc84f8e132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972df36b-6be8-459b-b6f8-1950dfa29a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c039300-5186-4e84-ae00-240abe2c01ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fdde95-ffe1-4659-b904-75783a4f7ae6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4c2f87-5c43-4327-8fa4-055962b5be7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03686bb1-9d96-4d44-b6b6-40d3e3a3062c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0bb98e-52a6-4473-90f5-4276e683c676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "907d0ed2-2b6d-49d6-a202-264c7921ea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a05e094-d08c-40be-acfb-2ac149d256ae",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11321f6b-ece7-40ff-9ab1-9a8cfe09b3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40194f9d-7396-4225-99df-62f90c3a88e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e672bb0-2d49-492c-9ea7-401617efd4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a429951-4381-4c5b-ad08-2aa1f3e20464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5b86e2-721e-4b34-9684-aa12c7db793d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5469de22-2960-490a-b5a6-1c91d1999408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203cf7de-2520-4686-bb92-bc7667356213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cae113d-494c-4e2a-90eb-25f3e41e03f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74d07b70-ebb7-44b7-8610-7c550c2c0f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17e7fe3-0927-4921-a670-f19ec77a8742",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981ac51f-8b53-4aae-8c72-2ad8f9a464c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6f0a46-4d9b-4a1f-8f3c-c5681eec9046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c753f02-10b8-4775-8257-9648dba46e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a54bdb-ab16-48c5-8174-04b4dfefbaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfceb579-cdab-4689-874d-b1a9737f8deb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ef387e-7174-422f-a839-2d83d4952da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdd7ef3-8586-4b70-aa19-3257b3101852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3515d8fc-4a08-41a4-9f3d-3fa606d43d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da87c7b-5d27-40e4-87b2-9987634351dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cfd755-aa1d-4ef2-8a25-8a897aedeb93",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d45d73-aff4-4593-a4a4-ac8be99b5495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5287bc47-2685-4a8d-a31f-9159ae07c82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7ff199-4c90-4bd2-99d6-c91cccb05d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f94823a-deb0-4e72-a4fa-d224c3b35b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246407a0-0794-46a5-b8c4-28daad768648",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b7aa29-f14d-40fe-8072-46ba1fef8de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ca55e5-a115-4cec-983f-e02c4e2787fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c50545-6a1f-42c7-9114-4fb070e7fc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41887a15-819c-4144-8c3b-e009bd35d650"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72a7f01b-e49e-4024-957d-07baadc34587",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8d5103d-3b8b-447e-b71e-cf717fe2bdfe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba74fc3-0c49-494e-9e11-e9b753577941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97474b3-b5cd-4306-a241-db2dfa368d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32e54fe-0c72-4f5e-bfe6-4b4917f11d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6334ab86-71b6-497b-8544-e338da05da79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfafa5cf-6c4b-47b7-a954-12502dde5a88",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6b6556-27da-40ac-b98a-ce0cb3eb377c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "89797713-d8c4-46f7-b446-50515c4c98bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fd3e93-9444-4baa-8bfc-973dca870235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d16ba7-c632-4ce2-a0c2-3fb7c1f3a7e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bfda169-4623-4867-b5c3-ba29a9f11af7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94c13f70-ba99-4f2d-b745-b92a3e0526af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83146f54-bba5-4ed7-9615-3f6e6ee2db13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06ebb8dc-6f2c-4f9a-9646-5c7b6b51d901"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84dd8dc8-2758-436a-b99b-7f8a96bdb803",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4b353f7-c1c1-44b9-851b-3db814393aa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e379b95-aa34-4679-862d-4d8b3c0c25d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "caabdd73-516e-4191-927e-48f130fc0fe1"
            }
          }
        ]
      },
      {
        "id": "d50caceb-941c-4f5b-b67e-c42a99c5130b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "204c9159-a18d-4e1b-929a-96ae37b73de9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ce84958-9dda-40cc-b9ff-e585a8fc5000",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f2797f1-9f80-4fa4-85d6-d7496135595d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0153a8d5-a865-4258-9293-b8cc862b0b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b1642e-c5b1-4f74-8f46-2504f6a88346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84a00a0-c534-4817-bafa-fa971e25a44e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453aac4d-49fd-439f-b9ba-6144762c7b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83ff0f2-56c6-4bee-955f-cbe75f04cf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3087e257-23fb-4380-a11f-8bf6d7fe60c2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bb90f8-8a0d-44e7-9427-51a1a4c38862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbdea18-280a-4ed8-a1d6-1f23b9e00812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b708272-ae69-4ba4-8755-bfba73e184df",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e52c030-ee55-4e81-b648-49fda96fe3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490461f7-9419-4890-a200-3e6aa4e352eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966b78a8-a488-4fcd-ae20-a2a8c786a1b1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d6dd70-0c0a-4edc-8921-6339f22d8c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a3447d-9372-47f3-bead-f87623284442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c3af1c-c854-4961-9077-3a48c8e05b6e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bed06d-6308-494b-8946-408afdd5dc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a1bbe9-e50b-456c-b864-3afea16809a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5649e372-1763-4c2b-aeec-70e416ab029c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e31980-998a-4c7a-bf92-c9944b432752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a207674-3eac-42b6-9439-7b9630d0a179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8df0cb-3117-40cc-8f70-c1cee3bb8778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7552981a-53b6-410e-8cc7-8f6ad0338c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05618a72-d8f5-47db-b1da-e3922c08b90c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae2ff86-3501-4ac4-9a96-3b1c9eeb417b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8adb1346-e35c-411a-a40d-668dbb6ab309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb81baaa-7406-4a42-a5a8-9244c7541b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f592b3b-74e1-4c79-94e9-240d93f7c5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a0003e-38ea-462d-9848-a1f8d252d14c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375f932b-35fb-406f-8414-83e003ec06e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c89a0983-6b01-48b7-b119-81a385b6b6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52061a42-20f5-4033-817c-addf991bbd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed59f10-b63d-4367-ad3b-4706aa5eca5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58e5220-fe4c-47ae-8a11-ecffc210d0e4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049207e1-f814-4887-ac2b-e509a126757d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f68347b-2035-4d88-a877-219ab478e1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed10052e-a62b-4db1-bd01-75f8b9577134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d8f053-8f3c-44e3-9b47-107549709b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b683c22-885b-4db9-b216-0d5e84838fdd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8308e58-9a5e-4a60-9941-a3230abc4821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b30e5ae-c4b6-4362-83b4-b996516fd306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf59c8f-7747-446e-bdd0-65f284b20870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2529be3-8fe1-450f-9447-d223a3e03655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aac453-cf33-42de-80e2-cb2fb2ccce37",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0d03c3-068c-4023-820e-a44cb42a7193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18c626e-cefb-4544-a4d2-c183ba618e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb40ab66-ca16-4a79-a779-81105555f54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c273c48c-2e5d-4082-a7a7-cebc004a7c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c156fc-b5cf-4bb4-bc3c-1ad70088aafd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1fb820-f039-4741-a27d-1ef81cdd5d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac0f763-d696-4943-83e8-d78b35a1d249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2d9316-ec85-4b1a-9f77-ceefaaaeceb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b7145a-03a7-40dc-a8cb-cef2a94a20da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4df6b6d-99aa-46c2-a46c-e0f914407853",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29a1dbd-1f8b-4da9-ad52-7decb9131ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8dfd65-3073-4694-8e06-022103bd260f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8223e0de-2ad5-4ae3-b242-fff8427198aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733e369f-ab18-4a86-ac39-7d783fefa8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65e552e-2223-4619-8a73-7a88ad71ae32",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae64199a-e0f7-45de-bdce-c7dd29970843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1799ce-9c7e-47f7-bb2d-742ee65e8bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2cd337-aa07-4494-b675-419cccf56f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8af8ce-5740-404f-bc32-aa44de352774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6898c4-672e-4ad6-90fc-24745c8f33ad",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3523e2-6632-4ea9-922b-4c02db8fcc28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e82ceb9-231b-41d6-afd5-0eac76dd35b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b48d2da-a2ad-471c-8fad-16049079567e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ddd8cf5-94ef-4fa0-8ff1-c921e6683aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8510fd-a639-4c8d-9fd8-054c1ffaa11d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9fcf22-b4f1-4952-b8ef-12c36e10e5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0d3afe-0a2e-4bb7-adf7-97275e68a148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60467641-63bd-4a06-bf65-d63ed5c540cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdaa15ba-6312-481c-9703-709b1ba15b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0522c9b9-8227-4858-b2f8-420568344d8b",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afded54-65f0-49c1-bec1-24024717be6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19c8a40-de02-4280-9674-b04a2c4686a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0e350b-404e-48b5-bba5-a85de71ea837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43edb6e3-74db-4624-8b57-f2f3716d89b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8c705f-b7a4-4a92-aa10-eaf674865978",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f858f0a8-7981-4816-9619-ef5067647450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea197b7f-c189-4271-986b-2700cc3676d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10b83b2-a56f-421b-80e0-afd569410696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c70bd51-2874-404b-a910-67e538ddbff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e8a04b-40d2-4bc4-b019-5c6b0b3dca7b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbb47c7-39a0-4a02-8304-c621690b4103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbe3e82-716f-4a66-9e94-6faadaf592df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd128837-5d58-4ad3-aea9-5e65f3fc706c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a5b8ea-856d-40cb-b133-8d439e4df352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261d962d-aae6-45cc-aca7-22cf07821619",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ffaeed-f6e2-4a87-8ea4-78e6fc2d4d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b526e7-6ef5-4937-9661-e128c26e196c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294f24c7-3849-4b94-abfb-0c23fb7393b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6156322c-0262-4a33-9b39-4e0aa8a21b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5099894-980b-4b36-a2df-fb73d081a46b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6588f076-ca29-4a6f-add8-9871f30a112f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81999c54-5ed6-4254-8fc6-df679a7a1f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b6d5d7-afd0-4ed1-b9d8-b69f66e8684e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cd36b3-630f-40a6-97dc-087943834f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992058c9-a4cd-479f-99d6-f379c4896d17",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e41a7a-82ae-49ea-8ab5-a14f77fe487c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255bc3c8-61b0-4174-976a-fb826e5c6956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ea7eff-d83f-4a30-8cf8-9290ae28c867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e8b785-f9dd-4d3b-9ee2-af5a7d34b31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebf907b-1f4b-496b-bf10-7c2eb672a766",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8b9422-3356-4b0c-8e8f-3fb8433c0271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c15ac5-6e57-4d08-8b39-24e328a96dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca383eb9-c49d-4241-aae7-e2b1f0b902dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f6acc9-0d58-4125-8da2-a96c07e7b964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa84949d-b25e-4ae9-ab2e-f89464a56819",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23ba283-183d-4cf3-b2c5-22ac82b0c415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "627ac80f-9783-41c2-a91b-d2049f5fee79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251a788e-2fbb-454a-8c3e-c02c51a001a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6eb74e-2322-4057-af82-9697befef1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78db6a5f-2185-4bb3-9faf-6687a554e7c4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a71480-b2ed-4b7d-b94a-ad8012a3799a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15005db-9d0a-4bd8-8450-5e747a312da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a3e49b-10d4-45ba-af50-3ef4d1de6a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a58af04-c11b-4317-b9bc-37535857cebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d53ed6-ed4d-4794-bcdd-94bc20b300a9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c7ebae-c3b5-44ba-b541-6506e856f7cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9dfb059-10b8-4ff9-83f7-e22957a9e51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831568e4-fb06-48ca-bcdb-e6a22e9f8ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2bec07-da42-4dbf-8e5b-7981dac2016e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df89a86b-40f9-4f6c-bc4a-d4c131da322a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92149d80-e17a-4459-bd36-7d8482e02891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5522c1ad-0be9-4d2b-a2db-159c4592b131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2730fb0f-3f6c-4f2a-af06-4f4fb2a03b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50fb203-585c-4023-b4ec-30df7e962758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c245493-bd5f-4ee0-8ef6-921228cd887d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32653037-4492-4f3d-86ed-a9f14a264a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc2564c-8617-4c27-95cf-5c91bd68d280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca682bf-82d1-457a-bf22-b46af60d1832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7d805f-4b37-49c9-a3e6-8893c6b20f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463dbbd8-9149-45e6-ae47-a8a07c08db9c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8885281-c588-4b27-80b6-4ef39418e21e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b678ae84-c801-47a6-9a17-110310ffe08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83466b7-852a-4ff5-b65d-5c6bbdee9c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc956e18-8279-4b88-b9e4-82b9e57279a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d862c82-794f-4f1b-bc7c-36d5cb76ac7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2a7f46-6421-47be-80cb-d667be763166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95577850-ddb5-4597-88e0-cd35f5fa15bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a44eeda-abd5-4618-abec-cbc4b33b73cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0108940-6e24-43ee-8b50-f283f1a55854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477b78ba-59a6-467f-a3b7-9433542b52a1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac84166-d166-49f0-ae49-2d2a504d9018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0046d3a1-4a98-40a2-a451-1cdb39425e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146570f3-da13-425d-960c-d8fe023c9d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120b05bc-b706-45fe-9b6e-41a7cf91e6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bab3e7c-49d1-485b-a9c8-5b97eb73a3c6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4418ee-5361-4807-87d7-3fb222821718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af53f69-011a-4ada-bd76-59a80f960134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d2a4ca-a72b-4e4e-b473-ac0c00353b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2588c9db-9fc0-4b46-a620-8a55901f67a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658caf7b-c59e-416f-a7e7-5c6ec918eb90",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8312daa5-f5be-47b0-88ac-88adc1c9c602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc68f9d8-cf97-4061-b4f8-5491eb7b85c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a7bb31-f20b-45cb-9638-02bd7046146b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001a5eee-6974-4e1c-8362-4e133fa419b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65eefac-7837-402b-8e00-7142e528f27f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545f9f55-eae6-4645-9076-13a0ec60d08c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9597b02f-5381-4ee4-b55d-8268329668db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47af0f6-4b40-4c7f-8bc6-8c7daf642215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00500d86-6248-4253-b3d8-df981561da0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbac37dc-c9cd-4412-a45d-c85082fc4aa8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6507dd-c593-4e7e-99a5-77d336d73ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd996e2-f317-47b1-9874-6d99ffde0e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0713300-08d7-43d5-a718-70870da6268a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a3270f-cb70-46f0-92dc-bfc178c1f717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e3ab78-6722-49d3-bdf6-9c89fdf8e72a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf93f26-5b1c-4250-9673-76bc0a73ce4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6e0366-c05a-4ac0-9fd1-e6fca6b496c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14dd3d1-0fd2-4a1d-9f2e-11ddb2f4cc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69978e08-822b-4c13-99ad-14a1d554b3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a910804-7e59-4f3b-a051-85e554de5744",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5ac5f9-e584-4c98-ba29-91ae3a0d0b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb8997c-3018-405f-96d8-57f8a40eeac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4188862f-c312-477c-b19a-ba7622285567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0a8a57-c95b-4656-b87b-481e7b1f1790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fd2a50-72af-403b-bb5b-a6547f232395",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e192284e-949f-4bb9-a1e0-738b0c34ffbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42339b4-56e5-4b2a-9530-df47e6b398cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0bca09-3727-4b02-907e-f64cac06c433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a4b46c-2965-49b9-a30d-d644b1774263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce683936-35d7-4ff8-a23f-8f3bd05b46e2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12b68ea-4bc4-4d69-a90d-3cfd9230a97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67e266a-842f-4a24-a33f-3c1a9f3c2b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a059673-963d-4fd3-99cf-73822744c7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd89550-8f16-442e-8f72-cd2555739766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a549ff6f-2157-406b-b386-58a5866f2836",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acf0a46-f8d3-42b6-85f5-bad50d60dbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0065f360-7d1d-4754-ab86-3e5bce1e2e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5c735a-94ff-4c7d-a055-0aafcd1762b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4b2ec7-672e-441c-a74d-a085f019e50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be8f94d-295f-433e-87a0-d9f597651889",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f924577-47cd-454c-950e-cc775536209d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597e6c1d-b135-48e3-a40e-1c8c62cba541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7c5ca3-7245-4101-a174-5f8b86f7f3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7485c9ea-5238-4601-a2d4-7b15c8d685f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c670d57e-4b8c-4875-b0a5-2661fffa613f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fde6b1c-da06-4e4a-aac3-9fc213e53a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a27ebf-b040-487c-ab12-ecd30f2cd5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41e3656-b8ea-4cab-bdf9-09675004dd44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91067263-1180-4d47-a355-29775dd522a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5ff9d6-e463-4a2d-abbf-3dfe7ead83ae",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca8bc21-f1e8-4206-8e91-2ce3e002fb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012e828b-dce4-4143-9aa4-eb9f2638da74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7833c7-fb33-47f5-ba0b-dca9521f78a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71809736-e34b-4785-adb0-f597ca4e18b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce93a7d-204f-4f7c-be34-fce006c5fc42",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b40535-7204-4782-ba8a-b5b3bfb1b154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa6780c-bea4-4d1c-bbe0-506ebe78ea10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed66cc3-03f1-444f-9e7b-f868b310997a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b534ce24-4de5-43c4-a75c-80c2ce176674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5109a7e5-53b6-4a2b-b451-a6f390f77c5a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc13dcb-ad65-4753-b3b7-8a2c48cfcc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de28c69-4024-47fd-9510-0e4356aaa2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb84f53e-c85b-46f8-934f-705f8cff3e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4625e62-4209-46bb-89ce-7045e85f398b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf5990d-ce23-411b-9518-781c51186947",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8632cbe3-8df4-48c6-9947-a48ae8f1a286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8383011a-17e7-4fb1-a542-bfc6027b3285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af223707-9bdd-40a4-8e2b-cccaa1900fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b053fec-e568-4824-a61b-935f0eb59d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c1e90a-a13a-4a49-aaea-0456aa5d35f8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3cd9ad-5d44-472c-96a0-7bb987a73b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55be75d1-97c0-4648-8cee-a1c132556a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639ba1a6-cf9b-492b-bac2-5a3cba24479d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b7a398-f4ac-4c49-a49b-bc52fcfcf533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e7c7f1-f354-419d-8588-16ec415a165a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a78374d-2876-4303-88c5-a1c97c3b2126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913b285c-5132-4610-bd68-88c544849fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6589a4c2-0763-4341-8d67-6d8905794024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e382d9-28f2-4f00-b780-8cde32da5fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7887afbf-5532-4e61-ad31-9ec6fde2011c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52110d38-4757-413a-be78-632a31ba2920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a575f5-fe9a-4ee7-9933-ee8da85f3604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aea3ef-21eb-4dd0-8bfc-47148f38b5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780c27d0-a505-4efe-afd6-347a99c39bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bc0746-bcb2-401f-be3b-ae333a5cdd99",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a15ff2-bc29-4eb1-b9be-b06b5047ae82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6c99ba-7577-4805-afbf-59395fcbf762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f46f4e-8b5a-4169-a57c-2f660e28b6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d28c63a-f13e-4cfc-a28f-1e8e9dc1654f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389ada40-22de-49b6-8fb7-e15afa330722",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153f5147-e803-4499-93b4-3f1231cbea0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb2d89b-0fc2-4cbb-ae1c-3ff14b0a0a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97551057-fa6f-423b-8c33-1e9eb1497577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdcf5b1-0065-4b16-a0c2-2da82c2db254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d33410-ff9e-470a-96dc-aa5690622868",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ffc86d-4992-4b00-814c-52cfd4f4dc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a865008-75e4-4546-95f0-bfc3d1f718a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c69192e-7e40-446a-b318-6b94bd79668d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9391c586-2800-4625-925c-3c61bdb47ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344eadc4-3283-4513-8dac-8c19035e8cb8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b1d592-c96b-4489-9385-8efeb5ed8b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f140d15-0c24-486f-aae8-967e48e97d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd3c82e-a744-471e-a4a6-03e2993696af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833085b2-ba37-4241-b362-73f2a25a1dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c918c2ef-1163-4725-a307-fef036adee34",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd40795-b2c8-4cab-a481-18cf6120fda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac41c1b9-8fde-4d33-a7f4-7ca78ba8566e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed2a5c5-231e-4f5b-8dc3-9ee9ed006c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15639c98-c2fb-455c-a1a5-d3e27cd2d9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24a8b56-05f3-4706-82b8-677e56b2715d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3242e2-1348-4690-a3c7-3b3d4d0ec4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cb3743-bf99-4076-9eab-b7e651cf5610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522ee5ae-ed51-4a15-8159-7aefadbc2349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f579ef-b419-463d-8dce-d00a79934622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813fe789-2e23-4cdd-b026-c04818930599",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc52aec-af36-4448-aff5-ad95e43a9edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21551bb-cafc-4fbc-8e4f-7a267bc52b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d020c-044c-49b9-b017-c81a7633c608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4f5e72-22e6-41b4-9778-da553e4f730a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b297f054-fc6f-4669-a8bf-7393f5b577b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd106d2-ee0a-4b3e-b1e9-2aba4bc06ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567e0e27-208d-401b-9e86-fa66edadfc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b79335-285e-4cd7-9110-942360a316ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6143492d-3d72-44ee-a42f-7f38ca139ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f545748-3c20-45ef-a6a3-f9a573a4ec9d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8a1452-505e-49da-9eae-8c0dbd373f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26d07d3-6a3f-4a31-8134-7caa608d0ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4637875b-4f5c-434e-b8c7-a618ad4e8d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafe0c41-c6a1-4263-bc59-b6e4aa17be70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44724d1-d813-4a89-ab11-3fc6c968bf64",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d49804e-fc7a-4aff-adc0-b4c3e0126677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d531caaf-8eb6-40a2-b1bb-7721da6c6d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1349fddc-38cb-412c-9b07-eeaecaae3e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104dacb7-b060-435f-bc3d-6ea584238425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2286cf47-9a4a-4f06-8bee-a4f6fa1c5309",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e5c25d-98c3-4229-a426-b90e2f2a8696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7a86d8-5c64-407a-90ee-cf398cabb16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ebfc76-3372-458f-a496-b7c8d830487d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79dca8e-580e-41d5-a41f-eaa03e93d6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e3bbcc-9d6c-48cf-8fa9-dae7dfe4deb9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c9653f-b9db-440b-9193-9c749c8a061b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c6d2cf-f082-4e1a-a269-ea2784c40e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73571a4-0ddb-48fd-8506-15c5ea8a9275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0555aaa-7735-47ab-8400-a42464c5d88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc975b5-b3cf-45a3-ba0d-7083062693b6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2128c6c-2634-408e-82d6-2d87186e7462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dffb8df-076a-4c43-9e95-4fdfe6240995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a38dff-15e3-43fa-90d2-ca1036cb664f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0934088-e4c4-490a-9013-b1f11986777e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced7484a-cfc6-4b40-a77b-d8b442b09e04",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cfb11f-aacc-4246-bcc1-9d2381316823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f85bbf3-2585-45cf-8503-222964ab9adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57678ca-5522-407e-8f38-448ab0ae257c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ff5492-79cc-41d2-8ddd-5437e6974432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcf32ee-764c-4a91-99db-cd4c8fbbc4ea",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04123c8c-8540-4564-bee7-be094d292970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c845f39a-d7c0-48c6-8651-7e112fcbe19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c656b86-c122-42d6-a3d3-13782ba66c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ee6b2c-ee0e-4cd7-bef3-1ea0ae16832b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5171a2-136e-4d39-a2c8-b1b532fda0f4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b5b406-17b3-4b8b-8bb1-578208c55479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50b5d2c-e5eb-4e1e-a9b3-7ccb36888729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb7c232-f8d3-4d00-ad45-068ac32087df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ef411e-ad2a-4ef6-bb2b-717d2b49693a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97c1879-7359-4370-8c19-c828aef09508",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c264f6ab-9478-4add-93cd-4eefaf3ec786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6e18de-4e26-4ed3-ad1f-ebdd556f7404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f18f62-bae7-4964-bc46-9980f69ba75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7c1253-e8b8-49d9-9423-6ec8a91bea9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f837e4-52b8-4801-8809-97d2492c77e8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717fe05a-c076-4a96-abce-ff83a9353239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da00a6a5-6262-4ed1-b81d-d97131c1a287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3b4169-4bda-4133-9f82-edf0704bd351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057ceea1-5524-40c0-bf08-c806d3030aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99287b8e-3946-44a5-9811-5eaceb13ef64",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c890985-812d-4f93-8d0c-ec037fbf866c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf2ee3d-93d2-431a-9280-3ef69ce0a8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bed5b8-f6f8-46d0-80ac-22022dffa4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee80b169-1195-4ebb-ac6e-242734a44826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274ee4a9-53c6-44ff-bf39-fd2f8e323afd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773367c2-c852-4525-89c4-92cb0466a43d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40fcc167-c30a-4d47-8a45-30f5a58d3f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7057fa8-3a38-4fb6-812e-2ea747691dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0350ed-11d7-4b2a-9793-716ddacfc2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0cb6b-ac8f-47ff-8211-5eee323128fa",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7466000e-19ee-4e3f-bb83-886005fdee10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d931237a-b5e1-4de1-9588-959e0b793287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9348d775-3e4a-4820-aacd-a2d0b3335b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5f088c-dce5-46ce-826f-30cd32a41d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62e2e01-49f6-42bc-8940-af070f14740a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4458792d-f898-4079-bf0a-ab6f3e4f4f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11eef7b6-d350-4cc5-b3f2-59f80b3258e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647774d0-6dd8-4140-add1-b58ccff6f100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a72b646-8901-4f24-a8bb-d3cde276ad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d59ffd-5b0a-427f-992a-e84d432fa666",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abae9016-01ad-4751-bd73-b2b8a229ff03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4828c65a-3522-44bc-ae42-4cf9264f56e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168818b7-c546-4b6e-a70d-fd2f6a4700d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2c76f9-fdf2-4e69-9ddf-7246d5658c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c8223d-3f3d-4244-b44d-697bb0df93dc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e2eee6-7b6b-44d8-bf72-c6ef789e7959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7efecfdf-3f10-4891-b0ed-f393e9910ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0825f36-365b-4db8-b460-64e851e88cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ac4d16-b32c-4d83-a3cc-3a14c2416f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301b4e97-377d-49fc-a934-0f84b71222ea",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1cf8d7-209e-42db-ac1a-763cc651989c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d632c076-2388-4abe-b74a-6b88f5817844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e93a5-ff4b-494f-9bcb-6f7a1a8586f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7229312c-c24b-44f9-9bac-aeb3b4a19fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126d01da-f832-45e8-a5ae-5db7a1930fdf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fad7f28-9592-4473-9842-f00d71bf18eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf88630-40ec-4f20-a191-315480eecee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca0ea07-f608-4a5a-bfba-0f2eaefe0b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3174a92c-b1b4-4234-a3f9-554ffc5355e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d467974-c86d-4cbb-80d7-e3824aad3355",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ac8547-8cba-41e5-8b52-e193e5211670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e7b1ef-9e5c-4087-acd9-971c50bc81b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75a3261-1ebd-4783-97aa-d318b3b253c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c138fcf8-e061-4a34-8565-adcb148db9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775b2189-97b0-4647-bfc1-1473f1be6111",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0e79e3-9ab6-486c-a28f-ad5e79ef25bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d715ea47-a29c-4d61-a54b-9df6e4dfaafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da37d65d-e85a-43cf-a580-97d8221b1d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94bb897-cc20-4e81-98d3-47ab1a774ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986cc54d-e37d-4eb2-9c2b-89425d4270ee",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a00e469-3b0c-4917-9740-1d293be5e506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bd6ce0-b7f3-4882-93cf-411594a26961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e801540e-1111-4885-a589-ae906dc30560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda8d133-87e2-4776-819e-68a2292ac72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edada503-b693-4ed9-ba5b-524d741554d8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca48cb4-f138-4b25-be72-ce3e1df3225f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50f18657-2a5f-4afb-ae7c-9833a0e40344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefa054b-7e93-41dc-b4af-866b1df2aef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d49b348-b7e9-4d0c-b04a-59e10b0d7cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8112d36-34ff-4cc9-9183-4a9fdcd60e37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a83557-d44b-4833-93b8-6e56596e1e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84733443-2d73-4b16-82dd-1f0f16dab36a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d244863-a653-46d2-ba86-a1d9a9ea59c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734d3d12-360c-407a-9fd8-1a488bab083a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808313ac-153f-49dc-afe6-f82bed8ec6ea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc055eed-8d46-42f3-b03c-f37650d4146e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c770533c-ce2a-419f-a2e0-ee804b7418a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27759579-6a65-497e-b50a-ce3f28bbd2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed524b33-1cc9-463c-8d50-b9d2a461af1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e8d6ca-6a93-4d78-bf4b-ab392e953838",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4210f61-b19d-42ea-90d1-81beaec3d041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bf31581-c85a-4f0f-bc8e-139329c2a5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886baa3c-ff20-4604-8e4d-3541abc250b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb8e6a6-b64e-4c74-a5a3-5341713786ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489a6717-f046-4a55-af36-bcec1b132ab0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbd8f0f-1197-46c9-b2d1-35e4e56c74ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218d7ba3-057f-4814-b00a-238e06d0ddb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac17437-f64d-4a09-bf82-972d9bb15e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9210cdd0-5d1f-44ce-9654-552dbefae13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfa6b5f-628c-4cdc-a3f6-53fed22a2130",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbb0ff3-4382-4a21-b688-da6316e3bc83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93315165-491a-4509-96dd-7b3d1d0890b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0934c9b6-2e27-4e10-b9d5-7706075d491e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95d887e-f160-4e74-8155-ccd5ac49b905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a826f8-b023-49c5-b2dc-73b8727f2977",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5a6f8d-97ee-444b-b718-306a61001737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b57267-4377-4f8a-90d1-bdb098fd9207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921b92be-cded-4f04-87aa-9abca9c96cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9447e11-fdae-4574-943d-5461c8c5e0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbde8633-5ae9-4327-b090-f4a2a6fc0745",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f2ab0c-153b-4940-bb55-5b6b5fbc5c94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2b99b8-401b-4067-85d2-2745c6dfe57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8d5247-2328-451f-a0b0-074969af3159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c097bf-01f9-4e72-855b-b1325af2a082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bca0379-df28-45e6-b4f8-5207037bdccd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bde0da-0943-4937-849e-a454087d407b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352a0491-0011-400b-a9a1-9167dc0b7259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c64c6b3-70a3-4775-8816-bc4906e2173c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865a573c-2fc0-491b-9ecd-be69e8e1d83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9539601e-3a7f-47b6-aef1-47ec2ec31cbc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4940727-75da-4636-947d-2b33b40d7432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5ea551-16f1-4096-a7c2-4b08dd3228e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895c7695-f1c4-4e64-8c63-2a843ccdd1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ad6ded-dc40-4f94-ba53-2e8b6d8f6f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71d989a-2b2d-4113-8d37-a0339647e245",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239c5b8f-762d-4045-b259-3be8f649fda0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f68130-e4a5-414b-b342-6be0f88de605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af275205-a3b7-4bcc-9c2e-9400222caf8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ada2ed2-d86e-4b74-9d6d-fdf2f68b3668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946a837d-e3d9-41af-99f0-aefc0fb94e6d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534800ec-1713-4cdd-afac-a9b343b8c0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91093e32-1968-4f77-9da6-b22c061bc8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734ca4e0-5761-419c-a216-6cf28b5fe555",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6803720-8cdb-4517-9551-9cd682edc067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c0426c-1ec3-4bef-9d36-889fbf0b7bee",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc83cd4-b967-4863-a648-a8b6ea72b077",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30af5ac5-6356-4a09-b662-42178423a2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e13bc1-f4a4-4689-95f2-d0b5037b5977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17ca8bd-b375-4ac8-bd11-a6c3d6a3d139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4918de-1c45-4d64-a8bd-13ed588bb25b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72c6209-e76b-44eb-b4a1-b66865c4b51a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab8057b-7f75-4226-a421-0e2d58336298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20de412c-ded1-42ca-8fef-8f3326b23a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6900b7bc-e9cd-4e43-bbf2-a205b9e286db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809870a1-0ebe-44b8-a56b-718809929216",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e82d04-cb05-418d-b3b5-af5f3fb04d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d8a0db-ffd6-4744-9d19-f33bd89e3f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ca91c3-95f9-4698-aa20-e33007ffb50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e886d1e-543c-4f5c-a71f-82d5d92c7198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf6df49-0e5c-4eb1-928c-e3ad9299fa8f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0637cf3c-f260-4ee7-a607-a9b46a7bf7d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bbe570b-1cd6-49af-bd35-5f700a1f2b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a170a7a-54f3-4a08-b96c-2a46a2cbc253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc8b3cf-487f-4dee-88da-f971d68e783b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff3483e-31ec-4241-a7b9-aabe7d0bf419",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb176cf1-4780-453f-8d5f-09f3785f1e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9cfa3cb-380f-45a5-be9e-414887c14c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4b2424-b96c-4ca5-9cb0-9a246b11d104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3000d5ad-b184-43f5-8f74-026392fdcc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603ffca9-08c4-4d7e-8554-dde2738859c8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbacb83a-80ff-4592-8b4a-df4129971690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ebad6d-e99f-4404-8b23-94f5bee65979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d3ceed-b258-4309-a06c-2d7d5b09cc4c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0b0437-6227-4e06-a5fb-87c4f57e0bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f94c81-ebae-4390-88aa-a075677cb307",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa09d4bb-9fc1-4450-8486-b151f5e363b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e1396d-d6ad-40c3-aaaf-c2b18b387c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0fdb9f-cd51-4a1f-85b3-8d9088a185b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b4fd2b-f3a4-4f24-9e5a-fda537b38051"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7098c34-8191-4375-9e38-52fa870e98e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03031b52-5578-4e69-9232-2ccf8ec940c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65643f99-796c-40bf-90e1-449cfff57568",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffb2fef7-0551-4f7e-8100-f986549e881f"
                    }
                  }
                ]
              },
              {
                "id": "28dcec40-fedd-4562-8d37-72dea4547f48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b5faff1-e690-4557-aaa8-42b5ab174f39",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fe6dad-6c36-4ff6-a806-afda46f257ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1ff86d03-bd2f-402d-986e-f1e02c61a025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f94dc1d-91fe-4514-be96-56009c0aec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fef38b98-b48c-45d2-a119-1f30bf7be7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc9ff74-a93a-4012-9943-c40659fc2c5a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3014f671-ad7b-45f9-855e-6d2ea6a9302d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fa3fb792-fcfc-4d71-a246-feae2f6a9812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9949378f-877d-48a5-bd74-b6d9f68c32ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbce4e76-2d8a-4894-ab33-b7b7e994bb5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "472c01ea-5be3-4bc8-8c13-17f972ed615f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5edd3b9-c9c3-4e53-b86c-18152d180bc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a587af1-03da-48ee-865f-d310aa4ff8dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e10e54-8274-40d0-b5ed-3d32144ebeb7"
                    }
                  }
                ]
              },
              {
                "id": "f620db2b-d845-452c-8966-7afdcc769981",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4b6d921b-1611-4326-bf07-3d983ee9452c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52b0e4a-cc12-4d23-93ad-f077aed9d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "73b59cc4-e829-432a-b4f4-af0f71d2e262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd615a38-e12a-4d4a-9800-7f45f410cb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ac06b8-ffcf-489f-8d8f-56532b8d438d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b8974e7b-bed6-4709-b090-eaed4ee6a775",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee123eb6-32cb-442f-8385-c09c682a53a7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "072d825c-c152-49ff-b606-752fe0d7a3a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d3d12c0-f04c-4e93-a79c-137873eb1fc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dc1006c-88bd-4aee-8c39-37d8e0b2f77a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d992072-9253-4890-b4d5-96d6ed89103b"
                    }
                  }
                ]
              },
              {
                "id": "66950fc3-d985-44d0-ac4b-530dc608b8f2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "438236e8-bf69-4242-8cf6-e662cb26234e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "656dfad6-5ec3-4979-b509-e0c7cc48fe09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21dc0834-a39f-48c1-b019-5432d4425ca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f97b61e5-def0-44d2-a910-64891b11b194"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1be0ce9-8417-4a76-939c-2dfc778f8516",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "549a8478-9532-49d8-83df-b6c0eec2ad99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2cacd24c-58cf-405d-bba7-a1c23425e7d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe18b85c-c7e5-4f33-94ec-218971487aac"
            }
          }
        ]
      },
      {
        "id": "fb69a5b5-ae67-497b-92c6-dfa9cf0317e0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "30077aa1-e0e5-4492-8c12-450666cdecbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e738d6c4-0a02-4dfc-ba8f-4ab029d709e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecf6bc2-2d25-4a98-ba22-a8ec6464fb96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "68dd0628-2d49-46d7-bebb-5f7e9ae376b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a678f856-018c-4bf5-a31c-3a3212f638af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7b8bb62-68cb-4b69-99d4-3e530ece1869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907666f5-a122-488b-9815-f03632fe366a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a593bbad-0e86-46d5-b727-c9e736035257",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "336436f6-fb08-43bc-a8ab-1225e90f0191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd67fb8-d9ae-4ed1-853a-0c6a3f894e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6da65ee7-186e-4fca-9ccc-cc76960a51a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5896ac4-cfdf-45c5-bc9d-d8cbf37665d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57e96e2e-fe97-4acc-b102-5360d6d55119"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "793c6827-5f41-4ee1-98d2-a7a0e1f02399",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f891d03-9692-4271-aacb-da1cf7a9a013"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5515e32-8f39-44cb-84a9-4df53a3ba3de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c3221dfa-74b2-4354-b52d-b5ee703f7f11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50551a26-0a66-43f5-a842-b5baa4528db8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d32cbef-f77d-4e78-b1fd-f3958070d12c"
            }
          }
        ]
      },
      {
        "id": "c03f86aa-f0f1-46c0-b565-bbcd59f8818d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dc6db60f-e7be-4b69-b28d-2e03561489e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecff6ea5-e1fc-4145-a71a-a8a61a2e3160",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c174f92-d321-4a53-aeff-43f1c9d4af8a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5678ee-4843-400d-ab10-22cf704f35f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4094d150-6591-45ec-950c-e8af338d5dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76234a17-8a5e-42dc-9a80-5e497c429814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4477f10a-d2f1-46ae-860a-841b3b922603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ead02b-09b3-4224-b11e-2402da4225b2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9ffc9d-cfe8-453e-a62a-da2a975ac855",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "613222d4-6a9a-43ca-adc2-7fc7e65b11d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dc8d95-7e82-4788-b0c2-8d8637051c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1cd5ceb-6318-4fb7-bd6b-e970ce60b7c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6656c70c-17e0-4a54-9e23-33b2591bc3ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6ba4b50-2a16-455a-9335-32491d87066b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "826686ff-5715-4f16-a1ea-a4a5075b7d3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "746df5f9-bdcb-49e3-be0a-bf13f3b5f331"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79ed658d-5bf5-4573-9585-8facd518fd98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1e5383f8-80cc-4992-afeb-57cd175e3336"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3de3b7c-f8d5-44f8-a144-23abe8e7f988",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6015ce17-f044-42be-98ee-fd1f6d1de672"
            }
          }
        ]
      },
      {
        "id": "5412c20e-e46b-47b7-b0d1-f5ce7f18e1a0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "828ff07a-3c32-4fd2-af4b-af27cd44e48b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf833eab-774b-4a63-8751-840981350d11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e24e181f-5744-49ba-82ba-54e89582061b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba711f9-9ec9-4a4d-aab5-55f9c6640b27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e77a6d2b-169f-4949-8231-a1a0c5cd333b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79930c8f-da53-49c9-b527-b70203c2f027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f6261ed-4f10-4040-b20f-7af196826ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a65f3df-5e46-402f-beae-68ff2bacb070",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cdb89f-38f5-441d-b483-d3ad83b95661",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fcb2b1a2-fcd4-437a-b57e-fa2950c5fea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0039730-e96b-4a8f-a8f1-43e64d8315f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a55327c-4dca-47e8-bd21-599633ca4dfe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2547b62-e821-4ef3-be92-d08e4f4b916e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ac2d64f-86ee-432e-93c8-fabaab69e476"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "982f8f60-7b57-4248-85bf-11888ae6da96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f66e84b-eb5a-45a7-832a-708d7dad6104"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dccc8a9f-544a-4495-86df-54cc0809d08e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8dc37456-31b5-42ff-b93e-4991e4bd5425"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36dd9d85-a9b3-42a9-ae5b-5531d9c61795",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41e5e9cd-a545-4bf2-8f38-fc7a76c0daae"
            }
          }
        ]
      },
      {
        "id": "794725fc-1551-4d51-8ffe-b363beb62ac8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6351b8d-b99d-4435-a019-9b16996037d8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bd6b23d-793d-4b85-8d9d-e2d233e55939",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e745c38c-2674-40f7-b805-888b239fc167",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd5dcec8-4d45-4821-9453-778c45dd67d4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aeb01f7a-ad50-4fc5-bb55-fa1dad15bf63",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 87.85114503816797,
      "responseMin": 8,
      "responseMax": 1043,
      "responseSd": 173.16099373299204,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673311263518,
      "completed": 1673311297183
    },
    "executions": [
      {
        "id": "34177ff5-928a-458e-b140-54f92cb3a597",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cf907f9b-bfcf-4c10-9c30-1fe681839535",
          "httpRequestId": "2ec3e5a5-92fe-4581-ac89-66d87443621f"
        },
        "item": {
          "id": "34177ff5-928a-458e-b140-54f92cb3a597",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3467ff09-bebd-43db-a241-1158e84ec715",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "c179fba9-6c60-4770-8fb8-30e0088dde1d",
        "cursor": {
          "ref": "de33d60d-bcfa-46d6-a97b-874022a5ccf5",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3d34ad72-b342-4b09-827b-2be4e18f9a3d"
        },
        "item": {
          "id": "c179fba9-6c60-4770-8fb8-30e0088dde1d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "472e9e0c-7e99-4f67-b337-00291c5fd5ec",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "50fa151e-6e12-4656-9ef9-3cc6a1f7f169",
        "cursor": {
          "ref": "deb74d8b-d84b-4fe7-a350-cb64e3f2565d",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f544fb8c-645c-4400-a976-d84f40a91036"
        },
        "item": {
          "id": "50fa151e-6e12-4656-9ef9-3cc6a1f7f169",
          "name": "did_json"
        },
        "response": {
          "id": "23d3aa2d-ddcd-4be3-a2e4-5f02e6b7a969",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffbb949-e308-48db-a04a-9709947e9d9e",
        "cursor": {
          "ref": "7960db8a-38c9-4841-8e86-5ecd8a65a866",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48f99562-cadc-4d20-96ed-0e0563de24b1"
        },
        "item": {
          "id": "6ffbb949-e308-48db-a04a-9709947e9d9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "3dcb3c69-a5d6-463d-8c7e-fc7e46620681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffbb949-e308-48db-a04a-9709947e9d9e",
        "cursor": {
          "ref": "7960db8a-38c9-4841-8e86-5ecd8a65a866",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48f99562-cadc-4d20-96ed-0e0563de24b1"
        },
        "item": {
          "id": "6ffbb949-e308-48db-a04a-9709947e9d9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "3dcb3c69-a5d6-463d-8c7e-fc7e46620681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cce620-01e9-4424-a3cc-b632ef824a08",
        "cursor": {
          "ref": "9f320bb3-d57e-46cf-8b23-0cdf3bd41759",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "115742aa-d23e-484c-823f-42134b036ed2"
        },
        "item": {
          "id": "37cce620-01e9-4424-a3cc-b632ef824a08",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d734d2a7-33b5-4dbf-8530-98147be578bb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192441d6-f8c3-4170-9fbb-242d458403b9",
        "cursor": {
          "ref": "6f14b0c5-030d-474e-882c-1b42211d2ee7",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "36adb2ba-e25c-456b-9a46-8d17b8ee6d70"
        },
        "item": {
          "id": "192441d6-f8c3-4170-9fbb-242d458403b9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7045e32b-b22a-4f21-a5f1-85ceeee3e441",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fde551b-38b4-4822-88f3-7d0863a06940",
        "cursor": {
          "ref": "a982a722-f8bc-4d49-b7d2-63e42ababf69",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a8bfecd5-8d78-474d-95fb-d5823b0f6e00"
        },
        "item": {
          "id": "3fde551b-38b4-4822-88f3-7d0863a06940",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e5158794-4e8e-471d-a91e-a48b3515320f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e31e023-037f-4c3f-9362-4b1201d96873",
        "cursor": {
          "ref": "a25a1ced-fbb8-4b62-af12-70ab7b4d6d50",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "343df9b9-53e6-458b-a043-988dce415e0b"
        },
        "item": {
          "id": "2e31e023-037f-4c3f-9362-4b1201d96873",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "112cb17b-0a88-4bd2-892b-2726d07610e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e31e023-037f-4c3f-9362-4b1201d96873",
        "cursor": {
          "ref": "a25a1ced-fbb8-4b62-af12-70ab7b4d6d50",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "343df9b9-53e6-458b-a043-988dce415e0b"
        },
        "item": {
          "id": "2e31e023-037f-4c3f-9362-4b1201d96873",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "112cb17b-0a88-4bd2-892b-2726d07610e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459d8b56-bd1f-45ee-804b-8446dcb231c6",
        "cursor": {
          "ref": "d81dd52e-32f9-4a90-9270-f11326af0e90",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4d26aae4-81bc-43b8-95a0-907fcc044993"
        },
        "item": {
          "id": "459d8b56-bd1f-45ee-804b-8446dcb231c6",
          "name": "identifiers"
        },
        "response": {
          "id": "bfa20469-5790-43c9-8ca6-ef29c514cff8",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebf1b86-32ef-4e15-bd66-e430c05497fd",
        "cursor": {
          "ref": "fe489e88-3cdf-4150-b431-f87c4cd21663",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "375c7d35-c2af-4fb6-843a-eb84ba108c06"
        },
        "item": {
          "id": "3ebf1b86-32ef-4e15-bd66-e430c05497fd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9dd25c0-a492-482a-b867-f6eda0b03159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebf1b86-32ef-4e15-bd66-e430c05497fd",
        "cursor": {
          "ref": "fe489e88-3cdf-4150-b431-f87c4cd21663",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "375c7d35-c2af-4fb6-843a-eb84ba108c06"
        },
        "item": {
          "id": "3ebf1b86-32ef-4e15-bd66-e430c05497fd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9dd25c0-a492-482a-b867-f6eda0b03159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548a7183-4eba-4a93-b780-ee2f3c808e8a",
        "cursor": {
          "ref": "e5fac1d0-d8c0-4610-ac65-dc8d0c2272f3",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7954a650-c47f-4d6e-b7f0-613ea5a6b262"
        },
        "item": {
          "id": "548a7183-4eba-4a93-b780-ee2f3c808e8a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "084b96d3-4341-4497-b4df-746c8b0a77c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7709b3bb-8e46-49f1-a35c-e1777c2d9bff",
        "cursor": {
          "ref": "bbe3fac5-6d68-4ab0-8c84-b4e2e5d08353",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "378d6c45-7312-4616-8b6d-bf4701f8beff"
        },
        "item": {
          "id": "7709b3bb-8e46-49f1-a35c-e1777c2d9bff",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "444ab715-84c7-41ff-b36b-12bfde4c5046",
          "status": "Created",
          "code": 201,
          "responseTime": 816,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2270bbb3-514f-41c9-9325-a60eb5952119",
        "cursor": {
          "ref": "974d83e8-86ad-4aa9-984f-ab65493e1413",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7ddbe9ca-ea75-4bba-955a-57f4b058bedf"
        },
        "item": {
          "id": "2270bbb3-514f-41c9-9325-a60eb5952119",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2f87cb46-91dd-487e-a524-83287ca9f157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bfbfc9-0239-4dbb-91c6-9f7b9f9ef8ca",
        "cursor": {
          "ref": "0db1b332-dbbd-402b-9e29-2c0dc80f81a8",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ba097522-cf6e-41b3-9932-b22e56546c07"
        },
        "item": {
          "id": "70bfbfc9-0239-4dbb-91c6-9f7b9f9ef8ca",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "859b7d93-8c27-4c1e-9512-0d45b58818b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc61cbb1-f04e-4025-88a3-1f4dcb382e4e",
        "cursor": {
          "ref": "728a58a4-8825-41aa-92ae-078203d820f6",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "65945776-059c-499d-bca5-d73c10cdec96"
        },
        "item": {
          "id": "cc61cbb1-f04e-4025-88a3-1f4dcb382e4e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "61cea02f-6568-4bde-bba4-508562f2d537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8388dac-559a-40eb-a3f6-e0251413e5ac",
        "cursor": {
          "ref": "c999914e-8f5f-484d-8cc0-f3c329878635",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "389faae6-5e62-4b2a-adbd-ed2eb3b4d349"
        },
        "item": {
          "id": "b8388dac-559a-40eb-a3f6-e0251413e5ac",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "76af793c-22e8-4407-a7ca-7d50b56c0b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf504a-6820-4f0f-af91-f5716ae039a4",
        "cursor": {
          "ref": "cebe4ec2-1f18-408b-908a-0f0f810bd0c2",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b91c457a-8ec5-4e28-a1ca-40c3e57aa195"
        },
        "item": {
          "id": "03bf504a-6820-4f0f-af91-f5716ae039a4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ef2a0f8e-3f2a-465c-a83d-eb062df62f49",
          "status": "Created",
          "code": 201,
          "responseTime": 506,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "84a7a2d8-cfac-493c-a750-54e422573875",
        "cursor": {
          "ref": "eef6b661-64fb-473f-bbd9-1f0d9ca4d7e3",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "edb8f7ad-5b4e-41fa-a92a-fdc9fbfcbaa1"
        },
        "item": {
          "id": "84a7a2d8-cfac-493c-a750-54e422573875",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "74c81460-0417-4526-a222-b20be3379af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5b0adf-5867-4f3c-99ba-5fb16a8676f8",
        "cursor": {
          "ref": "4e30486b-91ec-4d9e-9570-59e19e4f6dd0",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d2b940f4-ce29-4776-be0c-0438880d61c4"
        },
        "item": {
          "id": "df5b0adf-5867-4f3c-99ba-5fb16a8676f8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9c3f39fe-1ee8-4b72-93d7-b71c2ad7d549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba50743a-2e84-4f56-91ea-042db6cd906e",
        "cursor": {
          "ref": "91bc45a1-54b9-40d4-84b8-276ccf375d58",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "97b5e6cc-8def-4da8-b5d6-bb3573df9925"
        },
        "item": {
          "id": "ba50743a-2e84-4f56-91ea-042db6cd906e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d002116b-89d6-49c0-956e-7c805a7e5a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9317c998-a55a-4bef-9b43-67656f2f4cf3",
        "cursor": {
          "ref": "7b7f3a3e-1efc-4bc5-bd14-cc85e362293a",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3fd4a70e-2a73-4d5b-974f-7eca772999a5"
        },
        "item": {
          "id": "9317c998-a55a-4bef-9b43-67656f2f4cf3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8f8d95d7-fb4f-4915-8a9e-95e14803ec21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b9439d-2d28-4759-8799-39603290de0d",
        "cursor": {
          "ref": "660aca88-afc3-4634-bd5e-5eb4fbf494b0",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "73744ef6-338c-44b6-8a61-45a45de7adf2"
        },
        "item": {
          "id": "23b9439d-2d28-4759-8799-39603290de0d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "683a4589-4f6d-433c-bee7-09bd40ff01b4",
          "status": "Created",
          "code": 201,
          "responseTime": 490,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8db6c631-6719-44aa-aa01-a70092e3f7b0",
        "cursor": {
          "ref": "51040d77-fa7b-4a72-a10a-84e57d4f1a75",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "20530563-9d51-4198-bc72-e3a09f39205d"
        },
        "item": {
          "id": "8db6c631-6719-44aa-aa01-a70092e3f7b0",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "726174ed-a1cb-474e-b9c8-fa240e9ccbc0",
          "status": "Created",
          "code": 201,
          "responseTime": 1043,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b1564db9-6ae7-4fb0-9f25-286087b3bffd",
        "cursor": {
          "ref": "c6350daf-08a1-4bca-b0b9-d9c57c9634a0",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "adfaaba0-73fd-47a3-aa94-3eb33f435157"
        },
        "item": {
          "id": "b1564db9-6ae7-4fb0-9f25-286087b3bffd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "511692ad-870d-491d-852d-daa6401638da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc63fec1-4ab8-4ec5-aee4-5b8a228aace1",
        "cursor": {
          "ref": "85db047a-977d-47aa-9339-5a77cebdbe22",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7e95a46e-b264-40cd-88ea-c8b60741340e"
        },
        "item": {
          "id": "bc63fec1-4ab8-4ec5-aee4-5b8a228aace1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a7bb91f3-4429-4c93-b513-404468a5c357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f53c1-e704-4ab0-b08f-d3894ca291e3",
        "cursor": {
          "ref": "efdc5824-2115-44a8-8c85-3abe8824e6ce",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f66013bf-ccf2-4f4e-a9d1-163eb4d93bde"
        },
        "item": {
          "id": "719f53c1-e704-4ab0-b08f-d3894ca291e3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9c48f509-f608-49e0-8063-47f9458b286b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5506d4b1-65a0-4a28-b4f6-9b5e0ccc2502",
        "cursor": {
          "ref": "6b0007df-a426-4b2c-9c3b-188cb36b684d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9af0f306-1113-474e-b849-12551b26e1c8"
        },
        "item": {
          "id": "5506d4b1-65a0-4a28-b4f6-9b5e0ccc2502",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9524c29f-56bd-49d7-a6df-63606c356bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c2c245-ecc2-4803-8eae-88fbaf3b1fa3",
        "cursor": {
          "ref": "dbb72e60-ddde-43ae-9509-4630ae8a1abc",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4c1469a7-335f-43be-b68c-aa9842d4b8c8"
        },
        "item": {
          "id": "e4c2c245-ecc2-4803-8eae-88fbaf3b1fa3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3b5e7e45-18c3-4fd2-8c7a-782639c3647f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa47e06-2c4d-493b-a7c8-0e4770813196",
        "cursor": {
          "ref": "55c7f38d-672f-4c09-85a3-6a80ef1efa50",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4bd530bd-956d-414b-8c6c-247ae8013a3e"
        },
        "item": {
          "id": "eaa47e06-2c4d-493b-a7c8-0e4770813196",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cb77580c-6390-4f56-9a26-842e668a6099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bab6b09-3e92-4579-bf3f-69b101a17c45",
        "cursor": {
          "ref": "6c433089-b3b4-422b-8c99-f06579860f19",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1e707396-c00a-42ba-951c-8de3a8574c46"
        },
        "item": {
          "id": "5bab6b09-3e92-4579-bf3f-69b101a17c45",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "469d9cfe-b52d-45a4-8937-bbe2a385e18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd252db-506f-4a15-95fc-8954bcad366d",
        "cursor": {
          "ref": "9a2bd590-7cfc-4ed2-9bdc-5ee367246fa5",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b346e57e-1a92-4ef0-81d7-ffe74a6c3b84"
        },
        "item": {
          "id": "1cd252db-506f-4a15-95fc-8954bcad366d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1004de30-f4ff-43d9-96a8-9cd811ce2040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc12519-b7cc-4fbe-a88b-8c6e3094c4a6",
        "cursor": {
          "ref": "940300b5-5d21-4bb8-a450-d125e228fd1a",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8de1fa72-e931-439f-a26a-129d09397acf"
        },
        "item": {
          "id": "cbc12519-b7cc-4fbe-a88b-8c6e3094c4a6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "13cf95c7-e64d-4c6a-9a45-a7548b026627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267c7355-2619-4031-8890-8fc136ae0308",
        "cursor": {
          "ref": "5e5d0ecf-79d9-4cfa-b627-553a2fbcd8e6",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d51f5b06-b3f4-4868-9ad1-781506b5d4b2"
        },
        "item": {
          "id": "267c7355-2619-4031-8890-8fc136ae0308",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c01a4688-74db-4c90-896f-08915a77bb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014ea4ae-7857-4f05-bb05-af4e2eac3ab9",
        "cursor": {
          "ref": "6cd4ca97-8406-4afb-8d61-582a451810ff",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "77e2223f-0902-4752-a0ce-1d383e7a5206"
        },
        "item": {
          "id": "014ea4ae-7857-4f05-bb05-af4e2eac3ab9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c4738648-01fb-45e4-a0b7-42a40270fb11",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "19690fc2-9a29-4c34-baa2-b05df7f461be",
        "cursor": {
          "ref": "4a892763-9cb7-423e-882e-7615786e2dc9",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4c6f0d71-a726-4d30-8d42-d5e1206f46c2"
        },
        "item": {
          "id": "19690fc2-9a29-4c34-baa2-b05df7f461be",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e95605c5-4d9d-4cbe-b498-61064ab5a6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf75c025-67aa-4060-8fac-bb01051eb0d6",
        "cursor": {
          "ref": "c3ab8a3a-0ac6-43ee-bf14-42455d788a9b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "310e02cf-31ac-45dc-9b09-676d22180595"
        },
        "item": {
          "id": "cf75c025-67aa-4060-8fac-bb01051eb0d6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0e3a0395-fac4-442c-92b9-47cac672f2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea0c24a-e76c-41d7-b6b9-e013c9020316",
        "cursor": {
          "ref": "bcaecab9-ea88-41a1-99fc-8927301b8763",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "86f3ad9a-f85e-4d25-ae58-a1fb13f61a98"
        },
        "item": {
          "id": "0ea0c24a-e76c-41d7-b6b9-e013c9020316",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "05a66013-177a-4c18-bda9-7e885e4a0bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6089da8-6073-4fb8-bbe6-e15f0a824d12",
        "cursor": {
          "ref": "fe8759ac-3858-4012-ba89-e70b42d4ee72",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17d01718-dcc3-4a66-b5ea-c094d16a3187"
        },
        "item": {
          "id": "b6089da8-6073-4fb8-bbe6-e15f0a824d12",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6d7ba422-6ab8-4bac-b47a-8811a6f2d540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9badeaeb-95c2-4c07-85a2-f3b63ced8fdb",
        "cursor": {
          "ref": "7e0511d2-4ae7-4e34-bec9-3a212c2ad8ec",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "79de6991-ab4a-459f-9abd-624cd6293ffa"
        },
        "item": {
          "id": "9badeaeb-95c2-4c07-85a2-f3b63ced8fdb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5fe88cbc-d5dd-4e27-abfe-57bd88bc8306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb693e98-c84e-4e28-a747-3adc115b6ca9",
        "cursor": {
          "ref": "e005331e-7fa9-41fb-9a39-7c66d40a2b6e",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9178d188-3ba5-4fb1-b1f5-4e2bd8d0038b"
        },
        "item": {
          "id": "eb693e98-c84e-4e28-a747-3adc115b6ca9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "898bc2ea-a899-4bed-b07b-470d644af762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb45afe-c482-4457-90e1-4358a9b77a7f",
        "cursor": {
          "ref": "9ee9b4b3-adac-4938-9114-56fc2cc5c547",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "19024799-a439-4f7e-a068-afb09f259fa3"
        },
        "item": {
          "id": "9fb45afe-c482-4457-90e1-4358a9b77a7f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "10d1d39f-12f1-420e-8e69-8ea8f8683639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4af9453-1a0b-43c9-95e4-7532c79ca771",
        "cursor": {
          "ref": "a30867fb-363a-4ec4-8e8b-144316101714",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fa39de28-8cfa-4e04-8996-e7375e12d044"
        },
        "item": {
          "id": "a4af9453-1a0b-43c9-95e4-7532c79ca771",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6109f47f-0e9e-426e-bc68-bc374e419bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f2c6ef-226a-423f-8e39-72771c58f280",
        "cursor": {
          "ref": "34f810f2-8082-495b-bc76-7c5e09be79f2",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c73f2c0a-15a5-452b-a05e-5b837f9034f7"
        },
        "item": {
          "id": "61f2c6ef-226a-423f-8e39-72771c58f280",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7c4a1c05-7212-4650-b702-9800be45c99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb1520b-8e8e-4b6d-a711-30c024f047dc",
        "cursor": {
          "ref": "aac40e06-cef5-4de6-a25f-e4f11ba47209",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f7889e0b-5736-477e-8ff0-7da66d9bd1a3"
        },
        "item": {
          "id": "afb1520b-8e8e-4b6d-a711-30c024f047dc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7298f3c3-ebf0-4544-9a98-46e09df1180c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1035cbd3-27da-4c15-b851-c4cc9c05f93a",
        "cursor": {
          "ref": "03a6a953-d45d-49b1-a620-35e9da2c78b0",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bd106909-1130-49bd-8dc6-7838be0197a6"
        },
        "item": {
          "id": "1035cbd3-27da-4c15-b851-c4cc9c05f93a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "042b685f-0e39-45fe-8ba8-9b1c4600bae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775f000e-9f2f-469a-b31d-33aa8792de50",
        "cursor": {
          "ref": "7f56a095-e7c6-4dfd-8b54-c140d1c46b52",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8e701e3f-f44c-45c6-839b-47be35e07953"
        },
        "item": {
          "id": "775f000e-9f2f-469a-b31d-33aa8792de50",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ebdedc98-a07e-42fc-8923-390f0857b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b29b49b-29e8-4fad-8b87-52e0fa3f57bd",
        "cursor": {
          "ref": "c6800cf6-d0b8-49c4-a197-b2eba0a8573b",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2e3d779e-fb4c-4500-bb7d-82eb79a5ee65"
        },
        "item": {
          "id": "2b29b49b-29e8-4fad-8b87-52e0fa3f57bd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "493e6e63-6299-4511-9159-0dfa6a0bea8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c3600c89-f1e3-475a-a137-9f99a13cc97d",
        "cursor": {
          "ref": "9ee83e64-965c-4ac7-b12e-89076ab5112a",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6f9b8b0d-0367-4d92-b87d-11272732a729"
        },
        "item": {
          "id": "c3600c89-f1e3-475a-a137-9f99a13cc97d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f889232b-0ed2-44dc-bd78-87558fdd0165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc50c4b6-8c72-4756-a619-8c00bc172206",
        "cursor": {
          "ref": "1bbeac42-d80c-46fc-afff-2dd86f02348e",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3707b9ab-ff89-42ca-9649-80172955b742"
        },
        "item": {
          "id": "bc50c4b6-8c72-4756-a619-8c00bc172206",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a0973a1e-6d1d-44a6-812f-77f9172d672f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0c76aa-e40b-490e-9540-8c3691cc7ce9",
        "cursor": {
          "ref": "2534a41d-9278-4f7d-bf98-db3e03cf869b",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "980802a5-b4b0-49bb-b355-b4e6707a417d"
        },
        "item": {
          "id": "dc0c76aa-e40b-490e-9540-8c3691cc7ce9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "58a8c385-b361-433d-9f6d-51ddd684e757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eadb2b8-6bcc-4e19-8829-2f1c542edcb6",
        "cursor": {
          "ref": "dcee797a-8b95-4a12-8f3e-3ea3d82af6c2",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f7cf335f-1edd-4f19-95bf-08e54f7741b0"
        },
        "item": {
          "id": "5eadb2b8-6bcc-4e19-8829-2f1c542edcb6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e200a5f6-65e5-486e-85ce-81211b78b826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a033201-0b91-4f73-aeb6-21c8ff7c006e",
        "cursor": {
          "ref": "8cd81f3a-17fb-47f4-91c1-ecba9392db1b",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "55350cc2-ab1f-4840-af83-d2420fd970a4"
        },
        "item": {
          "id": "6a033201-0b91-4f73-aeb6-21c8ff7c006e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "419e00fd-9701-41aa-ad94-bcf1d2b40835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9105b94-f787-4e84-b3c4-36f2e08c0ccf",
        "cursor": {
          "ref": "48b916d5-3c55-4575-ad38-9e78e8872190",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "067db7e2-6269-433c-9fa2-b0cd2864dbf3"
        },
        "item": {
          "id": "e9105b94-f787-4e84-b3c4-36f2e08c0ccf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "10bc9f7c-1166-4e78-b919-b534c6165cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bf902c-e642-4e24-b2a8-d7f6e911303e",
        "cursor": {
          "ref": "54d67d67-fda0-4791-affe-e37f07753d0d",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5e7c121d-ce5b-4917-84ef-2367390d66af"
        },
        "item": {
          "id": "08bf902c-e642-4e24-b2a8-d7f6e911303e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a5df8ed8-c3c8-4bb8-93ce-f5f9046d5ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f35aa463-8423-40a9-97dc-6a5acb214383",
        "cursor": {
          "ref": "83b49fdc-367b-40b6-a421-1f568a924db1",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2db9bcc4-6e82-4d85-824c-021471baefec"
        },
        "item": {
          "id": "f35aa463-8423-40a9-97dc-6a5acb214383",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "90252adb-560f-4510-a2dc-cf7472aab71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82ec651-398d-41f8-9af0-5e5444e8b336",
        "cursor": {
          "ref": "41d52a2b-abd9-43de-887c-0bb0694bf8f4",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c3b84d3-2dd7-4935-9256-0f741ce9b1f5"
        },
        "item": {
          "id": "c82ec651-398d-41f8-9af0-5e5444e8b336",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1789a764-db1a-4068-973b-a3fc9a10f554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2139b2c-d857-4ae4-8b52-617bac47c8f8",
        "cursor": {
          "ref": "a73c6c33-66c2-4c7c-8f53-c8accef954a0",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "14a8252d-3b1b-467c-8bfc-7aead41b4be3"
        },
        "item": {
          "id": "c2139b2c-d857-4ae4-8b52-617bac47c8f8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "aac7caf7-1321-4b54-9b95-7ad9bcffcbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95896708-ce87-4ebd-88b2-a70c29a7b1af",
        "cursor": {
          "ref": "a4619a7a-3dcf-419d-a072-b09fc1c431e6",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fa6c8f8b-7acf-407d-832a-31b2cd7ce084"
        },
        "item": {
          "id": "95896708-ce87-4ebd-88b2-a70c29a7b1af",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d43680f0-d0f0-4fd5-bdaa-ad8a7fcbfc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa30f52-41ed-4e2c-8d57-3dd44b63828a",
        "cursor": {
          "ref": "3b211b9e-5970-4054-932f-b939541507f1",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0a5285d2-f41b-400e-9486-36c3a7215543"
        },
        "item": {
          "id": "5aa30f52-41ed-4e2c-8d57-3dd44b63828a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dadf97a1-73cd-4389-bcf2-cf135c1f7db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e086d0-b941-4cb7-812a-f840d8d529dd",
        "cursor": {
          "ref": "4873037a-1c4e-4147-ab44-80d1a105f316",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "859792e6-f16f-473e-99ce-4dd76695757d"
        },
        "item": {
          "id": "16e086d0-b941-4cb7-812a-f840d8d529dd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dd1d5dec-3d9c-45b5-a2a9-5ac2f823d538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03b926a-0840-4ad9-8f16-af438757ca0a",
        "cursor": {
          "ref": "8ebc97bd-303a-4e5c-910d-89de6fe44705",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "60e9cb05-a9a6-4462-8037-2a80bd1da907"
        },
        "item": {
          "id": "c03b926a-0840-4ad9-8f16-af438757ca0a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "acf9c192-462e-4f63-81ce-c68318fd5873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7369a38-fa46-448d-9232-3ccdfedad05a",
        "cursor": {
          "ref": "ab6ab670-a468-4b01-ab84-f868e78f8888",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "78573b0c-29bc-4fe6-9022-ba0da9adc65d"
        },
        "item": {
          "id": "e7369a38-fa46-448d-9232-3ccdfedad05a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "927df583-84c5-4ed6-ba77-251f080d1479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e43edf-51b7-40d7-a634-7c924edd307c",
        "cursor": {
          "ref": "ad0e44bf-3ec9-40cb-b9f7-e4305e1d47ce",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d842054a-7196-400b-a979-ed74c4fb3d30"
        },
        "item": {
          "id": "51e43edf-51b7-40d7-a634-7c924edd307c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c7a8bfcc-9306-4e1c-978d-abc2471a417c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0ef865-ba26-4c6c-abc3-a9e80382ec8f",
        "cursor": {
          "ref": "18b6e530-c46a-429f-911b-d7ee133f933b",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "742e3498-a316-4636-8258-a862ba502bbe"
        },
        "item": {
          "id": "bf0ef865-ba26-4c6c-abc3-a9e80382ec8f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eb543e8b-b737-41ad-971b-c6a64af2867f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe822e49-3c71-4799-a340-ba4f379aef97",
        "cursor": {
          "ref": "24fd9eeb-39cd-484c-8792-dd070238b212",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "727be61b-e3b5-4d9a-a0f8-81d6e89803aa"
        },
        "item": {
          "id": "fe822e49-3c71-4799-a340-ba4f379aef97",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d263ffc5-0767-48a4-959e-2efcf32408b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d0787-f097-420e-9bfd-9e931c7ab001",
        "cursor": {
          "ref": "4a1ee6c3-f691-46fa-92c3-41b7f54029fc",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "01720873-acf2-4f7c-82d6-e6ee9bd9a7de"
        },
        "item": {
          "id": "988d0787-f097-420e-9bfd-9e931c7ab001",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f3fc866e-1cbf-429c-9f15-df14867fefac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e5716e-a2cc-4dfb-a4e3-906a7b5cedce",
        "cursor": {
          "ref": "86067880-301d-4493-b7e0-1f5ebd30c424",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "34bcfd6d-5e4a-4995-ae7f-bbee9e84251c"
        },
        "item": {
          "id": "92e5716e-a2cc-4dfb-a4e3-906a7b5cedce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1a878b39-21d8-4c2f-8b24-7006e37b2c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d01dbf-58b2-49e4-ab57-7db8caa31bcc",
        "cursor": {
          "ref": "63a3dd4f-3a5d-4c5a-9227-a83ca1672e8a",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "79e6a6a0-dd79-4ee9-bb9a-4c7bb5d564ef"
        },
        "item": {
          "id": "45d01dbf-58b2-49e4-ab57-7db8caa31bcc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6626d339-6799-48e3-8b4f-55966b16a999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9132fcb0-21ee-4caa-8f1d-e0bbf9a88b93",
        "cursor": {
          "ref": "4c91a942-4e70-4533-98fd-eba340304b0f",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "701740b2-1235-4f24-a7a6-18d896f9ca08"
        },
        "item": {
          "id": "9132fcb0-21ee-4caa-8f1d-e0bbf9a88b93",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0af6542d-c63d-4428-a874-73a61e060b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6fb836-c24c-4bf0-8858-cedc72c9cbcc",
        "cursor": {
          "ref": "d73e561e-767a-431f-b3fb-0696998d17ca",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f9ab3498-d177-460f-9004-0ff1b6f31b47"
        },
        "item": {
          "id": "4a6fb836-c24c-4bf0-8858-cedc72c9cbcc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bd168cd4-d500-4c84-9807-1ecf73baf3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098d00c9-22f3-44c9-a1a1-b5e5a02d486b",
        "cursor": {
          "ref": "37f36118-d420-4fbe-b427-d2ff6414c2cb",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "51ebdadb-71a0-4a83-832e-de0c41ffc0b6"
        },
        "item": {
          "id": "098d00c9-22f3-44c9-a1a1-b5e5a02d486b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7f98cc1d-4bbe-481a-b0cf-3e14b5473213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0110b124-f8ab-4a7e-bd74-09fd4370eb00",
        "cursor": {
          "ref": "a081f019-bcd5-4ca3-be33-4ce35bc52178",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "27dcdf7e-94d6-4554-b751-b42188093a3b"
        },
        "item": {
          "id": "0110b124-f8ab-4a7e-bd74-09fd4370eb00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e63af263-008e-4faf-abec-2181b3bb40bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480d3c7d-2a9d-4251-ad44-26e71d322f72",
        "cursor": {
          "ref": "88453870-0834-417e-a62e-b835eb81e461",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e0066742-6b1b-4e41-82d5-17a51a6e9b58"
        },
        "item": {
          "id": "480d3c7d-2a9d-4251-ad44-26e71d322f72",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "012373a1-7049-4041-9171-36218f080a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3544a060-baa5-40a8-ab3d-c1f6cf0b800e",
        "cursor": {
          "ref": "ef993034-8cb7-4ded-a7fa-d32bfea73f89",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0852d89e-93e5-4797-ab67-4fcabfcb89b5"
        },
        "item": {
          "id": "3544a060-baa5-40a8-ab3d-c1f6cf0b800e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4d0e922a-7a2b-4b46-9e6e-0c5aa2b2e924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dc7144-2df7-4f64-ab33-2f05f73b47b7",
        "cursor": {
          "ref": "4f0da74f-a4b9-456b-ba2f-ec88a4f54a01",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "274efd18-ad5f-449e-9976-3ebd977c78d0"
        },
        "item": {
          "id": "26dc7144-2df7-4f64-ab33-2f05f73b47b7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35c58e32-30bf-4bff-a01b-7262e2fe60aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b809d703-0836-468c-a806-76f9de282a77",
        "cursor": {
          "ref": "cf8a501d-f9f4-45d3-9ccc-8870197da609",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fce112da-e0e9-4ef8-89aa-c21433be8e15"
        },
        "item": {
          "id": "b809d703-0836-468c-a806-76f9de282a77",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6bf32379-2a7d-48c3-a208-f4d57f07ecfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c400d1-423c-46d9-b149-a125c05d77e9",
        "cursor": {
          "ref": "a9fb5004-b24f-4a62-8b93-297f5a7e2274",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "85ee51eb-4816-4311-b003-e0eca189c66e"
        },
        "item": {
          "id": "47c400d1-423c-46d9-b149-a125c05d77e9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "593034b2-5c3d-451a-a07b-ebb085f85e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b2ed26-9550-44df-81de-e04cc6c46fb2",
        "cursor": {
          "ref": "f10b90ec-8638-494c-9edd-c4b080df91db",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b8c88192-5263-41a1-a133-7b1262df7dd3"
        },
        "item": {
          "id": "b7b2ed26-9550-44df-81de-e04cc6c46fb2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2750deeb-ce7c-478f-a35a-e7eb53bda387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95139d02-6b3f-41e0-aaaf-2ca2e66df0fe",
        "cursor": {
          "ref": "45a11555-32de-400a-b406-d1a6d100f0b2",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c6c61c46-c279-4697-afe0-3b6a503f90a4"
        },
        "item": {
          "id": "95139d02-6b3f-41e0-aaaf-2ca2e66df0fe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9a045a05-f8b6-474f-a89b-9e5171faeca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8db604f-df0c-49e5-bc36-4b3827515505",
        "cursor": {
          "ref": "1fc1958d-df8a-4200-a93c-9c7af3bcd53f",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a1bab1e2-ce3d-4126-a7f7-39bc9d5d3c92"
        },
        "item": {
          "id": "c8db604f-df0c-49e5-bc36-4b3827515505",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9218ac5e-48ae-47d6-a720-3171a9ebe876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc4f455-db5f-45be-92ff-60ab62e6c9d9",
        "cursor": {
          "ref": "6ea12bf9-cdeb-4c6a-95b0-523072be2083",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3f38ac10-964e-4a8f-b256-b8b261b326cc"
        },
        "item": {
          "id": "dcc4f455-db5f-45be-92ff-60ab62e6c9d9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "11d672f5-f694-4a5d-8c50-55e7dbb00edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50116ce9-67e0-40ab-a358-b4e89bcf7bbe",
        "cursor": {
          "ref": "686ece9a-43c3-48d4-a00c-374856ec6542",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "42b9f595-a760-4427-aa6d-51fd2d7fe46f"
        },
        "item": {
          "id": "50116ce9-67e0-40ab-a358-b4e89bcf7bbe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "98c35093-72bd-4fc8-953b-92ecbd682bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7b861e-557e-4313-97f3-4d6fb502448d",
        "cursor": {
          "ref": "93d02780-622d-4f24-b720-dd70f6e3bbba",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5aa58718-d65e-48db-86d6-941b02505ba2"
        },
        "item": {
          "id": "5d7b861e-557e-4313-97f3-4d6fb502448d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0809f9e7-b2d2-4536-b30c-d1af7eee6f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4da0c3d-770e-4cda-9b17-ae57c5b70809",
        "cursor": {
          "ref": "1c821825-95ae-4709-8aa4-5cc13383ac9d",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "40d92d5c-d179-4c2b-a684-deb1007a98c8"
        },
        "item": {
          "id": "d4da0c3d-770e-4cda-9b17-ae57c5b70809",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7d3b22a8-331f-406c-9c2f-a1fe9c110366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258a495c-f4b3-4704-a8d3-593b35dd20c2",
        "cursor": {
          "ref": "2d09433f-8be5-4730-a62d-f3fbc8f2213f",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b52993dd-6994-4666-a3c2-1cb321485d05"
        },
        "item": {
          "id": "258a495c-f4b3-4704-a8d3-593b35dd20c2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "027f0d71-1464-4468-9063-c0b3ecfd98bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b748ce-24a0-4a8f-b549-b61c772dead7",
        "cursor": {
          "ref": "97cf8b71-0b0c-4d30-86ba-0af043936701",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ab98bddc-8d20-46f1-99af-b59c88438c25"
        },
        "item": {
          "id": "48b748ce-24a0-4a8f-b549-b61c772dead7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "93509a8a-a3cf-4946-8d26-55cab9ff2fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747f60a1-eef3-4236-9915-d77721bdb675",
        "cursor": {
          "ref": "f806f9c2-1722-47ae-8b2e-0087bdfb324b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "af9e3e4a-3635-4095-b919-e0414abfa138"
        },
        "item": {
          "id": "747f60a1-eef3-4236-9915-d77721bdb675",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d0680f2e-5b6c-4f48-a702-9b36fbab718c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121ac92f-3d92-4773-a39c-cc89cc88c27f",
        "cursor": {
          "ref": "15e84548-502c-407c-b755-03ab20a7d154",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "01b7c868-09c9-4922-b7b5-ec71d190be07"
        },
        "item": {
          "id": "121ac92f-3d92-4773-a39c-cc89cc88c27f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "738eb31a-7090-49c1-8668-d0abc69c4109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875fc5de-7461-4368-82f5-fa6428663b8e",
        "cursor": {
          "ref": "fae7e0f6-5b29-460e-904d-65bff9977666",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1c401953-c6f0-4acb-aff7-549a929cad33"
        },
        "item": {
          "id": "875fc5de-7461-4368-82f5-fa6428663b8e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aae60183-67e3-4cc5-ab50-d0eed2f13349",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "3cf983a1-e782-4fbe-8d26-dfa018e27635",
        "cursor": {
          "ref": "8e3ef7dd-463c-4323-b147-c692e3bbd2ae",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "66b61fde-c3b9-43f5-93e3-ef04daa3603b"
        },
        "item": {
          "id": "3cf983a1-e782-4fbe-8d26-dfa018e27635",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4b02c059-a291-4107-b100-e65dd5e1587b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c861e25b-dd77-40b4-a1db-5116b2237614",
        "cursor": {
          "ref": "370833e0-ee9d-4a27-81b5-e80d14f0e557",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "21c7eafe-bd6d-4391-8845-baed12c55513"
        },
        "item": {
          "id": "c861e25b-dd77-40b4-a1db-5116b2237614",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "798464f4-1e5c-40df-a030-7118b4211770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721d52b5-9de8-4952-803b-c2997eaffaa2",
        "cursor": {
          "ref": "a5489b9a-59c4-4c2f-8d79-bb84cdd9b19d",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "aff1aed3-fe8f-4135-874f-8f618f45ec66"
        },
        "item": {
          "id": "721d52b5-9de8-4952-803b-c2997eaffaa2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "93e8be96-939e-4c68-b3b8-cb21ad4f51a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51205f7d-cdfa-4eab-b2e8-3f52d0ee809a",
        "cursor": {
          "ref": "3de1e02d-f581-4a8b-be0e-498d0f6a3ec7",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "76a1edc0-74ae-46e6-8409-b4c57cf52103"
        },
        "item": {
          "id": "51205f7d-cdfa-4eab-b2e8-3f52d0ee809a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1b73365c-2d64-4f48-988e-ea182df34431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa60afd5-d8f6-43be-8d18-4fdc9f59c8d3",
        "cursor": {
          "ref": "2b3004d3-4785-42d3-b28a-8ed284fe614e",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "af849f41-a2d8-447a-9dcf-c3aaca003988"
        },
        "item": {
          "id": "fa60afd5-d8f6-43be-8d18-4fdc9f59c8d3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "aceef343-0d8e-41f6-9172-465b622dac36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee77bf0-96d0-4dc4-b205-7221905c0a8e",
        "cursor": {
          "ref": "b78f7f74-81d5-47b8-9b39-e93cee850534",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bcceab6f-ed83-4ddb-b874-3f38a7aeadf6"
        },
        "item": {
          "id": "1ee77bf0-96d0-4dc4-b205-7221905c0a8e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f0b8b6b1-83bc-4de0-a9db-bdfbbef8ca88",
          "status": "Created",
          "code": 201,
          "responseTime": 684,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "8abf43a3-c69c-4564-967b-582e356ebf76",
        "cursor": {
          "ref": "9164d59b-bad7-4d1a-8a8a-629279d20b4d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0cabb517-d4fb-468a-8f96-09dc2cbad019"
        },
        "item": {
          "id": "8abf43a3-c69c-4564-967b-582e356ebf76",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7fe68b7b-42d1-472b-8ad9-729a5316f2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2205b2-d1a4-49ba-a813-aed5612f901b",
        "cursor": {
          "ref": "452f65c3-2acd-453f-b977-e2d08a2bc8cb",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6588ab11-588e-4859-8f4b-33b0ab17db9d"
        },
        "item": {
          "id": "aa2205b2-d1a4-49ba-a813-aed5612f901b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "93d8e6d5-2305-447b-ab2a-0e423f80e8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3323699-3099-40a3-93ac-cb560fffcb1d",
        "cursor": {
          "ref": "0b6872e7-4d7c-48d8-bae5-50026f714932",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "757a91bc-42c6-4778-9ec1-bb73c87b842a"
        },
        "item": {
          "id": "a3323699-3099-40a3-93ac-cb560fffcb1d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "49ee62d9-3286-492d-91e5-ecdf0c5e8690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bda526b-e66d-4444-8147-89e13a2fefda",
        "cursor": {
          "ref": "15f71f91-e8ce-48ba-ab4b-6121e86292c3",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "18e92385-6f0f-4253-8d93-0cdb1cee48b0"
        },
        "item": {
          "id": "0bda526b-e66d-4444-8147-89e13a2fefda",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cf6bbbfb-908d-425a-9796-d07551cecc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d972a95-9600-41de-a61f-33d29bcab1bf",
        "cursor": {
          "ref": "2af0fc62-af43-4426-8381-5b845deccef7",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c338015d-5bc7-421f-91f5-f74d8894e3b0"
        },
        "item": {
          "id": "9d972a95-9600-41de-a61f-33d29bcab1bf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fb642934-4ee9-4e7e-a196-64575b82da9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddff50c2-41bf-4c94-9005-d315aaa51ad7",
        "cursor": {
          "ref": "bfdd5dd3-0443-4522-a9dc-57a7b9ac18fd",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "250a97ee-a9e8-4f00-99ad-2c37cf626b91"
        },
        "item": {
          "id": "ddff50c2-41bf-4c94-9005-d315aaa51ad7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ec1351e4-92f9-451a-9d78-e35af7536d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e5e2fd-2bcc-456a-b405-5ed73bd08ab8",
        "cursor": {
          "ref": "9cea87e6-89eb-4e02-b606-9214b7c889a6",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b3e13277-3560-4614-9829-5550fffa0e5f"
        },
        "item": {
          "id": "10e5e2fd-2bcc-456a-b405-5ed73bd08ab8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "efca3eb3-f8a3-4ae1-b864-8647a877b8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7b6e88-6885-4292-bf51-d16756892f9a",
        "cursor": {
          "ref": "47f7a867-2efe-421d-992f-c688f27c0cf7",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b536dc10-70ad-4b52-be68-8cbc0cc12879"
        },
        "item": {
          "id": "1f7b6e88-6885-4292-bf51-d16756892f9a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b9bed83f-a19a-493b-9c9e-6021245d60a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fb6732-0046-4b11-838b-864b0e4751c5",
        "cursor": {
          "ref": "a400c018-9623-4caf-a652-1842e561618a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f7fda9bf-4d63-48a4-b039-502d318fb7cd"
        },
        "item": {
          "id": "21fb6732-0046-4b11-838b-864b0e4751c5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e61b53f1-65a1-4699-8c66-28bd4049df25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "2aca8568-86ee-427d-96a1-ccb4241ac8ac",
        "cursor": {
          "ref": "328bfc39-907a-403a-909e-d4cb5115d0f5",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5a6dda81-febe-4fcf-8a33-af3799d86d73"
        },
        "item": {
          "id": "2aca8568-86ee-427d-96a1-ccb4241ac8ac",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "957b570b-7648-4517-9dc6-56b3c25546ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b192fba4-9a2b-4e03-83f4-e430a062a30f",
        "cursor": {
          "ref": "b0c31838-6c06-4271-b89a-b15c2e8d5d85",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f18c74d9-c8f9-447f-8d5a-dfda53c7d753"
        },
        "item": {
          "id": "b192fba4-9a2b-4e03-83f4-e430a062a30f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bb8e8f03-55f5-4e75-a791-a52aa4885e37",
          "status": "Created",
          "code": 201,
          "responseTime": 709,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22dc559-a71c-42fb-b485-823437b5df12",
        "cursor": {
          "ref": "0e718938-b8a6-47df-bcd7-d348864a11cf",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7a9e1000-d16c-488a-9953-ce8db5324bf7"
        },
        "item": {
          "id": "f22dc559-a71c-42fb-b485-823437b5df12",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "aefd41a4-58f1-422d-9f8a-677f0364ed2f",
          "status": "Created",
          "code": 201,
          "responseTime": 744,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5854d8e7-bb90-4964-9086-e75673af9b74",
        "cursor": {
          "ref": "020532c5-a408-4eb8-96ad-a486d090a73a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "81bb8226-6d73-44b5-a9dd-b7214dbb9452"
        },
        "item": {
          "id": "5854d8e7-bb90-4964-9086-e75673af9b74",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "868eed0b-0442-43dc-a350-9ab2e186553b",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91098ab6-b42a-4ec7-bf7e-3e612f0ac6ee",
        "cursor": {
          "ref": "b9b8a656-64d7-4277-b3a6-0d04723aada2",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "77b97a14-b650-4aac-a5b5-ec0b7f3f245d"
        },
        "item": {
          "id": "91098ab6-b42a-4ec7-bf7e-3e612f0ac6ee",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "57da2131-b1b9-484e-9de2-53be9edbbe6b",
          "status": "Created",
          "code": 201,
          "responseTime": 640,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6743da2-6698-4753-ba8a-0a46730e406b",
        "cursor": {
          "ref": "b01fb015-1859-41fb-ab1f-bf798f2c6218",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1480dd67-650b-40cc-8c7a-169f2d67f0b9"
        },
        "item": {
          "id": "f6743da2-6698-4753-ba8a-0a46730e406b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c206c35d-45f4-44e1-a1d5-d2722300c17c",
          "status": "Created",
          "code": 201,
          "responseTime": 655,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "443eb67f-302f-4db8-9b98-1bb3aac0ed8c",
        "cursor": {
          "ref": "c3a944dd-f884-4168-96f0-8140da68d5cb",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2c471473-6a3d-4f9f-9601-c7ac6aac256d"
        },
        "item": {
          "id": "443eb67f-302f-4db8-9b98-1bb3aac0ed8c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fc99caa5-f2da-4edd-b015-c4fa26da717d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "443eb67f-302f-4db8-9b98-1bb3aac0ed8c",
        "cursor": {
          "ref": "c3a944dd-f884-4168-96f0-8140da68d5cb",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2c471473-6a3d-4f9f-9601-c7ac6aac256d"
        },
        "item": {
          "id": "443eb67f-302f-4db8-9b98-1bb3aac0ed8c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fc99caa5-f2da-4edd-b015-c4fa26da717d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5925971b-af7a-46ca-a904-5c3e75c9e9a8",
        "cursor": {
          "ref": "49a89424-f4ce-43fb-a69a-7d6f42209a37",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8decaf66-061c-40ff-b7f6-19c2e5ebaa3e"
        },
        "item": {
          "id": "5925971b-af7a-46ca-a904-5c3e75c9e9a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34457614-a58a-4dfe-b605-0d6fcda51c1a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d3ee438d-116c-4002-b4ac-98ed0ec1b5c6",
        "cursor": {
          "ref": "95628089-8590-4604-b733-98a202dbdd70",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1c82c5e-4034-4d51-b5a9-813c48e6b5e9"
        },
        "item": {
          "id": "d3ee438d-116c-4002-b4ac-98ed0ec1b5c6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d575a590-0966-4b91-8b0e-95cdb62ae066",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "73f6456a-adf8-4040-a263-2a1171cdbd14",
        "cursor": {
          "ref": "780eac39-da87-4e76-a454-1ea81f239891",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "86835580-e4fe-45eb-80dd-1a670a640767"
        },
        "item": {
          "id": "73f6456a-adf8-4040-a263-2a1171cdbd14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bacda120-4d30-42e6-956d-649a98f4dfee",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "02b3f753-c0d4-4902-986f-167b80750862",
        "cursor": {
          "ref": "8595e932-badb-441e-aeb6-df5d510d97bf",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ff72bf6e-997a-4eec-8323-a1faa830f0ce"
        },
        "item": {
          "id": "02b3f753-c0d4-4902-986f-167b80750862",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "64a64132-8ab5-4780-b795-f35af9945676",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "84d1079e-bbdd-448a-9cc5-b313d08e4ef5",
        "cursor": {
          "ref": "b587227a-37b9-42f4-826a-ea9486e47de1",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8cd89b71-fd18-4f41-9df2-db5f5500a42a"
        },
        "item": {
          "id": "84d1079e-bbdd-448a-9cc5-b313d08e4ef5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7dc088c0-37c3-4263-8fd1-31a6f84cdfd3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2eb43f7b-2566-4361-9cd1-216aa0d36856",
        "cursor": {
          "ref": "b5cfc8d1-c887-4ee5-ad7e-eba0a744fd71",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dcc662dc-cae9-4b82-bfef-6f31171d0e00"
        },
        "item": {
          "id": "2eb43f7b-2566-4361-9cd1-216aa0d36856",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cb5370ed-fae3-49ab-8396-1017bd681273",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "31e0f66f-7ea0-4d84-b4df-bd7023b5bf74",
        "cursor": {
          "ref": "9a34f363-7a48-4d6e-a932-530af56ab4a5",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "850bb5f5-f701-409c-ae83-7da8b6fdc84e"
        },
        "item": {
          "id": "31e0f66f-7ea0-4d84-b4df-bd7023b5bf74",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "146be56d-41d8-487d-8cf8-2e86ff6c0f05",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9accca3c-8dc8-4713-9ea3-999cdf9c9143",
        "cursor": {
          "ref": "7024dca3-4846-48c6-b2f1-1cad3a82a48e",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "906bd9a3-6ca0-4273-bc93-aa72cd1e57b2"
        },
        "item": {
          "id": "9accca3c-8dc8-4713-9ea3-999cdf9c9143",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2f62c50a-7546-422d-a32b-264b488513b1",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "afbfcdba-f483-40f7-83fa-c8de84742673",
        "cursor": {
          "ref": "9489846b-2ae1-49a7-a779-ebc515d6f559",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dc5c4907-be38-493c-b389-7e99fc4d55f9"
        },
        "item": {
          "id": "afbfcdba-f483-40f7-83fa-c8de84742673",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "647904cc-4337-4d22-b528-6e5052346151",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "4bfae0bd-df38-4f68-8379-025031a1d30b",
        "cursor": {
          "ref": "f8aec8ce-c2e3-4d21-9403-ec7ab2c5d879",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "72128469-e0f1-4c88-bdb4-840801977c04"
        },
        "item": {
          "id": "4bfae0bd-df38-4f68-8379-025031a1d30b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c614c98e-a036-43e4-92dc-c36fd8b20068",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "31fcd003-e101-4c3a-ac09-77563f2aac98",
        "cursor": {
          "ref": "5d19dfba-7190-423c-b694-1777822d8576",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "89a521e3-8df1-401c-82f2-53c7a1812f84"
        },
        "item": {
          "id": "31fcd003-e101-4c3a-ac09-77563f2aac98",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f413052c-f8aa-4620-8c86-391e6cea198b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "79c79749-0f20-4183-ac46-e02379a52066",
        "cursor": {
          "ref": "89ea8f7e-fa54-4dcd-b3ab-bc4e445b3b25",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "df74c0a7-642a-47c0-9e34-f3fecc80699f"
        },
        "item": {
          "id": "79c79749-0f20-4183-ac46-e02379a52066",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b530ae22-077c-4177-9ee0-58c55b3ea3ca",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fb8ea781-47f2-4bb1-be4d-b8bd7c4cf013",
        "cursor": {
          "ref": "f0ac98a6-fe96-4e1a-8fe6-15259d195e0b",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2c372ac1-183f-495c-98d6-e86b3e579735"
        },
        "item": {
          "id": "fb8ea781-47f2-4bb1-be4d-b8bd7c4cf013",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "83e48984-d81e-4940-997a-31fd08ee4697",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f969fba1-952b-4024-8245-a697e707b584",
        "cursor": {
          "ref": "0692cb38-5e5d-49e8-b000-36ec777f0a6b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ffe4b6ea-08ea-4cab-8103-b8c11d73d4c9"
        },
        "item": {
          "id": "f969fba1-952b-4024-8245-a697e707b584",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "91211ec3-4cdf-4f9a-b89f-31debcb49bd5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b627def3-e3cf-4f01-8446-8394b84eb1e1",
        "cursor": {
          "ref": "c84b8164-efaf-4020-ab33-177de5da04eb",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "521b7c26-974a-4e9a-995a-36840fffd1b8"
        },
        "item": {
          "id": "b627def3-e3cf-4f01-8446-8394b84eb1e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "719c3512-6cb7-4f85-af41-0417be4b7815",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1f40da8b-8670-4d2a-9c16-1c81ea67deba",
        "cursor": {
          "ref": "7169467d-4f13-4b3e-b559-212e8c839c44",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0b8ae748-d699-407d-87a1-5e842aba4d64"
        },
        "item": {
          "id": "1f40da8b-8670-4d2a-9c16-1c81ea67deba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6278fbad-b9c2-4179-9a8d-008b4e5f85b2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ba563c0d-38fa-445b-b536-1338cea71973",
        "cursor": {
          "ref": "1a6388fb-8127-4ca9-982f-d936403c0522",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "96c72a56-4097-40b5-be31-6865c08387bf"
        },
        "item": {
          "id": "ba563c0d-38fa-445b-b536-1338cea71973",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9f6902a1-cc0c-4034-a2a0-8a65682f520b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d7bfdcee-3862-4cce-82c1-36421135597f",
        "cursor": {
          "ref": "709aeff1-4290-4e9d-80cd-097d0fec3519",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7630e6e6-6ddd-44e8-bd2e-57f193b6dbc7"
        },
        "item": {
          "id": "d7bfdcee-3862-4cce-82c1-36421135597f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "754e8943-dd09-4594-8acc-1e7bbd492cf6",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "53bec6c5-5330-4a2e-9aa5-cfead31a34e4",
        "cursor": {
          "ref": "0069cf2d-8b60-403a-8f46-43be8087b5b0",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dcb1382e-a9c0-499d-8fa6-d129efcfba2e"
        },
        "item": {
          "id": "53bec6c5-5330-4a2e-9aa5-cfead31a34e4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9e48544f-4a0f-4fc6-80b6-ffe6ca48eae0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fa665660-b7e1-4d83-85a6-b3d705f20de1",
        "cursor": {
          "ref": "1da7003d-969d-440a-b7b1-82d2ae7bfccc",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "705a00dc-171e-49e0-badd-3778da618cd7"
        },
        "item": {
          "id": "fa665660-b7e1-4d83-85a6-b3d705f20de1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa6c32f2-5fde-43ac-85ee-d040e6c6443d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "40330059-4dee-4bef-a585-a87a0aded3de",
        "cursor": {
          "ref": "dc98807f-1183-403b-a2c0-fc36d8f0c507",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1175faa5-09e1-467f-a873-737a87c106ad"
        },
        "item": {
          "id": "40330059-4dee-4bef-a585-a87a0aded3de",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "645621ff-7f87-423d-907f-3b71122919b4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d1f101fd-bd7d-4c12-b109-382f5418d020",
        "cursor": {
          "ref": "7765ad7b-c9bb-443d-97cb-c7d00136cb53",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fc30039c-0a69-467f-a26b-5d6c28baa6d5"
        },
        "item": {
          "id": "d1f101fd-bd7d-4c12-b109-382f5418d020",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e40aee02-c1c9-450a-b6ba-43bce6d03bcf",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5935f3b6-4ae5-4434-949e-0a4f0b445c9c",
        "cursor": {
          "ref": "c8366717-2d1d-4477-9987-ed9558de0434",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fd917c73-a9db-4dba-9558-7193c306a553"
        },
        "item": {
          "id": "5935f3b6-4ae5-4434-949e-0a4f0b445c9c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c33da30d-7127-4631-8f55-284f69ebca52",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0b569c8b-3869-4c1a-857e-9ff36edcb253",
        "cursor": {
          "ref": "8944f26f-0b83-4021-8ded-58d1190f4ad6",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "92bac070-dfd8-478a-94ff-5b380fdaeb7f"
        },
        "item": {
          "id": "0b569c8b-3869-4c1a-857e-9ff36edcb253",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "15df8783-8ad6-459a-ad68-afd322974375",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "55fdde95-ffe1-4659-b904-75783a4f7ae6",
        "cursor": {
          "ref": "f2048fec-5a22-4ba1-9261-73c9087a1ebd",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d15f416e-4904-4711-a1be-dfae97fd0302"
        },
        "item": {
          "id": "55fdde95-ffe1-4659-b904-75783a4f7ae6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f657878e-d884-4829-820e-08a9a47f2a8d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4a05e094-d08c-40be-acfb-2ac149d256ae",
        "cursor": {
          "ref": "893972fb-8430-4897-afb8-c3f48c04b858",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1eab1752-c1da-493c-870c-1449981ef62e"
        },
        "item": {
          "id": "4a05e094-d08c-40be-acfb-2ac149d256ae",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ae7d9c40-c80e-4d1d-a824-1fc563ff68c0",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0b5b86e2-721e-4b34-9684-aa12c7db793d",
        "cursor": {
          "ref": "96ca54ec-2660-4d13-beb6-a6a5e2a2dc08",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "34ab9004-d963-4b45-af9f-067e7f30035f"
        },
        "item": {
          "id": "0b5b86e2-721e-4b34-9684-aa12c7db793d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17149609-95d9-4e8b-a5ae-824dc00a0ee4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b17e7fe3-0927-4921-a670-f19ec77a8742",
        "cursor": {
          "ref": "8573e7bd-54bf-4e20-b2cc-df398b7fd96d",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "30b7f234-8ee0-43cc-8854-7ae76de7dde0"
        },
        "item": {
          "id": "b17e7fe3-0927-4921-a670-f19ec77a8742",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bb310d81-bf57-41cc-bbec-b435ff1405b1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "bfceb579-cdab-4689-874d-b1a9737f8deb",
        "cursor": {
          "ref": "05541292-61c7-472a-88b7-8d31277490d9",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cc59a544-a7d0-4a55-9e31-60c0020d5ebb"
        },
        "item": {
          "id": "bfceb579-cdab-4689-874d-b1a9737f8deb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d9b62a1-0257-43ce-b438-3125271cd854",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "20cfd755-aa1d-4ef2-8a25-8a897aedeb93",
        "cursor": {
          "ref": "da60bab6-0d95-4370-9f68-721c3346edf9",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4aa6757f-dd35-48dd-82af-2c44cf4dedab"
        },
        "item": {
          "id": "20cfd755-aa1d-4ef2-8a25-8a897aedeb93",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f01679bb-88b6-4532-8b10-40e6db47d6bd",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "246407a0-0794-46a5-b8c4-28daad768648",
        "cursor": {
          "ref": "34265060-f4a8-43f0-8117-acb40c536ef8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f5ed72e1-e3c2-44d9-a62a-8c3e7d4897f2"
        },
        "item": {
          "id": "246407a0-0794-46a5-b8c4-28daad768648",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "da63b0fb-b14d-4e1e-b3dd-019c8f992fc7",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e8d5103d-3b8b-447e-b71e-cf717fe2bdfe",
        "cursor": {
          "ref": "a15a8fbd-2062-4b4a-985a-236e795ac103",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "21d15b3c-10cb-4a6d-bcd8-2a7f35b7f594"
        },
        "item": {
          "id": "e8d5103d-3b8b-447e-b71e-cf717fe2bdfe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a9e1e06-29e0-4a25-9852-07f378129108",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfafa5cf-6c4b-47b7-a954-12502dde5a88",
        "cursor": {
          "ref": "860d0d02-8cda-429f-9025-63dd20e14142",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "43c13ec0-dd1f-4c20-adc7-9e50c3cd949b"
        },
        "item": {
          "id": "cfafa5cf-6c4b-47b7-a954-12502dde5a88",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a6e6b7c5-4fe1-4d1f-865c-dec636ccad7c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2797f1-9f80-4fa4-85d6-d7496135595d",
        "cursor": {
          "ref": "22de4654-1dc2-425a-9cbe-604cb9e14215",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "25b9d6cc-e12b-4840-9822-2535c3d91988"
        },
        "item": {
          "id": "0f2797f1-9f80-4fa4-85d6-d7496135595d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15cd434a-30e7-4587-9575-46a3d46e86c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2797f1-9f80-4fa4-85d6-d7496135595d",
        "cursor": {
          "ref": "22de4654-1dc2-425a-9cbe-604cb9e14215",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "25b9d6cc-e12b-4840-9822-2535c3d91988"
        },
        "item": {
          "id": "0f2797f1-9f80-4fa4-85d6-d7496135595d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15cd434a-30e7-4587-9575-46a3d46e86c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84a00a0-c534-4817-bafa-fa971e25a44e",
        "cursor": {
          "ref": "f0205864-ce71-46b1-b158-27dce5b686c6",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0cf2b811-4453-4607-ad00-483385b63689"
        },
        "item": {
          "id": "d84a00a0-c534-4817-bafa-fa971e25a44e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "05946647-b610-41de-8d59-5d912369517b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3087e257-23fb-4380-a11f-8bf6d7fe60c2",
        "cursor": {
          "ref": "1fd78d47-a84b-47f0-a82b-b5360032886d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5fa73620-81d3-4995-9270-236281a11171"
        },
        "item": {
          "id": "3087e257-23fb-4380-a11f-8bf6d7fe60c2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ce0bad0f-4068-4abe-9774-9eecc9a65c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b708272-ae69-4ba4-8755-bfba73e184df",
        "cursor": {
          "ref": "66a72e6a-3242-47f3-b6b6-a4065062e6b8",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aacd101c-da20-4639-b629-07c704335d32"
        },
        "item": {
          "id": "9b708272-ae69-4ba4-8755-bfba73e184df",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "85cb21bc-9777-404c-8030-75f87023fd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966b78a8-a488-4fcd-ae20-a2a8c786a1b1",
        "cursor": {
          "ref": "729ec6f4-0b8f-4667-a177-6defda4c1b2c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f45703a-03be-432e-bd5c-1bf4a7251c9d"
        },
        "item": {
          "id": "966b78a8-a488-4fcd-ae20-a2a8c786a1b1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3385b49a-4c20-4736-884a-d9cf2a097201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c3af1c-c854-4961-9077-3a48c8e05b6e",
        "cursor": {
          "ref": "d0ca0612-460f-4d26-8b68-591c2c8d02f2",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e51a6b0b-ee06-44cc-9da5-0adf11bb2349"
        },
        "item": {
          "id": "30c3af1c-c854-4961-9077-3a48c8e05b6e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cf54a769-cfb6-4fc9-b26c-42a555c61151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5649e372-1763-4c2b-aeec-70e416ab029c",
        "cursor": {
          "ref": "ec87c801-3ce8-41c3-8a45-4070401f1f93",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "80d6a40c-a0e4-4d04-bc6a-155a4fd1fed1"
        },
        "item": {
          "id": "5649e372-1763-4c2b-aeec-70e416ab029c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f2cc1e97-340d-4541-8ded-bd807db0be18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05618a72-d8f5-47db-b1da-e3922c08b90c",
        "cursor": {
          "ref": "c4f9a7a7-c31a-4bea-98f0-75706d686f5a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3fee0e20-e677-47a4-b2c7-6b44adf5e039"
        },
        "item": {
          "id": "05618a72-d8f5-47db-b1da-e3922c08b90c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6bcc1266-a51c-487a-a29b-eeb5deb5f4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a0003e-38ea-462d-9848-a1f8d252d14c",
        "cursor": {
          "ref": "b0bed9bc-f0ff-497d-bad4-d22830b667c1",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ae23e5f9-a520-4cd3-8577-07cceb7baa0b"
        },
        "item": {
          "id": "f8a0003e-38ea-462d-9848-a1f8d252d14c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c58d0c6a-f2a1-4a4b-8e17-c9fc2796f58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58e5220-fe4c-47ae-8a11-ecffc210d0e4",
        "cursor": {
          "ref": "3ce3f779-be9c-410a-8b51-42aa436cc0eb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "260b6f02-470e-4d13-b3ea-e25368a2e3c0"
        },
        "item": {
          "id": "e58e5220-fe4c-47ae-8a11-ecffc210d0e4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cf3c4c55-1ec3-44d8-87f3-8d4ff2f60586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b683c22-885b-4db9-b216-0d5e84838fdd",
        "cursor": {
          "ref": "203dfef8-4af1-49b8-987f-dd208748cd3b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "45f010da-eaef-4749-a2a8-c5aa89e224a9"
        },
        "item": {
          "id": "2b683c22-885b-4db9-b216-0d5e84838fdd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5554ca5d-b0ba-4d20-8d86-7c59fd9ec98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aac453-cf33-42de-80e2-cb2fb2ccce37",
        "cursor": {
          "ref": "20433d4f-4cdf-46fb-bd61-e95ba13d831e",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1c06269c-8af2-466f-b97c-569e243fdd2e"
        },
        "item": {
          "id": "30aac453-cf33-42de-80e2-cb2fb2ccce37",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c926dcee-8ec1-4787-a50b-5d5582219df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c156fc-b5cf-4bb4-bc3c-1ad70088aafd",
        "cursor": {
          "ref": "af904ca6-fb1a-402e-bb36-0b0e49542612",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f291163c-f457-4f9a-ad5d-47844e30072a"
        },
        "item": {
          "id": "f8c156fc-b5cf-4bb4-bc3c-1ad70088aafd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2d3156c8-6c63-495e-ace3-fb92247ba8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4df6b6d-99aa-46c2-a46c-e0f914407853",
        "cursor": {
          "ref": "d5fc7377-c839-4e15-a495-a8243d458efc",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f0d7b283-0801-40e3-b7c9-d15fb9ed3384"
        },
        "item": {
          "id": "a4df6b6d-99aa-46c2-a46c-e0f914407853",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "31deb8c6-f232-4deb-9258-ec233a4d323a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65e552e-2223-4619-8a73-7a88ad71ae32",
        "cursor": {
          "ref": "d4e3f48d-19ca-4c71-92a9-d8ab26ced922",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6220f925-1bfe-495d-88e1-2bf3879bc9cb"
        },
        "item": {
          "id": "b65e552e-2223-4619-8a73-7a88ad71ae32",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "34ae9f6f-3d7c-4460-b391-a85578bfade8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6898c4-672e-4ad6-90fc-24745c8f33ad",
        "cursor": {
          "ref": "16a85bfe-0d7b-4628-ab5b-bc60d555a40b",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a5d96a2a-c837-404c-89fb-294b91b717ed"
        },
        "item": {
          "id": "5a6898c4-672e-4ad6-90fc-24745c8f33ad",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6b40a29a-7b28-4119-80d8-be4f4a1cf0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8510fd-a639-4c8d-9fd8-054c1ffaa11d",
        "cursor": {
          "ref": "5e2b8344-ac26-492f-af1b-03938371c0cc",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "48800068-112c-4c6b-ba5b-c024baf96a09"
        },
        "item": {
          "id": "1a8510fd-a639-4c8d-9fd8-054c1ffaa11d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "27908f2f-2929-4e39-9b3a-3d5152f241a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0522c9b9-8227-4858-b2f8-420568344d8b",
        "cursor": {
          "ref": "eadb0d1c-2c86-46ca-aef1-ce6c55199c11",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dc89900f-dc83-40ce-9ff7-9a3d5cd31dd6"
        },
        "item": {
          "id": "0522c9b9-8227-4858-b2f8-420568344d8b",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "309df5ba-9b82-41f4-8db1-75464fb4680c",
          "status": "OK",
          "code": 200,
          "responseTime": 578,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "9a8c705f-b7a4-4a92-aa10-eaf674865978",
        "cursor": {
          "ref": "6971831b-4aee-4434-8973-8abc9033dffb",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "15ef3dcc-a742-4dfc-8723-1df8ad0e26ea"
        },
        "item": {
          "id": "9a8c705f-b7a4-4a92-aa10-eaf674865978",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "81ca9cc8-3866-4d7e-acb3-ef1eb0c32f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e8a04b-40d2-4bc4-b019-5c6b0b3dca7b",
        "cursor": {
          "ref": "451d8f83-ac1e-41c7-827f-3c6c252cd2d3",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9cfbcfbb-e642-4d88-b3d5-ae9b1f62517c"
        },
        "item": {
          "id": "29e8a04b-40d2-4bc4-b019-5c6b0b3dca7b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "420ecc4f-0988-4e17-b8da-0ac0dfbf250b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261d962d-aae6-45cc-aca7-22cf07821619",
        "cursor": {
          "ref": "644b2cba-6911-43da-a5e8-937f3e33620b",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e1a2fd7a-b755-468d-bdf8-bce487d8e756"
        },
        "item": {
          "id": "261d962d-aae6-45cc-aca7-22cf07821619",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "10ef14b1-e05a-4de7-910f-20e441a733a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5099894-980b-4b36-a2df-fb73d081a46b",
        "cursor": {
          "ref": "a1525644-adfe-49ae-ae22-94a98f5b53d3",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3ba2fed1-4323-4764-b0a4-c4f8dc8ebe31"
        },
        "item": {
          "id": "a5099894-980b-4b36-a2df-fb73d081a46b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "792aa82e-785f-4304-8312-bd333b24a1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992058c9-a4cd-479f-99d6-f379c4896d17",
        "cursor": {
          "ref": "587cf0ec-52a0-4978-849a-828bc00df66b",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a48cf83a-7bbd-4545-b9ec-f296bb393025"
        },
        "item": {
          "id": "992058c9-a4cd-479f-99d6-f379c4896d17",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c7e3b8d1-7528-4c73-8149-274c81055d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebf907b-1f4b-496b-bf10-7c2eb672a766",
        "cursor": {
          "ref": "51d998d1-f512-4efa-8f01-92c195a6850a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "de025ac7-d4e0-4da6-ab6f-7daba910dfdd"
        },
        "item": {
          "id": "0ebf907b-1f4b-496b-bf10-7c2eb672a766",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "53edefcf-ff62-4c95-b024-e9c9c6cbde52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa84949d-b25e-4ae9-ab2e-f89464a56819",
        "cursor": {
          "ref": "11019206-4eb8-4165-8865-300e6f55cea3",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5e1724c9-1a66-4061-9e47-ae6b0bcf92f5"
        },
        "item": {
          "id": "fa84949d-b25e-4ae9-ab2e-f89464a56819",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c3f3ae15-9041-4c6c-b3d7-d3c582cd6bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78db6a5f-2185-4bb3-9faf-6687a554e7c4",
        "cursor": {
          "ref": "eb11d71d-1fd4-424f-891f-6921dfb46b2b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bbb8a0b2-e048-42f1-8f0a-41590c048cde"
        },
        "item": {
          "id": "78db6a5f-2185-4bb3-9faf-6687a554e7c4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a2e830ae-cc1b-421e-9a82-b9aaaa5046d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d53ed6-ed4d-4794-bcdd-94bc20b300a9",
        "cursor": {
          "ref": "438a3a83-7fc9-4a6a-8592-6792348ce96e",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "47678068-b47b-4daa-9958-7a0bf0da35f9"
        },
        "item": {
          "id": "08d53ed6-ed4d-4794-bcdd-94bc20b300a9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dab1e406-4a8e-4d91-a395-87997932b9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df89a86b-40f9-4f6c-bc4a-d4c131da322a",
        "cursor": {
          "ref": "33183b04-0f33-4c5d-bebf-ef633532a310",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0e4b2703-b255-4804-9531-88c1f784605d"
        },
        "item": {
          "id": "df89a86b-40f9-4f6c-bc4a-d4c131da322a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ebb70834-7e38-4b84-98a1-e3a52dbd0c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c245493-bd5f-4ee0-8ef6-921228cd887d",
        "cursor": {
          "ref": "2dd810f6-e993-4e9c-9228-d1c0007de826",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a63357fb-d8a7-4f69-af26-ec7697783e98"
        },
        "item": {
          "id": "3c245493-bd5f-4ee0-8ef6-921228cd887d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "97687df4-8036-4f1d-a0ae-170d21fae4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463dbbd8-9149-45e6-ae47-a8a07c08db9c",
        "cursor": {
          "ref": "abe457f6-c047-42e4-8036-715b343116fc",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "47f15c80-5976-4135-8948-d409a680f908"
        },
        "item": {
          "id": "463dbbd8-9149-45e6-ae47-a8a07c08db9c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "77149114-3946-4cc9-b870-acbf1aa86bad",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1d862c82-794f-4f1b-bc7c-36d5cb76ac7d",
        "cursor": {
          "ref": "ce46a6cc-0242-492f-b43d-8e412e2ebd17",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d418c2b9-6a4c-48aa-b915-9f4d8bbbaf65"
        },
        "item": {
          "id": "1d862c82-794f-4f1b-bc7c-36d5cb76ac7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8a480bcd-d94a-4f25-adc8-820fb9ad03b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477b78ba-59a6-467f-a3b7-9433542b52a1",
        "cursor": {
          "ref": "9a202d79-34f3-4a08-8efd-4bc442653c4c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5139a044-0cf4-48d4-8cbc-0d4b02de074b"
        },
        "item": {
          "id": "477b78ba-59a6-467f-a3b7-9433542b52a1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d774207c-dd4a-42b0-a20f-c76cfdcf573e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bab3e7c-49d1-485b-a9c8-5b97eb73a3c6",
        "cursor": {
          "ref": "f3c07c4e-4c6a-4b87-9595-53efc1d6cbcb",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "96f6dcc3-3a89-450b-b4dc-c41a46e9c35e"
        },
        "item": {
          "id": "1bab3e7c-49d1-485b-a9c8-5b97eb73a3c6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "509be9d6-17cf-465c-8cf9-9be182b4a55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658caf7b-c59e-416f-a7e7-5c6ec918eb90",
        "cursor": {
          "ref": "ed1f1af9-18a0-4c44-9ceb-913a99f9ff66",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fedd6099-453f-486d-956c-4ec36ac7d5c1"
        },
        "item": {
          "id": "658caf7b-c59e-416f-a7e7-5c6ec918eb90",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "42224e06-bb58-4204-9655-cda6a02e3428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65eefac-7837-402b-8e00-7142e528f27f",
        "cursor": {
          "ref": "d7abd600-01c3-49d5-b7c3-c4a087f781cd",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4bb859ba-42b7-4584-82ab-6b02932ba411"
        },
        "item": {
          "id": "d65eefac-7837-402b-8e00-7142e528f27f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9418eca2-8541-4106-8f5c-f426d11ed898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbac37dc-c9cd-4412-a45d-c85082fc4aa8",
        "cursor": {
          "ref": "cdcaf1df-5e50-4dad-a82e-31cce815893e",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6da84595-ffbf-4210-977f-7fddc4932020"
        },
        "item": {
          "id": "dbac37dc-c9cd-4412-a45d-c85082fc4aa8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e8ef431e-e097-4db7-8559-b9aa7d0024d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e3ab78-6722-49d3-bdf6-9c89fdf8e72a",
        "cursor": {
          "ref": "43f967cf-1a85-487d-989d-70ee429d74df",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e0ca8cf3-ef0d-4001-bbe8-d6168235eb22"
        },
        "item": {
          "id": "10e3ab78-6722-49d3-bdf6-9c89fdf8e72a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9d629a7d-b433-48a3-b430-a4a4be057c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a910804-7e59-4f3b-a051-85e554de5744",
        "cursor": {
          "ref": "b5aa9833-b22b-434c-a9b0-075850a70b3c",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5fecd970-c195-4786-b819-af61e26eeca9"
        },
        "item": {
          "id": "2a910804-7e59-4f3b-a051-85e554de5744",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8e293257-9aca-4267-bf03-a76104fe9224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fd2a50-72af-403b-bb5b-a6547f232395",
        "cursor": {
          "ref": "f900b094-4cea-4edd-b53f-9dd7243643d7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "80e45165-5e5a-479b-bc98-501372aee655"
        },
        "item": {
          "id": "22fd2a50-72af-403b-bb5b-a6547f232395",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e525dac-1705-4e59-83d5-69bce96f5919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce683936-35d7-4ff8-a23f-8f3bd05b46e2",
        "cursor": {
          "ref": "66dd9c53-f79e-4beb-b34c-b4e5d13ecdf4",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d7ae7279-53a0-45de-8804-2ee2c4b2c5f2"
        },
        "item": {
          "id": "ce683936-35d7-4ff8-a23f-8f3bd05b46e2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5d6cce57-7a51-4f64-88e9-322a45847f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a549ff6f-2157-406b-b386-58a5866f2836",
        "cursor": {
          "ref": "1c574e58-85b3-4c11-a73d-98b2ade5df16",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "70a2afe9-388a-43c8-a891-f2f917d7efac"
        },
        "item": {
          "id": "a549ff6f-2157-406b-b386-58a5866f2836",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ffeac6df-a057-4a8a-8bd8-4eca5836c549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be8f94d-295f-433e-87a0-d9f597651889",
        "cursor": {
          "ref": "3fc67b57-08b4-4c56-a917-aa939274e92b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a567414f-98a1-42cb-870d-f34a8e60cfee"
        },
        "item": {
          "id": "7be8f94d-295f-433e-87a0-d9f597651889",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a6ef6ecd-02a1-412e-8349-dc91817d0fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c670d57e-4b8c-4875-b0a5-2661fffa613f",
        "cursor": {
          "ref": "ebed6209-5c90-4f87-943c-0cfc512d3969",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5dd232b1-79be-4bfc-af30-e494a8dabaa4"
        },
        "item": {
          "id": "c670d57e-4b8c-4875-b0a5-2661fffa613f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40044315-e588-4e96-ad8a-b22ede11e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5ff9d6-e463-4a2d-abbf-3dfe7ead83ae",
        "cursor": {
          "ref": "4dc5784c-11a7-4b07-9b1d-a195cd63e3d2",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4e92677a-cdad-4664-9272-9a9fc01f09f2"
        },
        "item": {
          "id": "6f5ff9d6-e463-4a2d-abbf-3dfe7ead83ae",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9f3b2f95-4a84-4b23-bf9c-bf7539ba2912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce93a7d-204f-4f7c-be34-fce006c5fc42",
        "cursor": {
          "ref": "d45b2003-7149-46f4-8890-dcbef61f0a77",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "49522086-adda-4287-ac9e-71358f747896"
        },
        "item": {
          "id": "7ce93a7d-204f-4f7c-be34-fce006c5fc42",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9fc5ff35-13b1-4e54-b0e1-c5e9c59d21e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5109a7e5-53b6-4a2b-b451-a6f390f77c5a",
        "cursor": {
          "ref": "08452d0e-e6b0-4a51-b78f-68122e942f6b",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "909a2c72-42d9-4d41-a2f9-c305500cb698"
        },
        "item": {
          "id": "5109a7e5-53b6-4a2b-b451-a6f390f77c5a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9254e974-8498-4e29-8e75-a499e42ac47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf5990d-ce23-411b-9518-781c51186947",
        "cursor": {
          "ref": "a913fad4-2cc2-403d-ac03-44d1e93bb67c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e7b65124-9f37-4277-abe5-d6ee43997e97"
        },
        "item": {
          "id": "dcf5990d-ce23-411b-9518-781c51186947",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6e4a7819-7d05-4028-9c5a-627a7a7eb3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c1e90a-a13a-4a49-aaea-0456aa5d35f8",
        "cursor": {
          "ref": "af993303-d4bc-4bce-b851-459774f19390",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "76f52740-dd75-4fbf-be7f-cdfbccd32c20"
        },
        "item": {
          "id": "16c1e90a-a13a-4a49-aaea-0456aa5d35f8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cde14047-949b-4dd9-8433-8ec95ba5278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e7c7f1-f354-419d-8588-16ec415a165a",
        "cursor": {
          "ref": "c61eb07e-b76f-4dce-b649-9cf7dc3836a4",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "235aa9d1-004f-46f5-a7c1-03fb418ade8e"
        },
        "item": {
          "id": "57e7c7f1-f354-419d-8588-16ec415a165a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "82dbae20-7459-4732-87f0-229fad47c182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7887afbf-5532-4e61-ad31-9ec6fde2011c",
        "cursor": {
          "ref": "670895ab-b55e-4fbe-8546-c11b3e5d291d",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a34d2cc3-5173-4a7b-8b8c-bf7a292416c6"
        },
        "item": {
          "id": "7887afbf-5532-4e61-ad31-9ec6fde2011c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b91c2f84-1d4c-40f4-a7dc-4345a168e7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bc0746-bcb2-401f-be3b-ae333a5cdd99",
        "cursor": {
          "ref": "750b0009-f5cf-46d3-959d-7cea86aff4e3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "400cef74-b94d-4101-8745-37319e04824e"
        },
        "item": {
          "id": "d9bc0746-bcb2-401f-be3b-ae333a5cdd99",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5e984187-a2d5-4641-b972-9af8f5de3fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389ada40-22de-49b6-8fb7-e15afa330722",
        "cursor": {
          "ref": "49cd98fe-596c-4650-aea3-868a719b01db",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f4e6923-5357-4fd3-a366-e15525c53cb8"
        },
        "item": {
          "id": "389ada40-22de-49b6-8fb7-e15afa330722",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0bb00997-7085-4c20-ae63-f20aceb95687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d33410-ff9e-470a-96dc-aa5690622868",
        "cursor": {
          "ref": "0dadf661-0526-4200-803a-4a4751e0f025",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e040f538-054f-4502-a594-ac2736c64488"
        },
        "item": {
          "id": "01d33410-ff9e-470a-96dc-aa5690622868",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "366bf6cf-4ed8-4aed-a5a8-eeb8c68fa5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344eadc4-3283-4513-8dac-8c19035e8cb8",
        "cursor": {
          "ref": "39cd223a-24fa-40a3-8b3e-5ccccf835056",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2d5e1a25-6ba5-487f-88af-59f799abd8f3"
        },
        "item": {
          "id": "344eadc4-3283-4513-8dac-8c19035e8cb8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b1ae3c8f-9eb7-4f31-9136-81b024ae7e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c918c2ef-1163-4725-a307-fef036adee34",
        "cursor": {
          "ref": "7a720fea-eaa8-4c7c-bdb6-c21eeef8a935",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bf155512-e723-4f7b-8a58-03ece2e136c6"
        },
        "item": {
          "id": "c918c2ef-1163-4725-a307-fef036adee34",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "80824609-e43b-4fc1-b4cd-62409469f7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24a8b56-05f3-4706-82b8-677e56b2715d",
        "cursor": {
          "ref": "a92a7b92-a01a-41a8-b814-f26fea95b44d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7d943d40-4dd3-4f94-9266-419acb169943"
        },
        "item": {
          "id": "c24a8b56-05f3-4706-82b8-677e56b2715d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3c18dab7-77aa-42f1-8f38-73b9d30c4f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813fe789-2e23-4cdd-b026-c04818930599",
        "cursor": {
          "ref": "8848f3d0-8e8a-47d9-85a3-43341c338533",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0e7ca81a-a135-40c1-82fd-14d1ffffbe14"
        },
        "item": {
          "id": "813fe789-2e23-4cdd-b026-c04818930599",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "801e63c3-0c0e-4d65-b0f6-e61d0ab85f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b297f054-fc6f-4669-a8bf-7393f5b577b5",
        "cursor": {
          "ref": "1f08fdbe-0e99-4470-b3ca-820eb2e31e46",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "10094f39-8766-45ba-9483-1deea6ec7e50"
        },
        "item": {
          "id": "b297f054-fc6f-4669-a8bf-7393f5b577b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7901f44f-068e-4f0b-90ae-aed7693d55b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f545748-3c20-45ef-a6a3-f9a573a4ec9d",
        "cursor": {
          "ref": "6d983f0c-4552-4de7-974b-f7152b213335",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1266d424-2fb3-4054-853a-41f618a1ce83"
        },
        "item": {
          "id": "1f545748-3c20-45ef-a6a3-f9a573a4ec9d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "50f4bbaf-6c19-4892-b16b-d979cae10e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44724d1-d813-4a89-ab11-3fc6c968bf64",
        "cursor": {
          "ref": "c4398f67-4d10-451e-a7a5-2694c514776a",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0fbe860e-990a-4d9b-b004-9e2dd570b143"
        },
        "item": {
          "id": "e44724d1-d813-4a89-ab11-3fc6c968bf64",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d77fdd5b-dd16-43b3-b796-f882a09413d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2286cf47-9a4a-4f06-8bee-a4f6fa1c5309",
        "cursor": {
          "ref": "b5bcb05d-ccc4-402b-a802-fe7907ce81ea",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4373d1e2-55f7-4137-88e6-e69e4a081200"
        },
        "item": {
          "id": "2286cf47-9a4a-4f06-8bee-a4f6fa1c5309",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2960d0f1-b27f-4972-ae72-43cd5951753b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e3bbcc-9d6c-48cf-8fa9-dae7dfe4deb9",
        "cursor": {
          "ref": "1d187683-da45-40f0-97e2-bc7c7846d739",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fc5acf8-c890-4b14-b549-65834237f3b7"
        },
        "item": {
          "id": "e5e3bbcc-9d6c-48cf-8fa9-dae7dfe4deb9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "68534563-f2f6-44f8-895d-702597b2cedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc975b5-b3cf-45a3-ba0d-7083062693b6",
        "cursor": {
          "ref": "2a507dc1-9237-4803-a395-edb6dcff11e6",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1fe1c609-20dc-41d3-8582-233429178cfd"
        },
        "item": {
          "id": "fcc975b5-b3cf-45a3-ba0d-7083062693b6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "298eee1b-0fdc-4f67-99b1-145a41bc6f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced7484a-cfc6-4b40-a77b-d8b442b09e04",
        "cursor": {
          "ref": "9b5bca72-2cdc-4892-addf-ac1e1e8e82f7",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c1b9179f-b3ad-4783-9277-bab1bf6a49d0"
        },
        "item": {
          "id": "ced7484a-cfc6-4b40-a77b-d8b442b09e04",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dbf3c86c-c49c-4668-a90f-02948b80fe3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcf32ee-764c-4a91-99db-cd4c8fbbc4ea",
        "cursor": {
          "ref": "961677bb-9765-4d8d-99be-57ee1045fbce",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3f4f8bee-4b5b-4d06-b372-79a5662f0287"
        },
        "item": {
          "id": "fbcf32ee-764c-4a91-99db-cd4c8fbbc4ea",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b11c7a2c-9e87-422b-97c2-890111be014a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5171a2-136e-4d39-a2c8-b1b532fda0f4",
        "cursor": {
          "ref": "91d7c4a3-acaa-4e93-bfa4-8c6a80ae1ac5",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c71df9b7-e38d-4208-b882-66d95da61584"
        },
        "item": {
          "id": "1c5171a2-136e-4d39-a2c8-b1b532fda0f4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f69ef497-497b-4210-b91b-60bfcba8fb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97c1879-7359-4370-8c19-c828aef09508",
        "cursor": {
          "ref": "5d458b79-c7e8-4ec8-8bc1-b1056c87692a",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2bedd5f6-f0f1-4990-9481-e1ad4de23092"
        },
        "item": {
          "id": "d97c1879-7359-4370-8c19-c828aef09508",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c0bea7b3-d5cd-4748-bcc9-a22d6e5b0a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f837e4-52b8-4801-8809-97d2492c77e8",
        "cursor": {
          "ref": "c348942c-e711-41d1-a7be-ba6cf637e409",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6a504815-b2a7-4f0f-b895-57265ca6903b"
        },
        "item": {
          "id": "44f837e4-52b8-4801-8809-97d2492c77e8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7ab28230-4c25-49b8-86c1-33b12e109fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99287b8e-3946-44a5-9811-5eaceb13ef64",
        "cursor": {
          "ref": "d612b32f-ddfa-4719-9364-ec02f5eeb5f4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b65e3ab2-114e-4290-be75-1fa7e3ed7523"
        },
        "item": {
          "id": "99287b8e-3946-44a5-9811-5eaceb13ef64",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "90b155e0-c350-4fbb-b5b8-5d3063d499b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274ee4a9-53c6-44ff-bf39-fd2f8e323afd",
        "cursor": {
          "ref": "76d48a7c-70f2-4024-b89b-913c18e52464",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c34996ae-8582-4432-bdce-581e541f49d7"
        },
        "item": {
          "id": "274ee4a9-53c6-44ff-bf39-fd2f8e323afd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "15747a43-a6ec-4d2d-942a-824a8641e411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee0cb6b-ac8f-47ff-8211-5eee323128fa",
        "cursor": {
          "ref": "52d36bab-0a89-4d4f-b988-dd86a5271844",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1ea2a5d2-fa82-4424-985c-4b7532ac5572"
        },
        "item": {
          "id": "9ee0cb6b-ac8f-47ff-8211-5eee323128fa",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "effd7c19-40ae-4876-bc13-e461a45b1352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62e2e01-49f6-42bc-8940-af070f14740a",
        "cursor": {
          "ref": "19de407e-be4c-4946-ad8c-cb586cb070d3",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "86f17ece-84b2-4a82-b10d-8d5bc9ba4c63"
        },
        "item": {
          "id": "c62e2e01-49f6-42bc-8940-af070f14740a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "723c6c50-ac9c-4f89-8a00-d8f1c7ae6c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d59ffd-5b0a-427f-992a-e84d432fa666",
        "cursor": {
          "ref": "4dcbb4de-cac1-4169-9eff-00f721f09a39",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a50fcd28-f049-4337-8775-bf08cf86a46f"
        },
        "item": {
          "id": "56d59ffd-5b0a-427f-992a-e84d432fa666",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f87ae5bb-69f0-4725-8658-9772e8d30de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c8223d-3f3d-4244-b44d-697bb0df93dc",
        "cursor": {
          "ref": "d512792d-8caa-4add-bc4b-c2d7ce2697e8",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9c60f183-96f2-454e-821e-efbc1c97ee97"
        },
        "item": {
          "id": "b9c8223d-3f3d-4244-b44d-697bb0df93dc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cb6566e2-5e60-4617-898d-25b24d52be16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301b4e97-377d-49fc-a934-0f84b71222ea",
        "cursor": {
          "ref": "0f44d6e5-e442-4a65-9cd9-5b8eb5b35764",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "79362269-382d-4f6b-975c-ab3d115e040d"
        },
        "item": {
          "id": "301b4e97-377d-49fc-a934-0f84b71222ea",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ee5d3f5a-1916-4763-8923-99c820c66b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126d01da-f832-45e8-a5ae-5db7a1930fdf",
        "cursor": {
          "ref": "6d68b3fa-793a-4521-8c2f-acb5559b8167",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9c0c170d-03e0-488a-99d3-ce6e3239fe82"
        },
        "item": {
          "id": "126d01da-f832-45e8-a5ae-5db7a1930fdf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1cad4db8-5170-40ba-83ea-b3e9ad3a1d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d467974-c86d-4cbb-80d7-e3824aad3355",
        "cursor": {
          "ref": "9c368ea7-18a5-491a-bb3c-1265c217c306",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a441fc40-4cdc-412b-8030-b4c5c72a1dbc"
        },
        "item": {
          "id": "2d467974-c86d-4cbb-80d7-e3824aad3355",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "72740d11-aaf1-4687-a45b-454faaeb8665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775b2189-97b0-4647-bfc1-1473f1be6111",
        "cursor": {
          "ref": "14465d19-325f-44f1-bc2f-27aad5face68",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1d1df82c-524c-4e78-a452-37c0c3b00388"
        },
        "item": {
          "id": "775b2189-97b0-4647-bfc1-1473f1be6111",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "245826bf-25d1-429b-a02d-c87e50aaeab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986cc54d-e37d-4eb2-9c2b-89425d4270ee",
        "cursor": {
          "ref": "9f5d95d7-e23c-4c7e-aeb3-043b1c5cff80",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5ecd9df7-7bef-4bbe-96f6-2c46c0272eec"
        },
        "item": {
          "id": "986cc54d-e37d-4eb2-9c2b-89425d4270ee",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a77bf358-82da-43d8-b23c-334bf95b26ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edada503-b693-4ed9-ba5b-524d741554d8",
        "cursor": {
          "ref": "919906e4-7124-44b3-94d1-ffb3f64d415e",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0d23bb5b-91f6-482c-9e14-e6a699d86bd1"
        },
        "item": {
          "id": "edada503-b693-4ed9-ba5b-524d741554d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c67b4d37-3d60-4495-a9b7-385b28daf0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8112d36-34ff-4cc9-9183-4a9fdcd60e37",
        "cursor": {
          "ref": "eb48d3a1-9ec7-4f7c-97e4-f538590db98b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e476c17e-8d45-41f5-9890-50bd35085a43"
        },
        "item": {
          "id": "f8112d36-34ff-4cc9-9183-4a9fdcd60e37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "99416a2b-b2f7-4341-a916-6b5dd7317e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808313ac-153f-49dc-afe6-f82bed8ec6ea",
        "cursor": {
          "ref": "49275a2c-1913-4aba-a71c-c869e3e8ea23",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "24e7aa69-6850-4ac9-99df-b8962fc78907"
        },
        "item": {
          "id": "808313ac-153f-49dc-afe6-f82bed8ec6ea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6eb24b0d-b996-49d0-b4ea-3d94f8c659d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e8d6ca-6a93-4d78-bf4b-ab392e953838",
        "cursor": {
          "ref": "d07db53a-eb4d-4714-9f17-7e580d86cc78",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "346c81cc-16ef-4160-adaf-1200a7b934fa"
        },
        "item": {
          "id": "61e8d6ca-6a93-4d78-bf4b-ab392e953838",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9c096d32-c6e0-41a6-b37b-d9714e81e5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489a6717-f046-4a55-af36-bcec1b132ab0",
        "cursor": {
          "ref": "618afd94-aff7-4c05-bc8c-1c659fb1cb56",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1a778341-54da-452e-997b-00a0843bda47"
        },
        "item": {
          "id": "489a6717-f046-4a55-af36-bcec1b132ab0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c8109865-4257-423a-87b0-3ccde9ad16b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfa6b5f-628c-4cdc-a3f6-53fed22a2130",
        "cursor": {
          "ref": "41c9fd2b-7ea5-4444-af45-02f949233bdc",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ff7d6b26-751a-48e2-a858-964dfe06685a"
        },
        "item": {
          "id": "fdfa6b5f-628c-4cdc-a3f6-53fed22a2130",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eda3769d-baef-413f-b09d-bddddc091d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a826f8-b023-49c5-b2dc-73b8727f2977",
        "cursor": {
          "ref": "082781d4-e4b8-409f-b8b7-cc37bf6182e9",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "db20d27b-23ad-4b53-af0e-6b0fe4dda8a5"
        },
        "item": {
          "id": "64a826f8-b023-49c5-b2dc-73b8727f2977",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "964f5a28-a5df-4d42-b092-3774ed162850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbde8633-5ae9-4327-b090-f4a2a6fc0745",
        "cursor": {
          "ref": "3601d0aa-a965-4586-8c90-85779d5b2a54",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "81c38cfc-7d79-4883-8403-180c96d30244"
        },
        "item": {
          "id": "fbde8633-5ae9-4327-b090-f4a2a6fc0745",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "28a49021-e0ce-45c4-9359-2614dd01c0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bca0379-df28-45e6-b4f8-5207037bdccd",
        "cursor": {
          "ref": "e7acd1a1-0351-4057-a543-c81c3e85801a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a0a87a36-dce6-4b7d-8c2e-376af428d551"
        },
        "item": {
          "id": "2bca0379-df28-45e6-b4f8-5207037bdccd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "09f3d98a-b9d8-4a4e-9685-f87392e32cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9539601e-3a7f-47b6-aef1-47ec2ec31cbc",
        "cursor": {
          "ref": "07f67edf-dd3c-426b-af6d-b6405a67077a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9bfd9939-d7af-431c-bc1f-5361798bdf3c"
        },
        "item": {
          "id": "9539601e-3a7f-47b6-aef1-47ec2ec31cbc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "51da9658-11ef-4e59-abb5-31d318956be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71d989a-2b2d-4113-8d37-a0339647e245",
        "cursor": {
          "ref": "a02bd04e-aac1-4eaf-86df-ee27dc4dd3bc",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d0d190e4-a2bc-4745-b89c-108f41ce9cc5"
        },
        "item": {
          "id": "f71d989a-2b2d-4113-8d37-a0339647e245",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "265bf484-77c3-41d6-afef-00df535997b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946a837d-e3d9-41af-99f0-aefc0fb94e6d",
        "cursor": {
          "ref": "7b101f74-a6d4-4734-bf3d-c50251300d45",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4606a64b-9201-4e35-b695-a0399f85acbb"
        },
        "item": {
          "id": "946a837d-e3d9-41af-99f0-aefc0fb94e6d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2e21caf3-236d-40d2-bebe-e2f22dce71e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c0426c-1ec3-4bef-9d36-889fbf0b7bee",
        "cursor": {
          "ref": "bd534f69-5668-45f3-a3f6-31a68de7ef3f",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "533d96bb-c432-4947-858d-e6cde907e19d"
        },
        "item": {
          "id": "b3c0426c-1ec3-4bef-9d36-889fbf0b7bee",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c8d5bae4-36d6-49ea-8234-776c9b80fb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4918de-1c45-4d64-a8bd-13ed588bb25b",
        "cursor": {
          "ref": "4a95999d-924e-49d4-ae2e-e7c020805825",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4a5e14fd-1c57-4c0a-b4bc-4f5f7313a1a9"
        },
        "item": {
          "id": "bb4918de-1c45-4d64-a8bd-13ed588bb25b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e3810f8c-d788-4a01-ba3b-3975a2bb07dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809870a1-0ebe-44b8-a56b-718809929216",
        "cursor": {
          "ref": "1623581a-f6aa-404e-a149-f13bb3a73537",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f03c7d7a-069a-46e5-aa9a-b035f8fb673c"
        },
        "item": {
          "id": "809870a1-0ebe-44b8-a56b-718809929216",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ef1ac641-b79e-444c-92eb-835f7ac30513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf6df49-0e5c-4eb1-928c-e3ad9299fa8f",
        "cursor": {
          "ref": "891e18db-a0b9-46e6-beeb-7cf5a8f3c2d4",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "80d04ddc-ab41-4a1d-be69-d29ff882ed87"
        },
        "item": {
          "id": "5cf6df49-0e5c-4eb1-928c-e3ad9299fa8f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "88876be7-e885-4a25-8ca6-adc9d39c55d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff3483e-31ec-4241-a7b9-aabe7d0bf419",
        "cursor": {
          "ref": "d819f6a9-feed-48bf-88f1-022fe1aa13a5",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "552779f1-2f83-4b25-827c-072955490d93"
        },
        "item": {
          "id": "aff3483e-31ec-4241-a7b9-aabe7d0bf419",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2c811c30-97a0-4891-acc1-5a346a5c4f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603ffca9-08c4-4d7e-8554-dde2738859c8",
        "cursor": {
          "ref": "01eb3943-8e8e-4826-9cde-5fc2b4bb7a7d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1f0f4a54-bb76-4d6b-a2d8-4af2039e4c8c"
        },
        "item": {
          "id": "603ffca9-08c4-4d7e-8554-dde2738859c8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8f2ce48f-04aa-4d37-af6e-1cdafaa6af22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f94c81-ebae-4390-88aa-a075677cb307",
        "cursor": {
          "ref": "c20c0367-f693-495f-bb74-6adbdfe3d524",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "aad70fad-ad08-43fe-81c0-06b05a0f589e"
        },
        "item": {
          "id": "66f94c81-ebae-4390-88aa-a075677cb307",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "851cf724-eff2-42b6-b9f6-80d7a747b319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5faff1-e690-4557-aaa8-42b5ab174f39",
        "cursor": {
          "ref": "4f6a3b78-8a0c-49cf-9c79-ee035c6e8627",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6667d5fd-8d6b-4ae1-8e15-b907b5c53920"
        },
        "item": {
          "id": "9b5faff1-e690-4557-aaa8-42b5ab174f39",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7d3b98b7-e063-4e9b-8a15-b0caf95031f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc9ff74-a93a-4012-9943-c40659fc2c5a",
        "cursor": {
          "ref": "0a619c85-4c09-4976-a638-1ac7ede99873",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6c940243-6f4d-4004-9d29-74bf05f1a276"
        },
        "item": {
          "id": "4cc9ff74-a93a-4012-9943-c40659fc2c5a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a2f52a79-0d90-49d5-a22d-b9ff85018994",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6d921b-1611-4326-bf07-3d983ee9452c",
        "cursor": {
          "ref": "f8e7d871-a6c3-43d8-83aa-d4955143547f",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a354e5b1-f4ed-45a1-abcd-0bb255ce3b45"
        },
        "item": {
          "id": "4b6d921b-1611-4326-bf07-3d983ee9452c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6da55d41-2b83-4670-8c25-c2740df333af",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee123eb6-32cb-442f-8385-c09c682a53a7",
        "cursor": {
          "ref": "8794540a-75d7-4dc2-a8ae-7763f2eb67cc",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b690fd4b-e526-4dc5-83e2-6a54132526f0"
        },
        "item": {
          "id": "ee123eb6-32cb-442f-8385-c09c682a53a7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fd03bc27-974e-40a3-bd8b-23c25f4d8302",
          "status": "OK",
          "code": 200,
          "responseTime": 660,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "66950fc3-d985-44d0-ac4b-530dc608b8f2",
        "cursor": {
          "ref": "ab6f06d5-40bd-47c7-8897-b2e05fea8bc1",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6f4b9a31-5d20-482d-9d3a-54c817596f62"
        },
        "item": {
          "id": "66950fc3-d985-44d0-ac4b-530dc608b8f2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0893a1da-e58f-414d-9513-30d8e72f82b3",
          "status": "OK",
          "code": 200,
          "responseTime": 605,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
        "cursor": {
          "ref": "96486467-870b-4dde-ae10-d6034781474e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f63c051-6e46-415b-868f-cd1d21fdfcd6"
        },
        "item": {
          "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3ea852c-f6ef-431b-813f-38d493c57df6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
        "cursor": {
          "ref": "96486467-870b-4dde-ae10-d6034781474e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f63c051-6e46-415b-868f-cd1d21fdfcd6"
        },
        "item": {
          "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3ea852c-f6ef-431b-813f-38d493c57df6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
        "cursor": {
          "ref": "96486467-870b-4dde-ae10-d6034781474e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f63c051-6e46-415b-868f-cd1d21fdfcd6"
        },
        "item": {
          "id": "39abd336-dfa6-4912-9d51-b1f9100659cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3ea852c-f6ef-431b-813f-38d493c57df6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907666f5-a122-488b-9815-f03632fe366a",
        "cursor": {
          "ref": "a0f999d5-2218-48b3-9560-5a8c38ba8093",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "919df8cb-ccc1-4379-b4bb-7abb873c9db0"
        },
        "item": {
          "id": "907666f5-a122-488b-9815-f03632fe366a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e62338ef-a3a0-4c7c-9e92-e27af780c31d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c174f92-d321-4a53-aeff-43f1c9d4af8a",
        "cursor": {
          "ref": "fff82cc4-afb4-4d79-a3a8-343e70294699",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5694887-5a80-48db-80e5-65c02a78f9c6"
        },
        "item": {
          "id": "4c174f92-d321-4a53-aeff-43f1c9d4af8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "48c82a44-5cd6-4c3d-9457-5e609c51611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4c174f92-d321-4a53-aeff-43f1c9d4af8a",
        "cursor": {
          "ref": "fff82cc4-afb4-4d79-a3a8-343e70294699",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5694887-5a80-48db-80e5-65c02a78f9c6"
        },
        "item": {
          "id": "4c174f92-d321-4a53-aeff-43f1c9d4af8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "48c82a44-5cd6-4c3d-9457-5e609c51611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f8ead02b-09b3-4224-b11e-2402da4225b2",
        "cursor": {
          "ref": "864e6cd5-30c4-4de6-9ff2-b6614d10ee35",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "986c35ce-c127-4fba-a162-4f29fb004fed"
        },
        "item": {
          "id": "f8ead02b-09b3-4224-b11e-2402da4225b2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9a30ca64-cf60-4435-bfb5-a53347eeb72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e24e181f-5744-49ba-82ba-54e89582061b",
        "cursor": {
          "ref": "c8a2e39e-27de-4596-a826-fa541c567fc1",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5525fdc0-8f27-4cc3-9b4f-206db5e7032b"
        },
        "item": {
          "id": "e24e181f-5744-49ba-82ba-54e89582061b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d5025212-a1f6-4eb5-b0e2-6b7cec101293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e24e181f-5744-49ba-82ba-54e89582061b",
        "cursor": {
          "ref": "c8a2e39e-27de-4596-a826-fa541c567fc1",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5525fdc0-8f27-4cc3-9b4f-206db5e7032b"
        },
        "item": {
          "id": "e24e181f-5744-49ba-82ba-54e89582061b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d5025212-a1f6-4eb5-b0e2-6b7cec101293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3a65f3df-5e46-402f-beae-68ff2bacb070",
        "cursor": {
          "ref": "ff3a5a3c-4f4d-435e-b044-bad9750db370",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d7318680-899e-4bbc-acb9-e627e82a53ab"
        },
        "item": {
          "id": "3a65f3df-5e46-402f-beae-68ff2bacb070",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f96c34b0-06c5-4c7f-94ae-5e147b85be0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}